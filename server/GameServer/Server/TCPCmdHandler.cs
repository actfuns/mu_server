using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Text;
using System.Windows;
using GameServer.Core.AssemblyPatch;
using GameServer.Core.Executor;
using GameServer.Core.GameEvent;
using GameServer.Core.GameEvent.EventOjectImpl;
using GameServer.Logic;
using GameServer.Logic.ActivityNew;
using GameServer.Logic.ActivityNew.SevenDay;
using GameServer.Logic.AoYunDaTi;
using GameServer.Logic.BangHui.ZhanMengShiJian;
using GameServer.Logic.BocaiSys;
using GameServer.Logic.Building;
using GameServer.Logic.CheatGuard;
using GameServer.Logic.Copy;
using GameServer.Logic.Damon;
using GameServer.Logic.FluorescentGem;
using GameServer.Logic.Goods;
using GameServer.Logic.JingJiChang;
using GameServer.Logic.KuaFuIPStatistics;
using GameServer.Logic.LiXianBaiTan;
using GameServer.Logic.LoginWaiting;
using GameServer.Logic.Marriage.CoupleArena;
using GameServer.Logic.MoRi;
using GameServer.Logic.MUWings;
using GameServer.Logic.Name;
using GameServer.Logic.Olympics;
using GameServer.Logic.Ornament;
using GameServer.Logic.ProtoCheck;
using GameServer.Logic.Reborn;
using GameServer.Logic.SecondPassword;
using GameServer.Logic.Spread;
using GameServer.Logic.Talent;
using GameServer.Logic.Tarot;
using GameServer.Logic.TuJian;
using GameServer.Logic.UnionAlly;
using GameServer.Logic.UnionPalace;
using GameServer.Logic.UserMoneyCharge;
using GameServer.Logic.UserReturn;
using GameServer.Logic.WanMota;
using GameServer.Logic.YueKa;
using GameServer.Logic.ZhuanPan;
using GameServer.TarotData;
using GameServer.Tools;
using KF.Contract.Data;
using Server.Data;
using Server.Protocol;
using Server.TCP;
using Server.Tools;
using Server.Tools.Pattern;
using Tmsk.Contract;

namespace GameServer.Server
{
	// Token: 0x020008BE RID: 2238
	internal class TCPCmdHandler
	{
		// Token: 0x06003E01 RID: 15873 RVA: 0x0034DB44 File Offset: 0x0034BD44
		public static int GetHandlingCmdCount()
		{
			int count;
			lock (TCPCmdHandler.HandlingCmdDict)
			{
				count = TCPCmdHandler.HandlingCmdDict.Count;
			}
			return count;
		}

		// Token: 0x06003E02 RID: 15874 RVA: 0x0034DB94 File Offset: 0x0034BD94
		public static void ProcessCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count)
		{
			TCPOutPacket tcpOutPacket = null;
			TCPProcessCmdResults result = TCPCmdHandler.ProcessCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
			if (result == TCPProcessCmdResults.RESULT_DATA && null != tcpOutPacket)
			{
				tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
			}
			else if (result == TCPProcessCmdResults.RESULT_FAILED)
			{
				if (nID != 22)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("解析并执行命令失败: {0},{1}, 关闭连接", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				}
				tcpMgr.MySocketListener.CloseSocket(socket, "");
			}
		}

		// Token: 0x06003E03 RID: 15875 RVA: 0x0034DC2C File Offset: 0x0034BE2C
		public static TCPProcessCmdResults ProcessCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			long startTicks = TimeUtil.NOW();
			lock (TCPCmdHandler.HandlingCmdDict)
			{
				TCPCmdHandler.HandlingCmdDict[socket] = 1;
			}
			TCPProcessCmdResults result = TCPProcessCmdResults.RESULT_FAILED;
			tcpOutPacket = null;
			socket.session.CmdID = nID;
			socket.session.CmdTime = startTicks;
			object procRst = AssemblyPatchManager.getInstance().ProcessMsg(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
			TCPProcessCmdResults result2;
			if (procRst != null && TCPProcessCmdResults.RESUTL_CONTINUE != (TCPProcessCmdResults)procRst)
			{
				result2 = (TCPProcessCmdResults)procRst;
			}
			else
			{
				result = TCPCmdDispatcher.getInstance().dispathProcessor(socket, nID, data, count);
				if (result == TCPProcessCmdResults.RESULT_UNREGISTERED)
				{
					if (nID <= 1801)
					{
						if (nID <= 1330)
						{
							if (nID <= 970)
							{
								switch (nID)
								{
								case 2:
									result = TCPCmdHandler.ProcessServerMonitor(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 3:
								case 4:
								case 5:
								case 6:
								case 7:
								case 8:
								case 9:
								case 10:
								case 11:
								case 12:
								case 13:
								case 14:
								case 15:
								case 16:
								case 17:
								case 18:
								case 19:
								case 21:
								case 24:
								case 25:
								case 26:
								case 27:
								case 28:
								case 29:
								case 30:
								case 31:
								case 32:
								case 33:
								case 34:
								case 35:
								case 36:
								case 37:
								case 38:
								case 39:
								case 40:
								case 41:
								case 42:
								case 43:
								case 44:
								case 45:
								case 46:
								case 47:
								case 48:
								case 49:
								case 50:
								case 51:
								case 52:
								case 53:
								case 54:
								case 55:
								case 56:
								case 57:
								case 58:
								case 59:
								case 60:
								case 61:
								case 62:
								case 63:
								case 64:
								case 65:
								case 66:
								case 67:
								case 68:
								case 69:
								case 70:
								case 71:
								case 72:
								case 73:
								case 74:
								case 75:
								case 76:
								case 77:
								case 78:
								case 79:
								case 80:
								case 81:
								case 82:
								case 83:
								case 84:
								case 85:
								case 86:
								case 87:
								case 88:
								case 89:
								case 90:
								case 91:
								case 92:
								case 93:
								case 94:
								case 95:
								case 96:
								case 97:
								case 110:
								case 111:
								case 118:
								case 120:
								case 122:
								case 124:
								case 127:
								case 137:
								case 138:
								case 141:
								case 145:
								case 146:
								case 150:
								case 151:
								case 152:
								case 155:
								case 160:
								case 164:
								case 165:
								case 168:
								case 169:
								case 171:
								case 172:
								case 174:
								case 175:
								case 177:
								case 178:
								case 186:
								case 187:
								case 189:
								case 190:
								case 192:
								case 194:
								case 196:
								case 197:
								case 210:
								case 211:
								case 217:
								case 230:
								case 236:
								case 237:
								case 241:
								case 251:
								case 252:
								case 255:
								case 256:
								case 258:
								case 265:
								case 266:
								case 270:
								case 276:
								case 277:
								case 279:
								case 280:
								case 282:
								case 283:
								case 284:
								case 285:
								case 286:
								case 288:
								case 290:
								case 292:
								case 293:
								case 296:
								case 307:
								case 316:
								case 320:
								case 321:
								case 322:
								case 323:
								case 324:
								case 329:
								case 347:
								case 350:
								case 351:
								case 359:
								case 360:
								case 369:
								case 380:
								case 381:
								case 382:
								case 383:
								case 384:
								case 385:
								case 386:
								case 397:
								case 398:
								case 399:
								case 406:
								case 407:
								case 412:
								case 416:
								case 419:
								case 422:
								case 423:
								case 424:
								case 426:
								case 427:
								case 435:
								case 437:
								case 445:
								case 446:
								case 454:
								case 456:
								case 469:
								case 470:
								case 471:
								case 472:
								case 473:
								case 474:
								case 475:
								case 476:
								case 477:
								case 487:
								case 488:
								case 489:
								case 490:
								case 491:
								case 492:
								case 493:
								case 510:
								case 511:
								case 517:
								case 518:
								case 519:
								case 521:
								case 525:
								case 531:
								case 532:
								case 533:
								case 536:
								case 537:
								case 538:
								case 543:
								case 545:
								case 546:
								case 547:
								case 566:
								case 569:
								case 570:
								case 571:
								case 572:
								case 573:
								case 578:
								case 579:
								case 580:
								case 581:
								case 582:
								case 583:
								case 584:
								case 585:
								case 586:
								case 587:
								case 588:
								case 589:
								case 590:
								case 595:
								case 601:
								case 602:
								case 608:
								case 609:
								case 610:
								case 614:
								case 616:
								case 617:
								case 618:
								case 619:
								case 620:
								case 621:
								case 622:
								case 623:
								case 624:
								case 625:
								case 627:
								case 628:
								case 634:
								case 639:
								case 644:
								case 645:
								case 646:
								case 647:
								case 648:
								case 649:
								case 652:
								case 653:
								case 654:
								case 655:
								case 656:
								case 657:
								case 658:
								case 659:
								case 666:
								case 667:
								case 668:
								case 669:
								case 670:
								case 674:
								case 675:
								case 676:
								case 678:
								case 679:
								case 684:
								case 688:
								case 689:
								case 691:
								case 692:
								case 693:
								case 694:
								case 695:
								case 696:
								case 697:
								case 698:
								case 700:
								case 701:
								case 702:
								case 703:
								case 704:
								case 705:
								case 706:
								case 707:
								case 708:
								case 709:
								case 710:
								case 714:
								case 715:
								case 716:
								case 717:
								case 718:
								case 719:
								case 728:
								case 729:
								case 734:
								case 735:
								case 736:
								case 737:
								case 738:
								case 739:
								case 741:
								case 742:
								case 743:
								case 744:
								case 745:
								case 746:
								case 747:
								case 748:
								case 749:
								case 755:
								case 756:
								case 757:
								case 758:
								case 759:
								case 763:
								case 764:
								case 765:
								case 766:
								case 767:
								case 768:
								case 769:
								case 770:
								case 772:
								case 773:
								case 774:
								case 775:
								case 776:
								case 777:
								case 778:
								case 779:
								case 782:
								case 783:
								case 786:
								case 787:
								case 788:
								case 789:
								case 790:
								case 792:
								case 793:
								case 794:
								case 795:
								case 796:
								case 797:
								case 798:
								case 799:
								case 803:
								case 804:
								case 805:
								case 806:
								case 807:
								case 808:
								case 809:
								case 812:
								case 813:
								case 814:
								case 815:
								case 816:
								case 817:
								case 818:
								case 819:
								case 820:
								case 821:
								case 822:
								case 823:
								case 824:
								case 825:
								case 826:
								case 828:
								case 829:
								case 832:
								case 833:
								case 834:
								case 835:
								case 836:
								case 837:
								case 838:
								case 839:
								case 843:
								case 844:
								case 845:
								case 846:
								case 847:
								case 848:
								case 849:
								case 852:
								case 853:
								case 854:
								case 855:
								case 856:
								case 857:
								case 858:
								case 859:
								case 864:
								case 865:
								case 866:
								case 867:
								case 868:
								case 869:
								case 870:
								case 871:
								case 872:
								case 873:
								case 874:
								case 875:
								case 876:
								case 877:
								case 878:
								case 879:
								case 884:
								case 885:
								case 886:
								case 887:
								case 888:
								case 889:
								case 894:
								case 895:
								case 896:
								case 897:
								case 898:
								case 899:
								case 900:
								case 901:
								case 902:
								case 903:
								case 904:
								case 909:
								case 910:
								case 911:
								case 912:
								case 913:
								case 914:
								case 915:
								case 916:
								case 917:
								case 918:
								case 919:
								case 928:
								case 929:
								case 936:
								case 937:
								case 938:
								case 939:
								case 942:
								case 943:
									break;
								case 20:
									result = TCPCmdHandler.ProcessUserLogin2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 22:
									result = TCPProcessCmdResults.RESULT_FAILED;
									goto IL_47EA;
								case 23:
									result = TCPCmdHandler.ProcessSpriteClientHeartCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 98:
									result = TCPCmdHandler.ProcessPreRemoveRoleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 99:
									result = TCPCmdHandler.ProcessUnRemoveRoleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 100:
									result = TCPCmdHandler.ProcessUserLoginCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 101:
									result = TCPCmdHandler.ProcessGetRoleListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 102:
									result = TCPCmdHandler.ProcessCreateRoleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 103:
									result = TCPCmdHandler.ProcessRemoveRoleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 104:
									result = TCPCmdHandler.ProcessInitGameCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 105:
									result = TCPCmdHandler.ProcessTimeSyncGameCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 106:
									result = TCPCmdHandler.ProcessStartPlayGameCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 107:
									result = TCPCmdHandler.ProcessSpriteMoveCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 108:
									result = TCPCmdHandler.ProcessSpriteMoveEndCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 109:
									result = TCPCmdHandler.ProcessSpriteMove2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 112:
									result = TCPCmdHandler.ProcessSpritePosCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 113:
									result = TCPCmdHandler.ProcessSpritePetPosCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 114:
									result = TCPCmdHandler.ProcessSpriteActionCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 115:
									result = TCPCmdHandler.ProcessSpriteAction2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 116:
									result = TCPCmdHandler.ProcessSpriteMagicCodeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 117:
									result = TCPCmdHandler.ProcessSpriteAttackCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 119:
									result = TCPCmdHandler.ProcessSpriteRealiveCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 121:
									result = TCPCmdHandler.ProcessSpriteClickOnCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 123:
									result = TCPCmdHandler.ProcessSpriteMapChangeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 125:
									result = TCPCmdHandler.ProcessSpriteNewTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 126:
									result = TCPCmdHandler.ProcessSpriteGetAttrib2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 128:
									result = TCPCmdHandler.ProcessSpriteNPCBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 129:
									result = TCPCmdHandler.ProcessSpriteNPCSaleOutCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 130:
									result = TCPCmdHandler.ProcessSpriteAddGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 131:
									result = TCPCmdHandler.ProcessSpriteModGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 132:
									result = TCPCmdHandler.ProcessSpriteMergeGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 133:
									result = TCPCmdHandler.ProcessSpriteSplitGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 134:
									result = TCPCmdHandler.ProcessSpriteGetMergeTypesCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 135:
									result = TCPCmdHandler.ProcessSpriteGetMergeItemsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 136:
									result = TCPCmdHandler.ProcessSpriteMergeNewGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 139:
									result = TCPCmdHandler.ProcessSpriteModTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 140:
									result = TCPCmdHandler.ProcessSpriteCompTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 142:
									result = TCPCmdHandler.ProcessSpriteGetFriendsCmd2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 143:
									result = TCPCmdHandler.ProcessSpriteAddFriendCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 144:
									result = TCPCmdHandler.ProcessSpriteRemoveFriendCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 147:
									result = TCPCmdHandler.ProcessSpriteClickOnGoodsPackCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 148:
									result = TCPCmdHandler.ProcessSpriteGetThingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 149:
									result = TCPCmdHandler.ProcessSpriteChangePKModeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 153:
									result = TCPCmdHandler.ProcessSpriteGetNewTaskDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 154:
									result = TCPCmdHandler.ProcessSpriteAbandonTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 156:
									result = TCPCmdHandler.ProcessSpriteModKeysCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 157:
									result = TCPCmdHandler.ProcessSpriteChatCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 158:
									result = TCPCmdHandler.ProcessSpriteUseGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 159:
									result = TCPCmdHandler.ProcessSpriteChangePosCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 161:
									result = TCPCmdHandler.ProcessSpriteForgeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 162:
									result = TCPCmdHandler.ProcessSpriteEnchanceCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 163:
									result = TCPCmdHandler.ProcessSpriteGetOtherAttribCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 166:
									result = TCPCmdHandler.ProcessSpriteMallBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 167:
									result = TCPCmdHandler.ProcessSpriteYinLiangBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 170:
									result = TCPCmdHandler.ProcessSpriteGoodsExchangeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 173:
									result = TCPCmdHandler.ProcessSpriteGoodsStallCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 176:
									result = TCPCmdHandler.ProcessSpriteTeamCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 179:
									result = TCPCmdHandler.ProcessSpriteBattleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 180:
									result = TCPCmdHandler.ProcessSpriteNPCScriptCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 181:
									result = TCPCmdHandler.ProcessSpriteDeadCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 182:
									result = TCPCmdHandler.ProcessSpriteAutoFightCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 183:
									result = TCPCmdHandler.ProcessSpriteHorseCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 184:
									result = TCPCmdHandler.ProcessSpritePetCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 185:
									result = TCPCmdHandler.ProcessSpriteDianJiangListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 188:
									result = TCPCmdHandler.ProcessSpriteDianJiangCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 191:
									result = TCPCmdHandler.ProcessSpriteGetDJPointsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 193:
									result = TCPCmdHandler.ProcessSpriteGoToMapCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 195:
									result = TCPCmdHandler.ProcessSpriteQueryNameByIDCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 198:
									result = TCPCmdHandler.ProcessSpriteGetHorseListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 199:
									result = TCPCmdHandler.ProcessSpriteGetOtherHorseListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 200:
									result = TCPCmdHandler.ProcessSpriteGetPetListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 201:
									result = TCPCmdHandler.ProcessSpriteModeHorseCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 202:
									result = TCPCmdHandler.ProcessSpriteModPetCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 203:
									result = TCPCmdHandler.ProcessSpriteSelectHorseCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 204:
									result = TCPCmdHandler.ProcessSpriteGetGoodsListBySiteCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 205:
									result = TCPCmdHandler.ProcessSpriteGetLineInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 206:
									result = TCPCmdHandler.ProcessSpriteGetJingMaiListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 207:
									result = TCPCmdHandler.ProcessSpriteUpJingMaiLevelCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 208:
									result = TCPCmdHandler.ProcessSpriteGetOtherJingMaiListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 209:
									result = TCPCmdHandler.ProcessSpriteLoadAlreadyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 212:
									result = TCPCmdHandler.ProcessSpriteEquipUpgradeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 213:
									result = TCPCmdHandler.ProcessSpriteEnchaseJewelCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 214:
									result = TCPCmdHandler.ProcessSpriteShowBigGuanCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 215:
									result = TCPCmdHandler.ProcessSpriteGetBigGuanCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 216:
									result = TCPCmdHandler.ProcessSpriteUpSkillLevelCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 218:
									result = TCPCmdHandler.ProcessSpriteJingMaiInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 219:
									result = TCPCmdHandler.ProcessSpriteHorseEnchanceCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 220:
									result = TCPCmdHandler.ProcessSpriteHorseUpgradeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 221:
									result = TCPCmdHandler.ProcessSpriteSaleGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 222:
									result = TCPCmdHandler.ProcessSpriteSelfSaleGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 223:
									result = TCPCmdHandler.ProcessSpriteOtherSaleGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 224:
									result = TCPCmdHandler.ProcessSpriteMarketRoleListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 225:
									result = TCPCmdHandler.ProcessSpriteMarketGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 226:
									result = TCPCmdHandler.ProcessSpriteMarketBuyGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 227:
									result = TCPCmdHandler.ProcessSpriteModDefSkillIDCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 228:
									result = TCPCmdHandler.ProcessSpriteModAutoDrinkCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 229:
									result = TCPCmdHandler.ProcessSpritePlayDecoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 231:
									result = TCPCmdHandler.ProcessSpriteRunToMapCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 232:
									result = TCPCmdHandler.ProcessSpriteSearchRolesCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 233:
									result = TCPCmdHandler.ProcessSpriteListRolesCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 234:
									result = TCPCmdHandler.ProcessSpriteListTeamsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 235:
									result = TCPCmdHandler.ProcessSpriteResetBagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 238:
									result = TCPCmdHandler.ProcessSpriteChgNumSkillIDCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 239:
									result = TCPCmdHandler.ProcessSpriteGetSkillUsedNumCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 240:
									result = TCPCmdHandler.ProcessSpriteChgHorseBodyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 242:
									result = TCPCmdHandler.ProcessSpriteResetPortableBagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 243:
									result = TCPCmdHandler.ProcessSpriteExecWaBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 244:
									result = TCPCmdHandler.ProcessSpriteGetWaBaoDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 245:
									result = TCPCmdHandler.ProcessSpriteGetHuoDongDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 246:
									result = TCPCmdHandler.ProcessSpriteGetWLoginGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 247:
									result = TCPCmdHandler.ProcessSpriteGetNewStepGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 248:
									result = TCPCmdHandler.ProcessSpriteGetMTimeGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 249:
									result = TCPCmdHandler.ProcessSpriteGetBigGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 250:
									result = TCPCmdHandler.ProcessSpriteGetSongLiGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 253:
									result = TCPCmdHandler.ProcessSpriteEnterFuBenCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 254:
									result = TCPCmdHandler.ProcessSpriteNotifyEnterFuBenCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 257:
									result = TCPCmdHandler.ProcessGetRandomNameCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 259:
									result = TCPCmdHandler.ProcessGetFuBenHistDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 260:
									result = TCPCmdHandler.ProcessGetFuBenBeginInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 261:
									result = TCPCmdHandler.ProcessGetFuBenMonstersNumCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 262:
									result = TCPCmdHandler.ProcessFindMonsterCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 263:
									result = TCPCmdHandler.ProcessBatchYinPiaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 264:
									result = TCPCmdHandler.ProcessForceToLaoFangCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 267:
									result = TCPCmdHandler.ProcessGetRoleDailyDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 268:
									result = TCPCmdHandler.ProcessGetBossInfoDictCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 269:
									result = TCPCmdHandler.ProcessGetPaiHangListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 271:
									result = TCPCmdHandler.ProcessStartYaBiaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 272:
									result = TCPCmdHandler.ProcessEndYaBiaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 273:
									result = TCPCmdHandler.ProcessYaBiaoTakeGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 274:
									result = TCPCmdHandler.ProcessTouBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 275:
									result = TCPCmdHandler.ProcessSpriteGetOtherAttrib2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 278:
									result = TCPCmdHandler.ProcessSpriteFindBiaoCheCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 281:
									result = TCPCmdHandler.ProcessSpriteAddHorseLuckyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 287:
									result = TCPCmdHandler.ProcessSpriteGetChongZhiJiFenCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 289:
									result = TCPCmdHandler.ProcessGetFuBenHistListDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 291:
									result = TCPCmdHandler.ProcessGetOtherHorseDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 294:
									result = TCPCmdHandler.ProcessGetBangHuiListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 295:
									result = TCPCmdHandler.ProcessCreateBangHuiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 297:
									result = TCPCmdHandler.ProcessQueryBangHuiDetailCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 298:
									result = TCPCmdHandler.ProcessUpdateBangHuiBulletinCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 299:
									result = TCPCmdHandler.ProcessGetBHMemberDataListCmd2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 300:
									result = TCPCmdHandler.ProcessUpdateBHVerifyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 301:
									result = TCPCmdHandler.ProcessApplyToBHMemberCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 302:
									result = TCPCmdHandler.ProcessAddBHMemberCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 303:
									result = TCPCmdHandler.ProcessRemoveBHMemberCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 304:
									result = TCPCmdHandler.ProcessQuitFromBangHuiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 305:
									result = TCPCmdHandler.ProcessDestroyBangHuiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 306:
									result = TCPCmdHandler.ProcessBangHuiVerifyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 308:
									result = TCPCmdHandler.ProcessChgBHMemberZhiWuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 309:
									result = TCPCmdHandler.ProcessChgBHMemberChengHaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 310:
									result = TCPCmdHandler.ProcessSearchRolesFromDBCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 311:
									result = TCPCmdHandler.ProcessAgreeToBHMemberCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 312:
									result = TCPCmdHandler.ProcessRefuseApplyToBHMemberCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 313:
									result = TCPCmdHandler.ProcessGetBangGongHistCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 314:
									result = TCPCmdHandler.ProcessDonateBGMoneyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 315:
									result = TCPCmdHandler.ProcessDonateBGGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 317:
									result = TCPCmdHandler.ProcessGetBangQiInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 318:
									result = TCPCmdHandler.ProcessRenameBangQiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 319:
									result = TCPCmdHandler.ProcessUpLevelBangQiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 325:
									result = TCPCmdHandler.ProcessGetBHLingDiInfoDictByBHIDCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 326:
									result = TCPCmdHandler.ProcessSetLingDiTaxCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 327:
									result = TCPCmdHandler.ProcessTakeLingDiTaxMoneyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 328:
									result = TCPCmdHandler.ProcessGetHuangDiBHInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 330:
									result = TCPCmdHandler.ProcessOpenYangGongBKCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 331:
									result = TCPCmdHandler.ProcessRefreshYangGongBKCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 332:
									result = TCPCmdHandler.ProcessClickYangGongBKCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 333:
									result = TCPCmdHandler.ProcessRefreshQiZhenGeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 334:
									result = TCPCmdHandler.ProcessQiZhenGeBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 335:
									result = TCPCmdHandler.ProcessQueryQiZhenGeBuyHistCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 336:
									result = TCPCmdHandler.ProcessQuickJingMaiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 337:
									result = TCPCmdHandler.ProcessQuickHorseEnchanceCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 338:
									result = TCPCmdHandler.ProcessQuickEquipEnchanceCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 339:
									result = TCPCmdHandler.ProcessQuickEquipForgeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 340:
									result = TCPCmdHandler.ProcessGetHuangDiDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 341:
									result = TCPCmdHandler.ProcessAddHuangFeiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 342:
									result = TCPCmdHandler.ProcessRemoveHuangFeiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 343:
									result = TCPCmdHandler.ProcessGetHuangFeiDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 344:
									result = TCPCmdHandler.ProcessSendToLaoFangCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 345:
									result = TCPCmdHandler.ProcessTakeOutLaoFangCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 346:
									result = TCPCmdHandler.ProcessBanChatCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 348:
									result = TCPCmdHandler.ProcessGetLingDiMapInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 349:
									result = TCPCmdHandler.ProcessGetHuangChengMapInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 352:
									result = TCPCmdHandler.ProcessAgreeAddHuangFeiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 353:
									result = TCPCmdHandler.ProcessTaskTransportCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 354:
									result = TCPCmdHandler.ProcessLingLiGuanZhuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 355:
									result = TCPCmdHandler.ProcessGetGoodsByDbIDCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 356:
									result = TCPCmdHandler.ProcessQuickCompleteTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 357:
									result = TCPCmdHandler.ProcessQueryChongZhiMoneyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 358:
									result = TCPCmdHandler.ProcessGetFirstChongZhiDaLiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 361:
									result = TCPCmdHandler.ProcessSpriteExecWaBaoByYaoShiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 362:
									result = TCPCmdHandler.ProcessSpriteSubForgeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 363:
									result = TCPCmdHandler.ProcessGetUserMailListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 364:
									result = TCPCmdHandler.ProcessGetUserMailDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 365:
									result = TCPCmdHandler.ProcessFetchMailGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 366:
									result = TCPCmdHandler.ProcessDeleteUserMailCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 367:
									result = TCPCmdHandler.ProcessSpriteGetMailSendCodeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 368:
									result = TCPCmdHandler.ProcessSpriteSendUserMailCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 370:
									result = TCPCmdHandler.ProcessSpriteEquipBornIndexUpdateCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 371:
									result = TCPCmdHandler.ProcessSpriteEquipInheritCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 372:
									result = TCPCmdHandler.ProcessSprQueryInputFanLiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 373:
									result = TCPCmdHandler.ProcessSprQueryInputJiaSongCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 374:
									result = TCPCmdHandler.ProcessSprQueryInputKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 375:
									result = TCPCmdHandler.ProcessSprQueryLevelKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 376:
									result = TCPCmdHandler.ProcessSprQueryEquipKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 377:
									result = TCPCmdHandler.ProcessSprQueryHorseKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 378:
									result = TCPCmdHandler.ProcessSprQueryJingMaiKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 379:
									result = TCPCmdHandler.ProcessSprQueryAwardHistoryCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 387:
									result = TCPCmdHandler.ProcessSpriteMallZhenQiBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 388:
									result = TCPCmdHandler.ProcessSprFetchActivityAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 389:
									result = TCPCmdHandler.ProcessSpriteQueryVipDailyDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 390:
									result = TCPCmdHandler.ProcessSpriteUseVipDailyPriorityCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 391:
									result = TCPCmdHandler.ProcessActivityTransportCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 392:
									result = TCPCmdHandler.ProcessSpriteQueryYangGongBKDailyDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 393:
									result = TCPCmdHandler.ProcessSpriteFetchYangGongBKJiFenAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 394:
									result = TCPCmdHandler.ProcessSpriteQueryShiLianTaAwardDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 395:
									result = TCPCmdHandler.ProcessSpriteFetchShiLianTaAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 396:
									result = TCPCmdHandler.ProcessCompleteTinyClientCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 400:
									result = TCPCmdHandler.ProcessSpriteAddShengXiaoMortgageCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 401:
									result = TCPCmdHandler.ProcessSpriteQuerySelfShengXiaoGuessListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 402:
									result = TCPCmdHandler.ProcessQueryShengXiaoGuessHistCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 403:
									result = TCPCmdHandler.ProcessQueryShengXiaoGuessRecentResultListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 404:
									result = TCPCmdHandler.ProcessQueryShengXiaoGuessHistCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 405:
									result = TCPCmdHandler.ProcessUpdateTengXunFcmRateCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 408:
									result = TCPCmdHandler.ProcessExtGridByYuanBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 409:
									result = TCPCmdHandler.ProcessSpriteRequestSubMoneyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 410:
									result = TCPCmdHandler.ProcessExtBagNumByYuanBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 411:
									result = TCPCmdHandler.ProcessSpriteStopMoveCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 413:
									result = TCPCmdHandler.ProcessExcuteNpcLuaTalkCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 414:
									result = TCPCmdHandler.ProcessExcuteNpcLuaFunctionCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 415:
									result = TCPCmdHandler.ProcessSpriteArenaBattleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 417:
									goto IL_47EA;
								case 418:
									goto IL_47EA;
								case 420:
									result = TCPCmdHandler.ProcessQueryChengJiuDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 421:
									result = TCPCmdHandler.ProcessFetchChengJiuAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 425:
									result = TCPCmdHandler.ProcessSprMendEquipmentCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 428:
									result = TCPCmdHandler.ProcessSprEquipFenJieCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 429:
									result = TCPCmdHandler.ProcessSprJingYuanExchangeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 430:
									result = TCPCmdHandler.ProcessSprHuiZhangExchangeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 431:
									result = TCPCmdHandler.ProcessSprActivateNextLevelJingMaiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 432:
									result = TCPCmdHandler.ProcessFetchVipOnceAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 433:
									result = TCPCmdHandler.ProcessTaskTransport2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 434:
									result = TCPCmdHandler.ProcessSprActivateNextLevelWuXueCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 436:
									result = TCPCmdHandler.ProcessSprRunTaskPlotLuaCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 438:
									result = TCPCmdHandler.ProcessSprTransferSomethingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 439:
									result = TCPCmdHandler.ProcessSprChangePetAiTypeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 440:
									result = TCPCmdHandler.ProcessSprFetchMallDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 441:
									result = TCPCmdHandler.ProcessSpriteMallQiangGouBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 442:
									result = TCPCmdHandler.ProcessSpriteFetchZuanHuangAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 443:
									result = TCPCmdHandler.ProcessSpriteSystemOpenParamsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 444:
									result = TCPCmdHandler.ProcessSpriteEnterTaskFuBenCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 447:
									result = TCPCmdHandler.ProcessSpriteGetTaskAwardsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 448:
									result = TCPCmdHandler.ProcessSpriteNotifyGetGoodsPackCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 449:
									result = TCPCmdHandler.ProcessSpriteResetJinDanBagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 450:
									result = TCPCmdHandler.ProcessSpriteGetJinDanGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 451:
									result = TCPCmdHandler.ProcessSpriteZaJinDanCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 452:
									result = TCPCmdHandler.ProcessQueryZaJinDanHistoryCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 453:
									result = TCPCmdHandler.ProcessQueryZaJinDanHistoryCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 455:
									result = TCPCmdHandler.ProcessSpriteGetLimitTimeLoginGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 457:
									result = TCPCmdHandler.ProcessGetTo60AwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 458:
									result = TCPCmdHandler.ProcessGetKaiFuOnlineInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 459:
									result = TCPCmdHandler.ProcessGetDayChongZhiDaLiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 460:
									result = TCPCmdHandler.ProcessGetJieriXmlDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 461:
									result = TCPCmdHandler.ProcessQueryJieriDaLiBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 462:
									result = TCPCmdHandler.ProcessQueryJieriDengLuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 463:
									result = TCPCmdHandler.ProcessQueryJieriVIPCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 464:
									result = TCPCmdHandler.ProcessQueryJieriCZSongCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 465:
									result = TCPCmdHandler.ProcessQueryJieriCZLeiJiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 466:
									result = TCPCmdHandler.ProcessQueryJieriCZZiKaCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 467:
									result = TCPCmdHandler.ProcessQueryJieriXiaoFeiKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 468:
									result = TCPCmdHandler.ProcessQueryJieriCZKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 478:
									result = TCPCmdHandler.ProcessSprFetchActivitiesDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 479:
									result = TCPCmdHandler.ProcessQueryYuanBaoCompleteTaskCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 480:
									result = TCPCmdHandler.ProcessQueryHeFuDaLiBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 481:
									result = TCPCmdHandler.ProcessQueryHeFuVIPCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 482:
									result = TCPCmdHandler.ProcessQueryHeFuCZSongCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 483:
									result = TCPCmdHandler.ProcessQueryHeFuCZFanLiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 484:
									result = TCPCmdHandler.ProcessQueryHeFuPKKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 485:
									result = TCPCmdHandler.ProcessQueryHeFuWCKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 486:
									result = TCPCmdHandler.ProcessQueryXinCZFanLiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 494:
									result = TCPCmdHandler.ProcessOneKeyQuickSaleOutCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 495:
									result = TCPCmdHandler.ProcessSprActivateNextLevelZhanHunCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 496:
									result = TCPCmdHandler.ProcessSprActivateNextLevelRongYuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 497:
									result = TCPCmdHandler.ProcessSprActivateRongYuBufferCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 498:
									result = TCPCmdHandler.ProcessSprLianLuJingLianCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 499:
									result = TCPCmdHandler.ProcessSprZJDJiFenCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 500:
									result = TCPCmdHandler.ProcessSprFetchZJDJiFenAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 501:
									result = TCPCmdHandler.ProcessSprQueryActivityInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 502:
									result = TCPCmdHandler.ProcessSprXingYunChouJiangCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 503:
									result = TCPCmdHandler.ProcessQueryYueDuChouJiangHistoryCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 504:
									result = TCPCmdHandler.ProcessQueryYueDuChouJiangHistoryCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 505:
									result = TCPCmdHandler.ProcessSpriteExecuteCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 506:
									result = TCPCmdHandler.ProcessQueryYueDuChouJiangInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 507:
									result = TCPCmdHandler.ProcessExecuteHunQiExchangeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 508:
									goto IL_47EA;
								case 509:
									result = TCPCmdHandler.ProcessExecuteChangeLifeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 512:
									result = TCPCmdHandler.ProcessGetUsingGoodsDataListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 513:
									result = TCPCmdHandler.ProcessExecutePropAddPointCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 514:
									result = TCPCmdHandler.ProcessExecuteRecommendPropAddPointCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 515:
									result = TCPCmdHandler.ProcessExecuteCleanPropAddPointCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 516:
									result = TCPCmdHandler.ProcessQueryCleanPropAddPointCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 520:
									result = TCPCmdHandler.ProcessExecuteFuBenCleanOutCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 522:
									result = TCPCmdHandler.ProcessQueryFuBenInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 523:
									result = TCPCmdHandler.ProcessSpriteAttack2Cmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 524:
									result = TCPCmdHandler.ProcessSpriteCompleteFlashSceneCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 526:
									result = TCPCmdHandler.ProcessSpriteRefurbishTaskStarLevelCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 527:
									result = TCPCmdHandler.ProcessSpriteCompleteDailyCircleTaskForOnceClickCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 528:
									result = TCPCmdHandler.ProcessSpriteAdmiredPlayerCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 529:
									result = TCPCmdHandler.ProcessSpriteQueryBloodCastleInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 530:
									result = TCPCmdHandler.ProcessSpriteEquipAppendPropCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 534:
									result = TCPCmdHandler.ProcessSpriteQueryCampBattleInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 535:
									result = TCPCmdHandler.ProcessSpriteQueryDaimoSquareInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 539:
									result = TCPCmdHandler.ProcessSpriteUpdateEverydayOnlineAwardGiftInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 540:
									result = TCPCmdHandler.ProcessSpriteGetEveryDayOnLineAwardGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 541:
									result = TCPCmdHandler.ProcessSpriteUpdateEverydaySeriesLoginInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 542:
									result = TCPCmdHandler.ProcessSpriteGetSeriesLoginAwardGiftCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 544:
									result = TCPCmdHandler.ProcessSpriteUpdateGetThingsFlagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 548:
									result = TCPCmdHandler.ProcessSpriteExchangeMoJingAndQiFuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 549:
									result = TCPCmdHandler.ProcessSpriteGetMeditateExpCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 550:
									result = TCPCmdHandler.ProcessSpriteGetMeditateTimeInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 551:
									result = TCPCmdHandler.ProcessSpriteQueryTotalLoginInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 552:
									result = TCPCmdHandler.ProcessSpriteGetTotalLoginAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 553:
									result = TCPCmdHandler.ProcessChangeLifeForEquipCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 554:
									result = TCPCmdHandler.ProcessFlakeOffChangeLifeForEquipCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 555:
									result = TCPCmdHandler.ProcessOneKeyFindFriendCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 556:
									result = TCPCmdHandler.ProcessOneKeyAddFriendCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 557:
									result = TCPCmdHandler.ProcessGetVIPAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 558:
									result = TCPCmdHandler.ProcessDailyActiveDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 559:
									result = TCPCmdHandler.ProcessFetchDailyActiveAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 560:
									result = TCPCmdHandler.ProcessSetAutoAssignPropertyPointCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 561:
									result = TCPCmdHandler.ProcessGetBloodCastleAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 562:
									result = TCPCmdHandler.ProcessGetDaimonsquareAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 563:
									result = TCPCmdHandler.ProcessGetCopyMapAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 564:
									result = TCPCmdHandler.ProcessGetSkillInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 565:
									result = TCPCmdHandler.PorcessExperienceCopymapInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 567:
									result = TCPCmdHandler.ProcessGetKaiFuActivityInfoInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 568:
									result = TCPCmdHandler.ProcessSpriteQueryTheKingOfPKInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 574:
									result = TCPCmdHandler.ProcessAngelTempleSparkCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 575:
									result = TCPCmdHandler.ProcessGetAngelTempleBaseInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 576:
									result = TCPCmdHandler.ProcessQueryAdrationPKKingInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 577:
									result = TCPCmdHandler.ProcessAdrationPKKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 591:
									result = TCPCmdHandler.ProcessSpriteOpenMarketCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 592:
									result = TCPCmdHandler.ProcessSpriteMarketSaleMoneyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 593:
									result = TCPCmdHandler.ProcessGetVIPInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 594:
									result = TCPCmdHandler.ProcessGetVIPLevelAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 596:
									result = TCPCmdHandler.ProcessSpriteGetLiXianBaiTanTicksCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 597:
									result = TCPCmdHandler.ProcessSpriteUpdateLiXianBaiTanTicksCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 598:
									result = TCPCmdHandler.ProcessQueryOpenGridCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 599:
									result = TCPCmdHandler.ProcessQueryOpenPortableGridCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 600:
									result = TCPCmdHandler.ProcessSpriteStartMeditateCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 603:
									result = TCPCmdDispatcher.getInstance().transmission(socket, nID, data, count);
									goto IL_47EA;
								case 604:
									result = TCPCmdHandler.ProcessGetPushMessageInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 605:
									result = TCPCmdHandler.ProcessActivationPictureJudgeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 606:
									result = TCPCmdHandler.ProcessGetPictureJudgeInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 607:
									result = TCPCmdHandler.ProcessMuEquipUpgradeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 611:
									result = TCPCmdHandler.PorcessMUCheck(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 612:
									result = TCPCmdHandler.PorcessReferPictureJudgeInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 613:
									result = TCPCmdHandler.PorcessMoJingExchangeInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 615:
									result = TCPCmdHandler.ProcessSpriteEquipAppendPropInheritCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 626:
									result = TCPCmdHandler.ProcessSpriteQueryCopyTeamDamageInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 629:
									result = NewZoneActiveManager.ProcessGetActiveAwards(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 630:
									result = NewZoneActiveManager.ProcessQueryLevelUpMadmanCmd(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 631:
									result = NewZoneActiveManager.ProcessGetActiveInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 632:
									result = HuodongCachingMgr.ProcessQueryUpLevelGiftFlagList(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 633:
									result = HuodongCachingMgr.ProcessGetUpLevelGiftAward(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 635:
									result = RechargeRepayActiveMgr.QueryRechargeRepayActive(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 636:
									result = RechargeRepayActiveMgr.ProcessGetRepayAwardCmd(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 637:
									result = RechargeRepayActiveMgr.QueryAllRechargeRepayActiveInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 638:
									result = TCPCmdHandler.ProcessSpriteQueryActivitySomeInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 640:
									result = TCPCmdHandler.PorcessEndBossAnimationCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 641:
									result = TodayCandoManager.ProcessQueryTodayCandoInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 642:
								case 643:
									result = CGetOldResourceManager.ProcessOldResourceCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 650:
									result = TCPCmdHandler.ProcessQueryImpetrateInfoCMD(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 651:
									result = TCPCmdHandler.ProcessExcuteImpetrateCMD(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 660:
									result = TCPCmdHandler.ProcessQueryStarConstellationCMD(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 661:
									result = TCPCmdHandler.ProcessExcuteActivationStarConstellationCMD(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 662:
									result = TCPCmdHandler.ProcessSpriteChangeAngleCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 663:
								case 664:
								case 665:
									result = ShareManager.ProcessShareCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 671:
									result = UserMoneyMgr.getInstance().ProcessGetFirstChargeInfoCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 672:
									result = TCPCmdHandler.ProcessBatchFetchMailGoodsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 673:
									result = TCPCmdHandler.ProcessClientPushVersionCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 677:
									result = TCPCmdHandler.ProcessNotifyShowGonggaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 680:
									result = TCPCmdHandler.ProcessSprCaiJiStartCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 681:
									result = TCPCmdHandler.ProcessSprCaiJiFinishCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 682:
									result = TCPCmdHandler.ProcessSprCaiJiLastNumCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 683:
									result = TCPCmdHandler.ProcessQueryJieriTotalConsumeCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 685:
									result = LuoLanFaZhenCopySceneManager.ProcessFazhenTeleportCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 686:
									result = TCPCmdHandler.ProcessQuerySpecialMachineCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 687:
									result = TCPCmdHandler.ProcessExtraDataCmd(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 690:
									result = Global.ProcessScoreBoxCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 699:
									goto IL_47EA;
								case 711:
									result = TCPCmdHandler.ProcessGetBangHuiFuBenCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 712:
									result = TCPCmdHandler.ProcessGetBangHuiFuBenAwardCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 713:
									result = TCPCmdHandler.ProcessSpriteMallMoBiBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 720:
								case 726:
									result = ElementhrtsManager.ProcessGetElementHrtList(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 721:
									result = ElementhrtsManager.ProcessGetElementHrtsInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 722:
									result = ElementhrtsManager.ProcessUseElementHrt(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 723:
									result = ElementhrtsManager.ProcessGetSomeElementHrts(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 724:
									result = ElementhrtsManager.ProcessPowerElementHrt(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 725:
									result = ElementhrtsManager.ProcessResetElementHrtBag(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 727:
									result = ElementhrtsManager.RequestElementExtend(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 730:
									result = GameManager.QingGongYanMgr.ProcessHoldQingGongYanCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 731:
									result = GameManager.QingGongYanMgr.ProcessQueryQingGongYanCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 732:
									result = GameManager.QingGongYanMgr.ProcessJoinQingGongYanCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 733:
									result = GameManager.QingGongYanMgr.ProcessCMD_SPR_QueryQingGongYanOpenCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 740:
									result = TCPCmdHandler.ProcessSpriteGetDamonGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 750:
									result = CallPetManager.ProcessGetPetList(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 751:
									result = CallPetManager.ProcessGetPetUIInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 752:
									result = CallPetManager.ProcessCallPetCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 753:
									result = CallPetManager.ProcessMovePetCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 754:
									result = CallPetManager.ProcessResetPetBagCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 760:
									result = LuoLanFaZhenCopySceneManager.ProcessFazhenBossCMD(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 761:
									result = TCPCmdHandler.ProcessGetStoreYinLiang(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 762:
									result = TCPCmdHandler.ProcessGetStoreMoney(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 771:
									result = TCPCmdHandler.ProcessGetJieRiFanBeiInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 780:
									result = TCPCmdHandler.ProcessGetAchievementRuneInfo(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 781:
									result = TCPCmdHandler.ProcessUpAchievementRune(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 784:
									result = HuodongCachingMgr.ProcessQueryCombatGiftFlagList(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 785:
									result = HuodongCachingMgr.ProcessGetCombatGiftAward(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 791:
									result = TCPCmdHandler.ProcessUpArtifact(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 800:
									result = LingYuManager.ProcessGetLingYuList(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 801:
									result = LingYuManager.ProcessAdvanceLingYuLevel(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 802:
									result = LingYuManager.ProcessAdvanceLingYuSuit(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 810:
									result = ZhuLingZhuHunManager.ProcessReqZhuLing(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 811:
									result = ZhuLingZhuHunManager.ProcessReqZhuHun(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 827:
									result = TCPCmdHandler.ProcessGetSceneTimeStateInfoCmd(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 830:
									result = TCPCmdHandler.ProcessRegionEventCmd(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 831:
									result = TCPCmdHandler.ProcessTimeSyncGameByClientCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 840:
									result = TCPCmdHandler.ProcessSpriteQueryLuoLanChengZhuInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 841:
									result = TCPCmdHandler.ProcessQueryAdrationLanChengZhuInfoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 842:
									result = TCPCmdHandler.ProcessAdrationLanChengZhuCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 850:
									result = YueKaManager.ProcessGetYueKaData(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 851:
									result = YueKaManager.ProcessGetYueKaAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 860:
									result = SecondPasswordManager.ProcessUsrCheckState(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 861:
									result = SecondPasswordManager.ProcessSetSecPwd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 862:
									result = SecondPasswordManager.ProcessUsrVerify(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 863:
									result = SecondPasswordManager.ProcClrSecPwd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 880:
									result = MarryPartyLogic.getInstance().ProcessMarryPartyQuery(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 881:
									result = MarryPartyLogic.getInstance().ProcessMarryPartyCreate(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 882:
									result = MarryPartyLogic.getInstance().ProcessMarryPartyCancel(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 883:
									result = MarryPartyLogic.getInstance().ProcessMarryPartyJoin(tcpMgr, socket, tcpClientPool, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 890:
									result = MarryLogic.ProcessMarryInit(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 891:
									result = MarryLogic.ProcessMarryReply(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 892:
									result = MarryLogic.ProcessMarryDivorce(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 893:
									result = MarryLogic.ProcessMarryAutoReject(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 905:
									result = TCPCmdHandler.ProcessGetThemeXmlDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 906:
									result = TCPCmdHandler.ProcessQueryThemeZhiGouCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 907:
									result = TCPCmdHandler.ProcessQueryThemeDuiHuanCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 908:
									result = TCPCmdHandler.ProcessQueryThemeDaLiBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 920:
									result = TCPCmdHandler.ProcessQueryRoleJieriGiveInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 921:
									result = TCPCmdHandler.ProcessRoleJieriGiveToOther(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 922:
									result = TCPCmdHandler.ProcessRoleGetJieriGiveAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 923:
									result = TCPCmdHandler.ProcessQueryJieriGiveKingInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 924:
									result = TCPCmdHandler.ProcessGetJieriGiveKingAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 925:
									result = TCPCmdHandler.ProcessQueryJieriRecvKingInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 926:
									result = TCPCmdHandler.ProcessGetJieriRecvKingAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 927:
									result = TCPCmdHandler.ProcessQueryJieriFanLiActivityCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 930:
									result = SingletonTemplate<GuardStatueManager>.Instance().ProcRoleQueryGuardPointRecover(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 931:
									result = SingletonTemplate<GuardStatueManager>.Instance().ProcRoleGuardPointRecover(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 932:
									result = SingletonTemplate<GuardStatueManager>.Instance().ProcRoleQueryGuardStatue(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 933:
									result = SingletonTemplate<GuardStatueManager>.Instance().ProcRoleGuardStatueLevelUp(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 934:
									result = SingletonTemplate<GuardStatueManager>.Instance().ProcRoleGuardStatueSuitUp(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 935:
									result = SingletonTemplate<GuardStatueManager>.Instance().ProcRoleModGuardSoulEquip(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 940:
									result = TCPCmdHandler.ProcessQueryJieriLianXuChargeInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 941:
									result = TCPCmdHandler.ProcessGetJieriLianXuChargeAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 944:
									result = TCPCmdHandler.ProcessQueryRoleJieriRecvInfo(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 945:
									result = TCPCmdHandler.ProcessRoleGetJieriRecvAward(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 946:
									result = FashionManager.ProcessGetFashionList(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 947:
									result = TCPCmdHandler.ProcessQueryDanBiChongZhiActivityCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 948:
									result = TCPCmdHandler.ProcessGetDanBiChongZhiActivityCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								default:
									if (nID == 970)
									{
										result = TCPCmdHandler.ProcessSpriteEffectHideFlagsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
										goto IL_47EA;
									}
									break;
								}
							}
							else
							{
								switch (nID)
								{
								case 981:
									result = GameManager.MerlinMagicBookMgr.ProcQueryMerlinMagicBookData(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 982:
									result = GameManager.MerlinMagicBookMgr.ProcMerlinMagicBookStarUp(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 983:
									result = GameManager.MerlinMagicBookMgr.ProcMerlinMagicBookLevelUp(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 984:
									result = GameManager.MerlinMagicBookMgr.ProcMerlinSecretAttrUpdate(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 985:
									result = GameManager.MerlinMagicBookMgr.ProcMerlinSecretAttrReplace(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 986:
									result = GameManager.MerlinMagicBookMgr.ProcMerlinSecretAttrNotReplace(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 987:
								case 988:
								case 989:
								case 990:
									break;
								case 991:
									result = GameManager.FluorescentGemMgr.ProcessResetBagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 992:
									result = GameManager.FluorescentGemMgr.ProcessFluorescentGemEquip(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 993:
									result = GameManager.FluorescentGemMgr.ProcessFluorescentGemUnEquip(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 994:
									result = GameManager.FluorescentGemMgr.ProcessFluorescentGemUp(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 995:
									result = GameManager.FluorescentGemMgr.ProcessFluorescentGemDig(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 996:
									result = GameManager.FluorescentGemMgr.ProcessFluorescentGemResolve(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								default:
									if (nID == 1300)
									{
										result = SingletonTemplate<ActivityManagerNew>.Instance().HandleClientQueryPlatChargeKing(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
										goto IL_47EA;
									}
									if (nID == 1330)
									{
										result = TCPCmdHandler.ProcessSetFunctionOpen(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
										goto IL_47EA;
									}
									break;
								}
							}
						}
						else if (nID <= 1516)
						{
							if (nID == 1341)
							{
								result = TCPCmdHandler.ProcessSpriteGetPKKingLooksCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							}
							if (nID == 1401)
							{
								result = VideoLogic.getInstance().ProcessGuanZhanMoveToCmd(socket, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							}
							switch (nID)
							{
							case 1495:
								result = TCPCmdHandler.ProcessGetSpecPriorityActXmlDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1496:
								result = TCPCmdHandler.ProcessGetSpecPriorityActDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1497:
								result = TCPCmdHandler.ProcessFetchSpecPriorityActAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1498:
								result = TCPCmdHandler.ProcessSpecPriorityActDonateCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1500:
								result = TCPCmdHandler.ProcessSpriteGetInputPointsCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1501:
								result = TCPCmdHandler.ProcessGetWeekEndIputDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1505:
								result = TCPCmdHandler.ProcessGetEverydayActXmlDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1506:
								result = TCPCmdHandler.ProcessGetEverydayActDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1507:
								result = TCPCmdHandler.ProcessFetchEverydayActAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1510:
								result = TCPCmdHandler.ProcessGetSpecialActXmlDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1511:
								result = TCPCmdHandler.ProcessGetSpecActDataCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1512:
								result = TCPCmdHandler.ProcessFetchSpecActAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1515:
								result = TCPCmdHandler.ProcessQueryJieriVIPYouHuiCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1516:
								result = TCPCmdHandler.ProcessFetchJieriVIPYouHuiAwardCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							}
						}
						else
						{
							switch (nID)
							{
							case 1620:
								result = TCPCmdHandler.ProcessQueryJieriCZQGCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1621:
								result = TCPCmdHandler.ProcessQueryOneDollarBuyCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1622:
								result = TCPCmdHandler.ProcessQueryJieriSuperInputCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1623:
								result = TCPCmdHandler.ProcessExcuteJieriSuperInputCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							default:
								if (nID == 1700)
								{
									result = VideoLogic.getInstance().ProcessOpenVideoCmd(socket, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								}
								switch (nID)
								{
								case 1800:
									result = TCPCmdHandler.ProcessEquipJuHunCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								case 1801:
									result = TCPCmdHandler.ProcessSpriteEquipJuHunInheritCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								}
								break;
							}
						}
					}
					else if (nID <= 3002)
					{
						if (nID <= 1840)
						{
							switch (nID)
							{
							case 1806:
								result = TCPCmdHandler.ProcessQueryJieRiMeiRiLeiChongCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1807:
								break;
							case 1808:
								result = SingletonTemplate<ActivityManagerNew>.Instance().ProcessQueryJieRiMeiRiPlatChargeKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 1809:
								result = SingletonTemplate<ActivityManagerNew>.Instance().ProcessExecuteJieRiMeiRiPlatChargeKingCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							default:
								if (nID == 1840)
								{
									result = FashionManager.ProcessGetBuffFashionList(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								}
								break;
							}
						}
						else
						{
							if (nID == 1850)
							{
								result = TCPCmdHandler.ProcessSpriteGetPaiZhuDamonGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							}
							switch (nID)
							{
							case 2040:
								result = RebornEquip.ProcessSpriteGetRebornGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 2041:
								result = RebornEquip.ProcessSpriteRebornResetBagCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 2042:
								result = RebornEquip.ProcessSpriteResetRebornStoreCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 2043:
								result = RebornEquip.ProcessQueryOpenRebornPortableGridCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 2044:
								result = RebornEquip.ProcessQueryRebornOpenGridCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 2045:
							case 2046:
							case 2047:
								break;
							case 2048:
								result = RebornEquip.ProcessExtRebornStoreByYuanBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							case 2049:
								result = RebornEquip.ProcessExtRebornBagNumByYuanBaoCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
								goto IL_47EA;
							default:
								if (nID == 3002)
								{
									result = TCPCmdHandler.ProcessSpriteGetMeditateGoodsListCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
									goto IL_47EA;
								}
								break;
							}
						}
					}
					else if (nID <= 14006)
					{
						if (nID == 12100)
						{
							result = TCPCmdHandler.ProcessClientLogCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
							goto IL_47EA;
						}
						if (nID == 14001)
						{
							result = SingletonTemplate<NameManager>.Instance().ProcessChangeName(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
							goto IL_47EA;
						}
						switch (nID)
						{
						case 14004:
							result = SingletonTemplate<GetInterestingDataMgr>.Instance().OnResponse(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
							goto IL_47EA;
						case 14006:
							result = SingletonTemplate<NameManager>.Instance().ProcessChangeBangHuiName(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
							goto IL_47EA;
						}
					}
					else
					{
						if (nID == 29900 || nID == 30001)
						{
							result = RobotTaskValidator.getInstance().ProcessTaskList(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
							goto IL_47EA;
						}
						if (nID == 30100)
						{
							result = TCPCmdHandler.ProcessSpriteGetAttribAllCmd(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket);
							goto IL_47EA;
						}
					}
					LogManager.WriteLog(LogTypes.Error, string.Format("未注册指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					if (GameManager.FlagAlowUnRegistedCmd)
					{
						result = TCPProcessCmdResults.RESULT_OK;
					}
					else
					{
						result = TCPProcessCmdResults.RESULT_FAILED;
					}
					IL_47EA:;
				}
				TCPCmdHandler.TotalHandledCmdsNum += 1L;
				long nowTicks = TimeUtil.NOW();
				long usedTicks = nowTicks - startTicks;
				if (usedTicks > 0L)
				{
					if (usedTicks > TCPCmdHandler.MaxUsedTicksByCmdID)
					{
						TCPCmdHandler.MaxUsedTicksCmdID = nID;
						TCPCmdHandler.MaxUsedTicksByCmdID = usedTicks;
					}
				}
				lock (TCPCmdHandler.HandlingCmdDict)
				{
					TCPCmdHandler.HandlingCmdDict.Remove(socket);
				}
				result2 = result;
			}
			return result2;
		}

		// Token: 0x06003E04 RID: 15876 RVA: 0x003524CC File Offset: 0x003506CC
		private static TCPProcessCmdResults ProcessUserLogin2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 6)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), cmdData), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int verSign = 0;
				string userID = fields[1];
				string userName = fields[2];
				string lastTime = fields[3];
				string isadult = fields[4];
				string signCode = fields[5].ToLower();
				if (!int.TryParse(fields[0], out verSign))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("ProcessUserLogin2Cmd, verSign={0} userID={1}", fields[0], userID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				bool verify = true;
				string key = TCPCmdHandler.WebKey;
				string strVal = string.Concat(new string[]
				{
					userID,
					userName,
					lastTime,
					isadult,
					key
				});
				string strMD5 = MD5Helper.get_md5_string(strVal).ToLower();
				if (strMD5 != signCode)
				{
					if (!GameManager.IsKuaFuServer)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("验证指令数据完整性时错误, CMD={0}, Client={1}, UserID={2}, IsAdult={3}, LastTime={4}, SignCode={5}", new object[]
						{
							(TCPGameServerCmds)nID,
							Global.GetSocketRemoteEndPoint(socket, false),
							userID,
							isadult,
							lastTime,
							signCode
						}), null, true);
						return TCPProcessCmdResults.RESULT_FAILED;
					}
					verify = false;
				}
				if (!KuaFuManager.getInstance().OnUserLogin2(socket, verSign, userID, userName, lastTime, isadult, signCode))
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-11005,
						"",
						"",
						""
					}), 20);
					return TCPProcessCmdResults.RESULT_DATA_CLOSE;
				}
				string clientIPPort = Global.GetSocketRemoteEndPoint(socket, false);
				string strcmd;
				if (clientIPPort.IndexOf("127.0.0.1") < 0 && GameManager.GM_NoCheckTokenTimeRemainMS <= 0L)
				{
					int oldLastTime = Convert.ToInt32(lastTime);
					int nowSecs = DataHelper.UnixSecondsNow();
					if (nowSecs - oldLastTime >= 86400)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-100,
							"",
							"",
							""
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, 20);
						return TCPProcessCmdResults.RESULT_DATA_CLOSE;
					}
				}
				if (verSign != 20140624)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-2,
						"",
						"",
						""
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, 20);
					return TCPProcessCmdResults.RESULT_DATA_CLOSE;
				}
				EventLogManager.AddRoleLoginEvent(userID, isadult, clientIPPort);
				UserLoginToken ult = new UserLoginToken
				{
					UserID = userID,
					RandomPwd = (verify ? tcpRandKey.GetKey() : -2)
				};
				string userToken = ult.GetEncryptString(TCPCmdHandler.KeySHA1, TCPCmdHandler.KeyData);
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					userID,
					userName,
					userToken,
					isadult
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, 20);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E05 RID: 15877 RVA: 0x003528D4 File Offset: 0x00350AD4
		private static TCPProcessCmdResults ProcessServerMonitor(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int serverID = Convert.ToInt32(fields[0]);
				string strUrl = fields[1];
				int port = Convert.ToInt32(fields[2]);
				string strLan = fields[3];
				string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					serverID,
					strUrl,
					port,
					strLan,
					GameManager.ClientMgr.GetClientCount()
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, 2);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E06 RID: 15878 RVA: 0x00352A30 File Offset: 0x00350C30
		private static TCPProcessCmdResults ProcessUserLoginCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 6 && fields.Length != 12 && fields.Length != 13)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), cmdData), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string userID = fields[0];
				string userName = fields[1];
				string userToken = fields[2];
				int roleRandToken = Convert.ToInt32(fields[3]);
				int verSign = Convert.ToInt32(fields[4]);
				int userIsAdult = Convert.ToInt32(fields[5]);
				socket.session.IsGM = Global.IsGM(userID, socket);
				socket.session.IsGuest = (userIsAdult >> 1 & 1);
				userIsAdult &= 1;
				socket.session.IsAdult = userIsAdult;
				socket.UserID = userID;
				socket.session.InUseridWhiteList = Data.InUserWriteList(userID);
				if (!socket.session.IsGM && !Global.CheckAnyForMultipleCondition(new bool?[]
				{
					socket.session.InIpWhiteList,
					socket.session.InUseridWhiteList
				}))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (tcpMgr.MySocketListener.ConnectedSocketsCount - 1 >= tcpMgr.MaxConnectedClientLimit + tcpMgr.MaxConnectedClientLimit / 20)
				{
					if (!GameManager.systemGMCommands.IsGMUser(userName))
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("用户登陆后, 判断已经达到线路最大人数限制, 返回失败, CMD={0}, Client={1}, UserID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), userID), null, true);
						strcmd = string.Format("{0}", -100);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, 100);
						return TCPProcessCmdResults.RESULT_DATA_CLOSE;
					}
				}
				if (verSign != 20140624)
				{
					strcmd = string.Format("{0}", -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, 100);
					GlobalEventSource.getInstance().fireEvent(new LoginFailByDataCheckEventObject(Global.GetIpAsIntSafe(socket), userID));
					return TCPProcessCmdResults.RESULT_DATA_CLOSE;
				}
				if (BanManager.IsBanInMemory(userID))
				{
					GlobalEventSource.getInstance().fireEvent(new LoginFailByUserBanEventObject(Global.GetIpAsIntSafe(socket), userID));
					return TCPProcessCmdResults.RESULT_DATA_CLOSE;
				}
				bool useProtoBuf = false;
				bool verified = true;
				bool PtLoginVerifyResult = false;
				try
				{
					socket.deviceID = fields[6];
					if (fields[11].Length >= 2 && !fields[11].Contains('.') && !fields[11].Contains(':'))
					{
						useProtoBuf = true;
						byte[] pbBytes = Convert.FromBase64String(fields[11]);
						if (null != pbBytes)
						{
							KuaFuServerLoginData kuaFuServerLoginData = DataHelper.BytesToObject<KuaFuServerLoginData>(pbBytes, 0, pbBytes.Length);
							if (null != kuaFuServerLoginData)
							{
								int port = kuaFuServerLoginData.Private;
								if (port != 0 && GameManager.PlatConfigMgr.GetGameConfigItemInt("ripapi", 1) > 0)
								{
									long rip = (long)(port ^ 1234567890);
									socket.SetAcceptIp(rip, 12);
								}
								if (kuaFuServerLoginData.SignToken != null)
								{
									if (!SingletonTemplate<KuaFuWorldManager>.Instance().CheckPTKuaFuLoginSign(kuaFuServerLoginData))
									{
										LogManager.WriteLog(LogTypes.Error, string.Format("GameType{0}跨平台跨服登录验证失败,{1}的登录口令或过期或无效", new object[]
										{
											kuaFuServerLoginData.GameType,
											kuaFuServerLoginData.RoleId,
											kuaFuServerLoginData.PTID,
											kuaFuServerLoginData.TargetServerID
										}), null, true);
										string strResult = string.Format("{0}:{1}:{2}:{3}", new object[]
										{
											-11007,
											"",
											"",
											""
										});
										tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strResult, 100);
										return TCPProcessCmdResults.RESULT_DATA_CLOSE;
									}
									kuaFuServerLoginData.SignToken = null;
									PtLoginVerifyResult = true;
								}
								socket.ClientKuaFuServerLoginData = kuaFuServerLoginData;
							}
						}
					}
				}
				catch (Exception ex)
				{
					LogManager.WriteException(ex.ToString());
				}
				if (!PtLoginVerifyResult)
				{
					UserLoginToken ult = new UserLoginToken();
					int verifyResult = ult.SetEncryptString(userToken, TCPCmdHandler.KeySHA1, TCPCmdHandler.KeyData, TCPCmdHandler.MaxTicks);
					if (verifyResult < 0)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("登录时验证token错误, CMD={0}, Client={1}, VerifyResult={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), verifyResult), null, true);
						verified = false;
						GlobalEventSource.getInstance().fireEvent(new LoginFailByDataCheckEventObject(Global.GetIpAsIntSafe(socket), userID));
					}
					else
					{
						userID = ult.UserID;
						int RandPwd = ult.RandomPwd;
						if (!tcpRandKey.FindKey(RandPwd))
						{
							verified = false;
						}
					}
				}
				if (verified)
				{
					int roleId = socket.ClientKuaFuServerLoginData.RoleId;
					long gameId = socket.ClientKuaFuServerLoginData.GameId;
					int gameType = socket.ClientKuaFuServerLoginData.GameType;
					int serverId = socket.ClientKuaFuServerLoginData.ServerId;
					string ip = socket.ClientKuaFuServerLoginData.ServerIp;
					int port = socket.ClientKuaFuServerLoginData.ServerPort;
					string lastTime = DataHelper.UnixSecondsNow().ToString();
					string strVal = string.Concat(new object[]
					{
						userID,
						userName,
						lastTime,
						userIsAdult,
						TCPCmdHandler.WebKey
					});
					string signCode = MD5Helper.get_md5_string(strVal).ToLower();
					if (!KuaFuManager.getInstance().OnUserLogin(socket, verSign, userID, userName, lastTime, userToken, userIsAdult.ToString(), signCode, serverId, ip, port, roleId, gameType, gameId))
					{
						string strResult = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-11007,
							"",
							"",
							""
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strResult, 100);
						return TCPProcessCmdResults.RESULT_DATA_CLOSE;
					}
					if (IPStatisticsManager.getInstance().GetIPInBeOperation(socket, IPOperaType.BanLogin))
					{
						return TCPProcessCmdResults.RESULT_FAILED;
					}
					if (IPStatisticsManager.getInstance().GetUserIDInBeOperation(userID, IPOperaType.BanLogin))
					{
						return TCPProcessCmdResults.RESULT_FAILED;
					}
				}
				if (!useProtoBuf && fields.Length >= 12)
				{
					int port;
					int roleId;
					long gameId;
					int gameType;
					int serverId;
					string ip;
					if (fields.Length == 13)
					{
						socket.deviceID = fields[6];
						roleId = Convert.ToInt32(fields[7]);
						gameId = Convert.ToInt64(fields[8]);
						gameType = Convert.ToInt32(fields[9]);
						serverId = Convert.ToInt32(fields[10]);
						ip = fields[11];
						port = Convert.ToInt32(fields[12]);
					}
					else
					{
						roleId = Convert.ToInt32(fields[6]);
						gameId = Convert.ToInt64(fields[7]);
						gameType = Convert.ToInt32(fields[8]);
						serverId = Convert.ToInt32(fields[9]);
						ip = fields[10];
						port = Convert.ToInt32(fields[11]);
					}
					if (roleId == 0 && port != 0 && GameManager.PlatConfigMgr.GetGameConfigItemInt("ripapi", 1) > 0)
					{
						long rip = (long)(port ^ 1234567890);
						socket.SetAcceptIp(rip, 12);
					}
					string lastTime = DataHelper.UnixSecondsNow().ToString();
					string strVal = string.Concat(new object[]
					{
						userID,
						userName,
						lastTime,
						userIsAdult,
						TCPCmdHandler.WebKey
					});
					string signCode = MD5Helper.get_md5_string(strVal).ToLower();
					if (!KuaFuManager.getInstance().OnUserLogin(socket, verSign, userID, userName, lastTime, userToken, userIsAdult.ToString(), signCode, serverId, ip, port, roleId, gameType, gameId))
					{
						string strResult = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-11007,
							"",
							"",
							""
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strResult, 100);
						return TCPProcessCmdResults.RESULT_DATA_CLOSE;
					}
				}
				if (socket.ServerId == 0)
				{
					socket.ServerId = GameManager.ServerId;
				}
				bool alreadyOnline = false;
				if (!verified)
				{
					strcmd = string.Format("{0}", -100);
				}
				else if (!GameManager.OnlineUserSession.AddSession(socket, userID))
				{
					strcmd = string.Format("{0}", -2);
					LogManager.WriteLog(LogTypes.Error, string.Format("用户登陆时, 判断用户账号已经在会话中, Client={0}, UserName={1}", Global.GetSocketRemoteEndPoint(socket, false), userName), null, true);
					alreadyOnline = true;
				}
				else
				{
					int regUserID = Global.RegisterUserIDToDBServer(userID, 1, socket.ServerId, ref socket.session.LastLogoutServerTicks);
					if (regUserID <= 0)
					{
						if (regUserID != 0)
						{
							strcmd = string.Format("{0}", regUserID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, 100);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						strcmd = string.Format("{0}", -2);
						LogManager.WriteLog(LogTypes.Error, string.Format("用户登陆时, 注册账号到DB失败，Client={0}, UserName={1}", Global.GetSocketRemoteEndPoint(socket, false), userName), null, true);
						alreadyOnline = true;
					}
					else
					{
						GameManager.OnlineUserSession.AddUserName(socket, userName);
						GameManager.OnlineUserSession.AddUserAdult(socket, userIsAdult);
						int waitSecs = Global.GetSwitchServerWaitSecs(socket);
						strcmd = string.Format("{0}:{1}", tcpRandKey.GetKey(), waitSecs);
						socket.magic = 0;
						if (!socket.session.IsGM)
						{
							ushort randKey = Win32API.GenRandKey(((IPEndPoint)socket.RemoteEndPoint).Port);
							if (GameManager.VersionSystemOpenMgr.IsVersionSystemOpen("RandomCmdBaseId"))
							{
								ushort baseVal = 30768;
								if ((socket.magic = Win32API.OpenMagic(randKey, baseVal)) > 0)
								{
									byte[] magicBytes = BitConverter.GetBytes((uint)((int)randKey << 16 | (int)baseVal));
									tcpMgr.MySocketListener.SendData(socket, TCPOutPacket.MakeTCPOutPacket(pool, magicBytes, 21), true);
								}
							}
							if (GameManager.VersionSystemOpenMgr.IsVersionSystemOpen("EncryptStreamKey"))
							{
								ulong oldKey = socket.SortKey64;
								socket.SortKey64 = Win32API.OpenKey(randKey, oldKey);
								if (oldKey != socket.SortKey64)
								{
									byte[] magicBytes = BitConverter.GetBytes(randKey);
									tcpMgr.MySocketListener.SendData(socket, TCPOutPacket.MakeTCPOutPacket(pool, magicBytes, 24), true);
								}
							}
						}
					}
				}
				bool bHasOtherSocket = false;
				if (alreadyOnline)
				{
					TMSKSocket clientSocket = GameManager.OnlineUserSession.FindSocketByUserName(userName);
					if (null != clientSocket)
					{
						bHasOtherSocket = true;
						if (clientSocket == socket)
						{
							LogManager.WriteLog(LogTypes.Error, string.Format("已登录的用户再次发送登录指令,关闭连接, Client={0}, UserName={1}", Global.GetSocketRemoteEndPoint(socket, false), userName), null, true);
							return TCPProcessCmdResults.RESULT_FAILED;
						}
						GameClient otherClient = GameManager.ClientMgr.FindClient(clientSocket);
						if (null == otherClient)
						{
							Global.ForceCloseSocket(clientSocket, "被GM踢了, 但是这个socket上没有对应的client", true);
						}
						else
						{
							Global.ForceCloseClient(otherClient, "被顶掉了", true);
						}
					}
					else
					{
						string gmCmdData = string.Format("-kicku {0} {1} {2}", userName, GameManager.ServerLineID, TimeUtil.NowRealTime());
						GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
						{
							0,
							"",
							0,
							"",
							0,
							gmCmdData,
							0,
							0,
							-1000
						}), null, socket.ServerId);
					}
					LogManager.WriteLog(LogTypes.Error, string.Format("用户登陆时, 判断用户账号已经在线，强迫上次的登录断线..., Client={0}, UserName={1}", Global.GetSocketRemoteEndPoint(socket, false), userName), null, true);
				}
				if (!socket.IsKuaFuLogin)
				{
					SecPwdState pwdState = SecondPasswordManager.InitUserState(userID, bHasOtherSocket);
				}
				socket.session.SetSocketTime(1);
				GlobalEventSource.getInstance().fireEvent(new LoginSuccessEventObject(Global.GetIpAsIntSafe(socket), userID));
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, 100);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E07 RID: 15879 RVA: 0x00353740 File Offset: 0x00351940
		private static TCPProcessCmdResults ProcessGetRoleListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				string cmdData = new UTF8Encoding().GetString(data, 0, count);
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length < 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string userID = fields[0];
				int zoneID = Convert.ToInt32(fields[1]);
				if (!GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("外挂登录，没有SocketSession的情况下，获取角色列表, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!socket.session.IsGM && !GameManager.loginWaitLogic.IsInAllowDict(userID))
				{
					LoginWaitLogic.UserType userType = GameManager.loginWaitLogic.GetUserType(userID);
					if (GameManager.loginWaitLogic.GetUserCount() >= GameManager.loginWaitLogic.GetConfig(userType, LoginWaitLogic.ConfigType.NeedWaitNum))
					{
						if (!GameManager.loginWaitLogic.AddToWait(userID, zoneID, userType, socket))
						{
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-2:", nID);
						}
						else
						{
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-1:", nID);
							socket.session.SetSocketTime(5);
						}
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (!socket.IsKuaFuLogin)
				{
					ChangeNameInfo info = SingletonTemplate<NameManager>.Instance().GetChangeNameInfo(userID, zoneID, socket.ServerId);
					if (info != null)
					{
						tcpMgr.MySocketListener.SendData(socket, DataHelper.ObjectToTCPOutPacket<ChangeNameInfo>(info, pool, 14002), true);
					}
				}
				string dbData = string.Format("{0}:{1}:{2}", userID, zoneID, TimeUtil.NowDateTime().ToString("yyyy-MM-dd"));
				Global.sendToDB<int, string>(13107, dbData, 0);
				socket.session.SetSocketTime(2);
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E08 RID: 15880 RVA: 0x003539B0 File Offset: 0x00351BB0
		private static TCPProcessCmdResults ProcessCreateRoleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				string cmdData = new UTF8Encoding().GetString(data, 0, count);
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 7)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (IPStatisticsManager.getInstance().GetIPInBeOperation(socket, IPOperaType.BanCreateRole))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string userID = fields[0];
				string userName = fields[1];
				int sex = Convert.ToInt32(fields[2]);
				int occup = Convert.ToInt32(fields[3]);
				string[] nameAndPingTaiID = fields[4].Split(new char[]
				{
					'$'
				});
				int zoneID = Convert.ToInt32(fields[5]);
				if (IPStatisticsManager.getInstance().GetUserIDInBeOperation(userID, IPOperaType.BanCreateRole))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string deviceID = socket.deviceID;
				if (!GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("外挂登录，没有SocketSession的情况下，进行了登录, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (socket.IsKuaFuLogin || sex < 0 || sex > 1 || occup < 0 || occup >= 6 || occup == 4 || sex == 1 != (occup == 2 || occup == 5))
				{
					string strcmd = string.Format("{0}:{1}", -12, string.Format("{0}${1}${2}${3}${4}${5}", new object[]
					{
						"",
						"",
						"",
						"",
						"",
						""
					}));
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (GameManager.MagicSwordMgr.IsMagicSword(occup) && !GameManager.MagicSwordMgr.IsVersionSystemOpenOfMagicSword())
				{
					string strcmd = string.Format("{0}:{1}", -6, string.Format("{0}${1}${2}${3}${4}${5}", new object[]
					{
						"",
						"",
						"",
						"",
						"",
						""
					}));
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (GameManager.SummonerMgr.IsSummoner(occup) && !GameManager.SummonerMgr.IsVersionSystemOpenOfSummoner())
				{
					string strcmd = string.Format("{0}:{1}", -6, string.Format("{0}${1}${2}${3}${4}${5}", new object[]
					{
						"",
						"",
						"",
						"",
						"",
						""
					}));
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string name = nameAndPingTaiID[0];
				int ret = NameServerNamager.CheckInvalidCharacters(name, false);
				if (ret <= 0)
				{
					string strcmd = string.Format("{0}:{1}", (ret == -40) ? -3 : ret, string.Format("{0}${1}${2}${3}${4}${5}", new object[]
					{
						"",
						"",
						"",
						"",
						"",
						""
					}));
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!SingletonTemplate<NameManager>.Instance().IsNameLengthOK(name))
				{
					string strcmd = string.Format("{0}:{1}", -2, string.Format("{0}${1}${2}${3}${4}${5}", new object[]
					{
						"",
						"",
						"",
						"",
						"",
						""
					}));
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				ret = NameServerNamager.RegisterNameToNameServer(zoneID, userID, nameAndPingTaiID, 0, 0);
				if (ret <= 0)
				{
					string strcmd = string.Format("{0}:{1}", ret, string.Format("{0}${1}${2}${3}${4}${5}", new object[]
					{
						"",
						"",
						"",
						"",
						"",
						""
					}));
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int NotifyLeftTime = 0;
				if (!SingletonTemplate<CreateRoleLimitManager>.Instance().IfCanCreateRole(userID, userName, deviceID, ((IPEndPoint)socket.RemoteEndPoint).Address.ToString(), out NotifyLeftTime))
				{
					GlobalEventSource.getInstance().fireEvent(new PlayerCreateRoleBeBanEventObject(Global.GetIpAsIntSafe(socket), userID));
					string strcmd = string.Format("{0}:{1}", -7, NotifyLeftTime);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
				if (null != tcpOutPacket)
				{
					string strCmdResult = null;
					tcpOutPacket.GetPacketCmdData(out strCmdResult);
					if (null != strCmdResult)
					{
						string ip = Global.GetSocketRemoteEndPoint(socket, false).Replace(":", ".");
						EventLogManager.AddCreateRoleEvent(userID, zoneID, strCmdResult, ip, deviceID);
						string[] ResultField = strCmdResult.Split(new char[]
						{
							':'
						});
						if (ResultField.Length == 2 && Global.SafeConvertToInt32(ResultField[0]) == 1)
						{
							SingletonTemplate<CreateRoleLimitManager>.Instance().ModifyCreateRoleNum(userID, userName, deviceID, ((IPEndPoint)socket.RemoteEndPoint).Address.ToString());
						}
						if (ResultField.Length == 2 && Global.SafeConvertToInt32(ResultField[0]) == -1000)
						{
							GlobalEventSource.getInstance().fireEvent(new PlayerCreateRoleLimitEventObject(Global.GetIpAsIntSafe(socket), userID));
						}
					}
					if (TwLogManager.GetProductID() != "" && TwLogManager.GetProductID() != "0")
					{
						if (strCmdResult != null && strCmdResult.Length > 0)
						{
							string[] resultArray = strCmdResult.Split(new char[]
							{
								':'
							});
							if (resultArray[0] == "1")
							{
								string[] roleArray = resultArray[1].Split(new char[]
								{
									'$'
								});
								int ret_roleID = Global.SafeConvertToInt32(roleArray[0]);
								string uID = TwLogManager.GetUserID(userID);
								string ip = Global.GetSocketRemoteEndPoint(socket, false);
								int index = ip.IndexOf(':');
								if (index > 0)
								{
									ip = ip.Substring(0, index);
								}
								string time = TimeUtil.ConvertDateTimeInt(TimeUtil.NowDateTime()).ToString();
								string uName = TwLogManager.GetUserID(userID);
								string proID = TwLogManager.GetProductID();
								string serverID = TwLogManager.GetServerID();
								string log = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}", new object[]
								{
									uID,
									ret_roleID,
									ip,
									time,
									uName,
									proID,
									serverID
								});
								TwLogManager.WriteLog(TwLogType.RoleCreate, log);
							}
						}
					}
				}
				return result;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E09 RID: 15881 RVA: 0x003541C0 File Offset: 0x003523C0
		private static TCPProcessCmdResults ProcessUnRemoveRoleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length < 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}", (TCPGameServerCmds)nID, cmdData), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string userID = fields[0];
				int roleID = Convert.ToInt32(fields[1]);
				if (roleID < 0 || (!GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket)))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("外挂登录，没有SocketSession的情况下，进行了登录, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (socket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				SecPwdState pwdState = SecondPasswordManager.GetSecPwdState(userID);
				if (pwdState != null && pwdState.NeedVerify)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-20", nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E0A RID: 15882 RVA: 0x00354380 File Offset: 0x00352580
		private static TCPProcessCmdResults ProcessPreRemoveRoleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length < 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}", (TCPGameServerCmds)nID, cmdData), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string userID = fields[0];
				int roleID = Convert.ToInt32(fields[1]);
				if (roleID < 0 || (!GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket)))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("外挂登录，没有SocketSession的情况下，进行了登录, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (socket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				SecPwdState pwdState = SecondPasswordManager.GetSecPwdState(userID);
				if (pwdState != null && pwdState.NeedVerify)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-20", nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!JunTuanManager.getInstance().PreRemoveRole(roleID))
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-23", nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (MarryLogic.IsMarried(roleID))
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-21", nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (LingDiCaiJiManager.getInstance().isLingZhu(roleID))
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-22", nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
				if (null != tcpOutPacket)
				{
					string strCmdResult = null;
					tcpOutPacket.GetPacketCmdData(out strCmdResult);
					if (null != strCmdResult)
					{
						string[] PreFields = strCmdResult.Split(new char[]
						{
							':'
						});
						if (PreFields.Length == 2)
						{
							int res_roleID = Convert.ToInt32(PreFields[0]);
							if (res_roleID == roleID)
							{
								LiXianBaiTanManager.RemoveLiXianSaleGoodsItems(roleID);
							}
						}
					}
				}
				return result;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E0B RID: 15883 RVA: 0x0035464C File Offset: 0x0035284C
		private static TCPProcessCmdResults ProcessRemoveRoleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length < 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}", (TCPGameServerCmds)nID, cmdData), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string userID = fields[0];
				int roleID = Convert.ToInt32(fields[1]);
				if (roleID < 0 || (!GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket)))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("外挂登录，没有SocketSession的情况下，进行了登录, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (socket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				SecPwdState pwdState = SecondPasswordManager.GetSecPwdState(userID);
				if (pwdState != null && pwdState.NeedVerify)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-20", nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (MarryLogic.IsMarried(roleID))
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "-21", nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
				if (null != tcpOutPacket)
				{
					string strCmdResult = null;
					tcpOutPacket.GetPacketCmdData(out strCmdResult);
					if (null != strCmdResult)
					{
						string[] strFields = strCmdResult.Split(new char[]
						{
							':'
						});
						int res_roleID = Convert.ToInt32(strFields[0]);
						if (res_roleID == roleID)
						{
							LiXianBaiTanManager.RemoveLiXianSaleGoodsItems(roleID);
							string ip = Global.GetSocketRemoteEndPoint(socket, false).Replace(":", ".");
							int zoneID = Convert.ToInt32(strFields[1]);
							EventLogManager.AddRemoveRoleEvent(userID, zoneID, roleID, ip);
						}
					}
				}
				return result;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E0C RID: 15884 RVA: 0x003548D8 File Offset: 0x00352AD8
		private static TCPProcessCmdResults ProcessInitGameCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3 && fields.Length != 2 && fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), cmdData), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string userID = fields[0];
				int roleID = Convert.ToInt32(fields[1]);
				if (SingletonTemplate<KuaFuWorldManager>.Instance().IsTempRoleID(roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("IsTempRoleID(ProcessInitGameCmd), CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData
					{
						RoleID = -10
					}, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (socket.IsKuaFuLogin && roleID != socket.ClientKuaFuServerLoginData.RoleId)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("roleID != socket.ClientKuaFuServerLoginData.RoleId(ProcessInitGameCmd), CMD={0}, Client={1}, RoleID={2}, LoginData.RoleId={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						socket.ClientKuaFuServerLoginData.RoleId
					}), null, true);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData
					{
						RoleID = -10
					}, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string hid = "";
				if (fields.Length >= 3)
				{
					hid = fields[2];
				}
				int isYueYu = 0;
				if (fields.Length >= 4)
				{
					isYueYu = ((Convert.ToInt32(fields[3]) == 1) ? 1 : 0);
				}
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (null != client)
				{
					if (client.ClientData.RoleID == roleID)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象已经存在(ProcessInitGameCmd), CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
						return TCPProcessCmdResults.RESULT_OK;
					}
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象已经存在,且RoleID不一致(ProcessInitGameCmd), CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				else
				{
					if (roleID < 0 || (!GameManager.TestGamePerformanceMode && userID != GameManager.OnlineUserSession.FindUserID(socket)))
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("外挂登录，没有SocketSession的情况下，进行了登录, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (BanManager.IsBanInMemory(userID))
					{
						GlobalEventSource.getInstance().fireEvent(new LoginFailByUserBanEventObject(Global.GetIpAsIntSafe(socket), userID));
						return TCPProcessCmdResults.RESULT_FAILED;
					}
					int waitSecs = Global.GetSwitchServerWaitSecs(socket);
					if (waitSecs > 0)
					{
						tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData
						{
							RoleID = -40,
							BodyCode = waitSecs
						}, pool, nID);
						socket.session.SetSocketTime(5);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (socket.IsKuaFuLogin)
					{
						roleID = socket.ClientKuaFuServerLoginData.RoleId;
					}
					KuaFuWorldRoleData wrd = SingletonTemplate<KuaFuWorldManager>.Instance().GetWorldRoleData(roleID, socket.ServerId, userID, socket.ClientKuaFuServerLoginData.TempRoleID);
					byte[] bytesData = null;
					if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer3(tcpClientPool, pool, nID, string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						userID,
						wrd.LocalRoleID,
						wrd.TempRoleID,
						wrd.Channel
					}), out bytesData, socket.ServerId))
					{
						return TCPProcessCmdResults.RESULT_FAILED;
					}
					int length = BitConverter.ToInt32(bytesData, 0);
					ushort cmd = BitConverter.ToUInt16(bytesData, 4);
					RoleDataEx roleDataEx = DataHelper.BytesToObject<RoleDataEx>(bytesData, 6, length - 2);
					if (roleDataEx.RoleID < 0)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("数据库获取角色的数据失败: Cmd={0}, RoleID={1}, Error={2}, 关闭连接", (TCPGameServerCmds)nID, roleID, roleDataEx.RoleID), null, true);
						if (roleDataEx.RoleID == -70 || roleDataEx.RoleID == -10)
						{
							GlobalEventSource.getInstance().fireEvent(new PlayerInitGameBeBanEventObject(Global.GetIpAsIntSafe(socket), userID, roleID));
						}
						if (roleDataEx.RoleID == -11)
						{
							roleDataEx.RoleID = -10;
						}
						tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData
						{
							RoleID = roleDataEx.RoleID
						}, pool, (int)cmd);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					wrd.PTID = roleDataEx.ServerPTID;
					wrd.WorldRoleID = roleDataEx.WorldRoleID;
					if (wrd.TempRoleID > 0)
					{
						roleDataEx.RoleID = wrd.TempRoleID;
					}
					roleDataEx.UserPTID = Data.GetUserPtIDByUserID(roleDataEx.UserID);
					if (!socket.IsKuaFuLogin)
					{
						MapTypes mapType = Global.GetMapType(roleDataEx.MapCode);
						bool isKuaFuMap = KuaFuManager.getInstance().IsKuaFuMap(roleDataEx.MapCode);
						if (isKuaFuMap || mapType == MapTypes.HuanYingSiYuan || mapType == MapTypes.TempMap)
						{
							GameClient fakeClient = Global.MakeGameClientForGetRoleParams(roleDataEx);
							int LastMapCode;
							int LastPosX;
							int LastPosY;
							if (Global.GetMapRecordDataByField(fakeClient, 0, out LastMapCode, out LastPosX, out LastPosY) && Global.MapExists(LastMapCode))
							{
								roleDataEx.MapCode = LastMapCode;
								Point pt = Global.GridToPixel(LastMapCode, (double)LastPosX, (double)LastPosY);
								roleDataEx.PosX = (int)pt.X;
								roleDataEx.PosY = (int)pt.Y;
							}
							else
							{
								roleDataEx.MapCode = GameManager.MainMapCode;
								roleDataEx.PosX = 0;
								roleDataEx.PosY = 0;
							}
						}
						if (!socket.session.IsGM)
						{
							if (roleDataEx.LastOfflineTime < TimeUtil.CurrentTicksInexact - 300000L || !isKuaFuMap)
							{
								if (!GameManager.loginWaitLogic.IsInAllowDict(userID))
								{
									LoginWaitLogic.UserType userType = GameManager.loginWaitLogic.GetUserType(userID);
									if (GameManager.loginWaitLogic.GetUserCount() >= GameManager.loginWaitLogic.GetConfig(userType, LoginWaitLogic.ConfigType.NeedWaitNum))
									{
										tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData
										{
											RoleID = -60
										}, pool, nID);
										socket.session.SetSocketTime(5);
										return TCPProcessCmdResults.RESULT_DATA;
									}
								}
								SecPwdState pwdState = SecondPasswordManager.GetSecPwdState(userID);
								if (pwdState != null && pwdState.NeedVerify)
								{
									tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData
									{
										RoleID = -30
									}, pool, nID);
									return TCPProcessCmdResults.RESULT_DATA;
								}
							}
							else
							{
								SecPwdState pwdState = SecondPasswordManager.GetSecPwdState(userID);
								if (pwdState != null && pwdState.NeedVerify)
								{
									pwdState.NeedVerify = false;
								}
							}
						}
					}
					Global.FixMainTaskID(roleDataEx);
					if (null == roleDataEx.SaleGoodsDataList)
					{
						roleDataEx.SaleGoodsDataList = new List<GoodsData>();
					}
					if (null == roleDataEx.ElementhrtsList)
					{
						roleDataEx.ElementhrtsList = new List<GoodsData>();
					}
					if (null == roleDataEx.FashionGoodsDataList)
					{
						roleDataEx.FashionGoodsDataList = new List<GoodsData>();
					}
					if (null == roleDataEx.UsingElementhrtsList)
					{
						roleDataEx.UsingElementhrtsList = new List<GoodsData>();
					}
					if (null == roleDataEx.LingYuDict)
					{
						roleDataEx.LingYuDict = new Dictionary<int, LingYuData>();
					}
					if (null == roleDataEx.DamonGoodsDataList)
					{
						roleDataEx.DamonGoodsDataList = new List<GoodsData>();
					}
					if (null == roleDataEx.GoodsDataList)
					{
						roleDataEx.GoodsDataList = new List<GoodsData>();
					}
					if (null == roleDataEx.RolePictureJudgeReferInfo)
					{
						roleDataEx.RolePictureJudgeReferInfo = new Dictionary<int, int>();
					}
					if (null == roleDataEx.GroupMailRecordList)
					{
						roleDataEx.GroupMailRecordList = new List<int>();
					}
					if (null == roleDataEx.OrnamentGoodsList)
					{
						roleDataEx.OrnamentGoodsList = new List<GoodsData>();
					}
					if (null == roleDataEx.OrnamentDataDict)
					{
						roleDataEx.OrnamentDataDict = new Dictionary<int, OrnamentData>();
					}
					if (null == roleDataEx.MyTalentData)
					{
						roleDataEx.MyTalentData = new TalentData();
					}
					if (null == roleDataEx.MyMarryPartyJoinList)
					{
						roleDataEx.MyMarryPartyJoinList = new Dictionary<int, int>();
					}
					if (null == roleDataEx.MyGuardStatueDetail)
					{
						roleDataEx.MyGuardStatueDetail = new GuardStatueDetail();
						roleDataEx.MyGuardStatueDetail.IsActived = false;
					}
					if (null == roleDataEx.MerlinData)
					{
						roleDataEx.MerlinData = new MerlinGrowthSaveDBData();
						for (int i = 0; i < 4; i++)
						{
							roleDataEx.MerlinData._ActiveAttr[i] = 0.0;
							roleDataEx.MerlinData._UnActiveAttr[i] = 0.0;
						}
					}
					if (null == roleDataEx.MyHolyItemDataDic)
					{
						roleDataEx.MyHolyItemDataDic = new Dictionary<sbyte, HolyItemData>();
					}
					if (null == roleDataEx.FluorescentGemData)
					{
						roleDataEx.FluorescentGemData = new FluorescentGemData();
					}
					if (null == roleDataEx.BuildingDataList)
					{
						roleDataEx.BuildingDataList = new List<BuildingData>();
					}
					if (null == roleDataEx.SevenDayActDict)
					{
						roleDataEx.SevenDayActDict = new Dictionary<int, Dictionary<int, SevenDayItemData>>();
					}
					if (null == roleDataEx.SoulStonesInBag)
					{
						roleDataEx.SoulStonesInBag = new List<GoodsData>();
					}
					if (null == roleDataEx.SoulStonesInUsing)
					{
						roleDataEx.SoulStonesInUsing = new List<GoodsData>();
					}
					if (null == roleDataEx.TarotData)
					{
						roleDataEx.TarotData = new TarotSystemData();
					}
					if (null == roleDataEx.ShenJiDict)
					{
						roleDataEx.ShenJiDict = new Dictionary<int, ShenJiFuWenData>();
					}
					if (null == roleDataEx.FuWenTabList)
					{
						roleDataEx.FuWenTabList = new List<FuWenTabData>();
					}
					if (null == roleDataEx.AlchemyInfo)
					{
						roleDataEx.AlchemyInfo = new AlchemyDataDB();
						roleDataEx.AlchemyInfo.RoleID = roleDataEx.RoleID;
					}
					if (null == roleDataEx.MyRoleDailyData)
					{
						roleDataEx.MyRoleDailyData = new RoleDailyData();
					}
					if (null == roleDataEx.RebornEquipHoleData)
					{
						roleDataEx.RebornEquipHoleData = new Dictionary<int, RebornEquipData>();
					}
					if (null == roleDataEx.MazingerStoreDataInfo)
					{
						roleDataEx.MazingerStoreDataInfo = new Dictionary<int, MazingerStoreData>();
					}
					int leftSecs = 78;
					int reason = BanManager.IsBanRoleName(Global.FormatRoleName3(roleDataEx.ZoneID, roleDataEx.RoleName), out leftSecs);
					if (reason > 0)
					{
						int _phony_rid = (reason == 1) ? -20 : ((reason == 2) ? -50 : -80);
						tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData
						{
							RoleID = _phony_rid,
							BodyCode = leftSecs
						}, pool, (int)cmd);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					bool needTakeStartTask = false;
					if (!Global.Flag_EnabelNewPlayerScene && roleDataEx.MainTaskID < 1000)
					{
						needTakeStartTask = true;
						roleDataEx.IsFlashPlayer = 0;
						Global.ExecuteDBCmd(10131, string.Format("{0}", roleDataEx.RoleID), socket.ServerId);
					}
					if (!socket.IsKuaFuLogin)
					{
						if (!Global.MapExists(roleDataEx.MapCode))
						{
							LogManager.WriteLog(LogTypes.Warning, string.Format("登陆时强制将不存在的地图编号转为缺省的登录地图: MapCode={0}", roleDataEx.MapCode), null, true);
							if (GameManager.MagicSwordMgr.IsMagicSword(roleDataEx.Occupation))
							{
								roleDataEx.MapCode = MagicSwordData.InitMapID;
							}
							else if (GameManager.SummonerMgr.IsSummoner(roleDataEx.Occupation))
							{
								roleDataEx.MapCode = SummonerData.InitMapID;
							}
							else
							{
								roleDataEx.MapCode = GameManager.DefaultMapCode;
							}
							roleDataEx.PosX = 0;
							roleDataEx.PosY = 0;
						}
						else
						{
							GameMap gameMap = GameManager.MapMgr.DictMaps[roleDataEx.MapCode];
							roleDataEx.PosX = Global.Clamp(roleDataEx.PosX, 1, gameMap.MapWidth);
							roleDataEx.PosY = Global.Clamp(roleDataEx.PosY, 1, gameMap.MapHeight);
							roleDataEx.PosX = gameMap.CorrectWidthPointToGridPoint(roleDataEx.PosX);
							roleDataEx.PosY = gameMap.CorrectHeightPointToGridPoint(roleDataEx.PosY);
						}
					}
					if (roleDataEx.IsFlashPlayer == 0 && roleDataEx.MapCode == 6090)
					{
						roleDataEx.MapCode = 1;
						roleDataEx.PosX = 0;
						roleDataEx.PosY = 0;
					}
					int fuBenSeqID = FuBenManager.FindFuBenSeqIDByRoleID(roleDataEx.RoleID);
					SafeClientData clientData = new SafeClientData
					{
						RoleData = roleDataEx,
						FuBenSeqID = fuBenSeqID,
						ReportPosTicks = 0L,
						WaitingForChangeMap = true,
						LocalRoleID = roleID
					};
					GameClient gameClient = new GameClient
					{
						ClientSocket = socket,
						ClientData = clientData
					};
					gameClient.ClientData.SceneType = SceneUIClasses.UnDefined;
					gameClient.ClientData.SceneMapCode = 0;
					gameClient.strUserID = GameManager.OnlineUserSession.FindUserID(gameClient.ClientSocket);
					gameClient.strUserName = GameManager.OnlineUserSession.FindUserName(socket);
					gameClient.deviceID = hid.Replace(" ", "");
					gameClient.IsYueYu = (isYueYu > 0);
					string[] hids = hid.Split(new char[]
					{
						'|'
					});
					if (hids.Length >= 3)
					{
						gameClient.deviceModel = hids[0];
						gameClient.deviceID = hids[1];
						gameClient.deviceOSVersion = hids[2];
					}
					if (hids.Length >= 5)
					{
						gameClient.IsReconnect = hids[3];
						gameClient.deviceIdfa = hids[4];
					}
					if (RobotTaskValidator.getInstance().IsYueYu(gameClient, "*"))
					{
						bool isLog = false;
						RobotTaskValidator.getInstance().BanYueYu(gameClient, out isLog, "0", 1, 0, "*", 0);
					}
					Global.InitBufferDataListHashSet(gameClient);
					if (roleDataEx.IsFlashPlayer != 0)
					{
						int nSpecialMap = (int)GameManager.systemParamsList.GetParamValueIntByName("FreshPlayerSceneID", -1);
						if (nSpecialMap > 0)
						{
							fuBenSeqID = Global.GetEnterFreshPlayerScene(roleDataEx, nSpecialMap);
						}
					}
					DamonMgr.InitDemonGoodsDataList(gameClient);
					JingLingYaoSaiManager.InitPaiZhuDemonGoodsDataList(gameClient);
					TianTiManager.getInstance().InitRoleTianTiData(gameClient);
					if (!GameManager.ClientMgr.GiveFirstTask(tcpMgr, socket, tcpClientPool, pool, tcpRandKey, gameClient, needTakeStartTask))
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("给与新手任务失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
						return TCPProcessCmdResults.RESULT_FAILED;
					}
					SceneUIClasses sceneType = Global.GetMapSceneType(roleDataEx.MapCode);
					if (VideoLogic.getInstance().IsGuanZhanGM(gameClient))
					{
						gameClient.ClientData.GuanZhanGM = 1;
						gameClient.ClientData.HideGM = 1;
						if (gameClient.ClientData.ChangeLifeCount < 1)
						{
							gameClient.ClientData.MainTaskID = 8000;
							gameClient.ClientData.ChangeLifeCount = 10;
						}
					}
					CompManager.getInstance().OnInitGameAhead(gameClient);
					if (socket.IsKuaFuLogin)
					{
						if (!KuaFuManager.getInstance().OnInitGame(gameClient))
						{
							tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData
							{
								RoleID = -12,
								RoleName = gameClient.ClientData.PushMessageID
							}, pool, (int)cmd);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						fuBenSeqID = gameClient.ClientData.FuBenSeqID;
					}
					else if (Global.GetMapType(roleDataEx.MapCode) != MapTypes.Normal || Global.IsMingJieMap(roleDataEx.MapCode))
					{
						if (MapTypes.NormalCopy == Global.GetMapType(roleDataEx.MapCode) || MapTypes.CaiShenMiaoCopy == Global.GetMapType(roleDataEx.MapCode) || MapTypes.TaskCopy == Global.GetMapType(roleDataEx.MapCode) || MapTypes.MarriageCopy == Global.GetMapType(roleDataEx.MapCode))
						{
							bool resetMapCode = false;
							if (fuBenSeqID > 0)
							{
								if (roleDataEx.IsFlashPlayer == 0)
								{
									if (!Global.CanReEnterCopyMap(roleDataEx.MapCode, fuBenSeqID))
									{
										resetMapCode = true;
									}
									else if (sceneType == SceneUIClasses.CangBaoMiJing)
									{
										resetMapCode = true;
									}
									else if (sceneType == SceneUIClasses.BloodCastle)
									{
										if (!GameManager.BloodCastleCopySceneMgr.CanEnterExistCopyScene(gameClient))
										{
											resetMapCode = true;
										}
									}
									else if (sceneType == SceneUIClasses.Demon)
									{
										if (!GameManager.DaimonSquareCopySceneMgr.CanEnterExistCopyScene(gameClient))
										{
											resetMapCode = true;
										}
									}
									else if (sceneType == SceneUIClasses.ThemeZSSL)
									{
										if (!ZhuanShengShiLian.EnterSceneCopyScene(gameClient, out fuBenSeqID, roleDataEx.MapCode))
										{
											resetMapCode = true;
										}
									}
									else if (roleDataEx.MapCode == 5100)
									{
										if (!GlodCopySceneManager.EnterGoldCopySceneWhenLogin(gameClient, false))
										{
											resetMapCode = true;
										}
									}
									else if (roleDataEx.MapCode == EMoLaiXiCopySceneManager.EMoLaiXiCopySceneMapCode)
									{
										if (!EMoLaiXiCopySceneManager.EnterEMoLaiXiCopySenceWhenLogin(gameClient, false))
										{
											resetMapCode = true;
										}
									}
									else if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(roleDataEx.MapCode))
									{
										int mapid;
										int seqid;
										GameManager.GuildCopyMapMgr.CheckCurrGuildCopyMap(gameClient, out mapid, out seqid, 0);
										if (mapid != roleDataEx.MapCode)
										{
											resetMapCode = true;
										}
									}
									else if (LuoLanFaZhenCopySceneManager.IsLuoLanFaZhenMap(roleDataEx.MapCode))
									{
										if (!LuoLanFaZhenCopySceneManager.EnterFubenMapWhenLogin(gameClient))
										{
											resetMapCode = true;
										}
									}
								}
							}
							else
							{
								resetMapCode = true;
							}
							if (resetMapCode)
							{
								LogManager.WriteLog(LogTypes.Warning, string.Format("登陆时强制将超时的普通副本转为常规地图: MapCode={0}", roleDataEx.MapCode), null, true);
								roleDataEx.MapCode = GameManager.NewDefaultMapCode;
								roleDataEx.PosX = 0;
								roleDataEx.PosY = 0;
								fuBenSeqID = -1;
								FuBenManager.RemoveFuBenSeqID(roleDataEx.RoleID);
							}
						}
						else
						{
							LogManager.WriteLog(LogTypes.Warning, string.Format("登陆时强制将非常规地图转为常规地图: MapCode={0}", roleDataEx.MapCode), null, true);
							roleDataEx.MapCode = GameManager.DefaultMapCode;
							roleDataEx.PosX = 0;
							roleDataEx.PosY = 0;
						}
					}
					else
					{
						bool resetMapCode = false;
						if (GameManager.BattleMgr.BattleMapCode == roleDataEx.MapCode)
						{
							if (!Global.CanReEnterBattleMap(roleDataEx.RoleID))
							{
								LogManager.WriteLog(LogTypes.Warning, string.Format("登陆时强制将炎黄战场地图转为常规地图: MapCode={0}", roleDataEx.MapCode), null, true);
								resetMapCode = true;
							}
							else
							{
								Global.GetLastBattleSideInfo(gameClient);
							}
						}
						else if (LuoLanChengZhanManager.getInstance().ClientInitGame(gameClient))
						{
							if (GameManager.ArenaBattleMgr.BattleMapCode == roleDataEx.MapCode)
							{
								LogManager.WriteLog(LogTypes.Warning, string.Format("登陆时强制将角斗场地图转为常规地图: MapCode={0}", roleDataEx.MapCode), null, true);
								resetMapCode = true;
							}
							else if (Global.IsInGuMuMap(gameClient))
							{
								LogManager.WriteLog(LogTypes.Warning, string.Format("登陆时强制将古墓地图转为常规地图: MapCode={0}", roleDataEx.MapCode), null, true);
								resetMapCode = true;
							}
							else if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(roleDataEx.MapCode))
							{
								LogManager.WriteLog(LogTypes.Warning, string.Format("登陆时强制将战盟日常副本转为常规地图: MapCode={0}", roleDataEx.MapCode), null, true);
								resetMapCode = true;
							}
							else if (sceneType == SceneUIClasses.AngelTemple)
							{
								if (!GameManager.AngelTempleMgr.CanEnterAngelTempleOnTime())
								{
									LogManager.WriteLog(LogTypes.Warning, string.Format("登陆时强制将天使神殿地图转为常规地图: MapCode={0}", roleDataEx.MapCode), null, true);
									resetMapCode = true;
								}
							}
							else if (sceneType == SceneUIClasses.KuaFuLueDuoView)
							{
								resetMapCode = true;
							}
							else
							{
								if (JunQiManager.GetLingDiIDBy2MapCode(roleDataEx.MapCode) >= 2)
								{
									LogManager.WriteLog(LogTypes.Warning, string.Format("登陆时强制将皇城或者领地地图转为常规地图: MapCode={0}", roleDataEx.MapCode), null, true);
								}
								SceneUIClasses sceneUIClasses = sceneType;
								if (sceneUIClasses == SceneUIClasses.KaLunTe || sceneUIClasses == SceneUIClasses.HuanShuYuan || sceneUIClasses == SceneUIClasses.YaoSaiWorld)
								{
									resetMapCode = true;
								}
							}
						}
						if (resetMapCode)
						{
							roleDataEx.MapCode = GameManager.MainMapCode;
							roleDataEx.PosX = 0;
							roleDataEx.PosY = 0;
						}
					}
					if (roleDataEx.MapCode <= 0)
					{
						roleDataEx.MapCode = GameManager.NewDefaultMapCode;
						roleDataEx.PosX = 0;
						roleDataEx.PosY = 0;
					}
					if (roleDataEx.PosX <= 0 || roleDataEx.PosY <= 0)
					{
						int defaultBirthPosX = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].DefaultBirthPosX;
						int defaultBirthPosY = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].DefaultBirthPosY;
						int defaultBirthRadius = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].BirthRadius;
						Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, roleDataEx.MapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
						roleDataEx.PosX = (int)newPos.X;
						roleDataEx.PosY = (int)newPos.Y;
						roleDataEx.RoleDirection = Global.GetRandomNumber(0, 8);
					}
					else if (Global.InObs(ObjectTypes.OT_CLIENT, roleDataEx.MapCode, roleDataEx.PosX, roleDataEx.PosY, 0, 0))
					{
						int defaultBirthPosX = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].DefaultBirthPosX;
						int defaultBirthPosY = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].DefaultBirthPosY;
						int defaultBirthRadius = GameManager.MapMgr.DictMaps[roleDataEx.MapCode].BirthRadius;
						Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, roleDataEx.MapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
						roleDataEx.PosX = (int)newPos.X;
						roleDataEx.PosY = (int)newPos.Y;
					}
					clientData.FuBenSeqID = fuBenSeqID;
					if (clientData.FuBenSeqID >= 0 && clientData.FuBenID < 0)
					{
						clientData.FuBenID = FuBenManager.FindFuBenIDByMapCode(clientData.MapCode);
					}
					clientData.TotalLearnedSkillLevelCount = 0;
					clientData.RoleXueWeiNum = Global.CalcJingMaiXueWeiNum(clientData);
					clientData.WanMoTaNextLayerOrder = GameManager.ClientMgr.GetWanMoTaPassLayerValue(gameClient);
					Global.InitRoleParamsInfo(gameClient);
					Global.UpdateMeditateTime(gameClient, TimeUtil.NOW());
					YueKaManager.CheckValid(gameClient);
					ChengJiuManager.InitRoleChengJiuData(gameClient);
					GameManager.StarConstellationMgr.InitPlayerStarConstellationPorperty(gameClient);
					GameManager.ChangeLifeMgr.InitPlayerChangeLifePorperty(gameClient);
					RebornManager.getInstance().OnLogin(gameClient, true);
					Global.QueryVipAwardFlagToDB(gameClient);
					Global.ProcessVipLevelUp(gameClient);
					DailyActiveManager.InitRoleDailyActiveData(gameClient);
					HuodongCachingMgr.OnJieriRoleLogin(gameClient, Global.SafeConvertToInt32(gameClient.ClientData.MyHuodongData.LastDayID), true);
					bool isFirstLogin = false;
					int dayID = TimeUtil.NowDateTime().DayOfYear;
					if (dayID != Global.SafeConvertToInt32(gameClient.ClientData.MyHuodongData.LastDayID))
					{
						isFirstLogin = true;
					}
					CaiJiLogic.InitRoleDailyCaiJiData(gameClient, true, isFirstLogin);
					HuanYingSiYuanManager.getInstance().InitRoleDailyHYSYData(gameClient);
					ChengJiuManager.OnRoleLogin(gameClient, Global.SafeConvertToInt32(gameClient.ClientData.MyHuodongData.LastDayID));
					BuildingManager.getInstance().OnRoleLogin(gameClient);
					Global.UpdateHeFuLoginFlag(gameClient);
					Global.UpdateHeFuTotalLoginFlag(gameClient);
					Global.UpdateRoleLoginRecord(gameClient);
					bool bIsCompleted = false;
					if (!gameClient.ClientData.DailyActiveDayLginSetFlag)
					{
						DailyActiveManager.ProcessLoginForDailyActive(gameClient, out bIsCompleted);
						if (!bIsCompleted)
						{
							DailyActiveManager.NotifyClientDailyActiveData(gameClient, -1, false);
						}
					}
					gameClient.ClientData.DailyActiveDayLginSetFlag = false;
					HuodongCachingMgr.ProcessDayOnlineSecs(gameClient, Global.SafeConvertToInt32(gameClient.ClientData.MyHuodongData.LastDayID));
					Global.UpdateWeekLoginNum(gameClient);
					Global.UpdateLimitTimeLoginNum(gameClient);
					Global.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, gameClient);
					Global.InitNewStep(gameClient);
					Global.RemoveAllInvalidTasks(gameClient);
					Global.ProcessTaskData(gameClient);
					Global.CheckGoodsDataValid(gameClient);
					RoleManager.getInstance().CheckSkillDataValid(gameClient);
					if (!GameManager.TestGamePerformanceMode || (!GameManager.TestGamePerformanceForAllUser && gameClient.strUserID != null && !gameClient.strUserID.StartsWith("mu")))
					{
						gameClient.UsingEquipMgr.RefreshEquips(gameClient);
					}
					if (GameManager.TestGamePerformanceMode)
					{
						Global.TestRoleRandomPosition(gameClient);
					}
					if (TCPCmdHandler.isUpdateFuBenData)
					{
						Global.ProcessUpdateFuBenData(gameClient);
					}
					Global.AddDefaultSkills(gameClient);
					Global.ProcessNumSkillID(gameClient, false);
					HuiJiManager.getInstance().OnInitGame(gameClient);
					ArmorManager.getInstance().OnInitGame(gameClient);
					BianShenManager.getInstance().OnInitGame(gameClient);
					DeControl.getInstance().OnInitGame(gameClient);
					Global.RefreshSkillForeverProps(gameClient);
					Global.RefreshEquipProp(gameClient);
					Global.UpdateHorseDataProps(gameClient, true);
					Global.CalcJingMaiBodyLevel(gameClient, -1);
					Global.UpdateJingMaiListProps(gameClient, true);
					Global.SetBuffDataForProp(gameClient);
					JunTuanManager.getInstance().OnInitGame(gameClient);
					ZuoQiManager.getInstance().InitRoleZuoQiData(gameClient);
					RebornEquip.getInstance().InitRoleRebornGoodsData(gameClient);
					MountHolyStampManager.getInstance().InitRoleHolyStampGoodsData(gameClient);
					gameClient.ClientData.RoleCommonUseIntPamams = Global.GetRoleCommonUseIntPamamValueList(gameClient);
					Global.InitCopyMap(gameClient);
					GameManager.systemGMCommands.OnClientLogin(gameClient);
					LuoLanFaZhenCopySceneManager.OnEnterFubenMap(gameClient, gameClient.ClientData.MapCode, true);
					UserMoneyMgr.getInstance().HandleClientChargeItem(gameClient, 1);
					if (!GameManager.ClientMgr.AddClient(gameClient))
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("角色已在客户角色列表中,强制断开连接.角色名:{0}", Global.FormatRoleName(gameClient, gameClient.ClientData.RoleName)), null, true);
						return TCPProcessCmdResults.RESULT_FAILED;
					}
					string roleName;
					if (KuaFuManager.KuaFuWorldKuaFuGameServer)
					{
						roleName = Global.FormatRoleNameWithPtName(gameClient);
					}
					else if (socket.IsKuaFuLogin)
					{
						roleName = Global.FormatRoleNameWithZoneId(gameClient);
					}
					else
					{
						roleName = Global.FormatRoleName(gameClient, gameClient.ClientData.RoleName);
					}
					if (string.IsNullOrEmpty(roleName))
					{
						tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(new RoleData
						{
							RoleID = -40,
							BodyCode = 15
						}, pool, nID);
						socket.session.SetSocketTime(5);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					RoleName2IDs.AddRoleName(roleName, gameClient.ClientData.RoleID);
					Global.InitRoleDailyTaskData(gameClient, isFirstLogin);
					EventLogManager.AddRoleInitGameEvent(gameClient, hid);
					Global.InitJieriChengHao(gameClient, false);
					Global.InitRoleDayActivityPoint(gameClient);
					Global.UpdatePushMessageInfo(gameClient, gameClient.ClientData.PushMessageID);
					gameClient.ClientData.LifeV = (int)RoleAlgorithm.GetMaxLifeV(gameClient);
					gameClient.ClientData.MagicV = (int)RoleAlgorithm.GetMaxMagicV(gameClient);
					if (gameClient.ClientData.IsFlashPlayer == 1)
					{
						gameClient.ClientData.CurrentLifeV = roleDataEx.LifeV;
						gameClient.ClientData.CurrentMagicV = roleDataEx.MagicV;
					}
					if (gameClient.ClientData.LoginNum <= 0)
					{
						MUWingsManager.InitFirstWing(gameClient);
						Global.UpdateRoleParamByName(gameClient, "CallPetFreeTime", Global.GetOffsetSecond(TimeUtil.NowDateTime()).ToString(), true);
					}
					if (GameManager.MagicSwordMgr.IsFirstLoginMagicSword(gameClient, Math.Min(2, MagicSwordData.InitChangeLifeCount)))
					{
						if (!GameManager.MagicSwordMgr.InitMagicSwordInfo(gameClient, (EMagicSwordTowardType)gameClient.ClientData.MagicSwordParam))
						{
							LogManager.WriteLog(LogTypes.Error, string.Format("创建魔剑士初始化失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
							return TCPProcessCmdResults.RESULT_FAILED;
						}
					}
					if (GameManager.SummonerMgr.IsFirstLoginSummoner(gameClient, Math.Min(2, SummonerData.InitChangeLifeCount)))
					{
						if (!GameManager.SummonerMgr.InitSummonerInfo(gameClient))
						{
							LogManager.WriteLog(LogTypes.Error, string.Format("创建召唤师初始化失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
							return TCPProcessCmdResults.RESULT_FAILED;
						}
					}
					Global.AutoLearnSkills(gameClient);
					TalentManager.initTalentEffectProp(gameClient);
					SingletonTemplate<SoulStoneManager>.Instance().CheckOpen(gameClient);
					GameManager.FluorescentGemMgr.OnLogin(gameClient);
					Global.FixRoleSomeData(gameClient);
					YaoSaiMissionManager.getInstance().GetRoleMissionDataList(gameClient.ClientData.RoleID);
					ShenShiManager.getInstance().InitRoleShenShiData(gameClient);
					JueXingManager.getInstance().InitRoleJueXingData(gameClient);
					ChengJiuManager.initSetAchievementRuneProps(gameClient);
					PrestigeMedalManager.initSetPrestigeMedalProps(gameClient);
					UnionPalaceManager.initSetUnionPalaceProps(gameClient, true);
					ShenQiManager.InitRoleShenQiData(gameClient);
					LingYuManager.UpdateLingYuProps(gameClient);
					MarriageOtherLogic.getInstance().UpdateRingAttr(gameClient, false, true);
					HolyItemManager.getInstance().UpdateAllHolyItemAttr(gameClient);
					TarotManager.getInstance().UpdataPalyerTarotAttr(gameClient);
					ZhuLingZhuHunManager.UpdateZhuLingZhuHunProps(gameClient);
					SingletonTemplate<TuJianManager>.Instance().UpdateTuJianProps(gameClient);
					SingletonTemplate<GuardStatueManager>.Instance().OnLogin(gameClient);
					Global.QueryToDBRoleMoJingExchangeInfo(gameClient);
					WanMotaCopySceneManager.GetWanMoTaDetail(gameClient, true);
					Global.ProcessUpdateFuBenData(gameClient);
					CGetOldResourceManager.InitRoleOldResourceInfo(gameClient, isFirstLogin);
					MarriageOtherLogic.getInstance().ChangeDayUpdate(gameClient, isFirstLogin);
					if (isFirstLogin)
					{
						MarryPartyLogic.getInstance().MarryPartyJoinListClear(gameClient, false);
					}
					GameManager.MerlinMagicBookMgr.OnLoginInitMerlinMagicBook(gameClient);
					GameManager.MerlinMagicBookMgr.OnLoginAddAttr(gameClient);
					JingLingYuanSuJueXingManager.getInstance().RefreshProps(gameClient, false);
					if (GameManager.Flag_OptimizationBagReset)
					{
						Global.ResetBagAllGoods(gameClient, false);
					}
					GlobalEventSource.getInstance().fireEvent(new PlayerInitGameEventObject(gameClient));
					GlobalEventSource.getInstance().fireEvent(new PlayerInitGameAsyncEventObject(gameClient));
					KuaFuManager.getInstance().NotifyClientCannotJoinKuaFuCopyEndTicks(gameClient);
					TenRetutnManager.getInstance().GiveAwards(gameClient);
					PetSkillManager.UpdateRolePetSkill(gameClient);
					AllyManager.getInstance().UnionAllyInit(gameClient);
					GVoiceManager.getInstance().SendGVoiceInitData(gameClient);
					leftSecs = 0;
					if (BanManager.IsBanRoleName(Global.FormatRoleName(gameClient, gameClient.ClientData.RoleName), out leftSecs) > 0)
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, gameClient, StringUtil.substitute(GLang.GetLang(583, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.HintAndBox, 0);
						LogManager.WriteLog(LogTypes.Error, string.Format("登陆时判断用户角色: {0} 在禁止登录列表中，强制断开连接...", Global.FormatRoleName(gameClient, gameClient.ClientData.RoleName)), null, true);
						return TCPProcessCmdResults.RESULT_FAILED;
					}
					socket.session.SetSocketTime(3);
					gameClient.ClientData.LastLoginTime = TimeUtil.NowDateTime();
					GameManager.ClientMgr.GetEquipPropsStr(gameClient);
					try
					{
						string ip = RobotTaskValidator.getInstance().GetIp(gameClient);
						string analysisLog = string.Format("login server={0} account={1} player={2} level={3} map={4} exp={5} dev_id={6} platform={7} viplevel={8} port={9} regtick={10} yueyu={11} model={12} os={13} guest={14} rname={15} ce={16} zoneid={17} temprid={18}", new object[]
						{
							GameManager.ServerId,
							gameClient.strUserID,
							gameClient.ClientData.LocalRoleID,
							Global.GetUnionLevel2(gameClient.ClientData.ChangeLifeCount, gameClient.ClientData.Level),
							gameClient.ClientData.MapCode,
							ip,
							string.IsNullOrEmpty(gameClient.deviceID) ? "" : gameClient.deviceID,
							GameCoreInterface.getinstance().GetPlatformType().ToString(),
							gameClient.ClientData.VipLevel,
							((IPEndPoint)socket.RemoteEndPoint).Port.ToString(),
							gameClient.ClientData.RegTime * 10000L,
							isYueYu,
							gameClient.deviceModel,
							gameClient.deviceOSVersion,
							gameClient.ClientSocket.session.IsGuest,
							gameClient.ClientData.RoleName,
							gameClient.ClientData.CombatForce,
							gameClient.ClientData.ZoneID,
							gameClient.ClientData.RoleID
						});
						LogManager.WriteLog(LogTypes.Analysis, analysisLog, null, true);
						RobotTaskValidator.getInstance().BanYueYu(gameClient, hid);
					}
					catch
					{
					}
					RoleData roleData = Global.ClientToRoleData1(gameClient);
					Global.SetUintProp(gameClient, roleData);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(roleData, pool, (int)cmd);
					return TCPProcessCmdResults.RESULT_DATA;
				}
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E0D RID: 15885 RVA: 0x00356B68 File Offset: 0x00354D68
		private static TCPProcessCmdResults ProcessTimeSyncGameCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				long clientTicks = Convert.ToInt64(fields[1]);
				long serverTicks = TimeUtil.NOW() * 10000L;
				string strcmd = string.Format("{0}:{1}:{2}", roleID, clientTicks, serverTicks);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E0E RID: 15886 RVA: 0x00356CA4 File Offset: 0x00354EA4
		private static TCPProcessCmdResults ProcessTimeSyncGameByClientCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			if (Data.SyncTimeByClient >= 100L)
			{
				try
				{
					string cmdData = new UTF8Encoding().GetString(data, 0, count);
					string[] fields = cmdData.Split(new char[]
					{
						':'
					});
					if (fields.Length != 2)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
						return TCPProcessCmdResults.RESULT_FAILED;
					}
					int roleID = Convert.ToInt32(fields[0]);
					long clientTicks = Convert.ToInt64(fields[1]);
					long serverTicks = TimeUtil.NOW() * 10000L;
					string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						roleID,
						clientTicks,
						serverTicks,
						Data.SyncTimeByClient
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				catch (Exception ex)
				{
					LogManager.WriteExceptionUseCache(ex.ToString());
				}
			}
			return TCPProcessCmdResults.RESULT_OK;
		}

		// Token: 0x06003E0F RID: 15887 RVA: 0x00356DDC File Offset: 0x00354FDC
		private static TCPProcessCmdResults ProcessClientLogCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				string log = Convert.ToBase64String(data, Base64FormattingOptions.None);
				GameManager.SystemClientLogsEvents.AddEvent(log, EventLevels.Important);
			}
			catch (Exception ex)
			{
				LogManager.WriteLog(LogTypes.Exception, ex.ToString(), null, true);
			}
			return TCPProcessCmdResults.RESULT_OK;
		}

		// Token: 0x06003E10 RID: 15888 RVA: 0x00356E34 File Offset: 0x00355034
		private static TCPProcessCmdResults ProcessClientPushVersionCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int codeRevision = Convert.ToInt32(fields[1]);
				int mainExeVer = Global.SafeConvertToInt32(fields[2]);
				int resVer = Global.SafeConvertToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (null != client)
				{
					client.CodeRevision = codeRevision;
					client.MainExeVer = mainExeVer;
					client.ResVer = resVer;
				}
				int needMainExeVer = 0;
				int needResVer = 0;
				int forceUpdate = GameManager.GameConfigMgr.GetGameConfigItemInt("force-update", 0);
				if (forceUpdate > 0)
				{
					int forceHintAppVer = GameManager.GameConfigMgr.GetGameConfigItemInt("hint-appver", 0);
					if (mainExeVer < forceHintAppVer)
					{
						needMainExeVer = forceHintAppVer;
					}
					else
					{
						int forceHintResVer = GameManager.GameConfigMgr.GetGameConfigItemInt("hint-resver", 0);
						if (resVer < forceHintResVer)
						{
							needResVer = forceHintResVer;
						}
					}
				}
				if (needMainExeVer > 0 || needResVer > 0)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(TCPOutPacketPool.getInstance(), string.Format("{0}:{1}:{2}", codeRevision, needMainExeVer.ToString(), needResVer.ToString()), nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E11 RID: 15889 RVA: 0x00357054 File Offset: 0x00355254
		private static TCPProcessCmdResults ProcessNotifyShowGonggaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (null == client)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GongGaoDataManager.CheckGongGaoInfo(client, nID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E12 RID: 15890 RVA: 0x00357194 File Offset: 0x00355394
		private static TCPProcessCmdResults ProcessStartPlayGameCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientData.CurrentLifeV <= 0)
				{
					client.ClientData.CurrentLifeV = client.ClientData.LifeV;
				}
				if (!GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode].MoveObject(-1, -1, client.ClientData.PosX, client.ClientData.PosY, client))
				{
				}
				lock (client.ClientData.MapCodeAlreadyList)
				{
					if (!client.ClientData.MapCodeAlreadyList.Contains(client.ClientData.MapCode))
					{
						client.ClientData.MapCodeAlreadyList.Add(client.ClientData.MapCode);
					}
				}
				client.SceneType = (int)Global.GetMapSceneType(client.ClientData.MapCode);
				long nowTicks = TimeUtil.NOW();
				Global.SetLastDBCmdTicks(client, 10004, nowTicks);
				Global.SetLastDBCmdTicks(client, 10003, nowTicks);
				Global.SetLastDBCmdTicks(client, 10002, nowTicks);
				client.ClientData.EnterMapTicks = nowTicks;
				client.ClearVisibleObjects(false);
				Global.GetLastBattleInfo(client);
				Global.ComputeNPCTaskState(client);
				GameManager.ClientMgr.NotifySelfOnHorse(client);
				GameManager.ClientMgr.NotifySelfPetShow(client);
				Global.RefreshEquipProp(client);
				Global.UpdateHorseDataProps(client, true);
				Global.UpdateJingMaiListProps(client, true);
				if (!Global.CanMapRideHorse(client.ClientData.MapCode))
				{
					ZuoQiManager.getInstance().RoleDisMount(client, true);
				}
				client.ChangeGrid();
				if (MoYuLongXue.InMoYuMap(client.ClientData.MapCode))
				{
					int bossCount = MoYuLongXue.GetBossLeftCount();
					client.sendCmd<int>(1907, bossCount, false);
				}
				Global.sendToDB<int, FastCacheData>(694, new FastCacheData
				{
					ID = client.ClientData.RoleID,
					Flag_BaseInfo = true,
					ZhanLi = (long)client.ClientData.CombatForce,
					Position = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						client.ClientData.MapCode,
						4,
						client.ClientData.PosX,
						client.ClientData.PosY
					})
				}, client.ServerId);
				if (client.ClientData.FirstPlayStart)
				{
					client.ClientData.FirstPlayStart = false;
					PerformanceTest.InitForTestMode(client);
					GameManager.BulletinMsgMgr.SendAllBulletinMsg(client);
					if (!client.ClientSocket.IsKuaFuLogin)
					{
						if (client.ClientData.SaleGoodsDataList.Count > 0)
						{
							SaleRoleManager.AddSaleRoleItem(client);
						}
						LiXianBaiTanManager.DelFakeRoleByClient(client);
						LiXianBaiTanManager.GetBackLiXianSaleLeftTicks(client);
						LiXianBaiTanManager.RemoveLiXianSaleGoodsItems(client);
						if (client.ClientData.SaleGoodsDataList.Count > 0)
						{
							SaleGoodsManager.AddSaleGoodsItems(client);
							client.ClientData.AllowMarketBuy = true;
						}
						GoodsUtil.ProcessMeditateGoods(client);
						GameManager.ClientMgr.NotifyGetMeditateAward(client);
					}
					Global.InitTempBuffer(client);
					Global.TryToActiveNewWuXueBuffer(client, false);
					Global.GiveGuMuTimeLimitAward(client);
					PopupWinMgr.ProcessClientPopupWins(client);
					Global.ResetBaseBattleAttributesOfLastTime(client);
					if (client.ClientData.LoginNum <= 0)
					{
						Global.AutoGiveNewRoleGoods(client);
						Global.AutoGiveNewRoleOtherValues(client);
						client.ClientData.AutoFightGetThings = (int)((long)Math.Pow(2.0, 32.0) - 1L);
						Global.SaveRoleParamsInt32ValueToDB(client, "FightGetThings", client.ClientData.AutoFightGetThings, true);
					}
					client.ClientData.LoginNum++;
					GameManager.DBCmdMgr.AddDBCmd(10015, string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						client.ClientData.RoleID,
						GameManager.ServerLineID,
						client.ClientData.LoginNum,
						Global.GetSocketRemoteIP(client, false)
					}), null, client.ServerId);
					ChengJiuManager.NotifyClientChengJiuData(client, -1);
					LuoLanChengZhanManager.getInstance().NotifyClientWangChengMapInfoData(client);
					BroadcastInfoMgr.LoginBroadcastInfos(client);
					Global.BroadcastHuangDiLoginHint(client);
					Global.BroadcastPkKingLoginHint(client);
					GameManager.ShengXiaoGuessMgr.ClientEnter(client);
					Global.ProcessRedNamePunishForDebuff(client);
					MarriageOtherLogic.getInstance().PlayGameAfterSend(client);
					MarryPartyLogic.getInstance().SendMarryPartyJoinList(client);
					UserReturnManager.getInstance().initUserReturnData(client);
					OlympicsManager.getInstance().CheckTip(client);
					FundManager.initFundData(client);
					TalentManager.initTalentEffectProp(client);
					HolyItemManager.getInstance().PlayGameAfterSend(client);
					SingletonTemplate<SevenDayActivityMgr>.Instance().OnLogin(client);
					SingletonTemplate<TradeBlackManager>.Instance().UpdateObjectExtData(client);
					SpecialActivity specAct = HuodongCachingMgr.GetSpecialActivity();
					if (null != specAct)
					{
						specAct.NotifyActivityState(client);
					}
					EverydayActivity everyAct = HuodongCachingMgr.GetEverydayActivity();
					if (null != everyAct)
					{
						everyAct.NotifyActivityState(client);
					}
					SpecPriorityActivity spAct = HuodongCachingMgr.GetSpecPriorityActivity();
					if (null != spAct)
					{
						spAct.NotifyActivityState(client);
					}
					UserMoneyMgr.getInstance().NotifyActivityState(client);
					OneDollarBuyActivity odbAct = HuodongCachingMgr.GetOneDollarBuyActivity();
					if (null != odbAct)
					{
						odbAct.OnRoleLogin(client);
					}
					OneDollarChongZhi odczAct = HuodongCachingMgr.GetOneDollarChongZhiActivity();
					if (null != odczAct)
					{
						odczAct.OnRoleLogin(client);
					}
					InputFanLiNew iflAct = HuodongCachingMgr.GetInputFanLiNewActivity();
					if (null != iflAct)
					{
						iflAct.OnRoleLogin(client);
					}
					JieriSuperInputActivity jrsiAct = HuodongCachingMgr.GetJieRiSuperInputActivity();
					if (null != jrsiAct)
					{
						jrsiAct.OnRoleLogin(client);
					}
					UserRegressActiveManager.getInstance().RoleOnlineHandler(client);
					SingletonTemplate<ZhengBaManager>.Instance().OnLogin(client);
					SingletonTemplate<SpeedUpTickCheck>.Instance().OnLogin(client);
					SingletonTemplate<CoupleArenaManager>.Instance().OnClientLogin(client);
					AoYunDaTiManager.getInstance().NotifyActivityState(client);
					ZhuanPanManager.getInstance().NotifyActivityState(client);
					ShenJiFuWenManager.getInstance().OnLogin(client);
					AlchemyManager.getInstance().OnLogin(client);
					EraManager.getInstance().OnLogin(client);
					BoCaiManager.getInstance().BoCaiPriorityActivity(client);
					LingDiCaiJiManager.getInstance().OnLogin(client);
					LangHunLingYuManager.getInstance().OnLogin(client);
					ZuoQiManager.getInstance().OnLogin(client);
					int check = Global.GetRoleParamsInt32FromDB(client, "10167");
					if (check == 1)
					{
						if (WebOldPlayerManager.getInstance().ChouJiangAddCheck(client.ClientData.RoleID, 0))
						{
							Global.SaveRoleParamsInt32ValueToDB(client, "10167", 2, true);
						}
					}
					GlobalEventSource.getInstance().fireEvent(new PlayerLoginGameEventObject(client));
					if (TwLogManager.GetProductID() != "" && TwLogManager.GetProductID() != "0")
					{
						string uID = TwLogManager.GetUserID(client.strUserID);
						string ip = Global.GetSocketRemoteIP(client, false);
						int index = ip.IndexOf(':');
						if (index > 0)
						{
							ip = ip.Substring(0, index);
						}
						string time = TimeUtil.ConvertDateTimeInt(TimeUtil.NowDateTime()).ToString();
						string uName = TwLogManager.GetUserID(client.strUserID);
						string proID = TwLogManager.GetProductID();
						string serverID = TwLogManager.GetServerID();
						string log = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}", new object[]
						{
							uID,
							roleID,
							uName,
							ip,
							time,
							proID,
							serverID
						});
						TwLogManager.WriteLog(TwLogType.RoleLogin, log);
					}
				}
				GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
				GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
				GameManager.ClientMgr.NotifySelfLifeChanged(tcpMgr.MySocketListener, pool, client);
				client.ClientData.WaitingForChangeMap = false;
				SceneUIClasses sceneType = Global.GetMapSceneType(client.ClientData.MapCode);
				SceneUIClasses sceneUIClasses = sceneType;
				if (sceneUIClasses != SceneUIClasses.AngelTemple)
				{
					if (sceneUIClasses == SceneUIClasses.ThemeZSSL)
					{
						ZhuanShengShiLian.OnEnterScene(client);
					}
				}
				else
				{
					GameManager.AngelTempleMgr.OnEnterScene(client);
				}
				client.ClientData.SceneType = sceneType;
				client.ClientData.SceneMapCode = client.ClientData.MapCode;
				ClientManager.DoSpriteMapGridMove(client, 0);
				client._IconStateMgr.LoginGameFlushIconState(client);
				CopyTargetManager.ProcessInitGame(client);
				client.ExecuteEnterMap(client.ClientData.MapCode);
				int forceHintAppVer = GameManager.GameConfigMgr.GetGameConfigItemInt("hint-appver", 0);
				if (client.MainExeVer > 0 && client.MainExeVer < forceHintAppVer)
				{
					int forceUpdate = GameManager.GameConfigMgr.GetGameConfigItemInt("force-update", 0);
					if (forceUpdate > 0)
					{
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(584, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 42);
					}
				}
				else if (client.ResVer > 0)
				{
					int forceHintResVer = GameManager.GameConfigMgr.GetGameConfigItemInt("hint-resver", 0);
					if (client.ResVer < forceHintResVer)
					{
						int forceUpdate = GameManager.GameConfigMgr.GetGameConfigItemInt("force-update", 0);
						if (forceUpdate > 0)
						{
							GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(585, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 43);
						}
					}
				}
				WorldLevelManager.getInstance().UpddateWorldLevelBuff(client);
				LuoLanChengZhanManager.getInstance().OnStartPlayGame(client);
				KingOfBattleManager.getInstance().OnStartPlayGame(client);
				RobotTaskValidator.getInstance().SendTaskListKey(client);
				client.ClientEffectHideFlag1 = 0;
				socket.session.SetSocketTime(4);
				client.SumDamageForCopyTeam = 0L;
				if (client.ClientSocket.IsKuaFuLogin)
				{
					KuaFuManager.getInstance().OnStartPlayGame(client);
				}
				GameManager.loginWaitLogic.RemoveAllow(client.strUserID);
				GlobalEventSource.getInstance().fireEvent(new OnStartPlayGameEventObject(client));
				ClientCmdCheck.RecordClientPosition(client);
				string strcmd = string.Format("{0}", roleID);
				client.sendCmd(nID, strcmd, false);
				client.SendCmdOnStartPlayGame();
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E13 RID: 15891 RVA: 0x00357D90 File Offset: 0x00355F90
		private static TCPProcessCmdResults ProcessSpriteMoveCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			SpriteMoveData cmdData = null;
			try
			{
				cmdData = DataHelper.BytesToObject2<SpriteMoveData>(data, 0, count, socket.m_Socket);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<SpriteMoveData>(data, 0, count, socket.m_Socket);
				if (null == cmdData)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令解析错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = cmdData.roleID;
				int mapCode = cmdData.mapCode;
				int action = cmdData.action;
				int toX = cmdData.toX;
				int toY = cmdData.toY;
				int extAction = cmdData.extAction;
				int fromX = cmdData.fromX;
				int fromY = cmdData.fromY;
				long startMoveTicks = cmdData.startMoveTicks;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (mapCode != client.ClientData.MapCode)
				{
					client.CheckCheatData.MismatchingMapCode = true;
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.WaitingForChangeMap)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (GameManager.FlagCheckCmdPosition > 0)
				{
					GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);
					if (null == gameMap)
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (-1 != toX && -1 != toY && !Global.IsGridReachable(mapCode, toX / gameMap.MapGridWidth, toY / gameMap.MapGridHeight))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				if (client.ClientData.DSHideStart > 0L)
				{
					Global.RemoveBufferData(client, 41);
					client.ClientData.DSHideStart = 0L;
					GameManager.ClientMgr.NotifyDSHideCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
				}
				Global.EndMeditate(client);
				CaiJiLogic.CancelCaiJiState(client);
				client.ClientData.MoveAndActionNum++;
				string pathString = cmdData.pathString;
				if (Data.IgnoreClientPos)
				{
					GameManager.ClientMgr.StopClientStoryboard(client, cmdData.startMoveTicks, -1, -1);
				}
				else
				{
					GameManager.ClientMgr.StopClientStoryboard(client, -1);
				}
				client.ClientData.RolePathString = pathString;
				client.ClientData.RoleStartMoveTicks = startMoveTicks;
				if (client.RoleMagicHelper.GetFreeze())
				{
					ClientCmdCheck.ClientStopMove(client, fromX, fromY, startMoveTicks);
					return TCPProcessCmdResults.RESULT_OK;
				}
				double moveCost = RoleAlgorithm.GetMoveSpeed(client);
				if (client.ClientData.HorseDbID > 0)
				{
					double horseSpeed = Global.GetHorseSpeed(client);
					moveCost += horseSpeed;
				}
				client.ClientData.CurrentAction = action;
				client.ClientData.MoveSpeed = moveCost;
				string unZipPathString = DataHelper.UnZipStringToBase64(pathString);
				if (!ClientCmdCheck.ValidateClientMoveStartTicks(client, startMoveTicks))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if ((double)(TimeUtil.NOW() - client.ClientData.InstantMoveTick) < 500.0)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				List<Point> path = Global.TransStringToPathArr(unZipPathString);
				bool stepMove;
				if (!ClientCmdCheck.SpriteMoveCmd(client, fromX, fromY, toX, toY, startMoveTicks, moveCost, path, out stepMove))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!GameManager.ClientMgr.StartClientStoryboard(client, startMoveTicks, path, stepMove))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				SpriteNotifyOtherMoveData moveData = new SpriteNotifyOtherMoveData();
				moveData.roleID = client.ClientData.RoleID;
				moveData.moveCost = moveCost;
				moveData.mapCode = mapCode;
				client.sendCmd<SpriteNotifyOtherMoveData>(nID, moveData, false);
				moveData.action = action;
				moveData.toX = toX;
				moveData.toY = toY;
				moveData.extAction = extAction;
				moveData.fromX = fromX;
				moveData.fromY = fromY;
				moveData.startMoveTicks = startMoveTicks;
				moveData.pathString = client.ClientData.RolePathString;
				GameManager.ClientMgr.NotifyOthersMyMoving(tcpMgr.MySocketListener, pool, moveData, client, nID, null);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E14 RID: 15892 RVA: 0x0035827C File Offset: 0x0035647C
		private static TCPProcessCmdResults ProcessSpriteMoveEndCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			SCMoveEnd cmdData = null;
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<SCMoveEnd>(data, 0, count, socket.m_Socket);
				if (!CheckHelper.CheckTCPCmdHandle<SCMoveEnd>(socket, nID, data, count, out cmdData))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = cmdData.RoleID;
				int mapCode = cmdData.MapCode;
				int toX = cmdData.ToMapX;
				int toY = cmdData.ToMapY;
				int direction = cmdData.ToDiection;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (mapCode != client.ClientData.MapCode)
				{
					client.CheckCheatData.MismatchingMapCode = true;
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (GameManager.FlagCheckCmdPosition > 0)
				{
					GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);
					if (null == gameMap)
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (-1 != toX && -1 != toY && !Global.IsGridReachable(mapCode, toX / gameMap.MapGridWidth, toY / gameMap.MapGridHeight))
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("ProcessSpriteMoveEndCmd Faild RoleID = {0}, MapCode = {1}, toX = {2}, toY = {3}", new object[]
						{
							roleID,
							mapCode,
							toX,
							toY
						}), null, true);
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				if (!ClientCmdCheck.ClientCheck(client))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				cmdData.clientTicks = ClientCmdCheck.GetClientTicks(client, cmdData.clientTicks);
				ClientCmdCheck.ClientStopMove(client, toX, toY, cmdData.clientTicks);
				int oldToX = toX;
				int oldToY = toY;
				if (Data.IgnoreClientPos)
				{
					if (!GameManager.ClientMgr.StopClientStoryboard(client, cmdData.clientTicks, cmdData.ToMapX, cmdData.ToMapY))
					{
						LogManager.WriteLog(LogTypes.Check, string.Format("ProcessSpriteMoveEndCmd Faild2 RoleID = {0}, MapCode = {1}, toX = {2}, toY = {3}", new object[]
						{
							roleID,
							mapCode,
							toX,
							toY
						}), null, true);
						toX = client.ClientData.PosX;
						toY = client.ClientData.PosY;
					}
				}
				else
				{
					GameManager.ClientMgr.StopClientStoryboard(client, -1);
				}
				int newToX = toX;
				int newToY = toY;
				if (newToX != toX || newToY != toY)
				{
					toX = newToX;
					toY = newToY;
				}
				bool flag = oldToX != toX || oldToY != toY;
				int oldX = client.ClientData.PosX;
				int oldY = client.ClientData.PosY;
				if (!Data.IgnoreClientPos)
				{
					client.ClientData.PosX = toX;
					client.ClientData.PosY = toY;
				}
				client.ClientData.RoleDirection = direction;
				client.ClientData.ReportPosTicks = 0L;
				if (oldX != toX || oldY != toY)
				{
					if (!GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode].MoveObject(oldX, oldY, client.ClientData.PosX, client.ClientData.PosY, client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				client.ClientData.CurrentAction = 0;
				client.ClientData.MoveSpeed = 1.0;
				client.ClientData.DestPoint = new Point((double)toX, (double)toY);
				ClientManager.DoSpriteMapGridMove(client, 0);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E15 RID: 15893 RVA: 0x00358698 File Offset: 0x00356898
		private static TCPProcessCmdResults ProcessSpriteStopMoveCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int stopIndex = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (Data.IgnoreClientPos)
				{
					GameManager.ClientMgr.StopClientStoryboard(client, ClientCmdCheck.GetClientTicks(client, 0L), -1, -1);
				}
				else
				{
					GameManager.ClientMgr.StopClientStoryboard(client, stopIndex);
				}
				GameManager.ClientMgr.NotifyOthersStopMyMoving(tcpMgr.MySocketListener, pool, client, stopIndex, null);
				if (client.ClientData.TrackingRoleIDList.Count != 0)
				{
					GameManager.ClientMgr.NotifyOthersMyMovingEnd(tcpMgr.MySocketListener, pool, client, client.ClientData.MapCode, 0, client.ClientData.PosX, client.ClientData.PosY, client.ClientData.RoleDirection, 0, false, null);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E16 RID: 15894 RVA: 0x003588B8 File Offset: 0x00356AB8
		private static TCPProcessCmdResults ProcessSpriteMove2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 12)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ownerRoleID = Convert.ToInt32(fields[0]);
				int toRoleID = Convert.ToInt32(fields[1]);
				int mapCode = Convert.ToInt32(fields[2]);
				int action = Convert.ToInt32(fields[3]);
				int toX = Convert.ToInt32(fields[4]);
				int toY = Convert.ToInt32(fields[5]);
				int extAction = Convert.ToInt32(fields[6]);
				int fromX = Convert.ToInt32(fields[7]);
				int fromY = Convert.ToInt32(fields[8]);
				long startMoveTicks = Convert.ToInt64(fields[9]);
				int roleType = Convert.ToInt32(fields[10]);
				string pathString = fields[11];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != ownerRoleID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据TMSKSocket定位GameClient对象失败, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (toRoleID < 2134900736)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵或者镖车，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int biaoCheID = -1;
				BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(ownerRoleID);
				if (null != biaoCheItem)
				{
					biaoCheID = biaoCheItem.BiaoCheID;
				}
				if (toRoleID != client.ClientData.PetRoleID && toRoleID != biaoCheID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵或者镖车，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (roleType == 4)
				{
					client.ClientData.PetPosX = fromX;
					client.ClientData.PetPosY = fromY;
					client.ClientData.ReportPetPosTicks = startMoveTicks;
					GameManager.ClientMgr.NotifyOthersToMoving(tcpMgr.MySocketListener, pool, null, mapCode, client.ClientData.CopyMapID, toRoleID, startMoveTicks, client.ClientData.PetPosX, client.ClientData.PetPosY, action, toX, toY, 107, 1.1, pathString, null);
				}
				else if (roleType == 5)
				{
					if (null != biaoCheItem)
					{
						if (biaoCheItem.MapCode == mapCode)
						{
							biaoCheItem.PosX = fromX;
							biaoCheItem.PosY = fromY;
							biaoCheItem.ReportPosTicks = startMoveTicks;
							GameManager.ClientMgr.NotifyOthersToMoving(tcpMgr.MySocketListener, pool, null, mapCode, client.ClientData.CopyMapID, toRoleID, startMoveTicks, biaoCheItem.PosX, biaoCheItem.PosY, action, toX, toY, 107, 0.7, pathString, null);
						}
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E17 RID: 15895 RVA: 0x00358C58 File Offset: 0x00356E58
		private static TCPProcessCmdResults ProcessSpritePosCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			SpritePositionData cmdData = null;
			try
			{
				cmdData = DataHelper.BytesToObject2<SpritePositionData>(data, 0, count, socket.m_Socket);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<SpritePositionData>(data, 0, count, socket.m_Socket);
				if (null == cmdData)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数解析错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = cmdData.roleID;
				int mapCode = cmdData.mapCode;
				int toX = cmdData.toX;
				int toY = cmdData.toY;
				long currentPosTicks = cmdData.currentPosTicks;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				lock (VideoLogic.getInstance().Mutex)
				{
					if (0 != client.ClientData.BeTrackingRoleID)
					{
						GameClient BeTrackingClient = GameManager.ClientMgr.FindClient(client.ClientData.BeTrackingRoleID);
						if (client.ClientData.HideGM > 0 && BeTrackingClient != null && BeTrackingClient.ClientData.MapCode == client.ClientData.MapCode)
						{
							toX = BeTrackingClient.ClientData.PosX;
							toY = BeTrackingClient.ClientData.PosY;
						}
					}
				}
				if (client.ClientData.LastClientHeartTicks < TimeUtil.NOW() - 60000L)
				{
					int regUserID = Global.RegisterUserIDToDBServer(client.strUserID, 1, socket.ServerId, ref socket.session.LastLogoutServerTicks);
					if (regUserID > 0)
					{
						client.ClientData.LastClientHeartTicks = TimeUtil.NOW();
					}
				}
				if (mapCode != client.ClientData.MapCode)
				{
					client.CheckCheatData.MismatchingMapCode = true;
					return TCPProcessCmdResults.RESULT_OK;
				}
				client.CheckCheatData.MismatchingMapCode = false;
				if (GameManager.Update9GridUsingPosition > 0)
				{
					ClientManager.DoSpriteMapGridMove(client, 1);
				}
				long nowTicks = TimeUtil.NOW();
				ClientCmdCheck.ClientPosition(client, toX, toY, ClientCmdCheck.GetClientTicks(client, 0L));
				if (currentPosTicks > 0L)
				{
					if (Data.IgnoreClientPos)
					{
						GameManager.ClientMgr.StopClientStoryboard(client, currentPosTicks, -1, -1);
					}
					else
					{
						GameManager.ClientMgr.StopClientStoryboard(client, -1);
						int check_cmd_position = GameManager.GameConfigMgr.GetGameConfigItemInt("check_cmd_position", 1);
						if (check_cmd_position > 0)
						{
							GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);
							if (null == gameMap)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							if (-1 != toX && -1 != toY && !Global.IsGridReachable(mapCode, toX / gameMap.MapGridWidth, toY / gameMap.MapGridHeight))
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
						}
						int oldX = client.ClientData.PosX;
						int oldY = client.ClientData.PosY;
						if (oldX != toX || oldY != toY)
						{
							if (!GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode].MoveObject(oldX, oldY, toX, toY, client))
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
						}
						client.ClientData.PosX = toX;
						client.ClientData.PosY = toY;
					}
					client.ClientData.ReportPosTicks = currentPosTicks;
					client.ClientData.ServerPosTicks = nowTicks;
					GameManager.ClientMgr.JugeSpriteDead(tcpMgr.MySocketListener, pool, client);
				}
				else if (currentPosTicks == 0L)
				{
					client.ClientData.ServerPosTicks = nowTicks;
					string strcmd = string.Format("{0}:{1}", roleID, 1.0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E18 RID: 15896 RVA: 0x00359158 File Offset: 0x00357358
		private static TCPProcessCmdResults ProcessSpritePetPosCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 7)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ownerRoleID = Convert.ToInt32(fields[0]);
				int toRoleID = Convert.ToInt32(fields[1]);
				int mapCode = Convert.ToInt32(fields[2]);
				int toX = Convert.ToInt32(fields[3]);
				int toY = Convert.ToInt32(fields[4]);
				long currentPosTicks = Convert.ToInt64(fields[5]);
				int roleType = Convert.ToInt32(fields[6]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != ownerRoleID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), ownerRoleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (toRoleID < 2134900736)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵或者镖车，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int biaoCheID = -1;
				BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(ownerRoleID);
				if (null != biaoCheItem)
				{
					biaoCheID = biaoCheItem.BiaoCheID;
				}
				if (toRoleID != client.ClientData.PetRoleID && toRoleID != biaoCheID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵或者镖车，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (roleType == 4)
				{
					if (client.ClientData.MapCode == mapCode)
					{
						client.ClientData.PetPosX = toX;
						client.ClientData.PetPosY = toY;
						client.ClientData.ReportPetPosTicks = currentPosTicks;
					}
				}
				else if (roleType == 5)
				{
					if (null != biaoCheItem)
					{
						if (biaoCheItem.MapCode == mapCode)
						{
							biaoCheItem.PosX = toX;
							biaoCheItem.PosY = toY;
							biaoCheItem.ReportPosTicks = currentPosTicks;
							GameManager.MapGridMgr.DictGrids[biaoCheItem.MapCode].MoveObject(-1, -1, biaoCheItem.PosX, biaoCheItem.PosY, biaoCheItem);
						}
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E19 RID: 15897 RVA: 0x00359478 File Offset: 0x00357678
		private static TCPProcessCmdResults ProcessSpriteActionCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			SpriteActionData cmdData = null;
			try
			{
				cmdData = DataHelper.BytesToObject2<SpriteActionData>(data, 0, count, socket.m_Socket);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			SingletonTemplate<ProtoChecker>.Instance().Check<SpriteActionData>(data, 0, count, socket.m_Socket);
			try
			{
				if (null == cmdData)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数解析错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = cmdData.roleID;
				int mapCode = cmdData.mapCode;
				int direction = cmdData.direction;
				int action = cmdData.action;
				int toX = cmdData.toX;
				int toY = cmdData.toY;
				int targetX = cmdData.targetX;
				int targetY = cmdData.targetY;
				int yAngle = cmdData.yAngle;
				int moveToX = cmdData.moveToX;
				int moveToY = cmdData.moveToY;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientData.IsDongJie())
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];
				if (moveToX > 0 && moveToY > 0)
				{
					toX = moveToX;
					toY = moveToY;
				}
				int oldX = client.ClientData.PosX;
				int oldY = client.ClientData.PosY;
				if (mapCode != client.ClientData.MapCode)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!Data.IgnoreClientPos)
				{
					client.ClientData.PosX = toX;
					client.ClientData.PosY = toY;
					client.ClientData.ReportPosTicks = 0L;
					bool resetPos = oldX != toX || oldY != toY;
					if (resetPos)
					{
						if (!GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode].MoveObject(oldX, oldY, toX, toY, client))
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
				}
				client.ClientData.ReportPosTicks = 0L;
				client.ClientData.RoleDirection = direction;
				client.ClientData.RoleYAngle = yAngle;
				int nOldAction = client.ClientData.CurrentAction;
				client.ClientData.CurrentAction = action;
				if (action >= 28)
				{
					Global.EndMeditate(client);
				}
				if (action >= 3)
				{
					ZuoQiManager.getInstance().RoleDisMount(client, true);
				}
				if (GameManager.FlagEnableHideFlags)
				{
					cmdData.moveToX = 0;
					cmdData.moveToY = 0;
				}
				if (cmdData.action == 3 || cmdData.action == 6 || cmdData.action == 9)
				{
					client.ClientData.CurrentActionData = cmdData;
				}
				else
				{
					GameManager.ClientMgr.NotifyOthersMyAction(tcpMgr.MySocketListener, pool, client, roleID, mapCode, direction, action, toX, toY, targetX, targetY, yAngle, moveToX, moveToY, nID);
				}
				if (nOldAction == 0 && action == 4)
				{
					client.ClientData.CurrentAction = 0;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E1A RID: 15898 RVA: 0x00359880 File Offset: 0x00357A80
		private static TCPProcessCmdResults ProcessSpriteChangeAngleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int direction = Convert.ToInt32(fields[1]);
				int yAngle = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientData.IsDongJie())
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				client.ClientData.RoleDirection = direction;
				client.ClientData.RoleYAngle = yAngle;
				GameManager.ClientMgr.NotifyOthersChangeAngle(tcpMgr.MySocketListener, pool, client, roleID, direction, yAngle, nID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E1B RID: 15899 RVA: 0x00359A44 File Offset: 0x00357C44
		private static TCPProcessCmdResults ProcessSpriteAction2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 10)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ownerRoleID = Convert.ToInt32(fields[0]);
				int toRoleID = Convert.ToInt32(fields[1]);
				int mapCode = Convert.ToInt32(fields[2]);
				int direction = Convert.ToInt32(fields[3]);
				int action = Convert.ToInt32(fields[4]);
				int toX = Convert.ToInt32(fields[5]);
				int toY = Convert.ToInt32(fields[6]);
				int targetX = Convert.ToInt32(fields[7]);
				int targetY = Convert.ToInt32(fields[8]);
				int roleType = Convert.ToInt32(fields[9]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != ownerRoleID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), ownerRoleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (toRoleID < 2134900736)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵或者镖车，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int biaoCheID = -1;
				BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(ownerRoleID);
				if (null != biaoCheItem)
				{
					biaoCheID = biaoCheItem.BiaoCheID;
				}
				if (toRoleID != client.ClientData.PetRoleID && toRoleID != biaoCheID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵或者镖车，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (roleType == 4)
				{
					client.ClientData.PetPosX = toX;
					client.ClientData.PetPosY = toY;
					client.ClientData.ReportPetPosTicks = 0L;
					GameManager.ClientMgr.NotifyOthersDoAction(tcpMgr.MySocketListener, pool, null, client.ClientData.MapCode, client.ClientData.CopyMapID, toRoleID, direction, action, toX, toY, targetX, targetY, 114, null);
				}
				else if (roleType == 5)
				{
					if (null != biaoCheItem)
					{
						biaoCheItem.PosX = toX;
						biaoCheItem.PosY = toX;
						biaoCheItem.ReportPosTicks = 0L;
						biaoCheItem.CurrentAction = action;
						biaoCheItem.Direction = direction;
						List<object> listObjs = Global.GetAll9Clients(biaoCheItem);
						GameManager.ClientMgr.NotifyOthersDoAction(tcpMgr.MySocketListener, pool, null, client.ClientData.MapCode, client.ClientData.CopyMapID, toRoleID, direction, action, toX, toY, targetX, targetY, 114, listObjs);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E1C RID: 15900 RVA: 0x00359DC0 File Offset: 0x00357FC0
		private static TCPProcessCmdResults ProcessSpriteAttackCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			SpriteAttackData cmdData = null;
			try
			{
				cmdData = DataHelper.BytesToObject<SpriteAttackData>(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				if (null == cmdData)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令解析错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = cmdData.roleID;
				int roleX = cmdData.roleX;
				int roleY = cmdData.roleY;
				int enemy = cmdData.enemy;
				int enemyX = cmdData.enemyX;
				int enemyY = cmdData.enemyY;
				int realEnemyX = cmdData.realEnemyX;
				int realEnemyY = cmdData.realEnemyY;
				int magicCode = cmdData.magicCode;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientData.CurrentLifeV <= 0)
				{
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (roleX - client.ClientData.PosX > GameManager.MaxAttackDistance || roleX - client.ClientData.PosX < -GameManager.MaxAttackDistance || roleY - client.ClientData.PosY > GameManager.MaxAttackDistance || roleY - client.ClientData.PosY < -GameManager.MaxAttackDistance)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.IsDongJie())
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!Global.CanMapUseMagic(client, magicCode))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (magicCode == -1 && GameManager.TestGamePerformanceMode)
				{
					EMagicSwordTowardType eMagicSwordType = GameManager.MagicSwordMgr.GetMagicSwordTypeByWeapon(client.ClientData.Occupation, client.UsingEquipMgr.GetWeaponEquipList(), client);
					int[] magicCodes = JingJiChangConstants.GetJingJiChangeSkillList(client, Global.CalcOriginalOccupationID(client.ClientData.Occupation), eMagicSwordType);
					int index = Global.GetRandomNumber(0, magicCodes.Length);
					if (index == 0)
					{
						magicCodes = JingJiChangConstants.getJingJiChangeFiveCombatSkillList(Global.CalcOriginalOccupationID(client.ClientData.Occupation), eMagicSwordType);
						index = Global.GetRandomNumber(0, magicCodes.Length);
					}
					magicCode = magicCodes[index];
				}
				Global.EndMeditate(client);
				SystemXmlItem xmlMagic = null;
				if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(magicCode, out xmlMagic))
				{
					LogManager.WriteLog(LogTypes.Warning, string.Format("拒绝技能释放#未找到技能静态数据,RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int toOccupation = xmlMagic.GetIntValue("ToOcuupation", -1);
				if (toOccupation != client.ClientData.Occupation && toOccupation != 1000)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!BianShenManager.getInstance().CanUseMagic(client, magicCode))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("玩家释放的技能和变身状态不匹配(外挂),RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!SpriteAttack.CanUseMaigc(client, magicCode))
				{
					if (socket.session.gmPriority > 0)
					{
						LogManager.WriteLog(LogTypes.Warning, string.Format("拒绝技能释放#玩家释放的技能和职业不匹配,RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				int nUseType = xmlMagic.GetIntValue("UseType", -1);
				if (nUseType == 1 && client.ClientData.IsFlashPlayer != 0 && client.ClientData.MapCode != 6090)
				{
					List<GoodsData> lGoods = Global.GetUsingAttackWeaponGoods(client);
					if (lGoods == null || lGoods.Count<GoodsData>() < 0)
					{
						LogManager.WriteLog(LogTypes.Warning, string.Format("拒绝技能释放#该技能需要武器才能释放,RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				if (nUseType == 1)
				{
					int Code;
					if (!RebornEquip.IsWeaponCanAttackOrActtion(client, out Code))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				client.ClientData.MoveAndActionNum++;
				if (Data.IgnoreClientPos)
				{
					GameManager.ClientMgr.StopClientStoryboard(client, cmdData.clientTicks, -1, -1);
				}
				else
				{
					GameManager.ClientMgr.StopClientStoryboard(client, -1);
				}
				ClientCmdCheck.ClientStopMove(client, roleX, roleY, cmdData.clientTicks);
				if (!Data.IgnoreClientPos)
				{
					client.ClientData.PosX = roleX;
					client.ClientData.PosY = roleY;
				}
				client.ClientData.ReportPosTicks = 0L;
				if (!GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode].MoveObject(-1, -1, roleX, roleY, client))
				{
					if (socket.session.gmPriority > 0)
					{
						LogManager.WriteLog(LogTypes.Warning, string.Format("拒绝技能释放#自身位置异常,RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.HideSelf > 0 || client.ClientData.HideGM > 0 || !GameManager.MagicSwordMgr.CanUseMagicOfMagicSword(client, magicCode) || !EscapeBattleManager.getInstance().CanUseMaigc(client))
				{
					if (socket.session.gmPriority > 0)
					{
						LogManager.WriteLog(LogTypes.Warning, string.Format("拒绝技能释放#不满足释放条件,RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				CaiJiLogic.CancelCaiJiState(client);
				ZuoQiManager.getInstance().RoleDisMount(client, true);
				if (!client.ClientData.MyMagicCoolDownMgr.SkillCoolDown(magicCode))
				{
					if (socket.session.gmPriority > 0)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("拒绝技能释放#CD未结束1,RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				long nowTicks = TimeUtil.NOW();
				if (xmlMagic.GetStringValue("HorseSkill") == "1")
				{
					ExtData extData = ExtDataManager.GetClientExtData(client);
					if (nowTicks < extData.ZuoQiSkillCDTicks)
					{
						if (socket.session.gmPriority > 0)
						{
							LogManager.WriteLog(LogTypes.Error, string.Format("拒绝技能释放#CD未结束1,RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
						}
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				if (!SpriteAttack.IsMagicEnough(client, magicCode))
				{
					if (socket.session.gmPriority > 0)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("拒绝技能释放#魔法值不足,RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!SpriteAttack.IsParentActionDone(client, magicCode))
				{
					if (socket.session.gmPriority > 0)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("拒绝技能释放#父技能未释放,RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				SpriteActionData actionData = client.ClientData.CurrentActionData;
				if (actionData != null)
				{
					client.ClientData.CurrentActionData = null;
					GameManager.ClientMgr.NotifyOthersMyAction(tcpMgr.MySocketListener, pool, client, actionData, 114);
				}
				client.buffManager.SetStatusBuff(114, TimeUtil.NOW(), Data.FightStateTime, 0L);
				SpriteAttack.ProcessAttack(client, enemy, enemyX, enemyY, realEnemyX, realEnemyY, magicCode, -1, 1.0);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E1D RID: 15901 RVA: 0x0035A650 File Offset: 0x00358850
		private static TCPProcessCmdResults ProcessSpriteMagicCodeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			SpriteMagicCodeData cmdData = null;
			try
			{
				cmdData = DataHelper.BytesToObject2<SpriteMagicCodeData>(data, 0, count, socket.m_Socket);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<SpriteMagicCodeData>(data, 0, count, socket.m_Socket);
				if (null == cmdData)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令解析错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = cmdData.roleID;
				int mapCode = cmdData.mapCode;
				int magicCode = cmdData.magicCode;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (magicCode == -1 && GameManager.TestGamePerformanceMode)
				{
					EMagicSwordTowardType eMagicSwordType = GameManager.MagicSwordMgr.GetMagicSwordTypeByWeapon(client.ClientData.Occupation, client.UsingEquipMgr.GetWeaponEquipList(), client);
					int[] magicCodes = JingJiChangConstants.GetJingJiChangeSkillList(client, Global.CalcOriginalOccupationID(client.ClientData.Occupation), eMagicSwordType);
					int index = Global.GetRandomNumber(0, magicCodes.Length);
					magicCode = magicCodes[index];
				}
				if (mapCode != client.ClientData.MapCode)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.HideSelf > 0 || client.ClientData.HideGM > 0 || !GameManager.MagicSwordMgr.CanUseMagicOfMagicSword(client, magicCode))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.IsDongJie())
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!client.ClientData.MyMagicCoolDownMgr.SkillCoolDown(magicCode))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!Global.CanMapUseMagic(client, magicCode))
				{
					magicCode = -1;
				}
				if (!BianShenManager.getInstance().CanUseMagic(client, magicCode))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("玩家释放的技能和变身状态不匹配(外挂),RoleID={0}({1}),MagicCode={2}", roleID, Global.FormatRoleName4(client), magicCode), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!SpriteAttack.CanUseMaigc(client, magicCode))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				ZuoQiManager.getInstance().RoleDisMount(client, true);
				client.ClientData.CurrentMagicCode = magicCode;
				client.ClientData.CurrentMagicTicks = TimeUtil.NOW();
				double subPercent = Math.Min(1.0, ShenShiManager.getInstance().GetMagicCodeSkillCDSubPercent(client, magicCode));
				if (subPercent > 0.0)
				{
					client.ClientData.CurrentMagicCDSubPercent = Math.Min(subPercent, 1.0);
					client.sendCmd(1882, magicCode + ":" + (1.0 - client.ClientData.CurrentMagicCDSubPercent), false);
				}
				SpriteActionData actionData = client.ClientData.CurrentActionData;
				if (actionData != null)
				{
					client.ClientData.CurrentActionData = null;
					GameManager.ClientMgr.NotifyOthersMyAction(tcpMgr.MySocketListener, pool, client, actionData, 114);
				}
				GameManager.ClientMgr.NotifyOthersMagicCode(tcpMgr.MySocketListener, pool, client, roleID, mapCode, magicCode, 116);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, data, 0, count, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E1E RID: 15902 RVA: 0x0035AA4C File Offset: 0x00358C4C
		private static TCPProcessCmdResults ProcessSpriteRealiveCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int posX = Convert.ToInt32(fields[1]);
				int posY = Convert.ToInt32(fields[2]);
				int direction = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientData.CurrentLifeV > 0)
				{
					if (client.ClientData.MapCode == GameManager.MainMapCode)
					{
						GameManager.ClientMgr.NotifyMySelfRealive(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, client.ClientData.RoleID, client.ClientData.PosX, client.ClientData.PosY, direction);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (2 == Global.GetRoleReliveType(client) || 3 == Global.GetRoleReliveType(client))
				{
					long elapseTicks = TimeUtil.NOW() - client.ClientData.LastRoleDeadTicks;
					if (elapseTicks / 1000L < (long)Global.GetRoleReliveWaitingSecs(client))
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("外挂复活, CMD={0}, Client={1}, RoleID={2}, elapseSecs={3}, reliveSecs={4}", new object[]
						{
							(TCPGameServerCmds)nID,
							Global.GetSocketRemoteEndPoint(socket, false),
							roleID,
							elapseTicks / 1000L,
							Global.GetRoleReliveWaitingSecs(client)
						}), null, true);
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (4 == Global.GetRoleReliveType(client))
				{
					long elapseTicks = TimeUtil.NOW() - client.ClientData.LastRoleDeadTicks;
					if (elapseTicks / 1000L < (long)Global.GetRoleReliveWaitingSecs(client))
					{
						int needZuanShi = (int)GameManager.systemParamsList.GetParamValueIntByName("AngelTempleZuanshiRevive", -1);
						if (needZuanShi > 0 && !GameManager.ClientMgr.SubUserMoney(client, needZuanShi, "元宝复活等待时间", true, true, true, true, DaiBiSySType.None))
						{
							GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(586, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					posX = -1;
					posY = -1;
				}
				else if (6 == Global.GetRoleReliveType(client))
				{
					long elapseTicks = TimeUtil.NOW() - client.ClientData.LastRoleDeadTicks;
					if (elapseTicks / 1000L < (long)Global.GetRoleReliveWaitingSecs(client))
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("外挂水晶幻境复活, CMD={0}, Client={1}, RoleID={2}, elapseSecs={3}, reliveSecs={4}", new object[]
						{
							(TCPGameServerCmds)nID,
							Global.GetSocketRemoteEndPoint(socket, false),
							roleID,
							elapseTicks / 1000L,
							CaiJiLogic.DeadReliveTime
						}), null, true);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (posX < 0 || posY < 0)
					{
						if (elapseTicks / 1000L < (long)Global.GetRoleReliveWaitingSecs(client))
						{
							LogManager.WriteLog(LogTypes.Error, string.Format("外挂水晶幻境回城复活, CMD={0}, Client={1}, RoleID={2}, elapseSecs={3}, reliveSecs={4}", new object[]
							{
								(TCPGameServerCmds)nID,
								Global.GetSocketRemoteEndPoint(socket, false),
								roleID,
								elapseTicks / 1000L,
								CaiJiLogic.DeadReliveTime
							}), null, true);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
				}
				if (Global.IsHuangChengMapCode(client.ClientData.MapCode) || Global.IsHuangGongMapCode(client.ClientData.MapCode))
				{
					posX = -1;
					posY = -1;
				}
				if (Global.IsBattleMap(client))
				{
					int toMapCode = GameManager.BattleMgr.BattleMapCode;
					GameMap gameMap = null;
					if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
					{
						client.ClientData.CurrentLifeV = client.ClientData.LifeV;
						client.ClientData.CurrentMagicV = client.ClientData.MagicV;
						int defaultBirthPosX = gameMap.DefaultBirthPosX;
						int defaultBirthPosY = gameMap.DefaultBirthPosY;
						int defaultBirthRadius = gameMap.BirthRadius;
						Global.GetBattleMapPos(client, ref defaultBirthPosX, ref defaultBirthPosY, ref defaultBirthRadius);
						Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
						posX = (int)newPos.X;
						posY = (int)newPos.Y;
						Global.ClientRealive(client, posX, posY, client.ClientData.RoleDirection);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (LuoLanChengZhanManager.getInstance().ClientRelive(client))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				SceneUIClasses sceneType = Global.GetMapSceneType(client.ClientData.MapCode);
				if (sceneType == SceneUIClasses.HuanYingSiYuan)
				{
					if (HuanYingSiYuanManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.YongZheZhanChang)
				{
					if (YongZheZhanChangManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.ZhengDuo)
				{
					if (ZhengDuoManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.KingOfBattle)
				{
					if (KingOfBattleManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.BangHuiMatch)
				{
					if (BangHuiMatchManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.ZorkBattle)
				{
					if (ZorkBattleManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.EscapeBattle)
				{
					if (EscapeBattleManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.KuaFuLueDuo)
				{
					if (KuaFuLueDuoManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.KarenEast)
				{
					if (KarenBattleManager_MapEast.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.KarenWest)
				{
					if (KarenBattleManager_MapWest.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.MoRiJudge)
				{
					if (SingletonTemplate<MoRiJudgeManager>.Instance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.ElementWar)
				{
					if (ElementWarManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.CopyWolf)
				{
					if (CopyWolfManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.KuaFuBoss)
				{
					if (KuaFuBossManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.LangHunLingYu)
				{
					if (LangHunLingYuManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.CoupleArena)
				{
					if (SingletonTemplate<CoupleArenaManager>.Instance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.Comp)
				{
					if (posX < 0 || posY < 0)
					{
						if (CompManager.getInstance().ClientRelive(client))
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
				}
				else if (sceneType == SceneUIClasses.CompBattle)
				{
					if (CompBattleManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (sceneType == SceneUIClasses.CompMine)
				{
					if (CompMineManager.getInstance().ClientRelive(client))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				if (Global.IsLingDiZhanMapCode(client))
				{
					int toMapCode = client.ClientData.MapCode;
					GameMap gameMap = null;
					if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
					{
						client.ClientData.CurrentLifeV = client.ClientData.LifeV;
						client.ClientData.CurrentMagicV = client.ClientData.MagicV;
						Point newPos = Global.GetRandomPoint(ObjectTypes.OT_CLIENT, toMapCode);
						posX = (int)newPos.X;
						posY = (int)newPos.Y;
						Global.ClientRealive(client, posX, posY, client.ClientData.RoleDirection);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (GameManager.ArenaBattleMgr.IsInArenaBattle(client))
				{
					posX = -1;
					posY = -1;
				}
				if (posX == -1 || posY == -1)
				{
					int toMapCode = Global.GetMapRealiveInfoByCode(client.ClientData.MapCode);
					if (toMapCode <= -1)
					{
						toMapCode = GameManager.MainMapCode;
					}
					else if (toMapCode == 0 || GameManager.ArenaBattleMgr.IsInArenaBattle(client))
					{
						toMapCode = GameManager.MainMapCode;
					}
					else if (toMapCode == 1)
					{
						toMapCode = client.ClientData.MapCode;
					}
					if (toMapCode >= 0)
					{
						GameMap gameMap = null;
						if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
						{
							int defaultBirthPosX = GameManager.MapMgr.DictMaps[toMapCode].DefaultBirthPosX;
							int defaultBirthPosY = GameManager.MapMgr.DictMaps[toMapCode].DefaultBirthPosY;
							int defaultBirthRadius = GameManager.MapMgr.DictMaps[toMapCode].BirthRadius;
							Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
							posX = (int)newPos.X;
							posY = (int)newPos.Y;
							client.ClientData.MoveAndActionNum = 0;
							GameManager.ClientMgr.NotifyTeamRealive(tcpMgr.MySocketListener, pool, roleID, posX, posY, direction);
							if (toMapCode != client.ClientData.MapCode)
							{
								GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, posX, posY, -1, 1);
							}
							else
							{
								Global.ClientRealive(client, posX, posY, direction);
							}
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (posX >= 0 && posY >= 0)
				{
					bool bContinue = false;
					if (client.ClientData.VipLevel > 0 && client.ClientData.VipLevel <= VIPEumValue.VIPENUMVALUE_MAXLEVEL)
					{
						int nAddNum = 0;
						int[] nAddArry = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPResurrectionAdd", ',');
						if (nAddArry != null && nAddArry.Length > VIPEumValue.VIPENUMVALUE_MAXLEVEL)
						{
							nAddNum = nAddArry[client.ClientData.VipLevel];
						}
						if (nAddNum > 0)
						{
							int dayID = TimeUtil.NowDateTime().DayOfYear;
							VipDailyData dailyVipData = Global.FindVipDailyDataByPriority(client, 1000000);
							if (dailyVipData != null)
							{
								if (dailyVipData.DayID == dayID)
								{
									if (dailyVipData.UsedTimes < nAddNum)
									{
										bContinue = true;
									}
								}
								else
								{
									bContinue = true;
								}
							}
							else
							{
								bContinue = true;
							}
							if (bContinue)
							{
								Global.UpdateVipDailyData(client, dayID, 1000000);
							}
						}
					}
					if (!bContinue)
					{
						GoodsData goodsData = Global.GetGoodsByID(client, Data.AliveGoodsID);
						if (null == goodsData)
						{
							if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, 10, "元宝复活", true, true, false, DaiBiSySType.None))
							{
								GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(587, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
								return TCPProcessCmdResults.RESULT_OK;
							}
						}
						else if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false, false))
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					Global.ClientRealive(client, client.ClientData.PosX, client.ClientData.PosY, direction);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E1F RID: 15903 RVA: 0x0035B8F8 File Offset: 0x00359AF8
		private static TCPProcessCmdResults ProcessSpriteClickOnCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<CS_ClickOn>(data, 0, count, socket.m_Socket);
				CS_ClickOn _clickOn = null;
				if (!CheckHelper.CheckTCPCmdHandle<CS_ClickOn>(socket, nID, data, count, out _clickOn))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = _clickOn.RoleId;
				int mapCode = _clickOn.MapCode;
				int npcID = _clickOn.NpcId;
				int extensionID = _clickOn.ExtId;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientData.HideGM > 0)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				NPCData npcData = new NPCData
				{
					MapCode = mapCode,
					RoleID = roleID,
					NPCID = npcID,
					ExtensionID = extensionID
				};
				SystemXmlItem systemNPC = null;
				if (!GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(extensionID, out systemNPC))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string GatherConditionStr = systemNPC.GetStringValue("GatherCondition");
				if (GatherConditionStr != null && "" != GatherConditionStr)
				{
					string[] fields = GatherConditionStr.Split(new char[]
					{
						','
					});
					int taskid = Global.SafeConvertToInt32(fields[0]);
					if (!ProcessTask.IfActivateTask(client, taskid))
					{
						npcData.GatherTime = -2;
						tcpOutPacket = DataHelper.ObjectToTCPOutPacket<NPCData>(npcData, pool, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (0 == client.ClientData.gatherNpcID)
					{
						client.ClientData.gatherNpcID = extensionID;
						client.ClientData.gatherTicks = TimeUtil.NOW() + 1500L;
						npcData.GatherTime = 2;
						tcpOutPacket = DataHelper.ObjectToTCPOutPacket<NPCData>(npcData, pool, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (extensionID == client.ClientData.gatherNpcID)
					{
						if (TimeUtil.NOW() < client.ClientData.gatherTicks)
						{
							client.ClientData.gatherTicks = TimeUtil.NOW() + 1500L;
							npcData.GatherTime = 2;
							tcpOutPacket = DataHelper.ObjectToTCPOutPacket<NPCData>(npcData, pool, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						client.ClientData.gatherNpcID = 0;
						ProcessTask.Process(tcpMgr.MySocketListener, pool, client, npcID, extensionID, taskid, TaskTypes.GatherMonster, null, 0, -1L, null);
						npcData.GatherTime = -1;
						tcpOutPacket = DataHelper.ObjectToTCPOutPacket<NPCData>(npcData, pool, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				NPC npc = null;
				SceneUIClasses sceneType = Global.GetMapSceneType(mapCode);
				ProcessClickOnNpcEventObject eventObject = new ProcessClickOnNpcEventObject(client, npc, npcID, extensionID);
				if (!GlobalEventSource4Scene.getInstance().fireEvent(eventObject, (int)sceneType) && eventObject.Handled)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (sceneType == SceneUIClasses.LuoLanChengZhan)
				{
					if (LuoLanChengZhanManager.getInstance().OnSpriteClickOnNpc(client, npcID, extensionID))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				GlobalNew.GetNpcTaskData(client, extensionID, npcData);
				GlobalNew.GetNpcFunctionData(client, extensionID, npcData, systemNPC);
				if (null != npcData.OperationIDs)
				{
					if (npcData.OperationIDs.Contains(60))
					{
						npc = NPCGeneralManager.FindNPC(mapCode, extensionID);
						if (null != npc)
						{
							if (npc.MapCode == client.ClientData.MapCode)
							{
								if (Global.GetTwoPointDistanceSquare(npc.CurrentPos, client.CurrentPos) < 810000.0)
								{
									client.ClientData.OpenPortableBagPoint = client.CurrentPos;
								}
							}
						}
					}
				}
				ProcessTask.Process(tcpMgr.MySocketListener, pool, client, npcID, extensionID, -1, TaskTypes.Talk, null, 0, -1L, null);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<NPCData>(npcData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E20 RID: 15904 RVA: 0x0035BD64 File Offset: 0x00359F64
		private static TCPProcessCmdResults ProcessSpriteNewTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int npcID = Convert.ToInt32(fields[1]);
				int taskID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				TCPProcessCmdResults result = Global.TakeNewTask(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, client, roleID, taskID, npcID, out tcpOutPacket);
				if (TCPProcessCmdResults.RESULT_OK == result)
				{
					if (105 == taskID)
					{
						FreshPlayerCopySceneManager.AddShuiJingGuanCaiMonsters(client);
					}
				}
				return result;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E21 RID: 15905 RVA: 0x0035BF18 File Offset: 0x0035A118
		private static TCPProcessCmdResults ProcessSpriteMapChangeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			SCMapChange cmdData = null;
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<SCMapChange>(data, 0, count, socket.m_Socket);
				if (!CheckHelper.CheckTCPCmdHandle<SCMapChange>(socket, nID, data, count, out cmdData))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = cmdData.RoleID;
				int teleportID = cmdData.TeleportID;
				int newMapCode = cmdData.NewMapCode;
				int toNewMapX = cmdData.ToNewMapX;
				int toNewMapY = cmdData.ToNewMapY;
				int toNewDiection = cmdData.ToNewDiection;
				int state = cmdData.State;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int resourceNotReady = state & 1;
				if (resourceNotReady != 0)
				{
					lock (client.ClientData.MapCodeAlreadyList)
					{
						if (!client.ClientData.MapCodeAlreadyList.Contains(newMapCode))
						{
							client.ClientData.WaitingForChangeMap = false;
							client.ClientData.WaitingNotifyChangeMap = false;
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
				}
				if (client.CheckCheatData.GmGotoShadowMapCode == newMapCode)
				{
					if (!GameManager.ClientMgr.ChangeMap(tcpMgr.MySocketListener, pool, client, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, nID))
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("切换地图时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (teleportID >= 0 && LuoLanFaZhenCopySceneManager.IsLuoLanFaZhen(client.ClientData.FuBenID))
				{
					TCPProcessCmdResults luolanresult = LuoLanFaZhenCopySceneManager.OnTeleport(client, teleportID, pool, out tcpOutPacket);
					if (luolanresult != TCPProcessCmdResults.RESULT_FAILED)
					{
						return luolanresult;
					}
				}
				SceneUIClasses sceneType = Global.GetMapSceneType(newMapCode);
				if (sceneType == SceneUIClasses.ShuiJingHuanJing)
				{
					long interval = (TimeUtil.NOW() * 10000L - client.ClientData.ShuiJingHuanJingTicks) / 10000L / 1000L;
					int tradelog_freq_ftf = GameManager.GameConfigMgr.GetGameConfigItemInt("enter_sjhj_interval", 10);
					if (interval < (long)tradelog_freq_ftf)
					{
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(588, new object[0]), new object[]
						{
							(long)tradelog_freq_ftf - interval
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, client.ClientData.MapCode, client.ClientData.PosX, client.ClientData.PosY, toNewDiection, -1003);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (sceneType == SceneUIClasses.ThemeMoYu)
				{
					if (client.ClientData.Faction <= 0)
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				if (teleportID < 0)
				{
					GameMap toGameMap = null;
					if (!GameManager.MapMgr.DictMaps.TryGetValue(newMapCode, out toGameMap))
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1000);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int toLevel = toGameMap.MinLevel;
					int toChangeLifeLev = toGameMap.MinZhuanSheng;
					if (client.ClientData.ChangeLifeCount < toChangeLifeLev)
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1001);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (client.ClientData.ChangeLifeCount * 400 + client.ClientData.Level < toChangeLifeLev * 400 + toLevel)
					{
						if (client.ClientData.Level < toLevel)
						{
							SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1002);
							client.sendCmd<SCMapChange>(123, scData, false);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					if (!client.ClientData.WaitingNotifyChangeMap || client.ClientData.WaitingChangeMapToMapCode != newMapCode || client.ClientData.WaitingChangeMapToPosX != toNewMapX || client.ClientData.WaitingChangeMapToPosY != toNewMapY)
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -10);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					client.ClientData.WaitingNotifyChangeMap = false;
				}
				else
				{
					if (KuaFuMapManager.getInstance().IsKuaFuMap(newMapCode))
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GameMap gameMap = null;
					if (!GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap))
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -11);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					MapTeleport mapTeleport = null;
					if (!gameMap.MapTeleportDict.TryGetValue(teleportID, out mapTeleport))
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -12);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (mapTeleport.ToMapID != newMapCode || mapTeleport.ToX != toNewMapX || mapTeleport.ToY != toNewMapY)
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -14);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameMap toGameMap = null;
					if (!GameManager.MapMgr.DictMaps.TryGetValue(mapTeleport.ToMapID, out toGameMap))
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1000);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int toLevel = toGameMap.MinLevel;
					int toChangeLifeLev = toGameMap.MinZhuanSheng;
					if (client.ClientData.ChangeLifeCount < toChangeLifeLev)
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1001);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (client.ClientData.ChangeLifeCount * 400 + client.ClientData.Level < toChangeLifeLev * 400 + toLevel)
					{
						if (client.ClientData.Level < toLevel)
						{
							SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1002);
							client.sendCmd<SCMapChange>(123, scData, false);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
				}
				OnClientChangeMapEventObject eventObject = new OnClientChangeMapEventObject(client, teleportID, newMapCode, toNewMapX, toNewMapY);
				if (!GlobalEventSource4Scene.getInstance().fireEvent(eventObject, (int)sceneType))
				{
					if (eventObject.Handled)
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				if (teleportID >= 0 && client.ClientData.MapCode == newMapCode)
				{
					GameManager.ClientMgr.NotifyOthersGoBack(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toNewMapX, toNewMapY, -1);
					SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -10010);
					client.sendCmd<SCMapChange>(123, scData, false);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (eventObject.Handled)
				{
					newMapCode = eventObject.ToMapCode;
					toNewMapX = eventObject.ToPosX;
					toNewMapY = eventObject.ToPosY;
					if (!eventObject.Result)
					{
						SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1);
						client.sendCmd<SCMapChange>(123, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (!Global.CanChangeMapCode(client, newMapCode))
				{
					SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1);
					client.sendCmd<SCMapChange>(123, scData, false);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.DJRoomID > 0)
				{
					if (MapTypes.DianJiangCopy == Global.GetMapType(client.ClientData.MapCode))
					{
						GameManager.DJRoomMgr.SetRoomRolesDataRoleState(client.ClientData.DJRoomID, client.ClientData.RoleID, 2);
						if (client.ClientData.DJRoomTeamID <= 0)
						{
							GameManager.ClientMgr.ViewerLeaveDianJiangRoom(tcpMgr.MySocketListener, pool, client);
						}
						client.ClientData.DJRoomID = -1;
						client.ClientData.DJRoomTeamID = -1;
						client.ClientData.HideSelf = 0;
					}
					else if (MapTypes.DianJiangCopy == Global.GetMapType(newMapCode))
					{
						GameManager.DJRoomMgr.SetRoomRolesDataRoleState(client.ClientData.DJRoomID, client.ClientData.RoleID, 1);
					}
				}
				if (newMapCode == Global.GetHuangGongMapCode())
				{
					Point newPos = Global.GetRandomPoint(ObjectTypes.OT_CLIENT, newMapCode);
					toNewMapX = (int)newPos.X;
					toNewMapY = (int)newPos.Y;
				}
				if (!LuoLanChengZhanManager.getInstance().ClientChangeMap(client, ref newMapCode, ref toNewMapX, ref toNewMapY))
				{
					SCMapChange scData = new SCMapChange(client.ClientData.RoleID, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, -1000);
					client.sendCmd<SCMapChange>(123, scData, false);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.NotifyOthersMyPetHide(client);
				CaiJiLogic.CancelCaiJiState(client);
				if (KuaFuMapManager.getInstance().IsKuaFuMap(client.ClientData.MapCode) && !KuaFuMapManager.getInstance().IsKuaFuMap(newMapCode))
				{
					Point pixel = Global.GetMapPoint(ObjectTypes.OT_CLIENT, newMapCode, toNewMapX, toNewMapY, 3);
					Point grid = Global.PixelToGrid(newMapCode, pixel);
					Global.ModifyMapRecordData(client, (ushort)newMapCode, (ushort)grid.X, (ushort)grid.Y, 0);
					KuaFuManager.getInstance().GotoLastMap(client);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (SceneUIClasses.Comp == Global.GetMapSceneType(client.ClientData.MapCode))
				{
					Point pixel = Global.GetMapPoint(ObjectTypes.OT_CLIENT, newMapCode, toNewMapX, toNewMapY, 3);
					Point grid = Global.PixelToGrid(newMapCode, pixel);
					Global.ModifyMapRecordData(client, (ushort)newMapCode, (ushort)grid.X, (ushort)grid.Y, 0);
					KuaFuManager.getInstance().GotoLastMap(client);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!GameManager.ClientMgr.ChangeMap(tcpMgr.MySocketListener, pool, client, teleportID, newMapCode, toNewMapX, toNewMapY, toNewDiection, nID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("切换地图时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SevenDayGoalEventObject evObj_fuben = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.EnterFuBenTimes);
				evObj_fuben.Arg1 = client.ClientData.FuBenID;
				evObj_fuben.Arg2 = 1;
				GlobalEventSource.getInstance().fireEvent(evObj_fuben);
				SevenDayGoalEventObject evObj_activity = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.JoinActivityTimes);
				evObj_activity.Arg1 = (int)Global.GetMapSceneType(newMapCode);
				GlobalEventSource.getInstance().fireEvent(evObj_activity);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E22 RID: 15906 RVA: 0x0035CBB8 File Offset: 0x0035ADB8
		private static TCPProcessCmdResults ProcessSpriteGetAttrib2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E23 RID: 15907 RVA: 0x0035CD10 File Offset: 0x0035AF10
		private static TCPProcessCmdResults ProcessSpriteGetAttribAllCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				double[] arrRoleAttAll = Global.GetRoleAttribute(client);
				byte[] byteArrRoleAttAll = DataHelper.ObjectToBytes<double[]>(arrRoleAttAll);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, byteArrRoleAttAll, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E24 RID: 15908 RVA: 0x0035CE74 File Offset: 0x0035B074
		private static TCPProcessCmdResults ProcessSpriteNPCBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int goodsID = Convert.ToInt32(fields[1]);
				int goodsNum = Convert.ToInt32(fields[2]);
				int saleType = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (goodsNum <= 0 || goodsNum >= 10000)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("NPC购买, 非法的外挂购买, 物品数量不能小于等于0或者大于10000, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						goodsNum
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				NPCSaleItem nPCSaleItem = null;
				if (!GameManager.NPCSaleListMgr.SaleIDSDict.TryGetValue(goodsID, out nPCSaleItem))
				{
					string strcmd = string.Format("{0}::", -5000);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.CurrentLifeV <= 0)
				{
					string strcmd = string.Format("{0}::", -5001);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool saleTypeExists = false;
				if (!nPCSaleItem.SaleTypesDict.TryGetValue(saleType, out saleTypeExists))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("NPC购买, 非法的外挂购买, 物品类型和配置表中的不符合, CMD={0}, Client={1}, RoleID={2}, SaleType={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						saleType
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int singlePrice = Global.GetGoodsPriceByMoneyType(goodsID, saleType);
				int totalNeedMoney = singlePrice * goodsNum;
				int ret = Global.IsRoleHasEnoughMoney(client, totalNeedMoney, saleType);
				if (ret < 0)
				{
					string strcmd = string.Format("{0}::", ret);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int gridNum = Global.GetGoodsGridNumByID(goodsID);
				gridNum = Global.GMax(gridNum, 1);
				int addCount = (goodsNum - 1) / gridNum + 1;
				for (int i = 0; i < addCount; i++)
				{
					int thisTimeNum = gridNum;
					if (i >= addCount - 1 && goodsNum % gridNum > 0)
					{
						thisTimeNum = goodsNum % gridNum;
					}
					string strcmd;
					if (!Global.CanAddGoods(client, goodsID, thisTimeNum, 0, "1900-01-01 12:00:00", true, false))
					{
						strcmd = string.Format("{0}::", -3);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					int toBindingGoods = 1;
					if (8 == saleType || 14 == saleType || 30 == saleType)
					{
						toBindingGoods = 0;
					}
					ret = Global.SubRoleMoneyForGoods(client, thisTimeNum * singlePrice, saleType, "NPC处购买：" + goodsID);
					if (ret < 0)
					{
						strcmd = string.Format("{0}::", ret);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", nPCSaleItem.Forge_level, toBindingGoods, 0, "", true, 1, "NPC处购买物品", "1900-01-01 12:00:00", 0, 0, nPCSaleItem.Lucky, 0, nPCSaleItem.ExcellenceInfo, nPCSaleItem.AppendPropLev, 0, null, null, 0, true);
					if (dbRet < 0)
					{
						strcmd = string.Format("{0}::", dbRet);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					if (1 == saleType)
					{
						Global.AddRoleBuyWithTongQianEvent(client, goodsID, thisTimeNum, thisTimeNum * singlePrice);
					}
					else if (8 == saleType)
					{
						Global.AddRoleBuyWithYinLiangEvent(client, goodsID, thisTimeNum, thisTimeNum * singlePrice);
					}
					else if (13 == saleType)
					{
						Global.AddRoleBuyWithTianDiJingYuanEvent(client, goodsID, thisTimeNum, thisTimeNum * singlePrice);
						Global.BroadcastNpcSaleGoods(client, goodsID);
					}
					else if (20 == saleType)
					{
						Global.AddRoleBuyWithLieShaZhiEvent(client, goodsID, thisTimeNum, thisTimeNum * singlePrice);
						Global.BroadcastNpcSaleGoods(client, goodsID);
					}
					else if (30 == saleType)
					{
						Global.AddRoleBuyWithZhuangBeiJiFenEvent(client, goodsID, thisTimeNum, thisTimeNum * singlePrice);
						Global.BroadcastNpcSaleGoods(client, goodsID);
						if (Global.GetShenZhuangHuiKuiStatus(client) == 0)
						{
							string paramName = "ShenZhuangHuiKuiGift";
							Global.SaveRoleParamsInt32ValueToDB(client, paramName, 1, true);
						}
					}
					else if (14 == saleType)
					{
						Global.AddRoleBuyWithJunGongZhiEvent(client, goodsID, thisTimeNum, thisTimeNum * singlePrice);
					}
					else if (90 == saleType)
					{
						Global.AddRoleBuyWithZhanHunEvent(client, goodsID, thisTimeNum, thisTimeNum * singlePrice);
						Global.BroadcastNpcSaleGoods(client, goodsID);
					}
					strcmd = string.Format("{0}:{1}:{2}", dbRet, goodsID, thisTimeNum);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E25 RID: 15909 RVA: 0x0035D508 File Offset: 0x0035B708
		private static TCPProcessCmdResults ProcessSpriteNPCSaleOutCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 6)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int goodsDbId = Convert.ToInt32(fields[1]);
				int goodsDbId2 = Convert.ToInt32(fields[2]);
				int goodsDbId3 = Convert.ToInt32(fields[3]);
				int goodsDbId4 = Convert.ToInt32(fields[4]);
				int goodsDbId5 = Convert.ToInt32(fields[5]);
				int price = 0;
				List<GoodsData> goodsDataList = new List<GoodsData>();
				string strcmd;
				if (goodsDbId > 0)
				{
					GoodsData gd = Global.GetGoodsByDbID(client, goodsDbId);
					if (null == gd)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", new object[]
						{
							-1,
							roleID,
							goodsDbId,
							goodsDbId2,
							goodsDbId3,
							goodsDbId4,
							goodsDbId5,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					goodsDataList.Add(gd);
				}
				if (goodsDbId2 > 0)
				{
					GoodsData gd2 = Global.GetGoodsByDbID(client, goodsDbId2);
					if (null == gd2)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", new object[]
						{
							-1,
							roleID,
							goodsDbId,
							goodsDbId2,
							goodsDbId3,
							goodsDbId4,
							goodsDbId5,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					goodsDataList.Add(gd2);
				}
				if (goodsDbId3 > 0)
				{
					GoodsData gd3 = Global.GetGoodsByDbID(client, goodsDbId3);
					if (null == gd3)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", new object[]
						{
							-1,
							roleID,
							goodsDbId,
							goodsDbId2,
							goodsDbId3,
							goodsDbId4,
							goodsDbId5,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					goodsDataList.Add(gd3);
				}
				if (goodsDbId4 > 0)
				{
					GoodsData gd4 = Global.GetGoodsByDbID(client, goodsDbId4);
					if (null == gd4)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", new object[]
						{
							-1,
							roleID,
							goodsDbId,
							goodsDbId2,
							goodsDbId3,
							goodsDbId4,
							goodsDbId5,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					goodsDataList.Add(gd4);
				}
				if (goodsDbId5 > 0)
				{
					GoodsData gd5 = Global.GetGoodsByDbID(client, goodsDbId5);
					if (null == gd5)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", new object[]
						{
							-1,
							roleID,
							goodsDbId,
							goodsDbId2,
							goodsDbId3,
							goodsDbId4,
							goodsDbId5,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					goodsDataList.Add(gd5);
				}
				for (int i = 0; i < goodsDataList.Count; i++)
				{
					if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsDataList[i], goodsDataList[i].GCount, false, false))
					{
						SystemXmlItem systemGoods = null;
						if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsDataList[i].GoodsID, out systemGoods))
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", new object[]
							{
								-2,
								roleID,
								goodsDbId,
								goodsDbId2,
								goodsDbId3,
								goodsDbId4,
								goodsDbId5,
								0
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						int singlePrice = systemGoods.GetIntValue("Price", -1);
						if (singlePrice < 0)
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", new object[]
							{
								-2,
								roleID,
								goodsDbId,
								goodsDbId2,
								goodsDbId3,
								goodsDbId4,
								goodsDbId5,
								0
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						singlePrice = (int)((double)singlePrice * 0.5);
						price += goodsDataList[i].GCount * singlePrice;
					}
				}
				GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, price, "出售物品给NPC", false);
				GameManager.SystemServerEvents.AddEvent(string.Format("角色卖出物品获取金钱, roleID={0}({1}), Money={2}, newMoney={3}", new object[]
				{
					client.ClientData.RoleID,
					client.ClientData.RoleName,
					client.ClientData.Money1,
					price
				}), EventLevels.Record);
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", new object[]
				{
					0,
					roleID,
					goodsDbId,
					goodsDbId2,
					goodsDbId3,
					goodsDbId4,
					goodsDbId5,
					price
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E26 RID: 15910 RVA: 0x0035DD30 File Offset: 0x0035BF30
		private static TCPProcessCmdResults ProcessSpriteAddGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E27 RID: 15911 RVA: 0x0035DD74 File Offset: 0x0035BF74
		private static TCPProcessCmdResults ProcessSpriteModGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 9)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.ModifyGoodsByCmdParams(client, cmdData, "客户端修改", null);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E28 RID: 15912 RVA: 0x0035DEC8 File Offset: 0x0035C0C8
		private static TCPProcessCmdResults ProcessSpriteMergeGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 6)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int site = Convert.ToInt32(fields[2]);
				int goodsID = Convert.ToInt32(fields[3]);
				int otherId = Convert.ToInt32(fields[4]);
				int otherGoodsID = Convert.ToInt32(fields[5]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = null;
				if (site == 0)
				{
					goodsData = Global.GetGoodsByDbID(client, id);
				}
				else if (site == -1000)
				{
					goodsData = Global.GetPortableGoodsDataByDbID(client, id);
				}
				if (null == goodsData)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("定位物品对象1失败, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						id
					}), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (goodsData.GoodsID != goodsID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("监测到复制物品的操作立即断开, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						id
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData2 = null;
				if (site == 0)
				{
					goodsData2 = Global.GetGoodsByDbID(client, otherId);
				}
				else if (site == -1000)
				{
					goodsData2 = Global.GetPortableGoodsDataByDbID(client, otherId);
				}
				if (null == goodsData2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("定位物品对象2失败, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						otherId
					}), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (goodsData2.GoodsID != otherGoodsID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("监测到复制物品的操作立即断开, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						otherId
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (goodsData.GoodsID != goodsData2.GoodsID)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (goodsData.Binding != goodsData2.Binding)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!Global.DateTimeEqual(goodsData.Endtime, goodsData2.Endtime))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int gridNum = Global.GetGoodsGridNumByID(goodsID);
				if (gridNum <= 1)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (goodsData.GCount >= gridNum)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int usingNum = Global.GetGoodsUsingNum(goodsID);
				if (usingNum > 1)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int moveNum = Global.GMin(gridNum - goodsData.GCount, goodsData2.GCount);
				string[] dbFields = null;
				string strcmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					roleID,
					otherId,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData2.GCount - moveNum,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strcmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
					{
						-1,
						roleID,
						id,
						site,
						goodsID,
						goodsData.GCount,
						otherId,
						otherGoodsID,
						goodsData2.GCount
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
					{
						-2,
						roleID,
						id,
						site,
						goodsID,
						goodsData.GCount,
						otherId,
						otherGoodsID,
						goodsData2.GCount
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				goodsData2.GCount -= moveNum;
				Global.ModRoleGoodsEvent(client, goodsData2, -moveNum, "合并减少", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData2.GoodsID, (long)goodsData2.Id, -moveNum, goodsData2.GCount, "合并减少");
				if (goodsData2.GCount <= 0)
				{
					if (site == 0)
					{
						Global.RemoveGoodsData(client, goodsData2);
					}
					else if (site == -1000)
					{
						Global.RemovePortableGoodsData(client, goodsData2);
					}
				}
				dbFields = null;
				strcmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					roleID,
					id,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.GCount + moveNum,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strcmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
					{
						-3,
						roleID,
						id,
						site,
						goodsID,
						goodsData.GCount,
						otherId,
						otherGoodsID,
						goodsData2.GCount
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
					{
						-4,
						roleID,
						id,
						site,
						goodsID,
						goodsData.GCount,
						otherId,
						otherGoodsID,
						goodsData2.GCount
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				goodsData.GCount += moveNum;
				Global.ModRoleGoodsEvent(client, goodsData, moveNum, "合并增加", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, moveNum, goodsData.GCount, "合并增加");
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
				{
					0,
					roleID,
					id,
					site,
					goodsID,
					goodsData.GCount,
					otherId,
					otherGoodsID,
					goodsData2.GCount
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E29 RID: 15913 RVA: 0x0035E998 File Offset: 0x0035CB98
		private static TCPProcessCmdResults ProcessSpriteSplitGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int site = Convert.ToInt32(fields[2]);
				int goodsID = Convert.ToInt32(fields[3]);
				int newNum = Convert.ToInt32(fields[4]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.SplitGoodsByCmdParams(client, socket, nID, roleID, id, site, goodsID, newNum, true);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E2A RID: 15914 RVA: 0x0035EB18 File Offset: 0x0035CD18
		private static TCPProcessCmdResults ProcessSpriteCompTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int npcID = Convert.ToInt32(fields[1]);
				int taskID = Convert.ToInt32(fields[2]);
				int dbID = Convert.ToInt32(fields[3]);
				int useYuanBao = Convert.ToInt32(fields[4]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				ProcessTask._ProcessSpriteCompTaskCmd(client, npcID, taskID, dbID, useYuanBao);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E2B RID: 15915 RVA: 0x0035EC94 File Offset: 0x0035CE94
		private static TCPProcessCmdResults ProcessSpriteGetFriendsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				string cmdData = new UTF8Encoding().GetString(data, 0, count);
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length < 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Global.SafeConvertToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E2C RID: 15916 RVA: 0x0035EDC4 File Offset: 0x0035CFC4
		private static TCPProcessCmdResults ProcessSpriteGetFriendsCmd2(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				string cmdData = new UTF8Encoding().GetString(data, 0, count);
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length < 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Global.SafeConvertToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<FriendData> friendsList = Global.sendToDB<List<FriendData>, string>(142, string.Format("{0}", roleID), client.ServerId);
				if (null == friendsList)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				for (int i = 0; i < friendsList.Count; i++)
				{
					friendsList[i].YaoSaiBossState = YaoSaiBossManager.getInstance().GetRoleBossState(friendsList[i].OtherRoleID, roleID);
					if (friendsList[i].YaoSaiBossState > 0)
					{
						friendsList[i].YaoSaiJianYuState = YaoSaiJianYuManager.getInstance().GetYaoSaiJianYuState(friendsList[i].OtherRoleID, Global.GetUnionLevel2(friendsList[i].FriendChangeLifeLev, friendsList[i].OtherLevel));
					}
				}
				client.sendCmd<List<FriendData>>(nID, friendsList, false);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E2D RID: 15917 RVA: 0x0035EFF8 File Offset: 0x0035D1F8
		private static TCPProcessCmdResults ProcessSpriteAddFriendCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int dbID = Convert.ToInt32(fields[0]);
				int roleID = Convert.ToInt32(fields[1]);
				string otherName = fields[2];
				int friendType = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (friendType < 0 || friendType > 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数数值错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (SingletonTemplate<CreateRoleLimitManager>.Instance().AddFriendSlotTicks > 0 && TimeUtil.NOW() - client.ClientData._AddFriendTicks[friendType] < (long)SingletonTemplate<CreateRoleLimitManager>.Instance().AddFriendSlotTicks)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(129, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				client.ClientData._AddFriendTicks[friendType] = TimeUtil.NOW();
				GameManager.ClientMgr.AddFriend(tcpMgr, tcpClientPool, pool, client, dbID, -1, otherName, friendType);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E2E RID: 15918 RVA: 0x0035F268 File Offset: 0x0035D468
		private static TCPProcessCmdResults ProcessSpriteRemoveFriendCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int dbID = Convert.ToInt32(fields[0]);
				int roleID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.RemoveFriend(tcpMgr, tcpClientPool, pool, client, dbID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E2F RID: 15919 RVA: 0x0035F3CC File Offset: 0x0035D5CC
		private static TCPProcessCmdResults ProcessSpriteClickOnGoodsPackCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int autoID = Convert.ToInt32(fields[1]);
				int openState = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E30 RID: 15920 RVA: 0x0035F528 File Offset: 0x0035D728
		private static TCPProcessCmdResults ProcessSpriteGetThingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int autoID = Convert.ToInt32(fields[1]);
				int goodsDbID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E31 RID: 15921 RVA: 0x0035F684 File Offset: 0x0035D884
		private static TCPProcessCmdResults ProcessSpriteChangePKModeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int pkMode = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SceneUIClasses sceneType = Global.GetMapSceneType(client.ClientData.MapCode);
				if (SceneUIClasses.ChongShengMap == sceneType)
				{
					if (pkMode != 0 && !RebornManager.getInstance().IfSupportPKModeNotNormal(client.ClientData.MapCode))
					{
						pkMode = 0;
					}
				}
				client.ClientData.PKMode = pkMode;
				GameManager.DBCmdMgr.AddDBCmd(10008, cmdData, null, client.ServerId);
				GameManager.ClientMgr.NotifyOthersPKModeChanged(tcpMgr.MySocketListener, pool, client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E32 RID: 15922 RVA: 0x0035F874 File Offset: 0x0035DA74
		private static TCPProcessCmdResults ProcessSpriteGetNewTaskDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int oldPaoHuanTaskID3 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.ClientData.RoleID, 3);
				if (oldPaoHuanTaskID3 >= 0)
				{
					if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID3, null))
					{
						oldPaoHuanTaskID3 = -1;
					}
				}
				int oldPaoHuanTaskID4 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.ClientData.RoleID, 4);
				if (oldPaoHuanTaskID4 >= 0)
				{
					if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID4, null))
					{
						oldPaoHuanTaskID4 = -1;
					}
				}
				int oldPaoHuanTaskID5 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.ClientData.RoleID, 5);
				if (oldPaoHuanTaskID5 >= 0)
				{
					if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID5, null))
					{
						oldPaoHuanTaskID5 = -1;
					}
				}
				int oldPaoHuanTaskID6 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.ClientData.RoleID, 6);
				if (oldPaoHuanTaskID6 >= 0)
				{
					if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID6, null))
					{
						oldPaoHuanTaskID6 = -1;
					}
				}
				int oldPaoHuanTaskID7 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.ClientData.RoleID, 7);
				if (oldPaoHuanTaskID7 >= 0)
				{
					if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID7, null))
					{
						oldPaoHuanTaskID7 = -1;
					}
				}
				int oldPaoHuanTaskID8 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.ClientData.RoleID, 8);
				if (oldPaoHuanTaskID8 >= 0)
				{
					if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID8, null))
					{
						oldPaoHuanTaskID8 = -1;
					}
				}
				int oldPaoHuanTaskID9 = PaoHuanTasksMgr.FindPaoHuanHistTaskID(client.ClientData.RoleID, 9);
				if (oldPaoHuanTaskID9 >= 0)
				{
					if (!Global.CanTakeNewTask(client, oldPaoHuanTaskID9, null))
					{
						oldPaoHuanTaskID9 = -1;
					}
				}
				List<int> paoHuanTaskIDList3 = new List<int>();
				List<int> paoHuanTaskIDList4 = new List<int>();
				List<int> paoHuanTaskIDList5 = new List<int>();
				List<int> paoHuanTaskIDList6 = new List<int>();
				List<int> paoHuanTaskIDList7 = new List<int>();
				List<int> paoHuanTaskIDList8 = new List<int>();
				List<int> paoHuanTaskIDList9 = new List<int>();
				List<int> taskIdList = new List<int>();
				foreach (int key in GameManager.SystemTasksMgr.SystemXmlItemDict.Keys)
				{
					SystemXmlItem systemTask = GameManager.SystemTasksMgr.SystemXmlItemDict[key];
					int taskID = systemTask.GetIntValue("ID", -1);
					if (-1 != taskID)
					{
						int taskClass = systemTask.GetIntValue("TaskClass", -1);
						if ((taskClass >= 3 && taskClass <= 9) || (taskClass >= 100 && taskClass <= 150))
						{
							if (!Global.CanTaskPaoHuanTask(client, taskClass))
							{
								continue;
							}
						}
						if (Global.CanTakeNewTask(client, taskID, systemTask))
						{
							if (3 == taskClass)
							{
								paoHuanTaskIDList3.Add(taskID);
							}
							else if (4 == taskClass)
							{
								paoHuanTaskIDList4.Add(taskID);
							}
							else if (5 == taskClass)
							{
								paoHuanTaskIDList5.Add(taskID);
							}
							else if (6 == taskClass)
							{
								paoHuanTaskIDList6.Add(taskID);
							}
							else if (7 == taskClass)
							{
								paoHuanTaskIDList7.Add(taskID);
							}
							else if (8 == taskClass)
							{
								paoHuanTaskIDList8.Add(taskID);
							}
							else if (9 == taskClass)
							{
								paoHuanTaskIDList9.Add(taskID);
							}
							else
							{
								if (taskClass >= 100 && taskClass <= 150)
								{
									PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.ClientData.RoleID, taskClass, taskID);
								}
								taskIdList.Add(taskID);
							}
						}
					}
				}
				if (-1 != oldPaoHuanTaskID3)
				{
					taskIdList.Add(oldPaoHuanTaskID3);
				}
				else if (paoHuanTaskIDList3.Count > 0)
				{
					int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList3.Count);
					oldPaoHuanTaskID3 = paoHuanTaskIDList3[randIndex];
					taskIdList.Add(oldPaoHuanTaskID3);
					PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.ClientData.RoleID, 3, oldPaoHuanTaskID3);
				}
				if (-1 != oldPaoHuanTaskID4)
				{
					taskIdList.Add(oldPaoHuanTaskID4);
				}
				else if (paoHuanTaskIDList4.Count > 0)
				{
					int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList4.Count);
					oldPaoHuanTaskID4 = paoHuanTaskIDList4[randIndex];
					taskIdList.Add(oldPaoHuanTaskID4);
					PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.ClientData.RoleID, 4, oldPaoHuanTaskID4);
				}
				if (-1 != oldPaoHuanTaskID5)
				{
					taskIdList.Add(oldPaoHuanTaskID5);
				}
				else if (paoHuanTaskIDList5.Count > 0)
				{
					int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList5.Count);
					oldPaoHuanTaskID5 = paoHuanTaskIDList5[randIndex];
					taskIdList.Add(oldPaoHuanTaskID5);
					PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.ClientData.RoleID, 5, oldPaoHuanTaskID5);
				}
				if (-1 != oldPaoHuanTaskID6)
				{
					taskIdList.Add(oldPaoHuanTaskID6);
				}
				else if (paoHuanTaskIDList6.Count > 0)
				{
					int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList6.Count);
					oldPaoHuanTaskID6 = paoHuanTaskIDList6[randIndex];
					taskIdList.Add(oldPaoHuanTaskID6);
					PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.ClientData.RoleID, 6, oldPaoHuanTaskID6);
				}
				if (-1 != oldPaoHuanTaskID7)
				{
					taskIdList.Add(oldPaoHuanTaskID7);
				}
				else if (paoHuanTaskIDList7.Count > 0)
				{
					int randIndex = Global.GetRandomNumber(0, paoHuanTaskIDList7.Count);
					oldPaoHuanTaskID7 = paoHuanTaskIDList7[randIndex];
					taskIdList.Add(oldPaoHuanTaskID7);
					PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.ClientData.RoleID, 7, oldPaoHuanTaskID7);
				}
				if (-1 != oldPaoHuanTaskID8)
				{
					taskIdList.Add(oldPaoHuanTaskID8);
				}
				else if (paoHuanTaskIDList8.Count > 0)
				{
					int nTaskID = Global.GetDailyCircleTaskIDBaseChangeLifeLev(client);
					if (nTaskID != -1)
					{
						oldPaoHuanTaskID8 = nTaskID;
						taskIdList.Add(oldPaoHuanTaskID8);
						PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.ClientData.RoleID, 8, oldPaoHuanTaskID8);
					}
				}
				if (-1 != oldPaoHuanTaskID9)
				{
					taskIdList.Add(oldPaoHuanTaskID9);
				}
				else if (paoHuanTaskIDList9.Count > 0)
				{
					int nTaskID = Global.GetTaofaTaskIDBaseChangeLifeLev(client);
					if (nTaskID != -1)
					{
						oldPaoHuanTaskID9 = nTaskID;
						taskIdList.Add(oldPaoHuanTaskID9);
						PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.ClientData.RoleID, 9, oldPaoHuanTaskID9);
					}
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<int>>(taskIdList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E33 RID: 15923 RVA: 0x0036005C File Offset: 0x0035E25C
		private static TCPProcessCmdResults ProcessSpriteAbandonTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int dbID = Convert.ToInt32(fields[1]);
				int taskID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				bool b = Global.CancelTask(client, dbID, taskID);
				string strcmd;
				if (b)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						roleID,
						dbID,
						taskID,
						0
					});
				}
				else
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						roleID,
						dbID,
						taskID,
						-1
					});
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E34 RID: 15924 RVA: 0x0036027C File Offset: 0x0035E47C
		private static TCPProcessCmdResults ProcessSpriteModTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int dbID = Convert.ToInt32(fields[1]);
				int taskID = Convert.ToInt32(fields[2]);
				int focus = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = "";
				if (null != client.ClientData.TaskDataList)
				{
					TaskData taskData = Global.GetTaskData(client, taskID);
					if (null != taskData)
					{
						if (focus > 0)
						{
							if (Global.GetFocusTaskCount(client) < Data.TaskMaxFocusCount)
							{
								taskData.DoingTaskFocus = focus;
								GameManager.DBCmdMgr.AddDBCmd(10007, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
								{
									client.ClientData.RoleID,
									taskData.DoingTaskID,
									taskData.DbID,
									focus,
									"*",
									"*"
								}), null, client.ServerId);
								strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
								{
									dbID,
									taskID,
									taskData.DoingTaskVal1,
									taskData.DoingTaskVal2,
									focus
								});
							}
							else
							{
								strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
								{
									dbID,
									taskID,
									taskData.DoingTaskVal1,
									taskData.DoingTaskVal2,
									0
								});
							}
						}
						else
						{
							taskData.DoingTaskFocus = focus;
							GameManager.DBCmdMgr.AddDBCmd(10007, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
							{
								client.ClientData.RoleID,
								taskData.DoingTaskID,
								taskData.DbID,
								focus,
								"*",
								"*"
							}), null, client.ServerId);
							strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
							{
								dbID,
								taskID,
								taskData.DoingTaskVal1,
								taskData.DoingTaskVal2,
								focus
							});
						}
					}
				}
				if ("" != strcmd)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E35 RID: 15925 RVA: 0x003606A8 File Offset: 0x0035E8A8
		private static TCPProcessCmdResults ProcessSpriteModKeysCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int dbID = Convert.ToInt32(fields[1]);
				string keys = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				client.ClientData.MainQuickBarKeys = keys;
				GameManager.DBCmdMgr.AddDBCmd(10010, cmdData, null, client.ServerId);
				string strcmd = cmdData;
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E36 RID: 15926 RVA: 0x00360838 File Offset: 0x0035EA38
		private static TCPProcessCmdResults ProcessSpriteChatCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 7)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				string roleName = fields[1];
				int status = Convert.ToInt32(fields[2]);
				string toRoleName = fields[3];
				int index = Convert.ToInt32(fields[4]);
				string textMsg = fields[5];
				string chatType = fields[6];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (index < 0 || index >= 13)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("聊天的类型索引超出了限制, CMD={0}, Client={1}, RoleID={2}, Index={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						index
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientData.BanChat > 0)
				{
					string strinfo = StringUtil.substitute(GLang.GetLang(589, new object[0]), new object[0]);
					GameManager.ClientMgr.SendSystemChatMessageToClient(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, strinfo);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (BanChatManager.IsBanRoleName(Global.FormatRoleName(client, client.ClientData.RoleName), (long)client.ClientData.RoleID))
				{
					LogManager.WriteLogUseCache(LogTypes.Error, string.Format("{0} 被禁止了世界发言", client.ClientData.RoleName));
					GameManager.ClientMgr.SendChatMessage(tcpMgr.MySocketListener, pool, client, cmdData);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (string.IsNullOrEmpty(roleName) || !roleName.Contains(client.ClientData.RoleName))
				{
					GameManager.ClientMgr.SendChatMessage(tcpMgr.MySocketListener, pool, client, cmdData);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!GameManager.systemGMCommands.ProcessChatMessage(socket, client, textMsg, false))
				{
					if (client.ClientSocket.IsKuaFuLogin)
					{
						switch (Global.GetMapSceneType(client.ClientData.MapCode))
						{
						case SceneUIClasses.KaLunTe:
						case SceneUIClasses.HuanShuYuan:
							if (index == 10)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							goto IL_484;
						case SceneUIClasses.LangHunLingYu:
							if (index != 3 && index != 8 && index != 5)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							goto IL_484;
						case SceneUIClasses.KingOfBattle:
							if (index != 7)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							goto IL_484;
						case SceneUIClasses.ZhengDuo:
							if (index != 3)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							goto IL_484;
						case SceneUIClasses.KarenWest:
						case SceneUIClasses.KarenEast:
						case SceneUIClasses.LingDiCaiJi:
							if (index != 1 && index != 9)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							goto IL_484;
						case SceneUIClasses.BangHuiMatch:
							if (index != 3 && index != 8)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							goto IL_484;
						case SceneUIClasses.KuaFuLueDuo:
							if (index != 3 && index != 8)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							goto IL_484;
						case SceneUIClasses.Comp:
						case SceneUIClasses.CompBattle:
						case SceneUIClasses.CompMine:
						case SceneUIClasses.ChongShengMap:
							goto IL_484;
						case SceneUIClasses.ZorkBattle:
						case SceneUIClasses.EscapeBattle:
							if (index != 1 && index != 12)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							goto IL_484;
						}
						if (index != 7 && index != 8 && index != 5)
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
						IL_484:;
					}
					else
					{
						switch (Global.GetMapSceneType(client.ClientData.MapCode))
						{
						case SceneUIClasses.Comp:
						case SceneUIClasses.CompBattle:
						case SceneUIClasses.CompMine:
						case SceneUIClasses.ChongShengMap:
							goto IL_4ED;
						}
						if (index == 10 || index == 11)
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
						IL_4ED:;
					}
					if (!Global.JugeSendMessgeLevel(client, index))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (index != 2)
					{
						GameManager.systemGMCommands.BroadcastChatMsg(tcpMgr.MySocketListener, pool, client, cmdData);
					}
					if (index == 1)
					{
						GameManager.ClientMgr.NotifyMapChatMsg(tcpMgr.MySocketListener, pool, client, cmdData);
					}
					if (index == 2)
					{
						bool flag = 0 == 0;
						GameManager.ClientMgr.NotifyAllChatMsg(tcpMgr.MySocketListener, pool, cmdData, client);
						bool isKuaFuLogin = client.ClientSocket.IsKuaFuLogin;
						flag = (0 == 0);
					}
					else if (index == 3)
					{
						GameManager.ClientMgr.NotifyFactionChatMsg(tcpMgr.MySocketListener, pool, client.ClientData.Faction, cmdData, client);
						if (client.ClientData.Faction > 0)
						{
							bool isKuaFuLogin2 = client.ClientSocket.IsKuaFuLogin;
							bool flag = 0 == 0;
						}
					}
					else if (index == 4)
					{
						GameManager.ClientMgr.NotifyTeamChatMsg(tcpMgr.MySocketListener, pool, client, cmdData);
					}
					else if (index == 5)
					{
						if (!GameManager.ClientMgr.NotifyClientChatMsg(tcpMgr.MySocketListener, pool, client, roleID, roleName, toRoleName, index, textMsg, chatType))
						{
							bool isKuaFuLogin3 = client.ClientSocket.IsKuaFuLogin;
							bool flag = 0 == 0;
						}
					}
					else if (index == 8)
					{
						GameManager.ClientMgr.NotifyCopyMapChatMsg(tcpMgr.MySocketListener, pool, client, cmdData);
					}
					else if (index == 7)
					{
						GameManager.ClientMgr.NotifyBattleSideChatMsg(tcpMgr.MySocketListener, pool, client, cmdData);
					}
					else if (index == 9)
					{
						JunTuanManager.getInstance().JunTuanChat(client, cmdData);
					}
					else if (index == 10)
					{
						CompManager.getInstance().CompChat(client, cmdData);
					}
					else if (index == 11)
					{
						RebornManager.getInstance().PlatFormChat(client, cmdData);
					}
					else if (index == 12)
					{
						GameManager.ClientMgr.NotifyZhanDuiChatMsg(tcpMgr.MySocketListener, pool, client, cmdData);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E37 RID: 15927 RVA: 0x00360FFC File Offset: 0x0035F1FC
		private static TCPProcessCmdResults ProcessSpriteUseGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<CS_SprUseGoods>(data, 0, count, socket.m_Socket);
				CS_SprUseGoods _useGoods = null;
				if (!CheckHelper.CheckTCPCmdHandle<CS_SprUseGoods>(socket, nID, data, count, out _useGoods))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = _useGoods.RoleId;
				int dbID = _useGoods.DbId;
				int goodsID = _useGoods.GoodsId;
				int nUseNum = _useGoods.UseNum;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (nUseNum <= 0)
				{
					nUseNum = 1;
				}
				SystemXmlItem systemGoodsItem = null;
				if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoodsItem))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("用户使用物品时，从物品配置表中查找物品ID失败, CMD={0}, Client={1}, RoleID={2}, GoodsID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						goodsID
					}), null, true);
					GameManager.ClientMgr.NotifyUseGoodsResult(tcpMgr.MySocketListener, pool, client, goodsID, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!Global.IsCanEquipOrUseByOccupation(client, goodsID))
				{
					GameManager.ClientMgr.NotifyUseGoodsResult(tcpMgr.MySocketListener, pool, client, goodsID, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				string failedMsg = string.Empty;
				if (!SingletonTemplate<GoodsCanUseManager>.Instance().CheckCanUse_ByToType(client, goodsID, out failedMsg))
				{
					if (!string.IsNullOrEmpty(failedMsg))
					{
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, failedMsg, GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					}
					GameManager.ClientMgr.NotifyUseGoodsResult(tcpMgr.MySocketListener, pool, client, goodsID, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				string toType = systemGoodsItem.GetStringValue("ToType");
				string toTypeProperty = systemGoodsItem.GetStringValue("ToTypeProperty");
				int toSex = systemGoodsItem.GetIntValue("ToSex", -1);
				if (toSex >= 0)
				{
					if (client.ClientData.RoleSex != toSex)
					{
						string goodsName = systemGoodsItem.GetStringValue("Title");
						string sexName = (toSex == 0) ? GLang.GetLang(134, new object[0]) : GLang.GetLang(135, new object[0]);
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(136, new object[0]), new object[]
						{
							goodsName,
							sexName
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						GameManager.ClientMgr.NotifyUseGoodsResult(tcpMgr.MySocketListener, pool, client, goodsID, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				int toLevel = systemGoodsItem.GetIntValue("ToLevel", -1);
				int toChangeLifeLev = systemGoodsItem.GetIntValue("ToZhuanSheng", -1);
				if (client.ClientData.ChangeLifeCount < toChangeLifeLev)
				{
					string goodsName = systemGoodsItem.GetStringValue("Title");
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(590, new object[0]), new object[]
					{
						toChangeLifeLev,
						goodsName
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 39);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.ChangeLifeCount == toChangeLifeLev)
				{
					if (toLevel > 0)
					{
						if (client.ClientData.Level < toLevel)
						{
							string goodsName = systemGoodsItem.GetStringValue("Title");
							GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(138, new object[0]), new object[]
							{
								toLevel,
								goodsName
							}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 39);
							GameManager.ClientMgr.NotifyUseGoodsResult(tcpMgr.MySocketListener, pool, client, goodsID, 0);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
				}
				if (!Global.CanUseTongLing(client, systemGoodsItem, goodsID))
				{
					GameManager.ClientMgr.NotifyUseGoodsResult(tcpMgr.MySocketListener, pool, client, goodsID, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!Global.CanMapUseGoods(client.ClientData.MapCode, goodsID))
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(591, new object[0]), new object[]
					{
						Global.GetMapName(client.ClientData.MapCode),
						Global.GetGoodsNameByID(goodsID)
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<SC_SprUseGoods>(new SC_SprUseGoods(-1000, dbID, 0), pool, 158);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!client.ClientData.MyGoodsCoolDownMgr.GoodsCoolDown(goodsID))
				{
					GameManager.ClientMgr.NotifyUseGoodsResult(tcpMgr.MySocketListener, pool, client, goodsID, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!Global.HasEnoughGoodsDayUseNum(client, goodsID, 1))
				{
					GameManager.ClientMgr.NotifyUseGoodsResult(tcpMgr.MySocketListener, pool, client, goodsID, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				client.ClientData.MyGoodsCoolDownMgr.AddGoodsCoolDown(client, goodsID);
				GoodsData goodsData;
				if (RebornEquip.IsRebornType(goodsID))
				{
					goodsData = RebornEquip.GetRebornGoodsByDbID(client, dbID);
				}
				else
				{
					goodsData = Global.GetGoodsByDbID(client, dbID);
				}
				if (null == goodsData)
				{
					GameManager.ClientMgr.NotifyUseGoodsResult(tcpMgr.MySocketListener, pool, client, goodsID, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int useNumLoop = 0;
				if (goodsData.GoodsID != goodsID || goodsData.GCount <= 0)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("监测到复制物品的操作立即断开, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string tipOfNoBag = "";
				int limitNum = Global.GetGoodsLimitNum(client, goodsID);
				if (UsingGoods.IfProcessSeveralTimesAction(goodsID, toType))
				{
					if (!Global.CanOpenFallBaoXiang(client, systemGoodsItem, goodsID))
					{
						tipOfNoBag = StringUtil.substitute(GLang.GetLang(592, new object[0]), new object[0]);
					}
					else
					{
						if (limitNum > 0)
						{
							int todayUsedNum = Global.GetTodayGoodsLimitByID(client, goodsID);
							nUseNum = Math.Min(nUseNum, limitNum - todayUsedNum);
							nUseNum = Math.Max(nUseNum, 0);
						}
						GoodsBaoXiang.ProcessFallBaoXiang_StepOne(client, systemGoodsItem, goodsData, ref nUseNum);
						if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData, nUseNum, true, false))
						{
							ProcessTask.Process(tcpMgr.MySocketListener, pool, client, -1, -1, goodsID, TaskTypes.UseSomething, null, 0, -1L, null);
							useNumLoop = nUseNum;
						}
						else
						{
							useNumLoop = 0;
						}
					}
				}
				else
				{
					if (Global.GetGoodsCatetoriy(goodsID) == 121)
					{
						LogManager.WriteLog(LogTypes.Fatal, string.Format("Catetoriy Is ItemLargeGridNum But GoodsActions Is Not Support! GoodsID={0}", goodsID), null, true);
					}
					for (useNumLoop = 0; useNumLoop < nUseNum; useNumLoop++)
					{
						if (!Global.CanUpackGoods(client, systemGoodsItem, goodsID))
						{
							tipOfNoBag = StringUtil.substitute(GLang.GetLang(593, new object[0]), new object[0]);
							break;
						}
						if (!Global.CanUnPackSimpleGoods(client, systemGoodsItem, goodsID))
						{
							tipOfNoBag = StringUtil.substitute(GLang.GetLang(594, new object[0]), new object[0]);
							break;
						}
						if (!Global.UseGoodsByExtraTypePropertyBeforeUseGoods(client, toType, toTypeProperty))
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, dbID, true, false))
						{
							break;
						}
						ProcessTask.Process(tcpMgr.MySocketListener, pool, client, -1, -1, goodsID, TaskTypes.UseSomething, null, 0, -1L, null);
						Global.UnpackGoodsByID(client, systemGoodsItem, goodsID);
						Global.BroadcastOpenGiveBox(client, goodsID);
					}
				}
				if (useNumLoop == 0 && !string.IsNullOrEmpty(tipOfNoBag))
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, tipOfNoBag, GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 1);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (limitNum > 0)
				{
					int todayUsedNum = Global.GetTodayGoodsLimitByID(client, goodsID);
					GameManager.LuaMgr.Hot(client, StringUtil.substitute(GLang.GetLang(595, new object[0]), new object[]
					{
						Global.GetGoodsNameByID(goodsID),
						Math.Max(0, limitNum - todayUsedNum)
					}), 0);
				}
				GameManager.ClientMgr.NotifyUseGoodsResult(tcpMgr.MySocketListener, pool, client, goodsID, useNumLoop);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E38 RID: 15928 RVA: 0x00361954 File Offset: 0x0035FB54
		private static TCPProcessCmdResults ProcessSpriteForgeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int nProtectStone = Convert.ToInt32(fields[2]);
				int nLuckyStone = Convert.ToInt32(fields[3]);
				int firstUseBinding = Convert.ToInt32(fields[4]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (goodsData == null || goodsData.GCount <= 0)
				{
					goodsData = DamonMgr.GetDamonGoodsDataByDbID(client, id);
					if (goodsData == null || goodsData.GCount <= 0)
					{
						goodsData = JingLingYaoSaiManager.GetPaiZhuDamonGoodsDataByDbID(client, id);
						if (goodsData == null || goodsData.GCount <= 0)
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
							{
								-1,
								roleID,
								id,
								0,
								0
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
				}
				int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				if (nCategories == 9 || nCategories == 10)
				{
					return UpgradeDamon.UpgradeDamonProcess(pool, client, goodsData, out tcpOutPacket, nID, tcpClientPool, tcpMgr);
				}
				if (nCategories < 0 || (nCategories > 6 && nCategories < 11) || nCategories > 21)
				{
					if (!GoodsUtil.CanUpgrade(nCategories, 0))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-8,
							roleID,
							id,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				bool forgeLevelLimit = false;
				if (goodsData.Forge_level >= 20)
				{
					forgeLevelLimit = true;
				}
				else if (Global.ForgeMaxOpen == 2)
				{
					DateTime now = TimeUtil.NowDateTime();
					if (goodsData.Forge_level >= 15 && (now < Global.ForgeMaxOpenStartTime || now > Global.ForgeMaxOpenEndTime))
					{
						forgeLevelLimit = true;
					}
				}
				else if (Global.ForgeMaxOpen != 1)
				{
					if (goodsData.Forge_level >= 15)
					{
						forgeLevelLimit = true;
					}
				}
				if (forgeLevelLimit)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-4,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nLuckyStone > 0 && Global.GetLuckyGoodsIndex(nLuckyStone) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				client.ClientData._ReplaceExtArg.Reset();
				client.ClientData._ReplaceExtArg.CurrEquipQiangHuaLevel = goodsData.Forge_level;
				if (SingletonTemplate<GoodsReplaceManager>.Instance().NeedCheckSuit(nCategories))
				{
					client.ClientData._ReplaceExtArg.CurrEquipSuit = Global.GetEquipGoodsSuitID(goodsData.GoodsID);
				}
				List<Tuple<GoodsReplaceResult, int>> eachGoodsReplaceInfo = new List<Tuple<GoodsReplaceResult, int>>();
				if (nProtectStone > 0)
				{
					if (Data.ForgeProtectStoneGoodsID == null || Data.ForgeProtectStoneGoodsID.Length <= goodsData.Forge_level + 1 || Data.ForgeProtectStoneGoodsID[goodsData.Forge_level + 1] != nProtectStone)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-2,
							roleID,
							id,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (Data.ForgeProtectStoneGoodsNum == null || Data.ForgeProtectStoneGoodsNum.Length <= goodsData.Forge_level + 1)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-6,
							roleID,
							id,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int iNeedProtectStoneCnt = Data.ForgeProtectStoneGoodsNum[goodsData.Forge_level + 1];
					GoodsReplaceResult protectStoneReplaceresult = SingletonTemplate<GoodsReplaceManager>.Instance().GetReplaceResult(client, nProtectStone);
					if (protectStoneReplaceresult == null || protectStoneReplaceresult.TotalGoodsCnt() < iNeedProtectStoneCnt)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-22,
							roleID,
							id,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					eachGoodsReplaceInfo.Add(new Tuple<GoodsReplaceResult, int>(protectStoneReplaceresult, iNeedProtectStoneCnt));
				}
				string strNeedGoodsID = Data.ForgeNeedGoodsID[goodsData.Forge_level + 1];
				string strNeedGoodsNum = Data.ForgeNeedGoodsNum[goodsData.Forge_level + 1];
				string[] strID = strNeedGoodsID.Split(new char[]
				{
					','
				});
				string[] strNum = strNeedGoodsNum.Split(new char[]
				{
					','
				});
				if (strID.Length != strNum.Length)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-6,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				for (int i = 0; i < strID.Length; i++)
				{
					int needGoodsID = 0;
					int needGoodsCnt = 0;
					if (!int.TryParse(strID[i], out needGoodsID) || !int.TryParse(strNum[i], out needGoodsCnt))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-6,
							roleID,
							id,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GoodsReplaceResult materialReplaceRet = SingletonTemplate<GoodsReplaceManager>.Instance().GetReplaceResult(client, needGoodsID);
					if (materialReplaceRet == null || materialReplaceRet.TotalGoodsCnt() < needGoodsCnt)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-15,
							roleID,
							id,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					eachGoodsReplaceInfo.Add(new Tuple<GoodsReplaceResult, int>(materialReplaceRet, needGoodsCnt));
				}
				List<Tuple<List<GoodsReplaceResult.ReplaceItem>, int>> realCostList = new List<Tuple<List<GoodsReplaceResult.ReplaceItem>, int>>();
				foreach (Tuple<GoodsReplaceResult, int> tuple in eachGoodsReplaceInfo)
				{
					GoodsReplaceResult replace = tuple.Item1;
					int costCnt = tuple.Item2;
					List<GoodsReplaceResult.ReplaceItem> costOrder = new List<GoodsReplaceResult.ReplaceItem>();
					if (firstUseBinding == 1)
					{
						costOrder.AddRange(replace.BindList);
						costOrder.Add(replace.OriginBindGoods);
						costOrder.AddRange(replace.UnBindList);
						costOrder.Add(replace.OriginUnBindGoods);
					}
					else
					{
						costOrder.AddRange(replace.UnBindList);
						costOrder.Add(replace.OriginUnBindGoods);
						costOrder.AddRange(replace.BindList);
						costOrder.Add(replace.OriginBindGoods);
					}
					realCostList.Add(new Tuple<List<GoodsReplaceResult.ReplaceItem>, int>(costOrder, costCnt));
				}
				int needYinLiang = Global.GetForgeNextLevelYinLiang(goodsData);
				needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
				if (!Global.SubBindTongQianAndTongQian(client, needYinLiang, "强化装备"))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool bRealUsedBinding = false;
				foreach (Tuple<List<GoodsReplaceResult.ReplaceItem>, int> each in realCostList)
				{
					List<GoodsReplaceResult.ReplaceItem> itemList = each.Item1;
					int stillNeedCnt = each.Item2;
					foreach (GoodsReplaceResult.ReplaceItem item in itemList)
					{
						if (item.GoodsCnt > 0)
						{
							int realCostCnt = Math.Min(item.GoodsCnt, stillNeedCnt);
							if (realCostCnt <= 0)
							{
								break;
							}
							bool usedBinding_just_placeholder = false;
							bool usedTimeLimited_just_placeholder = false;
							if (item.IsBind)
							{
								bRealUsedBinding = true;
								if (!GameManager.ClientMgr.NotifyUseBindGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, item.GoodsID, realCostCnt, false, out usedBinding_just_placeholder, out usedTimeLimited_just_placeholder, false))
								{
									strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
									{
										-200,
										roleID,
										id,
										0,
										0
									});
									tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
									return TCPProcessCmdResults.RESULT_DATA;
								}
							}
							else if (!GameManager.ClientMgr.NotifyUseNotBindGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, item.GoodsID, realCostCnt, false, out usedBinding_just_placeholder, out usedTimeLimited_just_placeholder, false))
							{
								strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
								{
									-200,
									roleID,
									id,
									0,
									0
								});
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
							stillNeedCnt -= realCostCnt;
						}
					}
				}
				int oldUsing = goodsData.Using;
				if (goodsData.Using > 0)
				{
					goodsData.Using = 0;
				}
				int luckValue = 0;
				if (Global.StartForge(client, goodsData, luckValue))
				{
					goodsData.Forge_level++;
					if (goodsData.Binding != 1)
					{
						goodsData.Binding = (bRealUsedBinding ? 1 : 0);
					}
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						1,
						roleID,
						id,
						goodsData.Forge_level,
						goodsData.Binding
					});
					Global.BroadcastForgeOk(client, goodsData);
					ChengJiuManager.OnRoleEquipmentQiangHua(client, goodsData.Forge_level);
					ChengJiuManager.OnFirstQiangHua(client);
					SevenDayGoalEventObject forgePeidaiEv = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiForgeEquip);
					GlobalEventSource.getInstance().fireEvent(forgePeidaiEv);
					SevenDayGoalEventObject forgeLevelEv = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.ForgeEquipLevel);
					forgeLevelEv.Arg1 = goodsData.Forge_level;
					GlobalEventSource.getInstance().fireEvent(forgeLevelEv);
					ProcessTask.ProcessRoleTaskVal(client, TaskTypes.EquipForgeLevel, goodsData.Forge_level);
				}
				else
				{
					bool nRet = true;
					if (goodsData.Forge_level >= 6 && nProtectStone <= 0)
					{
						if (Global.ForgeProtectOpen <= 0 || goodsData.Forge_level != Global.ForgeProtectOpenLevel)
						{
							nRet = false;
							goodsData.Forge_level--;
						}
					}
					if (!nRet)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-500,
							roleID,
							id,
							goodsData.Forge_level,
							goodsData.Binding
						});
					}
					else
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							0,
							roleID,
							id,
							goodsData.Forge_level,
							goodsData.Binding
						});
					}
				}
				GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.ForgeEquipTimes));
				if (client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriStrengthen))
				{
					client._IconStateMgr.AddFlushIconState(14000, client._IconStateMgr.IsAnyJieRiTipActived());
					client._IconStateMgr.SendIconStateToClient(client);
				}
				string[] dbFields = null;
				string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					client.ClientData.RoleID,
					goodsData.Id,
					"*",
					goodsData.Forge_level,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.Binding,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (oldUsing != goodsData.Using)
				{
					goodsData.Using = oldUsing;
					Global.RefreshEquipProp(client);
					GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
					GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
				}
				Global.ModRoleGoodsEvent(client, goodsData, 0, "强化", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "强化");
				DailyActiveManager.ProcessDailyActiveEquipForge(client);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E39 RID: 15929 RVA: 0x00362B80 File Offset: 0x00360D80
		private static TCPProcessCmdResults ProcessEquipJuHunCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int goodId = Convert.ToInt32(fields[1]);
				int useProtectStone = Convert.ToInt32(fields[2]);
				int firstUseBinding = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (GameFuncControlManager.IsGameFuncDisabled(GameFuncType.System2Dot3) || !GlobalNew.IsGongNengOpened(client, GongNengIDs.JuHun, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-110,
						roleID,
						goodId,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, goodId);
				if (goodsData == null || goodsData.GCount <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						goodId,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemGoods = null;
				if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						goodId,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (systemGoods.GetIntValue("SuitID", -1) < 11)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-2,
						roleID,
						goodId,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				if (nCategories < 0 || (nCategories > 6 && nCategories < 11) || nCategories > 21 || nCategories == 20)
				{
					if (!GoodsUtil.CanUpgrade(nCategories, 11))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-8,
							roleID,
							goodId,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				bool juHunLevelLimit = false;
				if (goodsData.JuHunID + 1 > Data.EquipJuHunDataDict.Count)
				{
					juHunLevelLimit = true;
				}
				if (juHunLevelLimit)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-4,
						roleID,
						goodId,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				EquipJuHunXmlData upJuHunNeed;
				if (!Data.EquipJuHunDataDict.TryGetValue(goodsData.JuHunID + 1, out upJuHunNeed))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-404,
						roleID,
						goodId,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				client.ClientData._ReplaceExtArg.Reset();
				client.ClientData._ReplaceExtArg.CurrEquipJuHun = upJuHunNeed.Type;
				List<Tuple<GoodsReplaceResult, int>> eachGoodsReplaceInfo = new List<Tuple<GoodsReplaceResult, int>>();
				if (useProtectStone > 0)
				{
					Dictionary<int, int> protectGoods = upJuHunNeed.ProtectGoods;
					if (protectGoods.Count <= 0)
					{
						useProtectStone = 0;
					}
					else
					{
						foreach (KeyValuePair<int, int> item in protectGoods)
						{
							int iNeedProtectStoneCnt = item.Value;
							GoodsReplaceResult protectStoneReplaceresult = SingletonTemplate<GoodsReplaceManager>.Instance().GetReplaceResult(client, item.Key);
							if (protectStoneReplaceresult == null || protectStoneReplaceresult.TotalGoodsCnt() < iNeedProtectStoneCnt)
							{
								strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
								{
									-22,
									roleID,
									goodId,
									0,
									0
								});
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
							eachGoodsReplaceInfo.Add(new Tuple<GoodsReplaceResult, int>(protectStoneReplaceresult, iNeedProtectStoneCnt));
						}
					}
				}
				Dictionary<int, int> costGoods = upJuHunNeed.CostGoods;
				foreach (KeyValuePair<int, int> item in costGoods)
				{
					int needGoodsCnt = item.Value;
					GoodsReplaceResult materialReplaceRet = SingletonTemplate<GoodsReplaceManager>.Instance().GetReplaceResult(client, item.Key);
					if (materialReplaceRet == null || materialReplaceRet.TotalGoodsCnt() < needGoodsCnt)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-15,
							roleID,
							goodId,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					eachGoodsReplaceInfo.Add(new Tuple<GoodsReplaceResult, int>(materialReplaceRet, needGoodsCnt));
				}
				List<Tuple<List<GoodsReplaceResult.ReplaceItem>, int>> realCostList = new List<Tuple<List<GoodsReplaceResult.ReplaceItem>, int>>();
				foreach (Tuple<GoodsReplaceResult, int> tuple in eachGoodsReplaceInfo)
				{
					GoodsReplaceResult replace = tuple.Item1;
					int costCnt = tuple.Item2;
					List<GoodsReplaceResult.ReplaceItem> costOrder = new List<GoodsReplaceResult.ReplaceItem>();
					if (firstUseBinding == 1)
					{
						costOrder.AddRange(replace.BindList);
						costOrder.Add(replace.OriginBindGoods);
						costOrder.AddRange(replace.UnBindList);
						costOrder.Add(replace.OriginUnBindGoods);
					}
					else
					{
						costOrder.AddRange(replace.UnBindList);
						costOrder.Add(replace.OriginUnBindGoods);
						costOrder.AddRange(replace.BindList);
						costOrder.Add(replace.OriginBindGoods);
					}
					realCostList.Add(new Tuple<List<GoodsReplaceResult.ReplaceItem>, int>(costOrder, costCnt));
				}
				if (!Global.SubBindTongQianAndTongQian(client, upJuHunNeed.CostBandJinBi, "装备聚魂"))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3,
						roleID,
						goodId,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool bRealUsedBinding = false;
				foreach (Tuple<List<GoodsReplaceResult.ReplaceItem>, int> each in realCostList)
				{
					List<GoodsReplaceResult.ReplaceItem> itemList = each.Item1;
					int stillNeedCnt = each.Item2;
					foreach (GoodsReplaceResult.ReplaceItem item2 in itemList)
					{
						if (item2.GoodsCnt > 0)
						{
							int realCostCnt = Math.Min(item2.GoodsCnt, stillNeedCnt);
							if (realCostCnt <= 0)
							{
								break;
							}
							bool usedBinding_just_placeholder = false;
							bool usedTimeLimited_just_placeholder = false;
							if (item2.IsBind)
							{
								bRealUsedBinding = true;
								if (!GameManager.ClientMgr.NotifyUseBindGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, item2.GoodsID, realCostCnt, false, out usedBinding_just_placeholder, out usedTimeLimited_just_placeholder, false))
								{
									strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
									{
										-200,
										roleID,
										goodId,
										0,
										0
									});
									tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
									return TCPProcessCmdResults.RESULT_DATA;
								}
							}
							else if (!GameManager.ClientMgr.NotifyUseNotBindGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, item2.GoodsID, realCostCnt, false, out usedBinding_just_placeholder, out usedTimeLimited_just_placeholder, false))
							{
								strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
								{
									-200,
									roleID,
									goodId,
									0,
									0
								});
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
							stillNeedCnt -= realCostCnt;
						}
					}
				}
				int oldUsing = goodsData.Using;
				if (goodsData.Using > 0)
				{
					goodsData.Using = 0;
				}
				if ((double)Global.GetRandomNumber(1, 100) / 100.0 < upJuHunNeed.SuccessProportion)
				{
					goodsData.JuHunID++;
					if (goodsData.Binding != 1)
					{
						goodsData.Binding = (bRealUsedBinding ? 1 : 0);
					}
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						1,
						roleID,
						goodId,
						goodsData.JuHunID,
						goodsData.Binding
					});
				}
				else
				{
					if (useProtectStone < 1 && goodsData.JuHunID > 0 && goodsData.JuHunID % 10 != 1)
					{
						goodsData.JuHunID--;
					}
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						0,
						roleID,
						goodId,
						goodsData.JuHunID,
						goodsData.Binding
					});
				}
				UpdateGoodsArgs updateGoodsArgs = new UpdateGoodsArgs
				{
					RoleID = client.ClientData.RoleID,
					DbID = goodId
				};
				updateGoodsArgs.Binding = goodsData.Binding;
				updateGoodsArgs.JuHunProps = goodsData.JuHunID;
				int ret = Global.UpdateGoodsProp(client, goodsData, updateGoodsArgs, true);
				if (ret < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						goodId,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (oldUsing != goodsData.Using)
				{
					goodsData.Using = oldUsing;
					Global.RefreshEquipProp(client);
					GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
					GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
				}
				Global.ModRoleGoodsEvent(client, goodsData, 0, "聚魂", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.JuHun, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "聚魂");
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E3A RID: 15930 RVA: 0x003639A4 File Offset: 0x00361BA4
		private static TCPProcessCmdResults ProcessSpriteEquipBornIndexUpdateCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int rockGoodsID = Convert.ToInt32(fields[2]);
				int num = (1 == Convert.ToInt32(fields[3])) ? 1 : 0;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-1,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-4,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				if (category < 0 || (category > 6 && category < 11) || category > 21)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-100,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] bornNeedGoodsArr = GameManager.systemParamsList.GetParamValueIntArrayByName("TianshengJihuoGoodsID", ',');
				if (bornNeedGoodsArr.Length != 2)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-101,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int bornUpdateNeedGoodsID = bornNeedGoodsArr[0];
				if (goodsData.BornIndex != 0)
				{
					bornUpdateNeedGoodsID = bornNeedGoodsArr[1];
				}
				if (bornUpdateNeedGoodsID != rockGoodsID)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-3,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needYinLiang = (int)GameManager.systemParamsList.GetParamValueIntByName("TianshengXilianMoney", -1);
				needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
				if (needYinLiang < 0)
				{
					needYinLiang = 0;
				}
				if (needYinLiang > 0 && needYinLiang > Global.GetTotalBindTongQianAndTongQianVal(client))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-31,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem destXmlItem = null;
				if (!GameManager.systemEquipBornMgr.SystemXmlItemDict.TryGetValue(Global.GetTianShengParamsIndex(goodsData.GoodsID), out destXmlItem))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-2,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int minBornValue = destXmlItem.GetIntValue("MinBorn", -1);
				int maxBornValue = destXmlItem.GetIntValue("MaxBorn", -1);
				int needGoodsNum = 1;
				int totalNum = Global.GetTotalGoodsCountByID(client, rockGoodsID);
				if (totalNum < needGoodsNum)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-6,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (needYinLiang > 0 && !Global.SubBindTongQianAndTongQian(client, needYinLiang, "洗练装备"))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-61,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, rockGoodsID, needGoodsNum, false, out usedBinding, out usedTimeLimited, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-10,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int goodsOldBornIndex = goodsData.BornIndex;
				int goodsThisTimeUpdateBornIndex = Global.UpdateNewEquipBornValue(goodsData, minBornValue, maxBornValue);
				if (goodsThisTimeUpdateBornIndex < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-12,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string[] dbFields = null;
				string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					client.ClientData.RoleID,
					goodsData.Id,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.Binding,
					"*",
					goodsData.BornIndex,
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-13,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-14,
						roleID,
						id,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.ModRoleGoodsEvent(client, goodsData, 0, "装备天生洗练", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "装备天生洗练");
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
				{
					1,
					roleID,
					id,
					goodsOldBornIndex,
					goodsThisTimeUpdateBornIndex,
					goodsData.BornIndex,
					goodsData.Binding
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E3B RID: 15931 RVA: 0x003644DC File Offset: 0x003626DC
		private static TCPProcessCmdResults ProcessSprEquipFenJieCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}", -1, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -2, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				if (category < 0 || category > 49)
				{
					strcmd = string.Format("{0}:{1}:{2}", -3, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Forge_level <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -4, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needBagSpaceNum = goodsData.Forge_level;
				if (needBagSpaceNum > 0 && !Global.CanAddGoodsNum(client, needBagSpaceNum))
				{
					strcmd = string.Format("{0}:{1}:{2}", -5, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] qiangHuaRocksIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeGoodsIDs", ',');
				if (goodsData.Forge_level > qiangHuaRocksIDs.Length - 1)
				{
					strcmd = string.Format("{0}:{1}:{2}", -51, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] needYinLiangArr = GameManager.systemParamsList.GetParamValueIntArrayByName("QianghuashiFenliMoney", ',');
				if (goodsData.Forge_level > needYinLiangArr.Length)
				{
					strcmd = string.Format("{0}:{1}:{2}", -6, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needYinLiang = needYinLiangArr[goodsData.Forge_level - 1];
				needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
				if (needYinLiang <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -7, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (needYinLiang > 0 && needYinLiang > Global.GetTotalBindTongQianAndTongQianVal(client))
				{
					strcmd = string.Format("{0}:{1}:{2}", -8, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (needYinLiang > 0 && !Global.SubBindTongQianAndTongQian(client, needYinLiang, "装备分解"))
				{
					strcmd = string.Format("{0}:{1}:{2}", -9, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int goodsForgeLevle = goodsData.Forge_level;
				string[] dbFields = null;
				goodsData.Forge_level = 0;
				string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					client.ClientData.RoleID,
					goodsData.Id,
					"*",
					goodsData.Forge_level,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}", -11, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -12, roleID, goodsData.Id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				for (int i = 1; i <= goodsForgeLevle; i++)
				{
					GoodsData newGoodsData = Global.GetNewGoodsData(qiangHuaRocksIDs[i], goodsData.Binding);
					int dbRet = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, newGoodsData.GoodsID, 1, newGoodsData.Quality, "", newGoodsData.Forge_level, newGoodsData.Binding, 0, newGoodsData.Jewellist, false, 1, "装备强化分解", "1900-01-01 12:00:00", newGoodsData.AddPropIndex, newGoodsData.BornIndex, newGoodsData.Lucky, newGoodsData.Strong, 0, 0, 0, null, null, 0, true);
				}
				Global.ModRoleGoodsEvent(client, goodsData, 0, "装备强化分解", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "装备强化分解");
				strcmd = string.Format("{0}:{1}:{2}", 1, roleID, goodsData.Id);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E3C RID: 15932 RVA: 0x00364CC0 File Offset: 0x00362EC0
		private static TCPProcessCmdResults ProcessSpriteEquipInheritCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int leftGoodsDbID = Convert.ToInt32(fields[1]);
				int rightGoodsDbID = Convert.ToInt32(fields[2]);
				int nSubMoneyType = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData leftGoodsData = Global.GetGoodsByDbID(client, leftGoodsDbID);
				string strcmd;
				if (null == leftGoodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-1,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData rightGoodsData = Global.GetGoodsByDbID(client, rightGoodsDbID);
				if (null == rightGoodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-2,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int toOccupationLeft = Global.GetMainOccupationByGoodsID(leftGoodsData.GoodsID);
				int toOccupationRight = Global.GetMainOccupationByGoodsID(rightGoodsData.GoodsID);
				if (toOccupationLeft != toOccupationRight)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-202,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int categoryLeft = Global.GetGoodsCatetoriy(leftGoodsData.GoodsID);
				int categoryRight = Global.GetGoodsCatetoriy(rightGoodsData.GoodsID);
				int ret = GoodsUtil.CanUpgradeInhert(categoryLeft, categoryRight, 2);
				if (ret < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						ret,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (leftGoodsData.Site != 0 || rightGoodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-5,
						roleID,
						leftGoodsData.Id,
						rightGoodsData.Id
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nSubMoneyType < 1 || nSubMoneyType > 2)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-20,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nSubMoneyType == 1)
				{
					int nNeedMoney = Global.GetEquipInheritNeedYinLiang(leftGoodsData);
					if (!Global.SubBindTongQianAndTongQian(client, nNeedMoney, "装备传承"))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-21,
							roleID,
							leftGoodsDbID,
							rightGoodsDbID
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (nSubMoneyType == 2)
				{
					int nNeedMoney = Global.GetEquipInheritNeedYuanBao(leftGoodsData);
					if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, nNeedMoney, "装备传承", true, true, false, DaiBiSySType.ZhuangBeiChuanCheng))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-22,
							roleID,
							leftGoodsDbID,
							rightGoodsDbID
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (leftGoodsData.Forge_level <= 0 || leftGoodsData.Forge_level <= rightGoodsData.Forge_level)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-9,
						roleID,
						leftGoodsData.Id,
						rightGoodsData.Id
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nBinding = 0;
				if (rightGoodsData.Binding == 1 || leftGoodsData.Binding == 1)
				{
					nBinding = 1;
				}
				int rightGoodsOldForge_level = rightGoodsData.Forge_level;
				int leftGoodsOldForge_level = leftGoodsData.Forge_level;
				int result = 1;
				if (Global.IsChuanChenSuccess(leftGoodsData))
				{
					rightGoodsData.Forge_level = leftGoodsData.Forge_level;
					leftGoodsData.Forge_level = 0;
					string[] dbFields = null;
					string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
					{
						client.ClientData.RoleID,
						leftGoodsData.Id,
						"*",
						leftGoodsData.Forge_level,
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*"
					});
					TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
					if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-12,
							roleID,
							leftGoodsData.Id,
							rightGoodsData.Id
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-13,
							roleID,
							leftGoodsData.Id,
							rightGoodsData.Id
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					dbFields = null;
					strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
					{
						client.ClientData.RoleID,
						rightGoodsData.Id,
						"*",
						rightGoodsData.Forge_level,
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						nBinding,
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*"
					});
					dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
					if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-14,
							roleID,
							leftGoodsData.Id,
							rightGoodsData.Id
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-15,
							roleID,
							leftGoodsData.Id,
							rightGoodsData.Id
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					Global.ModRoleGoodsEvent(client, leftGoodsData, 0, "装备传承_提供方", false);
					Global.ModRoleGoodsEvent(client, rightGoodsData, 0, "装备传承_接受方", false);
					EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, leftGoodsData.GoodsID, (long)leftGoodsData.Id, 0, leftGoodsData.GCount, "装备传承_提供方");
					EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, rightGoodsData.GoodsID, (long)rightGoodsData.Id, 0, rightGoodsData.GCount, "装备传承_接受方");
					Global.BroadcastChuanChengOk(client, leftGoodsData, rightGoodsData);
					if (leftGoodsData.Using > 0 || rightGoodsData.Using > 0)
					{
						Global.RefreshEquipPropAndNotify(client);
					}
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}:{14}:{15}:{16}:{17}", new object[]
					{
						result,
						roleID,
						leftGoodsData.Id,
						rightGoodsData.Id,
						leftGoodsData.BornIndex,
						leftGoodsData.AddPropIndex,
						leftGoodsData.Quality,
						leftGoodsData.Forge_level,
						leftGoodsData.Binding,
						leftGoodsData.Lucky,
						leftGoodsData.Strong,
						rightGoodsData.BornIndex,
						rightGoodsData.AddPropIndex,
						rightGoodsData.Quality,
						rightGoodsData.Forge_level,
						nBinding,
						rightGoodsData.Lucky,
						rightGoodsData.Strong
					});
					Global.ModifyGoodsBindPorp(client, rightGoodsDbID, nBinding);
					ChengJiuManager.OnFirstJiCheng(client);
					GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.EquipChuanChengTimes));
					ProcessTask.ProcessAddTaskVal(client, TaskTypes.EquipChuanCheng, -1, 1, new object[0]);
				}
				else
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-23,
						roleID,
						leftGoodsData.Id,
						rightGoodsData.Id
					});
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E3D RID: 15933 RVA: 0x003659DC File Offset: 0x00363BDC
		private static TCPProcessCmdResults ProcessSpriteEquipJuHunInheritCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int leftGoodsDbID = Convert.ToInt32(fields[1]);
				int rightGoodsDbID = Convert.ToInt32(fields[2]);
				int nSubMoneyType = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (GameFuncControlManager.IsGameFuncDisabled(GameFuncType.System2Dot3) || !GlobalNew.IsGongNengOpened(client, GongNengIDs.JuHun, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
					{
						-110,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData leftGoodsData = Global.GetGoodsByDbID(client, leftGoodsDbID);
				if (null == leftGoodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
					{
						-1,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData rightGoodsData = Global.GetGoodsByDbID(client, rightGoodsDbID);
				if (null == rightGoodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
					{
						-2,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemGoods = null;
				if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(rightGoodsData.GoodsID, out systemGoods))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						rightGoodsDbID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (systemGoods.GetIntValue("SuitID", -1) < 11)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-203,
						roleID,
						rightGoodsDbID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int categoryLeft = Global.GetGoodsCatetoriy(leftGoodsData.GoodsID);
				int categoryRight = Global.GetGoodsCatetoriy(rightGoodsData.GoodsID);
				int ret0 = GoodsUtil.CanUpgradeInhert(categoryLeft, categoryRight, 10);
				if (ret0 < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
					{
						ret0,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (leftGoodsData.Site != 0 || rightGoodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
					{
						-5,
						roleID,
						leftGoodsData.Id,
						rightGoodsData.Id
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (leftGoodsData.JuHunID < 1 || leftGoodsData.JuHunID <= rightGoodsData.JuHunID)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
					{
						-9,
						roleID,
						leftGoodsData.Id,
						rightGoodsData.Id
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nSubMoneyType < 1 || nSubMoneyType > 2)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
					{
						-20,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				EquipJuHunXmlData juHunxml;
				if (!Data.EquipJuHunDataDict.TryGetValue(leftGoodsData.JuHunID, out juHunxml))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
					{
						-500,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nSubMoneyType == 1)
				{
					int[] nNeedMoney = GameManager.systemParamsList.GetParamValueIntArrayByName("JuHunChuanChengXiaoHaoJinBi", ',');
					if (!Global.SubBindTongQianAndTongQian(client, nNeedMoney[juHunxml.Type], "装备聚魂传承"))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
						{
							-21,
							roleID,
							leftGoodsDbID,
							rightGoodsDbID
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (nSubMoneyType == 2)
				{
					int[] nNeedZuanShi = GameManager.systemParamsList.GetParamValueIntArrayByName("JuHunChuanChengXiaoHaoZhuanShi", ',');
					if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, nNeedZuanShi[juHunxml.Type], "装备聚魂传承", true, true, false, DaiBiSySType.ZhuangBeiChuanCheng))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
						{
							-22,
							roleID,
							leftGoodsDbID,
							rightGoodsDbID
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				int nBinding = 0;
				if (rightGoodsData.Binding == 1 || leftGoodsData.Binding == 1)
				{
					nBinding = 1;
				}
				int rightGoodsOldJuHunID = rightGoodsData.JuHunID;
				int leftGoodsOldJuHunID = leftGoodsData.JuHunID;
				int[] chuanChengDiaoJiArr = GameManager.systemParamsList.GetParamValueIntArrayByName("JuHunChuanChengGoodsRate", ',');
				if (chuanChengDiaoJiArr == null || juHunxml.Type > chuanChengDiaoJiArr.Length)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
					{
						-501,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (Global.GetRandomNumber(1, 101) > chuanChengDiaoJiArr[juHunxml.Type])
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0", new object[]
					{
						0,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				rightGoodsData.JuHunID = leftGoodsData.JuHunID;
				leftGoodsData.JuHunID = 0;
				UpdateGoodsArgs updateGoodsArgs = new UpdateGoodsArgs
				{
					RoleID = client.ClientData.RoleID,
					DbID = leftGoodsDbID
				};
				updateGoodsArgs.JuHunProps = leftGoodsData.JuHunID;
				int ret = Global.UpdateGoodsProp(client, leftGoodsData, updateGoodsArgs, true);
				if (ret < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						leftGoodsDbID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				updateGoodsArgs = new UpdateGoodsArgs
				{
					RoleID = client.ClientData.RoleID,
					DbID = rightGoodsDbID
				};
				updateGoodsArgs.Binding = nBinding;
				updateGoodsArgs.JuHunProps = rightGoodsData.JuHunID;
				ret = Global.UpdateGoodsProp(client, rightGoodsData, updateGoodsArgs, true);
				if (ret < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						leftGoodsDbID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.ModRoleGoodsEvent(client, leftGoodsData, 0, "装备聚魂传承_提供方", false);
				Global.ModRoleGoodsEvent(client, rightGoodsData, 0, "装备聚魂传承_接受方", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.JuHun, OpTags.None, leftGoodsData.GoodsID, (long)leftGoodsData.Id, 0, leftGoodsData.GCount, "装备聚魂传承_提供方");
				EventLogManager.AddGoodsEvent(client, OpTypes.JuHun, OpTags.None, rightGoodsData.GoodsID, (long)rightGoodsData.Id, 0, rightGoodsData.GCount, "装备聚魂传承_接受方");
				ProcessTask.ProcessAddTaskVal(client, TaskTypes.EquipChuanCheng, -1, 1, new object[0]);
				if (leftGoodsData.Using > 0 || rightGoodsData.Using > 0)
				{
					Global.RefreshEquipPropAndNotify(client);
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", new object[]
				{
					1,
					roleID,
					leftGoodsData.Id,
					rightGoodsData.Id,
					leftGoodsData.JuHunID,
					rightGoodsData.JuHunID,
					leftGoodsData.Binding,
					nBinding
				});
				Global.ModifyGoodsBindPorp(client, rightGoodsDbID, nBinding);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E3E RID: 15934 RVA: 0x0036657C File Offset: 0x0036477C
		private static TCPProcessCmdResults ProcessSpriteSubForgeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int rockGoodsID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int subForgeGoodsID = 0;
				int needNum = 0;
				int needYinLiang = 0;
				if (!Global.GetSubForgeNextLevelParams(goodsData, out subForgeGoodsID, out needNum, out needYinLiang))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-9910,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (subForgeGoodsID != rockGoodsID)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-9010,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-9998,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-9999,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int totalNum = Global.GetTotalGoodsCountByID(client, rockGoodsID);
				if (totalNum < needNum)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-2,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
				if (needYinLiang > client.ClientData.YinLiang)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.AddPropIndex >= 10)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-4,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang, "锻造装备", false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-5,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int newGoodsBinding = goodsData.Binding;
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, rockGoodsID, needNum, false, out usedBinding, out usedTimeLimited, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-100,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (newGoodsBinding <= 0)
				{
					newGoodsBinding = (usedBinding ? 1 : 0);
				}
				goodsData.AddPropIndex++;
				goodsData.Binding = newGoodsBinding;
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					1,
					roleID,
					id,
					goodsData.AddPropIndex,
					goodsData.Binding
				});
				Global.BroadcastSubForgeOk(client, goodsData);
				string[] dbFields = null;
				string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					client.ClientData.RoleID,
					goodsData.Id,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.Binding,
					goodsData.AddPropIndex,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.ModRoleGoodsEvent(client, goodsData, 0, "装备精锻", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "装备精锻");
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E3F RID: 15935 RVA: 0x00366EB8 File Offset: 0x003650B8
		private static TCPProcessCmdResults ProcessSpriteEnchanceCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int rockGoodsID = Convert.ToInt32(fields[2]);
				int luckyNum = Convert.ToInt32(fields[3]);
				luckyNum = Global.GMin(luckyNum, 20);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-1,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-9998,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-9999,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needNum = Global.GetEnchanceNextLevelRock(goodsData);
				int totalNum = Global.GetTotalGoodsCountByID(client, rockGoodsID);
				if (totalNum < needNum)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-2,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needYinLiang = Global.GetEnchanceNextLevelYinLiang(goodsData);
				needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
				if (needYinLiang > client.ClientData.YinLiang)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-3,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Quality >= 4)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-4,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang, "强化装备", false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-5,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needGoodsID = Global.GetEnchanceGoodsID(goodsData.Quality);
				if (rockGoodsID != needGoodsID)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-6,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int newGoodsBinding = goodsData.Binding;
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, rockGoodsID, needNum, false, out usedBinding, out usedTimeLimited, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-100,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (newGoodsBinding <= 0)
				{
					newGoodsBinding = (usedBinding ? 1 : 0);
				}
				if (luckyNum > 0)
				{
					int enchanceLuckyGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("EnchanceLuckyGoodsID", -1);
					if (enchanceLuckyGoodsID >= 0)
					{
						totalNum = Global.GetTotalGoodsCountByID(client, enchanceLuckyGoodsID);
						luckyNum = Global.GMin(totalNum, luckyNum);
						luckyNum = Global.GetAllowEnchanceLuckyNum(client, goodsData, luckyNum);
						if (luckyNum > 0)
						{
							usedBinding = false;
							if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, enchanceLuckyGoodsID, luckyNum, false, out usedBinding, out usedTimeLimited, false))
							{
								strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
								{
									-101,
									roleID,
									id,
									goodsData.Quality,
									goodsData.Props,
									goodsData.Binding
								});
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
							if (newGoodsBinding <= 0)
							{
								newGoodsBinding = (usedBinding ? 1 : 0);
							}
						}
					}
				}
				string props = "";
				if (Global.StartEnchance(client, goodsData, luckyNum))
				{
					goodsData.Quality++;
					goodsData.Binding = newGoodsBinding;
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						1,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					Global.BroadcastEnchanceOk(client, goodsData);
				}
				else
				{
					goodsData.Binding = newGoodsBinding;
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						0,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
				}
				string[] dbFields = null;
				string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					client.ClientData.RoleID,
					goodsData.Id,
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.Quality,
					props,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.Binding,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-10,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-10,
						roleID,
						id,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.ModRoleGoodsEvent(client, goodsData, 0, "提品", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "提品");
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E40 RID: 15936 RVA: 0x00367A58 File Offset: 0x00365C58
		private static TCPProcessCmdResults ProcessSpriteGetOtherAttribCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int ohterRoleID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameClient otherClient = GameManager.ClientMgr.FindClient(ohterRoleID);
				string strcmd;
				if (null == otherClient)
				{
					strcmd = string.Format("{0}", -1);
				}
				else
				{
					strcmd = string.Format("{0}", 0);
					RoleData roleData = Global.ClientToRoleData2(otherClient);
					if (otherClient.ClientData.MyMarriageData.byMarrytype != -1)
					{
						if (null == roleData.GoodsDataList)
						{
							roleData.GoodsDataList = new List<GoodsData>();
						}
						GoodsData tmpGoods = Global.GetNewGoodsData(otherClient.ClientData.MyMarriageData.nRingID, 0);
						tmpGoods.Using = 1;
						tmpGoods.Forge_level = (int)otherClient.ClientData.MyMarriageData.byGoodwilllevel;
						tmpGoods.AppendPropLev = (int)otherClient.ClientData.MyMarriageData.byGoodwillstar;
						roleData.GoodsDataList.Add(tmpGoods);
						roleData.OtherName = MarryLogic.GetRoleName(otherClient.ClientData.MyMarriageData.nSpouseID);
					}
					client.sendCmd<RoleData>(111, roleData, false);
					GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client, otherClient);
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E41 RID: 15937 RVA: 0x00367D10 File Offset: 0x00365F10
		private static TCPProcessCmdResults ProcessSpriteMallBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int malID = Convert.ToInt32(fields[1]);
				int goodsNum = Convert.ToInt32(fields[2]);
				bool autoUseGold = 1 == Convert.ToInt32(fields[3]);
				if (goodsNum <= 0 || goodsNum >= 10000)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("商城购买, 非法的外挂购买, 物品数量不能小于等于0或者大于10000, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						goodsNum
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SystemXmlItem systemMallItem = null;
				if (!GameManager.systemMallMgr.SystemXmlItemDict.TryGetValue(malID, out systemMallItem))
				{
					string strcmd = string.Format("{0}::", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int price = systemMallItem.GetIntValue("Price", -1);
				if (price <= 0)
				{
					string strcmd = string.Format("{0}::", -100);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int goodsID = systemMallItem.GetIntValue("GoodsID", -1);
				if (goodsID <= 0)
				{
					string strcmd = string.Format("{0}::", -101);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				MallGoodsCacheItem mallGoodsCacheItem = MallGoodsMgr.GetMallGoodsCacheItem(goodsID);
				if (null == mallGoodsCacheItem)
				{
					string strcmd = string.Format("{0}::", -1101);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.CurrentLifeV <= 0)
				{
					string strcmd = string.Format("{0}::", -102);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string pubStartTime = systemMallItem.GetStringValue("PubStartTime");
				string pubEndTime = systemMallItem.GetStringValue("PubEndTime");
				if (!string.IsNullOrEmpty(pubStartTime) && !string.IsNullOrEmpty(pubEndTime))
				{
					long startTime = Global.SafeConvertToTicks(pubStartTime);
					long endTime = Global.SafeConvertToTicks(pubEndTime);
					long nowTicks = TimeUtil.NOW();
					if (nowTicks < startTime || nowTicks > endTime)
					{
						string strcmd = string.Format("{0}::", -105);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				int oldUserMoney = client.ClientData.UserMoney;
				int oldUserGlod = client.ClientData.Gold;
				if (client.ClientData.UserMoney < price * goodsNum)
				{
					string strcmd = string.Format("{0}::", -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int toBinding = GameManager.GameConfigMgr.GetGameConfigItemInt("force-mallbuy-binding", 0);
				int gridNum = Global.GetGoodsGridNumByID(goodsID);
				gridNum = Global.GMax(gridNum, 1);
				int addCount = (goodsNum - 1) / gridNum + 1;
				for (int i = 0; i < addCount; i++)
				{
					int thisTimeNum = gridNum;
					if (i >= addCount - 1 && goodsNum % gridNum > 0)
					{
						thisTimeNum = goodsNum % gridNum;
					}
					string strcmd;
					if (!RebornEquip.IsRebornType(goodsID))
					{
						if (!Global.CanAddGoods(client, goodsID, thisTimeNum, 0, "1900-01-01 12:00:00", true, false))
						{
							strcmd = string.Format("{0}::", -3);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
							break;
						}
					}
					else if (!RebornEquip.CanAddGoodsToReborn(client, goodsID, thisTimeNum, 0, "1900-01-01 12:00:00", true, false))
					{
						strcmd = string.Format("{0}::", -3);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					if (autoUseGold)
					{
						if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, price * thisTimeNum, "商城购买自动扣除", true, true, false, DaiBiSySType.None))
						{
							strcmd = string.Format("{0}::", -4);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
							break;
						}
					}
					else if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, price * thisTimeNum, "商城购买", true, true, false, DaiBiSySType.None))
					{
						strcmd = string.Format("{0}::", -4);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					client.ClientData.TotalUsedMoney += price * thisTimeNum;
					GoodsData tmpGoodsData = new GoodsData
					{
						GoodsID = goodsID,
						Forge_level = mallGoodsCacheItem.Forge_level,
						GCount = thisTimeNum,
						Binding = toBinding,
						Lucky = mallGoodsCacheItem.Lucky,
						ExcellenceInfo = mallGoodsCacheItem.ExcellenceInfo,
						AppendPropLev = mallGoodsCacheItem.AppendPropLev
					};
					int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", mallGoodsCacheItem.Forge_level, toBinding, 0, "", true, 1, "商城购买", "1900-01-01 12:00:00", 0, 0, mallGoodsCacheItem.Lucky, 0, mallGoodsCacheItem.ExcellenceInfo, mallGoodsCacheItem.AppendPropLev, 0, null, null, 0, true);
					if (dbRet < 0)
					{
						strcmd = string.Format("{0}::", -5);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					tmpGoodsData.Id = dbRet;
					Global.AddRoleBuyWithYuanBaoEvent(client, goodsID, thisTimeNum, price * thisTimeNum);
					DailyActiveManager.ProcessBuyItemInMallForDailyActive(client, price * goodsNum);
					strcmd = string.Format("{0}:{1}:{2}", dbRet, goodsID, thisTimeNum);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
					string castResList = EventLogManager.NewResPropString(ResLogType.FristBindZuanShi, new object[]
					{
						-(price * thisTimeNum),
						oldUserGlod,
						client.ClientData.Gold,
						oldUserMoney,
						client.ClientData.UserMoney
					});
					string strResList = EventLogManager.NewGoodsDataPropString(tmpGoodsData);
					EventLogManager.AddPurchaseEvent(client, 2, malID, castResList, strResList);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E42 RID: 15938 RVA: 0x00368524 File Offset: 0x00366724
		private static TCPProcessCmdResults ProcessSpriteYinLiangBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				string cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E43 RID: 15939 RVA: 0x003685B0 File Offset: 0x003667B0
		private static TCPProcessCmdResults ProcessSpriteGoodsExchangeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int disableExchange = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-exchange", 0);
				if (disableExchange > 0)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int otherRoleID = Convert.ToInt32(fields[1]);
				int exchangeType = Convert.ToInt32(fields[2]);
				int exchangeID = Convert.ToInt32(fields[3]);
				if (exchangeType == 1)
				{
					long ticks = TimeUtil.NOW();
					if (SingletonTemplate<TradeBlackManager>.Instance().IsBanTrade(client.ClientData.RoleID))
					{
						string tip = GLang.GetLang(596, new object[0]);
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, tip, GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (client.ClientData.ExchangeID > 0 && (client.ClientData.ExchangeID <= 0 || ticks - client.ClientData.ExchangeTicks < 50000L))
					{
						string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-10,
							roleID,
							otherRoleID,
							exchangeType
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-1,
							roleID,
							otherRoleID,
							exchangeType
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (otherClient.ClientData.ExchangeID > 0)
					{
						string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-2,
							roleID,
							otherRoleID,
							exchangeType
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (otherClient.ClientData.MapCode != client.ClientData.MapCode)
					{
						string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-3,
							roleID,
							otherRoleID,
							exchangeType
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!Global.InCircle(new Point((double)otherClient.ClientData.PosX, (double)otherClient.ClientData.PosY), new Point((double)client.ClientData.PosX, (double)client.ClientData.PosY), 500.0))
					{
						string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-4,
							roleID,
							otherRoleID,
							exchangeType
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (SingletonTemplate<TradeBlackManager>.Instance().IsBanTrade(otherClient.ClientData.RoleID))
					{
						string tip = GLang.GetLang(597, new object[0]);
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, tip, GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					int autoID = GameManager.GoodsExchangeMgr.GetNextAutoID();
					client.ClientData.ExchangeID = autoID;
					client.ClientData.ExchangeTicks = ticks;
					GameManager.ClientMgr.NotifyGoodsExchangeCmd(tcpMgr.MySocketListener, pool, roleID, otherRoleID, client, otherClient, autoID, exchangeType);
				}
				else if (exchangeType == 3)
				{
					if (client.ClientData.ExchangeID > 0)
					{
						string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-10,
							roleID,
							otherRoleID,
							exchangeType
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-1,
							roleID,
							otherRoleID,
							exchangeType
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (otherClient.ClientData.ExchangeID <= 0 || exchangeID != otherClient.ClientData.ExchangeID)
					{
						string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-2,
							roleID,
							otherRoleID,
							exchangeType
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (otherClient.ClientData.MapCode != client.ClientData.MapCode)
					{
						string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-3,
							roleID,
							otherRoleID,
							exchangeType
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!Global.InCircle(new Point((double)otherClient.ClientData.PosX, (double)otherClient.ClientData.PosY), new Point((double)client.ClientData.PosX, (double)client.ClientData.PosY), 500.0))
					{
						string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-4,
							roleID,
							otherRoleID,
							exchangeType
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					ExchangeData ed = new ExchangeData
					{
						RequestRoleID = otherRoleID,
						AgreeRoleID = roleID,
						GoodsDict = new Dictionary<int, List<GoodsData>>(),
						MoneyDict = new Dictionary<int, int>(),
						LockDict = new Dictionary<int, int>(),
						DoneDict = new Dictionary<int, int>(),
						AddDateTime = TimeUtil.NOW(),
						Done = 0,
						YuanBaoDict = new Dictionary<int, int>()
					};
					GameManager.GoodsExchangeMgr.AddData(exchangeID, ed);
					client.ClientData.ExchangeID = exchangeID;
					client.ClientData.ExchangeTicks = 0L;
					GameManager.ClientMgr.NotifyGoodsExchangeCmd(tcpMgr.MySocketListener, pool, roleID, otherRoleID, client, otherClient, exchangeID, exchangeType);
				}
				else if (exchangeType == 2)
				{
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (otherClient.ClientData.ExchangeID <= 0 || otherClient.ClientData.ExchangeID != exchangeID)
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
					otherClient.ClientData.ExchangeID = 0;
					otherClient.ClientData.ExchangeTicks = 0L;
					GameManager.ClientMgr.NotifyGoodsExchangeCmd(tcpMgr.MySocketListener, pool, roleID, otherRoleID, null, otherClient, exchangeID, exchangeType);
				}
				else if (exchangeType == 4)
				{
					if (client.ClientData.ExchangeID > 0 && client.ClientData.ExchangeID == exchangeID)
					{
						ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(exchangeID);
						if (null != ed)
						{
							int done = 0;
							lock (ed)
							{
								done = ed.Done;
							}
							if (done <= 0)
							{
								GameManager.GoodsExchangeMgr.RemoveData(exchangeID);
								Global.RestoreExchangeData(client, ed);
								client.ClientData.ExchangeID = 0;
								client.ClientData.ExchangeTicks = 0L;
								GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
								if (null == otherClient)
								{
									return TCPProcessCmdResults.RESULT_OK;
								}
								if (otherClient.ClientData.ExchangeID <= 0 || exchangeID != otherClient.ClientData.ExchangeID)
								{
									return TCPProcessCmdResults.RESULT_OK;
								}
								Global.RestoreExchangeData(otherClient, ed);
								otherClient.ClientData.ExchangeID = 0;
								otherClient.ClientData.ExchangeTicks = 0L;
								GameManager.ClientMgr.NotifyGoodsExchangeCmd(tcpMgr.MySocketListener, pool, roleID, otherRoleID, null, otherClient, exchangeID, exchangeType);
							}
						}
					}
				}
				else if (exchangeType == 5)
				{
					int addGoodsDbID = exchangeID;
					if (client.ClientData.ExchangeID > 0)
					{
						ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(client.ClientData.ExchangeID);
						if (null != ed)
						{
							Global.AddGoodsDataIntoExchangeData(client, addGoodsDbID, ed);
							GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
							if (null == otherClient)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							if (otherClient.ClientData.ExchangeID <= 0 || client.ClientData.ExchangeID != otherClient.ClientData.ExchangeID)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							GameManager.ClientMgr.NotifyGoodsExchangeData(tcpMgr.MySocketListener, pool, client, otherClient, ed);
						}
					}
				}
				else if (exchangeType == 6)
				{
					int addGoodsDbID = exchangeID;
					if (client.ClientData.ExchangeID > 0)
					{
						ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(client.ClientData.ExchangeID);
						if (null != ed)
						{
							Global.RemoveGoodsDataFromExchangeData(client, addGoodsDbID, ed);
							GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
							if (null == otherClient)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							if (otherClient.ClientData.ExchangeID <= 0 || client.ClientData.ExchangeID != otherClient.ClientData.ExchangeID)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							GameManager.ClientMgr.NotifyGoodsExchangeData(tcpMgr.MySocketListener, pool, client, otherClient, ed);
						}
					}
				}
				else if (exchangeType == 7)
				{
					int updateMoney = exchangeID;
					updateMoney = Global.GMax(updateMoney, 0);
					updateMoney = Global.GMin(updateMoney, client.ClientData.YinLiang);
					if (client.ClientData.ExchangeID > 0)
					{
						ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(client.ClientData.ExchangeID);
						if (null != ed)
						{
							Global.UpdateExchangeDataMoney(client, updateMoney, ed);
							GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
							if (null == otherClient)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							if (otherClient.ClientData.ExchangeID <= 0 || client.ClientData.ExchangeID != otherClient.ClientData.ExchangeID)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							GameManager.ClientMgr.NotifyGoodsExchangeData(tcpMgr.MySocketListener, pool, client, otherClient, ed);
						}
					}
				}
				else if (exchangeType == 8)
				{
					int updateYuanBao = exchangeID;
					updateYuanBao = Global.GMax(updateYuanBao, 0);
					updateYuanBao = Global.GMin(updateYuanBao, client.ClientData.UserMoney);
					if (client.ClientData.ExchangeID > 0)
					{
						ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(client.ClientData.ExchangeID);
						if (null != ed)
						{
							Global.UpdateExchangeDataYuanBao(client, updateYuanBao, ed);
							GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
							if (null == otherClient)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							if (otherClient.ClientData.ExchangeID <= 0 || client.ClientData.ExchangeID != otherClient.ClientData.ExchangeID)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							GameManager.ClientMgr.NotifyGoodsExchangeData(tcpMgr.MySocketListener, pool, client, otherClient, ed);
						}
					}
				}
				else if (exchangeType == 9)
				{
					if (client.ClientData.ExchangeID > 0 && exchangeID == client.ClientData.ExchangeID)
					{
						ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(exchangeID);
						if (null != ed)
						{
							Global.LockExchangeData(roleID, ed, 1);
							GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
							if (null == otherClient)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							if (otherClient.ClientData.ExchangeID <= 0 || exchangeID != otherClient.ClientData.ExchangeID)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							GameManager.ClientMgr.NotifyGoodsExchangeData(tcpMgr.MySocketListener, pool, client, otherClient, ed);
						}
					}
				}
				else if (exchangeType == 11)
				{
					if (client.ClientData.ExchangeID > 0 && exchangeID == client.ClientData.ExchangeID)
					{
						ExchangeData ed = GameManager.GoodsExchangeMgr.FindData(exchangeID);
						if (null != ed)
						{
							if (Global.IsLockExchangeData(roleID, ed) && Global.IsLockExchangeData(otherRoleID, ed))
							{
								if (Global.DoneExchangeData(roleID, ed))
								{
									if (Global.IsDoneExchangeData(otherRoleID, ed))
									{
										GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
										if (null == otherClient)
										{
											return TCPProcessCmdResults.RESULT_OK;
										}
										if (otherClient.ClientData.ExchangeID <= 0 || exchangeID != otherClient.ClientData.ExchangeID)
										{
											return TCPProcessCmdResults.RESULT_OK;
										}
										lock (ed)
										{
											ed.Done = 1;
										}
										int ret = Global.CompleteExchangeData(client, otherClient, ed);
										GameManager.GoodsExchangeMgr.RemoveData(exchangeID);
										if (ret < 0)
										{
											Global.RestoreExchangeData(client, ed);
											Global.RestoreExchangeData(otherClient, ed);
										}
										otherClient.ClientData.ExchangeID = 0;
										otherClient.ClientData.ExchangeTicks = 0L;
										client.ClientData.ExchangeID = 0;
										client.ClientData.ExchangeTicks = 0L;
										GameManager.ClientMgr.NotifyGoodsExchangeCmd(tcpMgr.MySocketListener, pool, roleID, otherRoleID, client, otherClient, ret, exchangeType);
									}
								}
							}
						}
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E44 RID: 15940 RVA: 0x00369734 File Offset: 0x00367934
		private static TCPProcessCmdResults ProcessSpriteGoodsStallCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int stallType = Convert.ToInt32(fields[1]);
				int extTag = Convert.ToInt32(fields[2]);
				string extTag2 = fields[3];
				if (stallType == 1)
				{
					if (client.ClientData.Level < 10)
					{
						GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -9, stallType);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (!Global.AllowStartStall(client))
					{
						GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -8, stallType);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (client.ClientData.StallDataItem != null)
					{
						GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -10, stallType);
						return TCPProcessCmdResults.RESULT_OK;
					}
					StallData sd = new StallData
					{
						StallID = 0,
						RoleID = client.ClientData.RoleID,
						StallName = extTag2,
						StallMessage = "",
						GoodsList = new List<GoodsData>(),
						GoodsPriceDict = new Dictionary<int, int>(),
						AddDateTime = TimeUtil.NOW()
					};
					client.ClientData.StallDataItem = sd;
					GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, sd);
					GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, 0, stallType);
				}
				else if (stallType == 2)
				{
					if (client.ClientData.StallDataItem == null)
					{
						GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -10, stallType);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (client.ClientData.StallDataItem)
					{
						client.ClientData.StallDataItem.Start = 1;
					}
					GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, 0, stallType);
					GameManager.ClientMgr.NotifySpriteStartStall(tcpMgr.MySocketListener, pool, client);
					ChengJiuManager.OnFirstBaiTan(client);
				}
				else if (stallType == 3)
				{
					if (client.ClientData.StallDataItem == null)
					{
						GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -10, stallType);
						return TCPProcessCmdResults.RESULT_OK;
					}
					bool notify = false;
					lock (client.ClientData.StallDataItem)
					{
						notify = (client.ClientData.StallDataItem.Start == 1);
						client.ClientData.StallDataItem.StallName = "";
					}
					if (notify)
					{
						GameManager.ClientMgr.NotifySpriteStartStall(tcpMgr.MySocketListener, pool, client);
					}
					Global.RestoreStallData(client, client.ClientData.StallDataItem);
					client.ClientData.StallDataItem = null;
					GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, 0, stallType);
				}
				else if (stallType == 4)
				{
					int addGoodsDbID = extTag;
					int price = Convert.ToInt32(extTag2);
					if (client.ClientData.StallDataItem != null)
					{
						StallData sd = client.ClientData.StallDataItem;
						Global.AddGoodsDataIntoStallData(client, addGoodsDbID, sd, price);
						GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, sd);
					}
				}
				else if (stallType == 5)
				{
					int addGoodsDbID = extTag;
					if (client.ClientData.StallDataItem != null)
					{
						StallData sd = client.ClientData.StallDataItem;
						Global.RemoveGoodsDataFromStallData(client, addGoodsDbID, sd);
						GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, sd);
					}
				}
				else if (stallType == 6)
				{
					string stallMessage = extTag2;
					if (client.ClientData.StallDataItem != null)
					{
						StallData sd = client.ClientData.StallDataItem;
						lock (sd)
						{
							sd.StallMessage = stallMessage;
						}
						GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, sd);
					}
				}
				else if (stallType == 7)
				{
					int otherRoleID = extTag;
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -1, stallType);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (otherClient.ClientData.StallDataItem == null)
					{
						GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -2, stallType);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, otherClient.ClientData.StallDataItem);
				}
				else if (stallType == 8)
				{
					int otherRoleID = extTag;
					int goodsDbId = Convert.ToInt32(extTag2);
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -1, stallType);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (otherClient.ClientData.StallDataItem == null)
					{
						GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, -2, stallType);
						return TCPProcessCmdResults.RESULT_OK;
					}
					StallData sd = otherClient.ClientData.StallDataItem;
					if (sd != null && sd.Start > 0)
					{
						int ret = Global.BuyFromStallData(client, otherClient, sd, goodsDbId);
						GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, client, otherClient.ClientData.StallDataItem);
						GameManager.ClientMgr.NotifyGoodsStallData(tcpMgr.MySocketListener, pool, otherClient, otherClient.ClientData.StallDataItem);
						GameManager.ClientMgr.NotifyGoodsStallCmd(tcpMgr.MySocketListener, pool, client, ret, stallType);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E45 RID: 15941 RVA: 0x00369F58 File Offset: 0x00368158
		private static TCPProcessCmdResults ProcessSpriteTeamCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int teamType = Convert.ToInt32(fields[1]);
				int extTag = Convert.ToInt32(fields[2]);
				int extTag2 = Convert.ToInt32(fields[3]);
				if (teamType == 1)
				{
					if (client.ClientData.TeamID > 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					int teamID = GameManager.TeamMgr.GetNextAutoID();
					client.ClientData.TeamID = teamID;
					GameManager.TeamMgr.AddRoleID2TeamID(client.ClientData.RoleID, client.ClientData.TeamID);
					TeamData td = new TeamData
					{
						TeamID = teamID,
						LeaderRoleID = client.ClientData.RoleID,
						AddDateTime = TimeUtil.NOW(),
						GetThingOpt = extTag
					};
					if (null == td.TeamRoles)
					{
						td.TeamRoles = new List<TeamMemberData>();
					}
					td.TeamRoles.Add(Global.ClientDataToTeamMemberData(client.ClientData));
					GameManager.TeamMgr.AddData(teamID, td);
					GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);
					GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);
					ChengJiuManager.OnFirstInTeam(client);
					ZhuanShengShiLian.OnCreateTeamCopyRoleLog(client);
				}
				else if (teamType == 2)
				{
					if (client.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
					if (null == td)
					{
						client.ClientData.TeamID = 0;
						GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (td)
					{
						if (td.LeaderRoleID != client.ClientData.RoleID)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
						td.LeaderRoleID = -1;
						for (int i = 0; i < td.TeamRoles.Count; i++)
						{
							GameClient otherClient = GameManager.ClientMgr.FindClient(td.TeamRoles[i].RoleID);
							if (null != otherClient)
							{
								ZhuanShengShiLian.ProcessClearRoleLog(otherClient);
							}
						}
					}
					GameManager.TeamMgr.RemoveData(client.ClientData.TeamID);
					GameManager.ClientMgr.NotifyOthersTeamDestroy(tcpMgr.MySocketListener, pool, client, td);
					client.ClientData.TeamID = 0;
					GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
					GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);
					GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);
				}
				else if (teamType == 3)
				{
					int otherRoleID = extTag;
					if (client.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
					if (null == td)
					{
						client.ClientData.TeamID = 0;
						GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (td)
					{
						if (td.LeaderRoleID != client.ClientData.RoleID)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (td.TeamRoles.Count >= 5)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -4, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -5, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (otherClient.ClientData.TeamID > 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -6, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (!GameManager.TeamMgr.CanAddToTeam(otherClient.ClientData.RoleID, otherClient.ClientData.TeamID, 1))
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -100, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					int ret = ZhuanShengShiLian.CheckInviteOrApplyTeam(client, otherClient);
					if (ret < 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, ret, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GameManager.TeamMgr.AddTeamRequestItem(otherClient.ClientData.RoleID, otherClient.ClientData.TeamID, 1);
					GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, otherClient, 0, teamType, client.ClientData.RoleID, Global.FormatRoleName(client, client.ClientData.RoleName), client.ClientData.Occupation, client.ClientData.Level, client.ClientData.ChangeLifeCount);
				}
				else if (teamType == 4)
				{
					int otherRoleID = extTag;
					if (client.ClientData.TeamID > 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (otherClient.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					TeamData td = GameManager.TeamMgr.FindData(otherClient.ClientData.TeamID);
					if (null == td)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -4, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					int leaderRoleID = -1;
					lock (td)
					{
						if (td.TeamRoles.Count >= 5)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -5, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
						leaderRoleID = td.LeaderRoleID;
					}
					otherClient = GameManager.ClientMgr.FindClient(leaderRoleID);
					if (null == otherClient)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -6, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (otherClient.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -7, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (!GameManager.TeamMgr.CanAddToTeam(roleID, otherClient.ClientData.TeamID, 0))
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -100, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					int ret = ZhuanShengShiLian.CheckInviteOrApplyTeam(client, otherClient);
					if (ret < 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, ret, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GameManager.TeamMgr.AddTeamRequestItem(roleID, otherClient.ClientData.TeamID, 0);
					GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, otherClient, 0, teamType, client.ClientData.RoleID, Global.FormatRoleName(client, client.ClientData.RoleName), client.ClientData.Occupation, client.ClientData.Level, client.ClientData.ChangeLifeCount);
				}
				else if (teamType == 5)
				{
					int otherRoleID = extTag;
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, otherClient, 0, teamType, client.ClientData.RoleID, Global.FormatRoleName(client, client.ClientData.RoleName), -1, -1, -1);
				}
				else if (teamType == 6)
				{
					int otherRoleID = extTag;
					if (client.ClientData.TeamID > 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (otherClient.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					TeamData td = GameManager.TeamMgr.FindData(otherClient.ClientData.TeamID);
					if (null == td)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -4, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (td)
					{
						if (td.LeaderRoleID != otherRoleID)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -5, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (td.TeamRoles.Count >= 5)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -6, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
						ZhuanShengShiLian.ProcessClearRoleLog(client);
						td.TeamRoles.Add(Global.ClientDataToTeamMemberData(client.ClientData));
						GameManager.TeamMgr.RemoveTeamRequestItem(client.ClientData.RoleID, td.TeamID, 1);
						client.ClientData.TeamID = td.TeamID;
						GameManager.TeamMgr.AddRoleID2TeamID(client.ClientData.RoleID, client.ClientData.TeamID);
						ChengJiuManager.OnFirstInTeam(client);
						GameManager.ClientMgr.NotifyTeamMemberMsg(tcpMgr.MySocketListener, pool, client, td, TeamCmds.AgreeApply);
						ZhuanShengShiLian.ProcessChangeTeamName(client, true);
					}
					GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);
					GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);
				}
				else if (teamType == 7)
				{
					int otherRoleID = extTag;
					if (client.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (otherClient.ClientData.TeamID > 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
					if (null == td)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -4, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (td)
					{
						if (td.LeaderRoleID != client.ClientData.RoleID)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -5, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (td.TeamRoles.Count >= 5)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -6, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
						ZhuanShengShiLian.ProcessClearRoleLog(otherClient);
						td.TeamRoles.Add(Global.ClientDataToTeamMemberData(otherClient.ClientData));
						GameManager.TeamMgr.RemoveTeamRequestItem(otherClient.ClientData.RoleID, td.TeamID, 0);
						otherClient.ClientData.TeamID = td.TeamID;
						GameManager.TeamMgr.AddRoleID2TeamID(otherClient.ClientData.RoleID, otherClient.ClientData.TeamID);
						GameManager.ClientMgr.NotifyTeamMemberMsg(tcpMgr.MySocketListener, pool, otherClient, td, TeamCmds.AgreeApply);
					}
					GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);
					GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, otherClient);
					ZhuanShengShiLian.ProcessChangeTeamName(client, true);
				}
				else if (teamType == 8)
				{
					int otherRoleID = extTag;
					if (client.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
					if (null == td)
					{
						client.ClientData.TeamID = 0;
						GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					bool destroy = false;
					lock (td)
					{
						if (td.LeaderRoleID != client.ClientData.RoleID)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (td.TeamRoles.Count > 1)
						{
							for (int i = 0; i < td.TeamRoles.Count; i++)
							{
								if (td.TeamRoles[i].RoleID == otherRoleID)
								{
									td.TeamRoles.RemoveAt(i);
									break;
								}
							}
							if (td.LeaderRoleID == client.ClientData.RoleID)
							{
								td.LeaderRoleID = td.TeamRoles[0].RoleID;
							}
						}
						else
						{
							destroy = true;
							td.LeaderRoleID = -1;
						}
					}
					if (destroy)
					{
						GameManager.TeamMgr.RemoveData(client.ClientData.TeamID);
					}
					GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null == otherClient)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -4, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (otherClient.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -5, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					ZhuanShengShiLian.ProcessChangeTeamName(client, false);
					ZhuanShengShiLian.ProcessClearRoleLog(otherClient);
					otherClient.ClientData.TeamID = 0;
					GameManager.TeamMgr.RemoveRoleID2TeamID(otherClient.ClientData.RoleID);
					GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, otherClient);
				}
				else if (teamType == 9)
				{
					if (client.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
					if (null == td)
					{
						client.ClientData.TeamID = 0;
						GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					int newTeamLeaderRoleID = -1;
					bool destroy = false;
					lock (td)
					{
						if (td.TeamRoles.Count > 1)
						{
							for (int i = 0; i < td.TeamRoles.Count; i++)
							{
								if (td.TeamRoles[i].RoleID == client.ClientData.RoleID)
								{
									td.TeamRoles.RemoveAt(i);
									break;
								}
							}
							if (td.LeaderRoleID == client.ClientData.RoleID)
							{
								td.LeaderRoleID = td.TeamRoles[0].RoleID;
								newTeamLeaderRoleID = td.LeaderRoleID;
							}
						}
						else
						{
							destroy = true;
							td.LeaderRoleID = -1;
						}
					}
					if (destroy)
					{
						GameManager.TeamMgr.RemoveData(client.ClientData.TeamID);
						GameManager.ClientMgr.NotifyOthersTeamDestroy(tcpMgr.MySocketListener, pool, client, td);
					}
					ZhuanShengShiLian.ProcessChangeTeamName(client, false);
					ZhuanShengShiLian.ProcessClearRoleLog(client);
					client.ClientData.TeamID = 0;
					GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
					GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);
					GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);
					GameManager.ClientMgr.NotifyTeamMemberMsg(tcpMgr.MySocketListener, pool, client, td, TeamCmds.Quit);
					if (newTeamLeaderRoleID > 0)
					{
						GameClient otherClient = GameManager.ClientMgr.FindClient(newTeamLeaderRoleID);
						if (null != otherClient)
						{
							GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, otherClient);
						}
					}
				}
				else if (teamType == 10)
				{
					int otherRoleID = extTag;
					if (client.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
					if (null == td)
					{
						client.ClientData.TeamID = 0;
						GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (td)
					{
						if (td.LeaderRoleID != client.ClientData.RoleID)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
						for (int i = 0; i < td.TeamRoles.Count; i++)
						{
							if (td.TeamRoles[i].RoleID == otherRoleID)
							{
								td.LeaderRoleID = otherRoleID;
								break;
							}
						}
					}
					ZhuanShengShiLian.ProcessChangeTeamName(client, true);
					GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);
					GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null != otherClient)
					{
						GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, otherClient);
					}
				}
				else if (teamType == 11)
				{
					int otherRoleID = extTag;
					if (client.ClientData.TeamID <= 0)
					{
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -1, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
					if (null == td)
					{
						client.ClientData.TeamID = 0;
						GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
						GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -2, teamType, 0, "", -1, -1, -1);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (td)
					{
						if (td.LeaderRoleID != client.ClientData.RoleID)
						{
							GameManager.ClientMgr.NotifyTeamCmd(tcpMgr.MySocketListener, pool, client, -3, teamType, 0, "", -1, -1, -1);
							return TCPProcessCmdResults.RESULT_OK;
						}
						td.GetThingOpt = extTag2;
					}
					GameManager.ClientMgr.NotifyTeamData(tcpMgr.MySocketListener, pool, td);
					GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, client);
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null != otherClient)
					{
						GameManager.ClientMgr.NotifyOthersTeamIDChanged(tcpMgr.MySocketListener, pool, otherClient);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E46 RID: 15942 RVA: 0x0036BA28 File Offset: 0x00369C28
		private static TCPProcessCmdResults ProcessSpriteBattleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int battleType = Convert.ToInt32(fields[1]);
				int extTag = Convert.ToInt32(fields[2]);
				if (battleType == 4)
				{
					Global.ClientEnterBattle(client);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E47 RID: 15943 RVA: 0x0036BB98 File Offset: 0x00369D98
		private static TCPProcessCmdResults ProcessSpriteArenaBattleCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int battleType = Convert.ToInt32(fields[1]);
				int extTag = Convert.ToInt32(fields[2]);
				if (battleType == 4)
				{
					GameManager.ArenaBattleMgr.ClientEnterArenaBattle(client);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E48 RID: 15944 RVA: 0x0036BD0C File Offset: 0x00369F0C
		private static TCPProcessCmdResults ProcessSpriteGetPKKingLooksCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int lookWho = Convert.ToInt32(fields[1]);
				RoleDataEx rd = GameManager.ArenaBattleMgr.KingRoleData;
				if (rd == null || rd.RoleID != lookWho)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				RoleData4Selector sel = Global.RoleDataEx2RoleData4Selector(rd);
				client.sendCmd<RoleData4Selector>(nID, sel, false);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E49 RID: 15945 RVA: 0x0036BE9C File Offset: 0x0036A09C
		private static TCPProcessCmdResults ProcessSpriteNPCScriptCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int npcID = Convert.ToInt32(fields[1]);
				int scriptID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int errorCode = 0;
				if (Global.FilterNPCScriptByID(client, scriptID, out errorCode))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("外挂触发的执行NPC脚本的操作, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				RunNPCScripts.ProcessNPCScript(client, scriptID, npcID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E4A RID: 15946 RVA: 0x0036C05C File Offset: 0x0036A25C
		private static TCPProcessCmdResults ProcessSpriteDeadCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientData.CurrentLifeV > 0)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				client.MyMagicsManyTimeDmageQueue.Clear();
				HuangChengManager.HandleDeadHuangDiRoleChanging(client);
				GameManager.ClientMgr.NotifyOthersMyPetHide(client);
				Global.SystemKillSummonMonster(client, -1);
				CaiJiLogic.CancelCaiJiState(client);
				ZuoQiManager.getInstance().RoleDisMount(client, true);
				Global.RemoveBufferData(client, 42);
				client.ClientData.ZhongDuStart = 0L;
				client.ClientData.ZhongDuSeconds = 0;
				client.ClientData.DongJieStart = 0L;
				client.ClientData.DongJieSeconds = 0;
				if (client.ClientData.DJRoomID > 0)
				{
					if (MapTypes.DianJiangCopy == Global.GetMapType(client.ClientData.MapCode))
					{
						GameManager.DJRoomMgr.SetRoomRolesDataRoleState(client.ClientData.DJRoomID, client.ClientData.RoleID, 3);
					}
				}
				if (Global.AutoRevive(client))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int nVipReliveNum = 0;
				if (client.ClientData.VipLevel > 0 && client.ClientData.VipLevel <= VIPEumValue.VIPENUMVALUE_MAXLEVEL)
				{
					int dayID = TimeUtil.NowDateTime().DayOfYear;
					VipDailyData dailyVipData = Global.FindVipDailyDataByPriority(client, 1000000);
					if (dailyVipData != null)
					{
						if (dailyVipData.DayID == dayID)
						{
							nVipReliveNum = dailyVipData.UsedTimes;
						}
					}
				}
				client.buffManager.SetStatusBuff(113, 0L, 0L, 0L);
				client.buffManager.SetStatusBuff(114, 0L, 0L, 0L);
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					Global.GetRoleReliveType(client),
					Global.GetRoleReliveWaitingSecs(client),
					nVipReliveNum
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E4B RID: 15947 RVA: 0x0036C3C8 File Offset: 0x0036A5C8
		private static TCPProcessCmdResults ProcessSpriteAutoFightCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int fightType = Convert.ToInt32(fields[1]);
				int extTag = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (fightType == 1)
				{
					if (client.ClientData.AutoFighting)
					{
						GameManager.ClientMgr.NotifyAutoFightCmd(tcpMgr.MySocketListener, pool, client, -1, fightType, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (!Global.CanMapAutoFight(client.ClientData.MapCode))
					{
						GameManager.ClientMgr.NotifyAutoFightCmd(tcpMgr.MySocketListener, pool, client, -2, fightType, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					client.ClientData.AutoFightGetThings = extTag;
					Global.SaveRoleParamsInt32ValueToDB(client, "FightGetThings", extTag, false);
					client.ClientData.AutoFighting = true;
					client.ClientData.AutoFightingProctect = 0;
					client.ClientData.LastAutoFightTicks = TimeUtil.NOW();
					GameManager.ClientMgr.NotifyAutoFightCmd(tcpMgr.MySocketListener, pool, client, 0, fightType, 0);
				}
				else if (fightType != 2)
				{
					if (fightType == 3)
					{
						if (!client.ClientData.AutoFighting)
						{
							GameManager.ClientMgr.NotifyAutoFightCmd(tcpMgr.MySocketListener, pool, client, -1, fightType, 0);
							return TCPProcessCmdResults.RESULT_OK;
						}
						client.ClientData.LeftFightSeconds = 0;
						client.ClientData.AutoFighting = false;
						client.ClientData.AutoFightingProctect = 0;
						client.ClientData.LastAutoFightTicks = 0L;
						GameManager.ClientMgr.NotifyAutoFightCmd(tcpMgr.MySocketListener, pool, client, 0, fightType, 0);
						if (1 == extTag)
						{
							int toMapCode = GameManager.MainMapCode;
							if (client.ClientData.MapCode == GameManager.DefaultMapCode)
							{
								toMapCode = GameManager.DefaultMapCode;
							}
							if (toMapCode >= 0)
							{
								GameMap gameMap = null;
								if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
								{
									bool canTransport = false;
									GoodsData goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID);
									if (null != goodsData)
									{
										if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false, false))
										{
											canTransport = true;
										}
									}
									else
									{
										goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID2);
										if (null != goodsData)
										{
											if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false, false))
											{
												canTransport = true;
											}
										}
									}
									if (canTransport)
									{
										GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
									}
									else
									{
										int defaultBirthPosX = gameMap.DefaultBirthPosX;
										int defaultBirthPosY = gameMap.DefaultBirthPosY;
										int defaultBirthRadius = gameMap.BirthRadius;
										Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
										int toMapX = (int)newPos.X;
										int toMapY = (int)newPos.Y;
										string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
										{
											roleID,
											toMapCode,
											toMapX,
											toMapY
										});
										TCPOutPacket tcpOutPacket2 = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, 231);
										tcpMgr.MySocketListener.SendData(client.ClientSocket, tcpOutPacket2, true);
									}
								}
							}
						}
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E4C RID: 15948 RVA: 0x0036C8BC File Offset: 0x0036AABC
		private static TCPProcessCmdResults ProcessSpriteHorseCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int horseType = Convert.ToInt32(fields[1]);
				int horseDbID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (horseType == 1)
				{
					bool oldHorse = false;
					if (client.ClientData.HorseDbID > 0)
					{
						oldHorse = Global.UpdateHorseDataProps(client, false);
						client.ClientData.HorseDbID = 0;
					}
					HorseData horseData = Global.GetHorseDataByDbID(client, horseDbID);
					if (null == horseData)
					{
						horseData = Global.GetHorseDataByIndex(client, 0);
						if (null != horseData)
						{
							horseDbID = horseData.DbID;
						}
					}
					if (null == horseData)
					{
						GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, -1, horseType, horseDbID, 0, 0, null);
						if (oldHorse)
						{
							GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
							GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
						}
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (Global.HorseOnDBCommand(pool, client, horseDbID) < 0)
					{
						GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, -2, horseType, horseDbID, 0, 0, null);
						if (oldHorse)
						{
							GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
							GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
						}
						return TCPProcessCmdResults.RESULT_OK;
					}
					CaiJiLogic.CancelCaiJiState(client);
					client.ClientData.LastHorseID = horseDbID;
					client.ClientData.HorseDbID = horseDbID;
					client.ClientData.RoleHorseJiFen = Global.CalcHorsePropsJiFen(horseData);
					if (Global.UpdateHorseDataProps(client, true))
					{
						GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
						GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
					}
					List<object> objsList = Global.GetAll9Clients(client);
					GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, 0, horseType, horseDbID, horseData.HorseID, horseData.BodyID, objsList);
				}
				else if (horseType == 2)
				{
					if (client.ClientData.HorseDbID <= 0)
					{
						GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, -1, horseType, horseDbID, 0, 0, null);
						return TCPProcessCmdResults.RESULT_OK;
					}
					HorseData horseData = Global.GetHorseDataByDbID(client, horseDbID);
					if (null == horseData)
					{
						GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, -2, horseType, horseDbID, 0, 0, null);
						return TCPProcessCmdResults.RESULT_OK;
					}
					Global.HorseOffDBCommand(pool, client, horseDbID);
					if (Global.UpdateHorseDataProps(client, false))
					{
						GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
						GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
					}
					client.ClientData.HorseDbID = 0;
					List<object> objsList = Global.GetAll9Clients(client);
					GameManager.ClientMgr.NotifyHorseCmd(tcpMgr.MySocketListener, pool, client, 0, horseType, horseDbID, horseData.HorseID, horseData.BodyID, objsList);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E4D RID: 15949 RVA: 0x0036CD60 File Offset: 0x0036AF60
		private static TCPProcessCmdResults ProcessSpritePetCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int petType = Convert.ToInt32(fields[1]);
				int extTag = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (petType == 1)
				{
					List<object> objsList = null;
					if (client.ClientData.PetRoleID > 0)
					{
						objsList = Global.GetAll9Clients(client);
						GameManager.ClientMgr.NotifyPetCmd(tcpMgr.MySocketListener, pool, client, 0, 2, client.ClientData.PetRoleID, "", objsList);
						client.ClientData.PetDbID = 0;
						client.ClientData.PetRoleID = -1;
					}
					PetData petData = Global.GetPetDataByDbID(client, extTag);
					if (null == petData)
					{
						GameManager.ClientMgr.NotifyPetCmd(tcpMgr.MySocketListener, pool, client, -1, petType, extTag, "", null);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (Global.PetOutDBCommand(pool, client, extTag) < 0)
					{
						GameManager.ClientMgr.NotifyPetCmd(tcpMgr.MySocketListener, pool, client, -2, petType, extTag, "", null);
						return TCPProcessCmdResults.RESULT_OK;
					}
					client.ClientData.PetDbID = extTag;
					client.ClientData.PetRoleID = (int)GameManager.PetIDMgr.GetNewID();
					Point pos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, client.ClientData.MapCode, client.ClientData.PosX, client.ClientData.PosY, 100);
					double direction = Global.GetDirectionByTan((double)client.ClientData.PosX, (double)client.ClientData.PosY, pos.X, pos.Y);
					string petInfo = string.Format("{0}${1}${2}${3}${4}${5}${6}", new object[]
					{
						client.ClientData.PetRoleID,
						petData.PetName,
						petData.Level,
						petData.PetID,
						(int)pos.X,
						(int)pos.Y,
						(int)direction
					});
					client.ClientData.PetPosX = (int)pos.X;
					client.ClientData.PetPosY = (int)pos.Y;
					client.ClientData.ReportPetPosTicks = 0L;
					if (null == objsList)
					{
						objsList = Global.GetAll9Clients(client);
					}
					GameManager.ClientMgr.NotifyPetCmd(tcpMgr.MySocketListener, pool, client, 0, petType, extTag, petInfo, objsList);
				}
				else if (petType == 2)
				{
					if (client.ClientData.PetDbID <= 0)
					{
						GameManager.ClientMgr.NotifyPetCmd(tcpMgr.MySocketListener, pool, client, -1, petType, 0, "", null);
						return TCPProcessCmdResults.RESULT_OK;
					}
					PetData petData = Global.GetPetDataByDbID(client, client.ClientData.PetDbID);
					if (null == petData)
					{
						GameManager.ClientMgr.NotifyPetCmd(tcpMgr.MySocketListener, pool, client, -2, petType, 0, "", null);
						return TCPProcessCmdResults.RESULT_OK;
					}
					Global.PetInDBCommand(pool, client, petData.DbID);
					List<object> objsList = Global.GetAll9Clients(client);
					GameManager.ClientMgr.NotifyPetCmd(tcpMgr.MySocketListener, pool, client, 0, petType, client.ClientData.PetRoleID, "", objsList);
					client.ClientData.PetDbID = 0;
					client.ClientData.PetRoleID = -1;
					client.ClientData.PetPosX = 0;
					client.ClientData.PetPosY = 0;
					client.ClientData.ReportPetPosTicks = 0L;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E4E RID: 15950 RVA: 0x0036D274 File Offset: 0x0036B474
		private static TCPProcessCmdResults ProcessSpriteChangePosCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int mapCode = Convert.ToInt32(fields[1]);
				int toX = Convert.ToInt32(fields[2]);
				int toY = Convert.ToInt32(fields[3]);
				int toDirection = Convert.ToInt32(fields[4]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (null == client)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据TMSKSocket定位GameClient对象失败, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (roleID < 2134900736)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要求移动的角色不是宠物或者卫兵，无法使用MOVE2指令, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.ChangePosition2(tcpMgr.MySocketListener, pool, null, roleID, mapCode, client.ClientData.CopyMapID, toX, toY, toDirection, null);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E4F RID: 15951 RVA: 0x0036D44C File Offset: 0x0036B64C
		private static TCPProcessCmdResults ProcessSpriteDianJiangListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int viewType = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(roleID);
				if (null == client)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据TMSKSocket定位GameClient对象失败, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (1 == viewType)
				{
					client.ClientData.ViewDJRoomDlg = false;
					return TCPProcessCmdResults.RESULT_OK;
				}
				client.ClientData.ViewDJRoomDlg = true;
				List<DJRoomData> djRoomDataList = GameManager.DJRoomMgr.CloneRoomDataList();
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<DJRoomData>>(djRoomDataList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E50 RID: 15952 RVA: 0x0036D5D4 File Offset: 0x0036B7D4
		private static TCPProcessCmdResults ProcessSpriteDianJiangCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int djCmdType = Convert.ToInt32(fields[1]);
				int extTag = Convert.ToInt32(fields[2]);
				string extTag2 = fields[3];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (djCmdType == 1)
				{
					if (client.ClientData.DJRoomID > 0)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, 0, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					client.ClientData.DJRoomID = GameManager.DJRoomMgr.GetNewRoomID();
					client.ClientData.DJRoomTeamID = 1;
					DJRoomData roomData = new DJRoomData
					{
						RoomID = client.ClientData.DJRoomID,
						CreateRoleID = client.ClientData.RoleID,
						CreateRoleName = Global.FormatRoleName(client, client.ClientData.RoleName),
						RoomName = extTag2,
						VSMode = extTag,
						PKState = 0,
						PKRoleNum = 1,
						ViewRoleNum = 0,
						StartFightTicks = 0L
					};
					GameManager.DJRoomMgr.AddRoomData(roomData);
					DJRoomRolesData djRoomRolesData = new DJRoomRolesData
					{
						RoomID = roomData.RoomID,
						Team1 = new List<DJRoomRoleData>(),
						Team2 = new List<DJRoomRoleData>(),
						ViewRoles = new List<DJRoomRoleData>(),
						TeamStates = new Dictionary<int, int>(),
						RoleStates = new Dictionary<int, int>()
					};
					djRoomRolesData.Team1.Add(new DJRoomRoleData
					{
						RoleID = client.ClientData.RoleID,
						RoleName = Global.FormatRoleName(client, client.ClientData.RoleName),
						Level = client.ClientData.Level,
						DJPoint = client.ClientData.DJPoint,
						DJTotal = client.ClientData.DJTotal,
						DJWincnt = client.ClientData.DJWincnt
					});
					djRoomRolesData.RoleStates[client.ClientData.RoleID] = 0;
					GameManager.DJRoomMgr.AddRoomRolesData(djRoomRolesData);
					GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, roomData);
					GameManager.ClientMgr.NotifyDJRoomRolesData(tcpMgr.MySocketListener, pool, djRoomRolesData);
				}
				else if (djCmdType == 2)
				{
					int ret = GameManager.ClientMgr.DestroyDianJiangRoom(tcpMgr.MySocketListener, pool, client);
					if (ret < 0)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, ret, djCmdType, 0, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (djCmdType == 3)
				{
					if (client.ClientData.DJRoomID > 0)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, extTag, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(extTag);
					if (null == djRoomData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, extTag, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(extTag);
					if (null == djRoomRolesData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, extTag, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					int teamID = 1;
					int vsMode = djRoomData.VSMode;
					lock (djRoomRolesData)
					{
						if (djRoomRolesData.Removed > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -5, djCmdType, extTag, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (djRoomRolesData.Locked > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -6, djCmdType, extTag, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
						bool noPosition = false;
						if (djRoomRolesData.Team1.Count >= vsMode && djRoomRolesData.Team2.Count >= vsMode)
						{
							noPosition = true;
						}
						if (noPosition)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, extTag, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (djRoomRolesData.Team1.Count < vsMode && djRoomRolesData.Team2.Count < vsMode)
						{
							if (0 == Global.GetRandomNumber(0, 2))
							{
								teamID = 1;
								djRoomRolesData.Team1.Add(new DJRoomRoleData
								{
									RoleID = client.ClientData.RoleID,
									RoleName = Global.FormatRoleName(client, client.ClientData.RoleName),
									Level = client.ClientData.Level,
									DJPoint = client.ClientData.DJPoint,
									DJTotal = client.ClientData.DJTotal,
									DJWincnt = client.ClientData.DJWincnt
								});
							}
							else
							{
								teamID = 2;
								djRoomRolesData.Team2.Add(new DJRoomRoleData
								{
									RoleID = client.ClientData.RoleID,
									RoleName = Global.FormatRoleName(client, client.ClientData.RoleName),
									Level = client.ClientData.Level,
									DJPoint = client.ClientData.DJPoint,
									DJTotal = client.ClientData.DJTotal,
									DJWincnt = client.ClientData.DJWincnt
								});
							}
						}
						else if (djRoomRolesData.Team1.Count < vsMode)
						{
							teamID = 1;
							djRoomRolesData.Team1.Add(new DJRoomRoleData
							{
								RoleID = client.ClientData.RoleID,
								RoleName = Global.FormatRoleName(client, client.ClientData.RoleName),
								Level = client.ClientData.Level,
								DJPoint = client.ClientData.DJPoint,
								DJTotal = client.ClientData.DJTotal,
								DJWincnt = client.ClientData.DJWincnt
							});
						}
						else if (djRoomRolesData.Team2.Count < vsMode)
						{
							teamID = 2;
							djRoomRolesData.Team2.Add(new DJRoomRoleData
							{
								RoleID = client.ClientData.RoleID,
								RoleName = Global.FormatRoleName(client, client.ClientData.RoleName),
								Level = client.ClientData.Level,
								DJPoint = client.ClientData.DJPoint,
								DJTotal = client.ClientData.DJTotal,
								DJWincnt = client.ClientData.DJWincnt
							});
						}
						djRoomRolesData.RoleStates[client.ClientData.RoleID] = 0;
					}
					client.ClientData.DJRoomID = djRoomData.RoomID;
					client.ClientData.DJRoomTeamID = teamID;
					lock (djRoomData)
					{
						djRoomData.PKRoleNum++;
					}
					GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);
					GameManager.ClientMgr.NotifyDJRoomRolesData(tcpMgr.MySocketListener, pool, djRoomRolesData);
					GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, 0, djCmdType, client.ClientData.DJRoomID, Global.FormatRoleName(client, client.ClientData.RoleName), true);
				}
				else if (djCmdType == 4)
				{
					int ret = GameManager.ClientMgr.LeaveDianJiangRoom(tcpMgr.MySocketListener, pool, client);
					if (ret < 0)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, ret, djCmdType, client.ClientData.DJRoomID, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				else if (djCmdType == 5)
				{
					if (client.ClientData.DJRoomID <= 0)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, 0, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(client.ClientData.DJRoomID);
					if (null == djRoomData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, client.ClientData.DJRoomID, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (djRoomData.CreateRoleID != client.ClientData.RoleID)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, client.ClientData.DJRoomID, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (djRoomData)
					{
						if (djRoomData.PKState > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, client.ClientData.DJRoomID, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(client.ClientData.DJRoomID);
					if (null == djRoomRolesData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -5, djCmdType, client.ClientData.DJRoomID, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (djRoomRolesData)
					{
						if (djRoomRolesData.Locked > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -6, djCmdType, client.ClientData.DJRoomID, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, 0, djCmdType, extTag, extTag2, true);
					bool found = false;
					lock (djRoomRolesData)
					{
						for (int i = 0; i < djRoomRolesData.Team1.Count; i++)
						{
							if (extTag == djRoomRolesData.Team1[i].RoleID)
							{
								found = true;
								djRoomRolesData.Team1.RemoveAt(i);
								break;
							}
						}
						if (!found)
						{
							for (int i = 0; i < djRoomRolesData.Team2.Count; i++)
							{
								if (extTag == djRoomRolesData.Team2[i].RoleID)
								{
									found = true;
									djRoomRolesData.Team2.RemoveAt(i);
									break;
								}
							}
						}
						djRoomRolesData.TeamStates.Remove(extTag);
						djRoomRolesData.RoleStates.Remove(extTag);
					}
					if (found)
					{
						GameClient gc = GameManager.ClientMgr.FindClient(extTag);
						if (null != gc)
						{
							gc.ClientData.DJRoomID = -1;
							gc.ClientData.DJRoomTeamID = -1;
							gc.ClientData.HideSelf = 0;
						}
						lock (djRoomData)
						{
							djRoomData.PKRoleNum--;
						}
					}
					GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);
					GameManager.ClientMgr.NotifyDJRoomRolesData(tcpMgr.MySocketListener, pool, djRoomRolesData);
				}
				else if (djCmdType == 6)
				{
					if (client.ClientData.DJRoomID <= 0)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, 0, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(client.ClientData.DJRoomID);
					if (null == djRoomData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, 0, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (djRoomData.CreateRoleID == client.ClientData.RoleID)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, 0, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (djRoomData)
					{
						if (djRoomData.PKState > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, 0, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(client.ClientData.DJRoomID);
					if (null == djRoomRolesData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -5, djCmdType, 0, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (djRoomRolesData)
					{
						if (djRoomRolesData.Removed > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -6, djCmdType, 0, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (djRoomRolesData.Locked > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -7, djCmdType, 0, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					int toTeam = extTag;
					int roomID = client.ClientData.DJRoomID;
					lock (djRoomRolesData)
					{
						DJRoomRoleData djRoomRoleData = null;
						if (1 == toTeam)
						{
							if (djRoomRolesData.Team1.Count >= djRoomData.VSMode)
							{
								GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -100, djCmdType, client.ClientData.DJRoomID, GLang.GetLang(598, new object[0]), false);
								return TCPProcessCmdResults.RESULT_OK;
							}
							for (int i = 0; i < djRoomRolesData.Team2.Count; i++)
							{
								if (client.ClientData.RoleID == djRoomRolesData.Team2[i].RoleID)
								{
									djRoomRoleData = djRoomRolesData.Team2[i];
									djRoomRolesData.Team2.RemoveAt(i);
									break;
								}
							}
							if (null == djRoomRoleData)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							djRoomRolesData.Team1.Add(djRoomRoleData);
						}
						else if (2 == toTeam)
						{
							if (djRoomRolesData.Team2.Count >= djRoomData.VSMode)
							{
								GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -100, djCmdType, client.ClientData.DJRoomID, GLang.GetLang(599, new object[0]), false);
								return TCPProcessCmdResults.RESULT_OK;
							}
							for (int i = 0; i < djRoomRolesData.Team1.Count; i++)
							{
								if (client.ClientData.RoleID == djRoomRolesData.Team1[i].RoleID)
								{
									djRoomRoleData = djRoomRolesData.Team1[i];
									djRoomRolesData.Team1.RemoveAt(i);
									break;
								}
							}
							if (null == djRoomRoleData)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							djRoomRolesData.Team2.Add(djRoomRoleData);
						}
					}
					client.ClientData.DJRoomTeamID = toTeam;
					GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);
					GameManager.ClientMgr.NotifyDJRoomRolesData(tcpMgr.MySocketListener, pool, djRoomRolesData);
					extTag2 = string.Format(GLang.GetLang(600, new object[0]), djRoomData.RoomName, Global.FormatRoleName(client, client.ClientData.RoleName));
					GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, 0, djCmdType, extTag, extTag2, true);
				}
				else if (djCmdType == 7)
				{
					if (client.ClientData.DJRoomID <= 0)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, 0, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(client.ClientData.DJRoomID);
					if (null == djRoomData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, 0, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (djRoomData)
					{
						if (djRoomData.PKState > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, 0, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(client.ClientData.DJRoomID);
					if (null == djRoomRolesData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, 0, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					int toState = extTag;
					int roomID = client.ClientData.DJRoomID;
					lock (djRoomRolesData)
					{
						if (djRoomRolesData.Removed > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -5, djCmdType, 0, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (djRoomRolesData.Locked > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -6, djCmdType, 0, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
						djRoomRolesData.TeamStates[client.ClientData.RoleID] = toState;
						int stateCount = 0;
						foreach (int state in djRoomRolesData.TeamStates.Values)
						{
							if (state > 0)
							{
								stateCount++;
							}
						}
						if (stateCount >= djRoomData.VSMode * 2)
						{
							djRoomRolesData.Locked = 1;
						}
					}
					bool startFight = false;
					if (djRoomData.CreateRoleID == client.ClientData.RoleID)
					{
						if (djRoomRolesData.Locked > 0)
						{
							lock (djRoomData)
							{
								if (djRoomData.PKState <= 0)
								{
									djRoomData.PKState = 1;
									djRoomData.StartFightTicks = TimeUtil.NOW();
									startFight = true;
								}
							}
						}
					}
					GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);
					GameManager.ClientMgr.NotifyDJRoomRolesData(tcpMgr.MySocketListener, pool, djRoomRolesData);
					if (startFight)
					{
						GameManager.ClientMgr.TransportDianJiangRoom(tcpMgr.MySocketListener, pool, client);
					}
				}
				else if (djCmdType == 8)
				{
					if (client.ClientData.DJRoomID > 0)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, extTag, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(extTag);
					if (null == djRoomData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, extTag, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (djRoomData)
					{
						if (djRoomData.PKState >= 3)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, extTag, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (djRoomData.ViewRoleNum >= 30)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, extTag, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(extTag);
					if (null == djRoomRolesData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -5, djCmdType, extTag, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (djRoomRolesData)
					{
						if (djRoomRolesData.Removed > 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -6, djCmdType, extTag, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (djRoomRolesData.Locked <= 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -7, djCmdType, extTag, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
						djRoomRolesData.ViewRoles.Add(new DJRoomRoleData
						{
							RoleID = client.ClientData.RoleID,
							RoleName = Global.FormatRoleName(client, client.ClientData.RoleName),
							Level = client.ClientData.Level,
							DJPoint = client.ClientData.DJPoint,
							DJTotal = client.ClientData.DJTotal,
							DJWincnt = client.ClientData.DJWincnt
						});
					}
					client.ClientData.DJRoomID = djRoomData.RoomID;
					client.ClientData.DJRoomTeamID = -1;
					client.ClientData.HideSelf = 1;
					int startFightStae = 0;
					long startFightTicks = 0L;
					lock (djRoomData)
					{
						startFightStae = djRoomData.DJFightState;
						startFightTicks = djRoomData.StartFightTicks;
						djRoomData.ViewRoleNum++;
					}
					GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);
					GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, Global.DianJiangTaiMapCode, -1, -1, -1, 0);
					GameManager.ClientMgr.NotifyDianJiangFightCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, djRoomData, startFightStae, startFightTicks.ToString(), client);
				}
				else if (djCmdType == 9)
				{
					if (client.ClientData.DJRoomID <= 0)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -1, djCmdType, extTag, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					extTag = client.ClientData.DJRoomID;
					DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(extTag);
					if (null == djRoomData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -2, djCmdType, extTag, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					DJRoomRolesData djRoomRolesData = GameManager.DJRoomMgr.FindRoomRolesData(extTag);
					if (null == djRoomRolesData)
					{
						GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -3, djCmdType, extTag, "", false);
						return TCPProcessCmdResults.RESULT_OK;
					}
					lock (djRoomRolesData)
					{
						if (djRoomRolesData.Locked <= 0)
						{
							GameManager.ClientMgr.NotifyDianJiangCmd(tcpMgr.MySocketListener, pool, client, -4, djCmdType, extTag, "", false);
							return TCPProcessCmdResults.RESULT_OK;
						}
						djRoomRolesData.ViewRoles.Add(new DJRoomRoleData
						{
							RoleID = client.ClientData.RoleID,
							RoleName = Global.FormatRoleName(client, client.ClientData.RoleName),
							Level = client.ClientData.Level,
							DJPoint = client.ClientData.DJPoint,
							DJTotal = client.ClientData.DJTotal,
							DJWincnt = client.ClientData.DJWincnt
						});
					}
					lock (djRoomData)
					{
						djRoomData.ViewRoleNum++;
					}
					GameManager.ClientMgr.NotifyDianJiangData(tcpMgr.MySocketListener, pool, djRoomData);
					client.ClientData.DJRoomTeamID = -1;
					client.ClientData.HideSelf = 1;
					client.ClientData.CurrentLifeV = client.ClientData.LifeV;
					client.ClientData.CurrentMagicV = client.ClientData.MagicV;
					GameManager.ClientMgr.NotifyMySelfRealive(tcpMgr.MySocketListener, pool, client, roleID, client.ClientData.PosX, client.ClientData.PosY, client.ClientData.RoleDirection);
					Global.RefreshEquipProp(client);
					Global.UpdateHorseDataProps(client, true);
					Global.UpdateJingMaiListProps(client, true);
					GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
					GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, false, false, 7);
				}
				else if (djCmdType == 10)
				{
					int toMapCode = client.ClientData.LastMapCode;
					GameMap gameMap = null;
					if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
					{
						client.ClientData.CurrentLifeV = client.ClientData.LifeV;
						client.ClientData.CurrentMagicV = client.ClientData.MagicV;
						GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, client.ClientData.LastPosX, client.ClientData.LastPosY, -1, 1);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E51 RID: 15953 RVA: 0x0036F578 File Offset: 0x0036D778
		private static TCPProcessCmdResults ProcessSpriteGetDJPointsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E52 RID: 15954 RVA: 0x0036F5D4 File Offset: 0x0036D7D4
		private static TCPProcessCmdResults ProcessSpriteGoToMapCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int toMapCode = Convert.ToInt32(fields[1]);
				SceneUIClasses sceneType = Global.GetMapSceneType(toMapCode);
				if (sceneType != SceneUIClasses.Normal && sceneType != SceneUIClasses.YaoSaiWorld && sceneType != SceneUIClasses.ThemeMoYu && sceneType != SceneUIClasses.KuaFuLueDuoView)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (Global.CanEnterMap(client, toMapCode))
				{
					Global.GotoMap(client, toMapCode);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E53 RID: 15955 RVA: 0x0036F788 File Offset: 0x0036D988
		private static TCPProcessCmdResults ProcessSpriteQueryNameByIDCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E54 RID: 15956 RVA: 0x0036F7E4 File Offset: 0x0036D9E4
		private static TCPProcessCmdResults ProcessSpriteGetHorseListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E55 RID: 15957 RVA: 0x0036F840 File Offset: 0x0036DA40
		private static TCPProcessCmdResults ProcessSpriteGetOtherHorseListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E56 RID: 15958 RVA: 0x0036F89C File Offset: 0x0036DA9C
		private static TCPProcessCmdResults ProcessSpriteGetPetListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E57 RID: 15959 RVA: 0x0036F8F8 File Offset: 0x0036DAF8
		private static TCPProcessCmdResults ProcessSpriteModeHorseCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int horseDbID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (horseDbID != client.ClientData.HorseDbID)
				{
					Global.RemoveHorseDBCommand(pool, client, horseDbID);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E58 RID: 15960 RVA: 0x0036FA6C File Offset: 0x0036DC6C
		private static TCPProcessCmdResults ProcessSpriteModPetCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int petDbID = Convert.ToInt32(fields[1]);
				int modType = Convert.ToInt32(fields[2]);
				string extTag = fields[3];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (modType == 0)
				{
					PetData petData = Global.GetPetDataByDbID(client, petDbID);
					if (null != petData)
					{
						petData.PetName = extTag;
						if (Global.UpdatePetNameDBCommand(pool, client, petData) >= 0)
						{
							if (client.ClientData.PetDbID > 0 && petDbID == client.ClientData.PetDbID)
							{
								List<object> objsList = Global.GetAll9Clients(client);
								GameManager.ClientMgr.NotifyPetCmd(tcpMgr.MySocketListener, pool, client, 0, 3, client.ClientData.PetRoleID, extTag, objsList);
							}
						}
					}
				}
				else if (modType == 1)
				{
					if (petDbID != client.ClientData.PetDbID)
					{
						Global.RemovePetDBCommand(pool, client, petDbID);
					}
				}
				else if (modType == 2)
				{
					PetData petData = Global.GetPetDataByDbID(client, petDbID);
					if (null != petData)
					{
						if (!Global.IsPetDead(petData))
						{
							int feedPetGoodsID = 0;
							if (0 == petData.PetType)
							{
								feedPetGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("NoramlPetFeedGoodsID", -1);
							}
							else if (1 == petData.PetType)
							{
								feedPetGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("AdvancePetFeedGoodsID", -1);
							}
							bool usedBinding = false;
							bool usedTimeLimited = false;
							if (feedPetGoodsID > 0 && GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, feedPetGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
							{
								Global.FeedPetDBCommand(pool, client, petData, 1);
							}
						}
					}
				}
				else if (modType == 3)
				{
					PetData petData = Global.GetPetDataByDbID(client, petDbID);
					if (null != petData)
					{
						int realivePetGoodsID = 0;
						if (0 == petData.PetType)
						{
							realivePetGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("NoramlPetRealiveGoodsID", -1);
						}
						else if (1 == petData.PetType)
						{
							realivePetGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("AdvancePetRealiveGoodsID", -1);
						}
						bool usedBinding = false;
						bool usedTimeLimited = false;
						if (realivePetGoodsID > 0 && GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, realivePetGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
						{
							Global.RealivePetDBCommand(pool, client, petData);
						}
					}
				}
				else if (modType == 4)
				{
					PetData petData = Global.GetPetDataByDbID(client, petDbID);
					if (null != petData)
					{
						if (!Global.IsPetDead(petData))
						{
							if (0 == petData.PetType)
							{
								int upLevelPetGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("AdvancePetCardGoodsID", -1);
								bool usedBinding = false;
								bool usedTimeLimited = false;
								if (upLevelPetGoodsID > 0 && GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, upLevelPetGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
								{
									Global.UpLevelPetDBCommand(pool, client, petData);
								}
							}
						}
					}
				}
				else if (modType == 5)
				{
					PetData petData = Global.GetPetDataByDbID(client, petDbID);
					if (null != petData)
					{
						if (!Global.IsPetDead(petData))
						{
							int autoGetThing = Convert.ToInt32(extTag);
						}
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E59 RID: 15961 RVA: 0x0036FF58 File Offset: 0x0036E158
		private static TCPProcessCmdResults ProcessSpriteSelectHorseCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int horseDbID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				client.ClientData.SelectHorseDbID = horseDbID;
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E5A RID: 15962 RVA: 0x003700B8 File Offset: 0x0036E2B8
		private static TCPProcessCmdResults ProcessSpriteUseHorseCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int horseDbID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				client.ClientData.SelectHorseDbID = horseDbID;
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E5B RID: 15963 RVA: 0x00370218 File Offset: 0x0036E418
		private static TCPProcessCmdResults ProcessSpriteGetGoodsListBySiteCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int site = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
				if (TCPProcessCmdResults.RESULT_FAILED != result)
				{
					List<GoodsData> goodsDataList = DataHelper.BytesToObject<List<GoodsData>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
					client.ClientData.PortableGoodsDataList = goodsDataList;
				}
				return result;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E5C RID: 15964 RVA: 0x003703D4 File Offset: 0x0036E5D4
		private static TCPProcessCmdResults ProcessSpriteGetMeditateGoodsListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int site = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID) || site != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (null == client.ClientData.MeditateGoodsDataList)
				{
					client.ClientData.MeditateGoodsDataList = GoodsUtil.GetGoodsListBySiteFromDB(client, 1);
					if (null == client.ClientData.MeditateGoodsDataList)
					{
						client.ClientData.MeditateGoodsDataList = new List<GoodsData>();
					}
				}
				byte[] bytesData = DataHelper.ObjectToBytes<List<GoodsData>>(client.ClientData.MeditateGoodsDataList);
				GameManager.ClientMgr.SendToClient(client, bytesData, nID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E5D RID: 15965 RVA: 0x003705C4 File Offset: 0x0036E7C4
		private static TCPProcessCmdResults ProcessSpriteGetJinDanGoodsListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int site = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID) || site != 2000)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (null == client.ClientData.JinDanGoodsDataList)
				{
					TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, 204, data, count, out tcpOutPacket, client.ServerId);
					if (TCPProcessCmdResults.RESULT_FAILED != result && null != tcpOutPacket)
					{
						List<GoodsData> goodsDataList = DataHelper.BytesToObject<List<GoodsData>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
						client.ClientData.JinDanGoodsDataList = goodsDataList;
						Global.PushBackTcpOutPacket(tcpOutPacket);
					}
					if (null == client.ClientData.JinDanGoodsDataList)
					{
						client.ClientData.JinDanGoodsDataList = new List<GoodsData>();
					}
				}
				byte[] bytesData = DataHelper.ObjectToBytes<List<GoodsData>>(client.ClientData.JinDanGoodsDataList);
				GameManager.ClientMgr.SendToClient(client, bytesData, nID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E5E RID: 15966 RVA: 0x00370810 File Offset: 0x0036EA10
		private static TCPProcessCmdResults ProcessSpriteGetDamonGoodsListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int site = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID) || site != 5000)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (null == client.ClientData.DamonGoodsDataList)
				{
					TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, 204, data, count, out tcpOutPacket, client.ServerId);
					if (TCPProcessCmdResults.RESULT_FAILED != result && null != tcpOutPacket)
					{
						List<GoodsData> goodsDataList = DataHelper.BytesToObject<List<GoodsData>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
						client.ClientData.DamonGoodsDataList = goodsDataList;
						Global.PushBackTcpOutPacket(tcpOutPacket);
					}
					if (null == client.ClientData.DamonGoodsDataList)
					{
						client.ClientData.DamonGoodsDataList = new List<GoodsData>();
						DamonMgr.AddOldDamonGoodsData(client);
					}
				}
				byte[] bytesData = DataHelper.ObjectToBytes<List<GoodsData>>(client.ClientData.DamonGoodsDataList);
				GameManager.ClientMgr.SendToClient(client, bytesData, nID);
				Global.RefreshEquipProp(client);
				GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
				GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E5F RID: 15967 RVA: 0x00370A98 File Offset: 0x0036EC98
		private static TCPProcessCmdResults ProcessSpriteGetPaiZhuDamonGoodsListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int site = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID) || site != 10000)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				cmdData = string.Format("{0}:{1}:{2}", fields[0], fields[1], 10001);
				data = DataHelper.ObjectToBytes<string>(cmdData);
				if (null == client.ClientData.PaiZhuDamonGoodsDataList)
				{
					TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, 20314, data, count, out tcpOutPacket, client.ServerId);
					if (TCPProcessCmdResults.RESULT_FAILED != result && null != tcpOutPacket)
					{
						List<GoodsData> goodsDataList = DataHelper.BytesToObject<List<GoodsData>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
						client.ClientData.PaiZhuDamonGoodsDataList = goodsDataList;
						Global.PushBackTcpOutPacket(tcpOutPacket);
					}
					if (null == client.ClientData.PaiZhuDamonGoodsDataList)
					{
						client.ClientData.PaiZhuDamonGoodsDataList = new List<GoodsData>();
						JingLingYaoSaiManager.AddOldPaiZhuDamonGoodsData(client);
					}
				}
				byte[] bytesData = DataHelper.ObjectToBytes<List<GoodsData>>(client.ClientData.PaiZhuDamonGoodsDataList);
				GameManager.ClientMgr.SendToClient(client, bytesData, nID);
				Global.RefreshEquipProp(client);
				GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
				GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E60 RID: 15968 RVA: 0x00370D44 File Offset: 0x0036EF44
		private static TCPProcessCmdResults ProcessSpriteGetLineInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				long clientTicks = Convert.ToInt64(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				long serverTicks = TimeUtil.NOW();
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					clientTicks,
					serverTicks,
					GameManager.ClientMgr.GetClientCount()
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E61 RID: 15969 RVA: 0x00370F08 File Offset: 0x0036F108
		private static TCPProcessCmdResults ProcessSpriteGetMergeTypesCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int npcID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				npcID -= 2130706432;
				List<int> mergeTypesList = new List<int>();
				foreach (SystemXmlItem systemMergeType in GameManager.systemGoodsMergeTypes.SystemXmlItemDict.Values)
				{
					string Npcs = systemMergeType.GetStringValue("NPCs");
					if (!string.IsNullOrEmpty(Npcs))
					{
						string[] npcFields = Npcs.Split(new char[]
						{
							','
						});
						bool foundNPC = false;
						for (int i = 0; i < npcFields.Length; i++)
						{
							if (npcFields[i] == npcID.ToString())
							{
								foundNPC = true;
								break;
							}
						}
						if (!foundNPC)
						{
							continue;
						}
					}
					int taskSex = systemMergeType.GetIntValue("SexCondition", -1);
					if (-1 != taskSex)
					{
						if (client.ClientData.RoleSex != taskSex)
						{
							continue;
						}
					}
					int taskOccupation = systemMergeType.GetIntValue("OccupCondition", -1);
					if (-1 != taskOccupation)
					{
						int nOcc = Global.CalcOriginalOccupationID(client);
						if (nOcc != taskOccupation)
						{
							continue;
						}
					}
					int minLevel = systemMergeType.GetIntValue("MinLevel", -1);
					if (client.ClientData.Level >= minLevel)
					{
						mergeTypesList.Add(systemMergeType.GetIntValue("ID", -1));
					}
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<int>>(mergeTypesList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E62 RID: 15970 RVA: 0x0037121C File Offset: 0x0036F41C
		private static TCPProcessCmdResults ProcessSpriteGetMergeItemsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int mergeTypeID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<int> mergeItemsList = new List<int>();
				foreach (SystemXmlItem systemMergeItem in GameManager.systemGoodsMergeItems.SystemXmlItemDict.Values)
				{
					if (mergeTypeID == systemMergeItem.GetIntValue("MergeType", -1))
					{
						mergeItemsList.Add(systemMergeItem.GetIntValue("ID", -1));
					}
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<int>>(mergeItemsList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E63 RID: 15971 RVA: 0x00371424 File Offset: 0x0036F624
		private static TCPProcessCmdResults ProcessSpriteMergeNewGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 6)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int mergeItemID = Convert.ToInt32(fields[1]);
				int luckyGoodsID = Convert.ToInt32(fields[2]);
				int WingDBID = Convert.ToInt32(fields[3]);
				int CrystalDBID = Convert.ToInt32(fields[4]);
				int nUseBindItemFirst = Convert.ToInt32(fields[5]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ret = MergeNewGoods.Process(client, mergeItemID, luckyGoodsID, WingDBID, CrystalDBID, nUseBindItemFirst);
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					ret,
					-1,
					-1
				});
				if (ret == -300)
				{
					GoodsData goodData = Global.GetGoodsByDbID(client, WingDBID);
					if (goodData != null && goodData.Forge_level == 1)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							roleID,
							ret,
							WingDBID,
							goodData.Forge_level
						});
					}
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E64 RID: 15972 RVA: 0x003716A0 File Offset: 0x0036F8A0
		private static TCPProcessCmdResults ProcessSpriteGetJingMaiListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyJingMaiListCmd(tcpMgr.MySocketListener, pool, client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E65 RID: 15973 RVA: 0x003717F8 File Offset: 0x0036F9F8
		private static TCPProcessCmdResults ProcessSpriteGetOtherJingMaiListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int otherRoleID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyOtherJingMaiListCmd(tcpMgr.MySocketListener, pool, client, otherRoleID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E66 RID: 15974 RVA: 0x00371960 File Offset: 0x0036FB60
		private static TCPProcessCmdResults ProcessSpriteUpJingMaiLevelCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int jingMaiBodyLevel = Convert.ToInt32(fields[1]);
				int jingMaiID = Convert.ToInt32(fields[2]);
				int luckyPercent = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				Global.UpdateJingMaiListProps(client, false);
				int jingMaiLevel = -1;
				int ret = Global.ProcessUpJingmaiLevel(client, jingMaiBodyLevel, jingMaiID, ref jingMaiLevel, luckyPercent);
				Global.UpdateJingMaiListProps(client, true);
				string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					roleID,
					ret,
					client.ClientData.JingMaiBodyLevel,
					jingMaiID,
					jingMaiLevel
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E67 RID: 15975 RVA: 0x00371B68 File Offset: 0x0036FD68
		private static TCPProcessCmdResults ProcessSpriteLoadAlreadyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int otherRoleID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GSpriteTypes spriteType = Global.GetSpriteType((uint)otherRoleID);
				if (GSpriteTypes.Other == spriteType)
				{
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null != otherClient)
					{
						Global.HandleGameClientLoaded(client, otherClient);
					}
					if (client.ClientData.BeTrackingRoleID != 0 && client.ClientData.BeTrackingRoleID == otherClient.ClientData.RoleID)
					{
						GameClient beTrackingClient = otherClient;
						GameManager.ClientMgr.NotifyOthersGoBack(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, beTrackingClient.ClientData.PosX, beTrackingClient.ClientData.PosY, -1);
						int result = 0;
						client.sendCmd(1403, string.Format("{0}:{1}", result, otherClient.ClientData.RoleID), false);
					}
				}
				else if (GSpriteTypes.Monster == spriteType)
				{
					Monster monster = GameManager.MonsterMgr.FindMonster(client.ClientData.MapCode, otherRoleID);
					if (null != monster)
					{
						Global.HandleMonsterLoaded(client, monster);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E68 RID: 15976 RVA: 0x00371DFC File Offset: 0x0036FFFC
		private static TCPProcessCmdResults ProcessSpriteEquipUpgradeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int goodsDbID = Convert.ToInt32(fields[1]);
				int ironNum = Convert.ToInt32(fields[2]);
				int goldRock = Convert.ToInt32(fields[3]);
				int luckyNum = Convert.ToInt32(fields[4]);
				luckyNum = Global.GMin(luckyNum, 1);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int newDbID = EquipUpgradeMgr.ProcessUpgrade(client, goodsDbID);
				string strcmd = string.Format("{0}:{1}", roleID, newDbID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E69 RID: 15977 RVA: 0x00371FBC File Offset: 0x003701BC
		private static TCPProcessCmdResults ProcessSpriteEnchaseJewelCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int actionType = Convert.ToInt32(fields[1]);
				int equipGoodsDbID = Convert.ToInt32(fields[2]);
				int jewelGoodsIDorDbID = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string jewellist = "";
				int binding = 0;
				int result = EnchaseJewelMgr.ProcessEnchaseJewel(client, actionType, equipGoodsDbID, jewelGoodsIDorDbID, out jewellist, out binding);
				string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					roleID,
					result,
					equipGoodsDbID,
					jewellist,
					binding
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E6A RID: 15978 RVA: 0x003721AC File Offset: 0x003703AC
		private static TCPProcessCmdResults ProcessSpriteShowBigGuanCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				long nowTime = TimeUtil.NOW();
				long msecs = Math.Max(nowTime - client.ClientData.BiGuanTime, 0L);
				msecs = Math.Min(msecs, 43200000L);
				SystemXmlItem systemBigGuan = null;
				if (!GameManager.systemBiGuanMgr.SystemXmlItemDict.TryGetValue(client.ClientData.Level, out systemBigGuan))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("从闭关收益表定位收益数据时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				double minuteExperience = systemBigGuan.GetDoubleValue("Experience");
				double minuteInterPower = systemBigGuan.GetDoubleValue("InterPower");
				int biguanExperience = (int)((double)(msecs / 1000L) / 60.0 * minuteExperience);
				int biguanInterPower = (int)((double)(msecs / 1000L) / 60.0 * minuteInterPower);
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					msecs,
					biguanExperience,
					biguanInterPower
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E6B RID: 15979 RVA: 0x0037242C File Offset: 0x0037062C
		private static TCPProcessCmdResults ProcessSpriteGetBigGuanCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int actionType = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				long nowTime = TimeUtil.NOW();
				long msecs = Math.Max(nowTime - client.ClientData.BiGuanTime, 0L);
				msecs = Math.Min(msecs, 43200000L);
				SystemXmlItem systemBigGuan = null;
				if (!GameManager.systemBiGuanMgr.SystemXmlItemDict.TryGetValue(client.ClientData.Level, out systemBigGuan))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("从闭关收益表定位收益数据时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				double minuteExperience = systemBigGuan.GetDoubleValue("Experience");
				double minuteInterPower = systemBigGuan.GetDoubleValue("InterPower");
				int biguanExperience = (int)((double)(msecs / 1000L) / 60.0 * minuteExperience);
				int biguanInterPower = (int)((double)(msecs / 1000L) / 60.0 * minuteInterPower);
				if (actionType > 0)
				{
					int gigGuanLingPaiID = (int)GameManager.systemParamsList.GetParamValueIntByName("BigGuanLingPaiID", -1);
					if (Global.GetTotalGoodsCountByID(client, gigGuanLingPaiID) > 0)
					{
						bool usedBinding = false;
						bool usedTimeLimited = false;
						if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, gigGuanLingPaiID, 1, false, out usedBinding, out usedTimeLimited, false))
						{
							biguanExperience *= 2;
							biguanInterPower *= 2;
						}
					}
				}
				client.ClientData.BiGuanTime = nowTime;
				GameManager.DBCmdMgr.AddDBCmd(10035, string.Format("{0}:{1}", client.ClientData.RoleID, nowTime), null, client.ServerId);
				if (biguanExperience > 0)
				{
					GameManager.ClientMgr.ProcessRoleExperience(client, (long)biguanExperience, true, false, false, "none");
				}
				if (biguanInterPower > 0)
				{
					GameManager.ClientMgr.AddInterPower(client, biguanInterPower, true, true);
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					0,
					0,
					0
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, 214);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E6C RID: 15980 RVA: 0x003727C0 File Offset: 0x003709C0
		private static TCPProcessCmdResults ProcessSpriteUpSkillLevelCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int skillDbID = Convert.ToInt32(fields[1]);
				int nParameter = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SCSkillLevelUp scData;
				if (nParameter < 1 || nParameter > 3)
				{
					scData = new SCSkillLevelUp(-100, roleID, 0, 0, 0);
					client.sendCmd<SCSkillLevelUp>(nID, scData, false);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SkillData skillData = Global.GetSkillDataByDbID(client, skillDbID);
				if (null == skillData)
				{
					scData = new SCSkillLevelUp(-1, roleID, skillDbID, skillData.SkillLevel, skillData.UsedNum);
					client.sendCmd<SCSkillLevelUp>(nID, scData, false);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nNexLev;
				if (skillData.DbID == -1)
				{
					nNexLev = client.ClientData.DefaultSkillLev;
				}
				else
				{
					nNexLev = skillData.SkillLevel;
				}
				int nOccu = Global.CalcOriginalOccupationID(client);
				SystemXmlItem skillXml = MagicsCacheManager.GetMagicCacheItem(nOccu, skillData.SkillID, nNexLev);
				if (skillXml == null)
				{
					scData = new SCSkillLevelUp(-2, roleID, skillDbID, skillData.SkillLevel, skillData.UsedNum);
					client.sendCmd<SCSkillLevelUp>(nID, scData, false);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nNeedChangeLifeLev = skillXml.GetIntValue("NeedZhuanSheng", -1);
				int nNeedLev = skillXml.GetIntValue("NeedRoleLevel", -1);
				int nNeedUseNum = skillXml.GetIntValue("ShuLianDu", -1);
				int nNeedMoney = skillXml.GetIntValue("NeedJinBi", -1);
				int nUseNum = 0;
				if (skillData.DbID < 0)
				{
					nUseNum = client.ClientData.DefaultSkillUseNum;
				}
				else
				{
					nUseNum = skillData.UsedNum;
				}
				if (nParameter != 1)
				{
					int maxLevel = Global.MaxSkillLevel;
					if (nNexLev >= maxLevel)
					{
						scData = new SCSkillLevelUp(-3, roleID, skillDbID, skillData.SkillLevel, skillData.UsedNum);
						client.sendCmd<SCSkillLevelUp>(nID, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (client.ClientData.ChangeLifeCount < nNeedChangeLifeLev)
					{
						scData = new SCSkillLevelUp(-4, roleID, skillDbID, skillData.SkillLevel, skillData.UsedNum);
						client.sendCmd<SCSkillLevelUp>(nID, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (client.ClientData.ChangeLifeCount == nNeedChangeLifeLev)
					{
						if (client.ClientData.Level < nNeedLev)
						{
							scData = new SCSkillLevelUp(-5, roleID, skillDbID, skillData.SkillLevel, skillData.UsedNum);
							client.sendCmd<SCSkillLevelUp>(nID, scData, false);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					if (client.ClientData.Money1 + client.ClientData.YinLiang < nNeedMoney)
					{
						scData = new SCSkillLevelUp(-7, roleID, skillDbID, skillData.SkillLevel, skillData.UsedNum);
						client.sendCmd<SCSkillLevelUp>(nID, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (nParameter == 1)
				{
					if (nUseNum < nNeedUseNum)
					{
						int nNeedMoJing = (nNeedUseNum - nUseNum) / 5;
						int nMoJing = GameManager.ClientMgr.GetTianDiJingYuanValue(client);
						if (nMoJing < nNeedMoJing)
						{
							scData = new SCSkillLevelUp(-8, roleID, skillDbID, skillData.SkillLevel, skillData.UsedNum);
							client.sendCmd<SCSkillLevelUp>(nID, scData, false);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, -nNeedMoJing, "升级技能", false, true, false);
						GameManager.ClientMgr.AddNumSkill(client, skillData, nNeedUseNum - nUseNum, false);
					}
					nUseNum = nNeedUseNum;
				}
				else if (nParameter == 2)
				{
					if (nUseNum < nNeedUseNum)
					{
						scData = new SCSkillLevelUp(-9, roleID, skillDbID, skillData.SkillLevel, skillData.UsedNum);
						client.sendCmd<SCSkillLevelUp>(nID, scData, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameManager.ClientMgr.AddNumSkill(client, skillData, -nNeedUseNum, false);
					if (skillData.DbID < 0)
					{
						nUseNum = client.ClientData.DefaultSkillUseNum;
					}
					else
					{
						nUseNum = skillData.UsedNum;
					}
					Global.SubBindTongQianAndTongQian(client, nNeedMoney, "升级技能");
					if (skillData.DbID == -1)
					{
						lock (client.ClientData.SkillDataList)
						{
							for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
							{
								if (client.ClientData.SkillDataList[i].DbID == skillDbID)
								{
									client.ClientData.SkillDataList[i].SkillLevel++;
								}
							}
						}
						client.ClientData.DefaultSkillLev++;
						Global.SaveRoleParamsInt32ValueToDB(client, "DefaultSkillLev", client.ClientData.DefaultSkillLev, true);
					}
					else
					{
						skillData.SkillLevel++;
						client.ClientData.TotalLearnedSkillLevelCount++;
						GameManager.ClientMgr.UpdateSkillInfo(client, skillData, true);
						Global.RefreshFiveCombatSkillList(client);
					}
					ChengJiuManager.OnRoleSkillLevelUp(client);
					GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.SkillLevelUp));
				}
				else
				{
					if (nUseNum < nNeedUseNum)
					{
						int nNeedMoJing = (nNeedUseNum - nUseNum) / 5;
						int nMoJing = GameManager.ClientMgr.GetTianDiJingYuanValue(client);
						if (nMoJing < nNeedMoJing)
						{
							scData = new SCSkillLevelUp(-8, roleID, skillDbID, skillData.SkillLevel, skillData.UsedNum);
							client.sendCmd<SCSkillLevelUp>(nID, scData, false);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, -nNeedMoJing, "升级技能", false, true, false);
					}
					GameManager.ClientMgr.AddNumSkill(client, skillData, -nUseNum, false);
					if (skillData.DbID < 0)
					{
						nUseNum = client.ClientData.DefaultSkillUseNum;
					}
					else
					{
						nUseNum = skillData.UsedNum;
					}
					Global.SubBindTongQianAndTongQian(client, nNeedMoney, "升级技能");
					if (skillData.DbID == -1)
					{
						lock (client.ClientData.SkillDataList)
						{
							for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
							{
								if (client.ClientData.SkillDataList[i].DbID == skillDbID)
								{
									client.ClientData.SkillDataList[i].SkillLevel++;
								}
							}
						}
						client.ClientData.DefaultSkillLev++;
						Global.SaveRoleParamsInt32ValueToDB(client, "DefaultSkillLev", client.ClientData.DefaultSkillLev, true);
					}
					else
					{
						skillData.SkillLevel++;
						client.ClientData.TotalLearnedSkillLevelCount++;
						GameManager.ClientMgr.UpdateSkillInfo(client, skillData, true);
						Global.RefreshFiveCombatSkillList(client);
					}
					ChengJiuManager.OnRoleSkillLevelUp(client);
					GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.SkillLevelUp));
				}
				Global.RefreshSecondSkillLevel(client, skillData.SkillID);
				scData = new SCSkillLevelUp(1, roleID, skillDbID, skillData.SkillLevel, nUseNum);
				client.sendCmd<SCSkillLevelUp>(nID, scData, false);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E6D RID: 15981 RVA: 0x00373118 File Offset: 0x00371318
		private static TCPProcessCmdResults ProcessSpriteJingMaiInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyJingMaiInfoCmd(tcpMgr.MySocketListener, pool, client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E6E RID: 15982 RVA: 0x00373270 File Offset: 0x00371470
		private static TCPProcessCmdResults ProcessSpriteHorseEnchanceCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int horseDbID = Convert.ToInt32(fields[1]);
				int extPropIndex = Convert.ToInt32(fields[2]);
				bool allowAutoBuy = 1 == Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ret = ProcessHorse.ProcessHorseEnchance(client, horseDbID, extPropIndex, allowAutoBuy);
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					ret,
					roleID,
					horseDbID,
					extPropIndex
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E6F RID: 15983 RVA: 0x00373450 File Offset: 0x00371650
		private static TCPProcessCmdResults ProcessSpriteHorseUpgradeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int horseDbID = Convert.ToInt32(fields[1]);
				bool allowAutoBuy = 1 == Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ret = ProcessHorse.ProcessHorseUpgrade(client, horseDbID, allowAutoBuy);
				string strcmd = string.Format("{0}:{1}:{2}", ret, roleID, horseDbID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E70 RID: 15984 RVA: 0x00373604 File Offset: 0x00371804
		private static TCPProcessCmdResults ProcessSpriteGetLiXianBaiTanTicksCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = string.Format("{0}:{1}", roleID, GameManager.ClientMgr.GetLiXianBaiTanTicksValue(client) / 1000);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E71 RID: 15985 RVA: 0x00373780 File Offset: 0x00371980
		private static TCPProcessCmdResults ProcessSpriteUpdateLiXianBaiTanTicksCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int liXianBaiTanSecs = Math.Max(0, Convert.ToInt32(fields[1]));
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int buyTicks = 2073600000 - GameManager.ClientMgr.GetLiXianBaiTanTicksValue(client);
				if (liXianBaiTanSecs * 1000 > buyTicks)
				{
					liXianBaiTanSecs = buyTicks / 1000;
					if (buyTicks == 0)
					{
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(601, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					}
				}
				int hours = liXianBaiTanSecs / 3600;
				int liXianBaiTanTicks = hours * 3600000;
				string strcmd;
				if (liXianBaiTanTicks > 0)
				{
					int liXianNeedJinBi = Math.Max(1, (int)GameManager.systemParamsList.GetParamValueIntByName("LiXianNeedJinBi", -1));
					if (client.ClientData.YinLiang < hours * liXianNeedJinBi)
					{
						strcmd = string.Format("{0}:{1}", roleID, -1);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, hours * liXianNeedJinBi, "离线摆摊", false))
					{
						strcmd = string.Format("{0}:{1}", roleID, -2);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameManager.ClientMgr.ModifyLiXianBaiTanTicksValue(client, liXianBaiTanTicks, true);
				}
				strcmd = string.Format("{0}:{1}", roleID, GameManager.ClientMgr.GetLiXianBaiTanTicksValue(client) / 1000);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E72 RID: 15986 RVA: 0x00373AA0 File Offset: 0x00371CA0
		private static TCPProcessCmdResults ProcessSpriteOpenMarketCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int offlineMarket = Convert.ToInt32(fields[1]);
				string marketName = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (string.IsNullOrEmpty(marketName))
				{
					client.ClientData.AllowMarketBuy = false;
					client.ClientData.MarketName = "";
					string strcmd = string.Format("{0}:{1}:{2}", roleID, marketName, offlineMarket);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				marketName = marketName.Substring(0, Math.Min(10, marketName.Length));
				if (client.ClientData.SaleGoodsDataList.Count <= 0)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(578, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (offlineMarket > 0)
				{
					if (client.ClientData.VipLevel < 3)
					{
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(602, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 41);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (GameManager.ClientMgr.GetLiXianBaiTanTicksValue(client) / 1000 <= 0)
					{
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(603, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				if (!Global.AllowOpenMarket(client))
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(579, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!Global.CanOpenMarketByPos(client.ClientData.MapCode, client.CurrentGrid))
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(604, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				client.ClientData.AllowMarketBuy = true;
				client.ClientData.OfflineMarketState = offlineMarket;
				client.ClientData.MarketName = marketName;
				GameManager.ClientMgr.NotifySpriteMarketName(tcpMgr.MySocketListener, pool, client, marketName, offlineMarket);
				ChengJiuManager.OnFirstBaiTan(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E73 RID: 15987 RVA: 0x00373EE8 File Offset: 0x003720E8
		private static TCPProcessCmdResults ProcessSpriteMarketSaleMoneyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int saleOutMoney = Math.Max(0, Convert.ToInt32(fields[1]));
				int userMoneyPrice = Math.Max(0, Convert.ToInt32(fields[2]));
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int disableMarket = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-market", 0);
				if (disableMarket > 0)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.AllowMarketBuy)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				string strcmd;
				if (saleOutMoney > client.ClientData.YinLiang)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						saleOutMoney,
						userMoneyPrice,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, saleOutMoney, "交易市场中出售金币", false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-2,
						roleID,
						saleOutMoney,
						userMoneyPrice,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData goodsData = Global.GetNewGoodsData(50200, 0);
				goodsData.Site = -1;
				goodsData.SaleMoney1 = 0;
				goodsData.SaleYuanBao = userMoneyPrice;
				goodsData.SaleYinPiao = 0;
				goodsData.Quality = saleOutMoney;
				Global.AddSaleGoodsData(client, goodsData);
				int goodsDbID = Global.AddGoodsDBCommand_Hook(pool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Forge_level, goodsData.Site, goodsData.Jewellist, false, 0, "临时摆摊需要", false, "1900-01-01 12:00:00", goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip, false, null, null, "1900-01-01 12:00:00", 0, true);
				if (goodsDbID < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3,
						roleID,
						saleOutMoney,
						userMoneyPrice,
						goodsData.Id
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				goodsData.Id = goodsDbID;
				string[] dbFields = null;
				strcmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					roleID,
					goodsDbID,
					"*",
					"*",
					"*",
					"*",
					goodsData.Site,
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.SaleMoney1,
					goodsData.SaleYuanBao,
					goodsData.SaleYinPiao,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strcmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-4,
						roleID,
						saleOutMoney,
						userMoneyPrice,
						goodsData.Id
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-5,
						roleID,
						saleOutMoney,
						userMoneyPrice,
						goodsData.Id
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.ModRoleGoodsEvent(client, goodsData, 0, "铜钱交易上架", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.Move, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "铜钱交易上架");
				SaleGoodsManager.AddSaleGoodsItem(new SaleGoodsItem
				{
					GoodsDbID = goodsData.Id,
					SalingGoodsData = goodsData,
					Client = client
				});
				if (1 == client.ClientData.SaleGoodsDataList.Count)
				{
					SaleRoleManager.AddSaleRoleItem(client);
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					0,
					roleID,
					saleOutMoney,
					userMoneyPrice,
					goodsData.Id
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E74 RID: 15988 RVA: 0x0037462C File Offset: 0x0037282C
		private static TCPProcessCmdResults ProcessSpriteSaleGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 7)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int goodsDbID = Convert.ToInt32(fields[1]);
				int site = Convert.ToInt32(fields[2]);
				int saleMoney = Convert.ToInt32(fields[3]);
				int saleYuanBao = Convert.ToInt32(fields[4]);
				int saleYinPiao = Convert.ToInt32(fields[5]);
				int saleGoodsCount = Convert.ToInt32(fields[6]);
				saleYinPiao = 0;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int disableMarket = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-market", 0);
				if (disableMarket > 0)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int bagIndex = 0;
				GoodsData goodsData = Global.GetGoodsByDbID(client, goodsDbID);
				string strcmd;
				if (null == goodsData)
				{
					goodsData = Global.GetSaleGoodsDataByDbID(client, goodsDbID);
					if (null == goodsData)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("从交易市场定位物品对象失败, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", new object[]
						{
							(TCPGameServerCmds)nID,
							Global.GetSocketRemoteEndPoint(socket, false),
							roleID,
							goodsDbID
						}), null, true);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Endtime, true, false))
					{
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(581, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					bagIndex = Global.GetIdleSlotOfBagGoods(client);
				}
				else
				{
					if (goodsData.Using > 0)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
						{
							-7,
							roleID,
							goodsDbID,
							site,
							saleMoney,
							saleYuanBao
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (goodsData.Binding > 0)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
						{
							-100,
							roleID,
							goodsDbID,
							site,
							saleMoney,
							saleYuanBao
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!Global.CanExchangeCategoriy(goodsData))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
						{
							-100,
							roleID,
							goodsDbID,
							site,
							saleMoney,
							saleYuanBao
						});
						client.sendCmd(654, strcmd, false);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (Global.IsTimeLimitGoods(goodsData))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
						{
							-101,
							roleID,
							goodsDbID,
							site,
							saleMoney,
							saleYuanBao
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (Global.GetSaleGoodsDataCount(client) >= 16)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
						{
							-110,
							roleID,
							goodsDbID,
							site,
							saleMoney,
							saleYuanBao
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int gridNum = Global.GetGoodsGridNumByID(goodsData.GoodsID);
					if (gridNum > 1 && saleGoodsCount > 0 && saleGoodsCount < goodsData.GCount)
					{
						if (TCPProcessCmdResults.RESULT_OK != Global.SplitGoodsByCmdParams(client, socket, 133, roleID, goodsData.Id, goodsData.Site, goodsData.GoodsID, goodsData.GCount - saleGoodsCount, false))
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
							{
								-201,
								roleID,
								goodsDbID,
								site,
								saleMoney,
								saleYuanBao
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
				}
				string[] dbFields = null;
				strcmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					roleID,
					goodsDbID,
					"*",
					"*",
					"*",
					"*",
					site,
					"*",
					"*",
					"*",
					"*",
					bagIndex,
					saleMoney,
					saleYuanBao,
					saleYinPiao,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strcmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-1,
						roleID,
						goodsDbID,
						site,
						saleMoney,
						saleYuanBao,
						saleYinPiao
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
					{
						-10,
						roleID,
						goodsDbID,
						site,
						saleMoney,
						saleYuanBao,
						saleYinPiao
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				goodsData.BagIndex = bagIndex;
				if (goodsData.Site != site)
				{
					if (goodsData.Site == 0 && site == -1)
					{
						Global.RemoveGoodsData(client, goodsData);
						goodsData.Site = site;
						goodsData.SaleMoney1 = saleMoney;
						goodsData.SaleYuanBao = saleYuanBao;
						goodsData.SaleYinPiao = saleYinPiao;
						Global.AddSaleGoodsData(client, goodsData);
						Global.ModRoleGoodsEvent(client, goodsData, 0, "交易上架", false);
						EventLogManager.AddGoodsEvent(client, OpTypes.Move, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "交易上架");
						SaleGoodsManager.AddSaleGoodsItem(new SaleGoodsItem
						{
							GoodsDbID = goodsData.Id,
							SalingGoodsData = goodsData,
							Client = client
						});
						if (1 == client.ClientData.SaleGoodsDataList.Count)
						{
							SaleRoleManager.AddSaleRoleItem(client);
						}
					}
					else if (goodsData.Site == -1 && site == 0)
					{
						SaleGoodsManager.RemoveSaleGoodsItem(goodsData.Id);
						Global.RemoveSaleGoodsData(client, goodsData);
						if (50200 != goodsData.GoodsID)
						{
							goodsData.Site = site;
							goodsData.SaleMoney1 = 0;
							goodsData.SaleYuanBao = 0;
							goodsData.SaleYinPiao = 0;
							Global.AddGoodsData(client, goodsData);
							Global.ModRoleGoodsEvent(client, goodsData, 0, "交易下架", false);
							EventLogManager.AddGoodsEvent(client, OpTypes.Move, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "交易下架");
						}
						else if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData, goodsData.GCount, false, true))
						{
							int addMoney = Math.Max(0, goodsData.Quality);
							if (addMoney > 0)
							{
								GameManager.ClientMgr.AddUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, addMoney, "挂售物品", false);
							}
							Global.ModRoleGoodsEvent(client, goodsData, 0, "铜钱交易下架", false);
							EventLogManager.AddGoodsEvent(client, OpTypes.Move, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "铜钱交易下架");
						}
						if (0 == client.ClientData.SaleGoodsDataList.Count)
						{
							SaleRoleManager.RemoveSaleRoleItem(client.ClientData.RoleID);
						}
					}
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
				{
					0,
					roleID,
					goodsDbID,
					site,
					saleMoney,
					saleYuanBao,
					saleYinPiao
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E75 RID: 15989 RVA: 0x003751AC File Offset: 0x003733AC
		private static TCPProcessCmdResults ProcessSpriteSelfSaleGoodsListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<GoodsData> saleGoodsDataList = client.ClientData.SaleGoodsDataList;
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(saleGoodsDataList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E76 RID: 15990 RVA: 0x0037530C File Offset: 0x0037350C
		private static TCPProcessCmdResults ProcessSpriteOtherSaleGoodsListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int otherRoleID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<GoodsData> saleGoodsDataList = new List<GoodsData>();
				GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
				if (null != otherClient)
				{
					saleGoodsDataList = otherClient.ClientData.SaleGoodsDataList;
				}
				else
				{
					saleGoodsDataList = LiXianBaiTanManager.GetLiXianSaleGoodsList(otherRoleID);
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(saleGoodsDataList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E77 RID: 15991 RVA: 0x003754BC File Offset: 0x003736BC
		private static TCPProcessCmdResults ProcessSpriteMarketRoleListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<SaleRoleData> saleRoleDataList = SaleRoleManager.GetSaleRoleDataList();
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<SaleRoleData>>(saleRoleDataList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E78 RID: 15992 RVA: 0x00375618 File Offset: 0x00373818
		private static TCPProcessCmdResults ProcessSpriteMarketGoodsListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int marketSearchType = Convert.ToInt32(fields[1]);
				string marketSearchText = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<SaleGoodsData> saleGoodsDataList = null;
				if (0 == marketSearchType)
				{
					saleGoodsDataList = SaleGoodsManager.GetSaleGoodsDataList();
				}
				else if (2 == marketSearchType)
				{
					Dictionary<int, bool> goodsIDDict = new Dictionary<int, bool>();
					string[] searchFileds = marketSearchText.Split(new char[]
					{
						','
					});
					if (searchFileds != null && searchFileds.Length > 0)
					{
						for (int i = 0; i < searchFileds.Length; i++)
						{
							int searchGoodsID = Global.SafeConvertToInt32(searchFileds[i]);
							goodsIDDict[searchGoodsID] = true;
						}
						saleGoodsDataList = SaleGoodsManager.FindSaleGoodsDataList(goodsIDDict);
					}
				}
				else if (1 == marketSearchType)
				{
					saleGoodsDataList = SaleGoodsManager.FindSaleGoodsDataListByRoleName(marketSearchText);
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<SaleGoodsData>>(saleGoodsDataList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E79 RID: 15993 RVA: 0x00375854 File Offset: 0x00373A54
		private static TCPProcessCmdResults ProcessSpriteMarketBuyGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int goodsDbID = Convert.ToInt32(fields[1]);
				int goodsID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int disableMarket = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-market", 0);
				if (disableMarket > 0)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				GameClient otherClient = null;
				SaleGoodsItem saleGoodsItem = SaleGoodsManager.RemoveSaleGoodsItem(goodsDbID);
				if (null != saleGoodsItem)
				{
					otherClient = GameManager.ClientMgr.FindClient(saleGoodsItem.Client.ClientData.RoleID);
					if (null != otherClient)
					{
						if (!otherClient.ClientData.AllowMarketBuy)
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
				}
				if (saleGoodsItem != null && null != otherClient)
				{
					GoodsData goodsData = Global.GetSaleGoodsDataByDbID(otherClient, goodsDbID);
					if (null == goodsData)
					{
						SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);
						GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -3, 0, goodsDbID, goodsID, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (goodsData.GoodsID != goodsID)
					{
						SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);
						GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -1003, 0, goodsDbID, goodsID, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (50200 != goodsData.GoodsID)
					{
						if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, 0, goodsData.Endtime, true, false))
						{
							SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);
							GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -5, 0, goodsDbID, goodsID, 226);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					if (saleGoodsItem.SalingGoodsData.SaleMoney1 > 0 && client.ClientData.YinLiang < saleGoodsItem.SalingGoodsData.SaleMoney1)
					{
						SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);
						GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -10, 0, goodsDbID, goodsID, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (saleGoodsItem.SalingGoodsData.SaleYuanBao > 0 && client.ClientData.UserMoney < saleGoodsItem.SalingGoodsData.SaleYuanBao)
					{
						SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);
						GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -20, 0, goodsDbID, goodsID, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					int yinPiaoGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("YinPiaoGoodsID", -1);
					if (saleGoodsItem.SalingGoodsData.SaleYinPiao > 0 && Global.GetTotalGoodsCountByID(client, yinPiaoGoodsID) < saleGoodsItem.SalingGoodsData.SaleYinPiao)
					{
						SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);
						GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -21, 0, goodsDbID, goodsID, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (saleGoodsItem.SalingGoodsData.SaleYinPiao > 0)
					{
						if (!Global.CanAddGoods2(otherClient, yinPiaoGoodsID, saleGoodsItem.SalingGoodsData.SaleYinPiao, 0, "1900-01-01 12:00:00", true))
						{
							SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);
							GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -22, 0, goodsDbID, goodsID, 226);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					GameManager.logDBCmdMgr.AddMessageLog(-1, "交易日志", "交易市场", otherClient.ClientData.RoleName, client.ClientData.RoleName, "交易", client.ClientData.RoleID, client.ClientData.ZoneID, client.strUserID, otherClient.ClientData.RoleID, GameManager.ServerId, "");
					if (saleGoodsItem.SalingGoodsData.SaleMoney1 > 0)
					{
						if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, saleGoodsItem.SalingGoodsData.SaleMoney1, "交易市场购买1", false))
						{
							SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);
							GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -10, 0, goodsDbID, goodsID, 226);
							return TCPProcessCmdResults.RESULT_OK;
						}
						GameManager.ClientMgr.AddUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, otherClient, saleGoodsItem.SalingGoodsData.SaleMoney1, "交易市场出售1", false);
					}
					if (saleGoodsItem.SalingGoodsData.SaleYuanBao > 0)
					{
						if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, saleGoodsItem.SalingGoodsData.SaleYuanBao, "交易市场购买1", false, true, false, DaiBiSySType.None))
						{
							SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);
							GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -20, 0, goodsDbID, goodsID, 226);
							return TCPProcessCmdResults.RESULT_OK;
						}
						GameManager.ClientMgr.AddUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, otherClient, saleGoodsItem.SalingGoodsData.SaleYuanBao, "交易市场出售一", ActivityTypes.None, "");
					}
					if (saleGoodsItem.SalingGoodsData.SaleYinPiao > 0)
					{
						bool usedBinding = false;
						bool usedTimeLimited = false;
						if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, yinPiaoGoodsID, saleGoodsItem.SalingGoodsData.SaleYinPiao, false, out usedBinding, out usedTimeLimited, false))
						{
							SaleGoodsManager.AddSaleGoodsItem(saleGoodsItem);
							GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -21, 0, goodsDbID, goodsID, 226);
							return TCPProcessCmdResults.RESULT_OK;
						}
						Global.BatchAddGoods(otherClient, yinPiaoGoodsID, saleGoodsItem.SalingGoodsData.SaleYinPiao, 0, "交易市场购买后批量添加");
					}
					int saleMoney = goodsData.SaleMoney1;
					int saleYuanBao = goodsData.SaleYuanBao;
					int saleYinPiao = goodsData.SaleYinPiao;
					int saleOutMoney = Math.Max(0, goodsData.Quality);
					Global.RemoveSaleGoodsData(otherClient, goodsData);
					goodsData.SaleMoney1 = 0;
					goodsData.SaleYuanBao = 0;
					goodsData.SaleYinPiao = 0;
					goodsData.Site = 0;
					bool bMoveToTarget = 50200 != goodsData.GoodsID;
					if (!GameManager.ClientMgr.MoveGoodsDataToOtherRole(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, goodsData, otherClient, client, bMoveToTarget))
					{
						GameManager.SystemServerEvents.AddEvent(string.Format("转移物品时失败, 交易市场购买, FromRole={0}({1}), ToRole={2}({3}), GoodsDbID={4}, GoodsID={5}, GoodsNum={6}", new object[]
						{
							otherClient.ClientData.RoleID,
							otherClient.ClientData.RoleName,
							client.ClientData.RoleID,
							client.ClientData.RoleName,
							goodsData.Id,
							goodsData.GoodsID,
							goodsData.GCount
						}), EventLevels.Important);
						GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -100, 0, goodsDbID, goodsID, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (!bMoveToTarget)
					{
						if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData, goodsData.GCount, false, true))
						{
							GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, -1004, 0, goodsDbID, goodsID, 226);
							return TCPProcessCmdResults.RESULT_OK;
						}
						GameManager.ClientMgr.AddUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, saleOutMoney, "交易市场放入物品失败补回一", false);
					}
					Global.AddRoleSaleEvent(client, goodsData.GoodsID, goodsData.GCount, -saleMoney, -saleYinPiao, -saleYuanBao, yinPiaoGoodsID, -saleOutMoney);
					Global.AddRoleSaleEvent(otherClient, goodsData.GoodsID, -goodsData.GCount, saleMoney, saleYinPiao, saleYuanBao, yinPiaoGoodsID, saleOutMoney);
					GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, otherClient, client, 0, 1, goodsDbID, goodsID, 226);
					GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, otherClient, 0, 0, goodsDbID, goodsID, 226);
					string washPropsStr = Convert.ToBase64String(DataHelper.ObjectToBytes<List<int>>(goodsData.WashProps));
					Global.AddMarketBuyLog(otherClient.ClientData.RoleID, client.ClientData.RoleID, client.ClientData.RoleName, goodsData.GoodsID, goodsData.GCount, goodsData.Forge_level, saleYuanBao, client.ClientData.UserMoney, saleMoney, saleYinPiao, 0, goodsData.ExcellenceInfo, washPropsStr);
				}
				else
				{
					LiXianSaleGoodsItem liXianSaleGoodsItem = LiXianBaiTanManager.RemoveLiXianSaleGoodsItem(goodsDbID);
					if (null == liXianSaleGoodsItem)
					{
						GameManager.ClientMgr.NotifySpriteMarketBuy(tcpMgr.MySocketListener, pool, client, null, -1, 0, goodsDbID, goodsID, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GoodsData goodsData = liXianSaleGoodsItem.SalingGoodsData;
					if (goodsData.GoodsID != goodsID)
					{
						LiXianBaiTanManager.AddLiXianSaleGoodsItem(liXianSaleGoodsItem);
						GameManager.ClientMgr.NotifySpriteMarketBuy2(tcpMgr.MySocketListener, pool, client, liXianSaleGoodsItem.RoleID, -1003, 0, goodsDbID, goodsID, liXianSaleGoodsItem.ZoneID, liXianSaleGoodsItem.RoleName, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (50200 != goodsData.GoodsID)
					{
						if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, 0, goodsData.Endtime, true, false))
						{
							LiXianBaiTanManager.AddLiXianSaleGoodsItem(liXianSaleGoodsItem);
							GameManager.ClientMgr.NotifySpriteMarketBuy2(tcpMgr.MySocketListener, pool, client, liXianSaleGoodsItem.RoleID, -5, 0, goodsDbID, goodsID, liXianSaleGoodsItem.ZoneID, liXianSaleGoodsItem.RoleName, 226);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					if (liXianSaleGoodsItem.SalingGoodsData.SaleMoney1 > 0 && client.ClientData.YinLiang < liXianSaleGoodsItem.SalingGoodsData.SaleMoney1)
					{
						LiXianBaiTanManager.AddLiXianSaleGoodsItem(liXianSaleGoodsItem);
						GameManager.ClientMgr.NotifySpriteMarketBuy2(tcpMgr.MySocketListener, pool, client, liXianSaleGoodsItem.RoleID, -10, 0, goodsDbID, goodsID, liXianSaleGoodsItem.ZoneID, liXianSaleGoodsItem.RoleName, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (liXianSaleGoodsItem.SalingGoodsData.SaleYuanBao > 0 && client.ClientData.UserMoney < liXianSaleGoodsItem.SalingGoodsData.SaleYuanBao)
					{
						LiXianBaiTanManager.AddLiXianSaleGoodsItem(liXianSaleGoodsItem);
						GameManager.ClientMgr.NotifySpriteMarketBuy2(tcpMgr.MySocketListener, pool, client, liXianSaleGoodsItem.RoleID, -20, 0, goodsDbID, goodsID, liXianSaleGoodsItem.ZoneID, liXianSaleGoodsItem.RoleName, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GameManager.logDBCmdMgr.AddMessageLog(-1, "交易日志", "交易市场", liXianSaleGoodsItem.RoleName, client.ClientData.RoleName, "交易", liXianSaleGoodsItem.RoleID, client.ClientData.ZoneID, client.strUserID, client.ClientData.RoleID, GameManager.ServerId, "");
					if (50200 != goodsData.GoodsID)
					{
						if (liXianSaleGoodsItem.SalingGoodsData.SaleMoney1 > 0)
						{
							if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, liXianSaleGoodsItem.SalingGoodsData.SaleMoney1, "交易市场购买2", false))
							{
								LiXianBaiTanManager.AddLiXianSaleGoodsItem(liXianSaleGoodsItem);
								GameManager.ClientMgr.NotifySpriteMarketBuy2(tcpMgr.MySocketListener, pool, client, liXianSaleGoodsItem.RoleID, -10, 0, goodsDbID, goodsID, liXianSaleGoodsItem.ZoneID, liXianSaleGoodsItem.RoleName, 226);
								return TCPProcessCmdResults.RESULT_OK;
							}
							GameManager.ClientMgr.AddOfflineUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, liXianSaleGoodsItem.UserID, liXianSaleGoodsItem.RoleID, liXianSaleGoodsItem.RoleName, liXianSaleGoodsItem.SalingGoodsData.SaleMoney1, "交易市场出售(离线)2", client.ClientData.ZoneID);
						}
					}
					if (liXianSaleGoodsItem.SalingGoodsData.SaleYuanBao > 0)
					{
						if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, liXianSaleGoodsItem.SalingGoodsData.SaleYuanBao, "交易市场购买2", false, true, false, DaiBiSySType.None))
						{
							LiXianBaiTanManager.AddLiXianSaleGoodsItem(liXianSaleGoodsItem);
							GameManager.ClientMgr.NotifySpriteMarketBuy2(tcpMgr.MySocketListener, pool, client, liXianSaleGoodsItem.RoleID, -20, 0, goodsDbID, goodsID, liXianSaleGoodsItem.ZoneID, liXianSaleGoodsItem.RoleName, 226);
							return TCPProcessCmdResults.RESULT_OK;
						}
						GameManager.ClientMgr.AddOfflineUserMoney(tcpClientPool, pool, liXianSaleGoodsItem.RoleID, liXianSaleGoodsItem.RoleName, liXianSaleGoodsItem.SalingGoodsData.SaleYuanBao, "交易市场出售(离线)2", liXianSaleGoodsItem.ZoneID, liXianSaleGoodsItem.UserID);
					}
					int saleMoney = goodsData.SaleMoney1;
					int saleYuanBao = goodsData.SaleYuanBao;
					int saleYinPiao = goodsData.SaleYinPiao;
					int saleOutMoney = Math.Max(0, goodsData.Quality);
					goodsData.SaleMoney1 = 0;
					goodsData.SaleYuanBao = 0;
					goodsData.SaleYinPiao = 0;
					goodsData.Site = 0;
					string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
					bool bMoveToTarget = 50200 != goodsData.GoodsID;
					if (!GameManager.ClientMgr.MoveGoodsDataToOfflineRole(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, goodsData, liXianSaleGoodsItem.UserID, liXianSaleGoodsItem.RoleID, liXianSaleGoodsItem.RoleName, liXianSaleGoodsItem.RoleLevel, userID, client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.Level, bMoveToTarget, client.ClientData.ZoneID))
					{
						GameManager.SystemServerEvents.AddEvent(string.Format("转移物品时失败, 交易市场购买, FromRole={0}({1}), ToRole={2}({3}), GoodsDbID={4}, GoodsID={5}, GoodsNum={6}", new object[]
						{
							liXianSaleGoodsItem.RoleID,
							liXianSaleGoodsItem.RoleName,
							client.ClientData.RoleID,
							client.ClientData.RoleName,
							goodsData.Id,
							goodsData.GoodsID,
							goodsData.GCount
						}), EventLevels.Important);
						GameManager.ClientMgr.NotifySpriteMarketBuy2(tcpMgr.MySocketListener, pool, client, liXianSaleGoodsItem.RoleID, -100, 0, goodsDbID, goodsID, liXianSaleGoodsItem.ZoneID, liXianSaleGoodsItem.RoleName, 226);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (!bMoveToTarget)
					{
						if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData, goodsData.GCount, false, true))
						{
							GameManager.ClientMgr.NotifySpriteMarketBuy2(tcpMgr.MySocketListener, pool, client, liXianSaleGoodsItem.RoleID, -1004, 0, goodsDbID, goodsID, liXianSaleGoodsItem.ZoneID, liXianSaleGoodsItem.RoleName, 226);
							return TCPProcessCmdResults.RESULT_OK;
						}
						GameManager.ClientMgr.AddUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, saleOutMoney, "交易市场放入物品失败补回二", false);
					}
					Global.AddRoleSaleEvent2(userID, client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.Level, goodsData.GoodsID, goodsData.GCount, -saleMoney, -saleYinPiao, -saleYuanBao, -saleOutMoney);
					Global.AddRoleSaleEvent2(liXianSaleGoodsItem.UserID, liXianSaleGoodsItem.RoleID, liXianSaleGoodsItem.RoleName, liXianSaleGoodsItem.RoleLevel, goodsData.GoodsID, -goodsData.GCount, saleMoney, saleYinPiao, saleYuanBao, saleOutMoney);
					GameManager.ClientMgr.NotifySpriteMarketBuy2(tcpMgr.MySocketListener, pool, client, liXianSaleGoodsItem.RoleID, 0, 0, goodsDbID, goodsID, liXianSaleGoodsItem.ZoneID, liXianSaleGoodsItem.RoleName, 226);
					string washPropsStr = Convert.ToBase64String(DataHelper.ObjectToBytes<List<int>>(goodsData.WashProps));
					Global.AddMarketBuyLog(liXianSaleGoodsItem.RoleID, client.ClientData.RoleID, client.ClientData.RoleName, goodsData.GoodsID, goodsData.GCount, goodsData.Forge_level, saleYuanBao, client.ClientData.UserMoney, saleMoney, saleYinPiao, 0, goodsData.ExcellenceInfo, washPropsStr);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E7A RID: 15994 RVA: 0x00376A50 File Offset: 0x00374C50
		private static TCPProcessCmdResults ProcessSpriteModDefSkillIDCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int defSkillID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (null == client.ClientData.SkillDataList)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				SkillData skillData = Global.GetSkillDataByID(client, defSkillID);
				if (null == skillData)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				client.ClientData.DefaultSkillID = defSkillID;
				string skillName = Global.GetSkillNameByID(defSkillID);
				GameManager.DBCmdMgr.AddDBCmd(10039, string.Format("{0}:{1}", client.ClientData.RoleID, defSkillID), null, client.ServerId);
				string strcmd = string.Format("{0}:{1}", roleID, defSkillID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E7B RID: 15995 RVA: 0x00376C74 File Offset: 0x00374E74
		private static TCPProcessCmdResults ProcessSpriteModAutoDrinkCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int autoLifeV = Convert.ToInt32(fields[1]);
				int autoMagicV = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (autoLifeV != client.ClientData.AutoLifeV || autoMagicV != client.ClientData.AutoMagicV)
				{
					client.ClientData.AutoLifeV = autoLifeV;
					client.ClientData.AutoMagicV = autoMagicV;
					GameManager.DBCmdMgr.AddDBCmd(10040, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, autoLifeV, autoMagicV), null, client.ServerId);
				}
				string strcmd = string.Format("{0}:{1}:{2}", roleID, autoLifeV, autoMagicV);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E7C RID: 15996 RVA: 0x00376EA0 File Offset: 0x003750A0
		private static TCPProcessCmdResults ProcessSpritePlayDecoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 10)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int decoID = Convert.ToInt32(fields[1]);
				int decoType = Convert.ToInt32(fields[2]);
				int toBody = Convert.ToInt32(fields[3]);
				int toX = Convert.ToInt32(fields[4]);
				int toY = Convert.ToInt32(fields[5]);
				int shakeMap = Convert.ToInt32(fields[6]);
				int toX2 = Convert.ToInt32(fields[7]);
				int toY2 = Convert.ToInt32(fields[8]);
				int moveTicks = Convert.ToInt32(fields[9]);
				int alphaTicks = Convert.ToInt32(fields[10]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyOthersMyDeco(tcpMgr.MySocketListener, pool, client, decoID, decoType, toBody, toX, toY, shakeMap, toX2, toY2, moveTicks, alphaTicks, null);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E7D RID: 15997 RVA: 0x00377090 File Offset: 0x00375290
		private static TCPProcessCmdResults ProcessSpriteRunToMapCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int toMapCode = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameMap gameMap = null;
				if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
				{
					int defaultBirthPosX = gameMap.DefaultBirthPosX;
					int defaultBirthPosY = gameMap.DefaultBirthPosY;
					int defaultBirthRadius = gameMap.BirthRadius;
					Point newPos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, defaultBirthPosX, defaultBirthPosY, defaultBirthRadius);
					int toMapX = (int)newPos.X;
					int toMapY = (int)newPos.Y;
					string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						roleID,
						toMapCode,
						toMapX,
						toMapY
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E7E RID: 15998 RVA: 0x003772B0 File Offset: 0x003754B0
		private static TCPProcessCmdResults ProcessSpriteSearchRolesCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				string roleName = fields[1];
				int startIndex = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.SearchRolesByStr(client, roleName, startIndex);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E7F RID: 15999 RVA: 0x00377414 File Offset: 0x00375614
		private static TCPProcessCmdResults ProcessSpriteListRolesCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int startIndex = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.ListMapRoles(client, startIndex);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E80 RID: 16000 RVA: 0x00377574 File Offset: 0x00375774
		private static TCPProcessCmdResults ProcessSpriteListTeamsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int startIndex = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.ListAllTeams(client, startIndex);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E81 RID: 16001 RVA: 0x003776D4 File Offset: 0x003758D4
		private static TCPProcessCmdResults ProcessSpriteResetBagCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (SingletonTemplate<CreateRoleLimitManager>.Instance().ResetBagSlotTicks > 0 && TimeUtil.NOW() - client.ClientData._ResetBagTicks < (long)SingletonTemplate<CreateRoleLimitManager>.Instance().ResetBagSlotTicks)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(129, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				client.ClientData._ResetBagTicks = TimeUtil.NOW();
				Global.ResetBagAllGoods(client, true);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E82 RID: 16002 RVA: 0x003778C8 File Offset: 0x00375AC8
		private static TCPProcessCmdResults ProcessSpriteChgNumSkillIDCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int skillID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				client.ClientData.NumSkillID = skillID;
				GameManager.DBCmdMgr.AddDBCmd(10043, string.Format("{0}:{1}", client.ClientData.RoleID, skillID), null, client.ServerId);
				Global.ProcessNumSkillID(client, true);
				string strcmd = string.Format("{0}:{1}", roleID, skillID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E83 RID: 16003 RVA: 0x00377AA8 File Offset: 0x00375CA8
		private static TCPProcessCmdResults ProcessSpriteGetSkillUsedNumCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int skillID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SkillData skillData = Global.GetSkillDataByID(client, skillID);
				string strcmd;
				if (null == skillData)
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, skillID, -1);
				}
				else
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, skillID, skillData.UsedNum);
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E84 RID: 16004 RVA: 0x00377C88 File Offset: 0x00375E88
		private static TCPProcessCmdResults ProcessSpriteChgHorseBodyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int horseDbID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				HorseData horseData = Global.GetHorseDataByDbID(client, horseDbID);
				string strcmd;
				if (null == horseData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						horseDbID,
						0
					});
				}
				else
				{
					int RandColorGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("RandColor", -1);
					if (Global.GetTotalGoodsCountByID(client, RandColorGoodsID) <= 0)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-10,
							roleID,
							horseDbID,
							1
						});
					}
					else
					{
						bool usedBinding = false;
						bool usedTimeLimited = false;
						if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, RandColorGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
							{
								-10,
								roleID,
								horseDbID,
								1
							});
						}
						else
						{
							int newBodyID = Global.GetRandomHorseNewBodyID();
							if (newBodyID != horseData.BodyID)
							{
								Global.UpdateHorseBodyIDDBCommand(Global._TCPManager.TcpOutPacketPool, client, horseData.DbID, newBodyID);
							}
							strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
							{
								0,
								roleID,
								horseDbID,
								horseData.BodyID
							});
						}
					}
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E85 RID: 16005 RVA: 0x00377FBC File Offset: 0x003761BC
		private static TCPProcessCmdResults ProcessSpriteResetPortableBagCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				Global.ResetPortableBagAllGoods(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E86 RID: 16006 RVA: 0x00378108 File Offset: 0x00376308
		private static TCPProcessCmdResults ProcessSpriteResetJinDanBagCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				Global.ResetJinDanBagAllGoods(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E87 RID: 16007 RVA: 0x00378254 File Offset: 0x00376454
		private static TCPProcessCmdResults ProcessSpriteExecWaBaoByYaoShiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int idXiangZi = Convert.ToInt32(fields[1]);
				int idXiangYaoShi = Convert.ToInt32(fields[2]);
				int autoBuy = Convert.ToInt32(fields[3]);
				tcpOutPacket = WaBaoManager.ProcessWaBaoByYaoShi(client, pool, nID, idXiangZi, idXiangYaoShi, 1 == autoBuy);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E88 RID: 16008 RVA: 0x003783D4 File Offset: 0x003765D4
		private static TCPProcessCmdResults ProcessSpriteExecWaBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				tcpOutPacket = WaBaoManager.ProcessRandomWaBao(client, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E89 RID: 16009 RVA: 0x00378528 File Offset: 0x00376728
		private static TCPProcessCmdResults ProcessSpriteGetWaBaoDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				tcpOutPacket = WaBaoManager.ProcessGetWaBaoGoodsData(client, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E8A RID: 16010 RVA: 0x0037867C File Offset: 0x0037687C
		private static TCPProcessCmdResults ProcessSpriteZaJinDanCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				long startTicks = TimeUtil.NOW();
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int times = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (times <= 0)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("外挂发送错误数据, CMD={0}, Client={1}, RoleID={2}, times={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						times
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				times = Global.GMin(times, 50);
				times = Global.GMax(times, 1);
				string strcmd;
				if (client.ClientData.JinDanGoodsDataList != null && Global.GetJinDanBagCapacity(client) - client.ClientData.JinDanGoodsDataList.Count < times)
				{
					strcmd = string.Format("{0}:{1}:{2}", -100, roleID, client.ClientData.JinDanGoodsDataList.Count);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("JinDan", -1);
				if (needGoodsID <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -110, roleID, client.ClientData.JinDanGoodsDataList.Count);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool usedBinding = false;
				bool usedTimeLimited = false;
				bool hasSubGoods = false;
				int usedGoodsNum = 0;
				if (Global.GetTotalGoodsCountByID(client, needGoodsID) > 0 && 1 == times)
				{
					hasSubGoods = GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, needGoodsID, 1, false, out usedBinding, out usedTimeLimited, false);
					if (hasSubGoods)
					{
						usedGoodsNum = 1;
					}
				}
				int usedYuanBao = 0;
				if (!hasSubGoods)
				{
					int needYuanBao = times * 500;
					if (10 == times)
					{
						needYuanBao = 4800;
					}
					else if (50 == times)
					{
						needYuanBao = 22000;
					}
					if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYuanBao, "祈福1", true, true, false, DaiBiSySType.None))
					{
						string goodsName = Global.GetGoodsNameByID(needGoodsID);
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(605, new object[0]), new object[]
						{
							goodsName
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
						strcmd = string.Format("{0}:{1}:{2}", -1, roleID, client.ClientData.JinDanGoodsDataList.Count);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					usedYuanBao = needYuanBao;
				}
				string preString = string.Format("{0}_{1}_{2}_{3}_{4}_{5}", new object[]
				{
					roleID,
					0,
					client.ClientData.ZoneID,
					times,
					usedYuanBao,
					usedGoodsNum
				});
				StringBuilder strBuilder = new StringBuilder();
				for (int i = 0; i < times; i++)
				{
					int num = usedBinding ? 1 : 0;
				}
				Global.AddZaJinDanJiFen(client, Math.Max(0, times * 10), "砸金蛋", false);
				strcmd = string.Format("{0}:{1}:{2}", 1, roleID, client.ClientData.JinDanGoodsDataList.Count);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				long usedTicks = TimeUtil.NOW() - startTicks;
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E8B RID: 16011 RVA: 0x00378B98 File Offset: 0x00376D98
		private static TCPProcessCmdResults ProcessQueryZaJinDanHistoryCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int param = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (param >= 0 && param != roleID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("试图查询别人的砸金蛋历史信息, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E8C RID: 16012 RVA: 0x00378D58 File Offset: 0x00376F58
		private static TCPProcessCmdResults ProcessSpriteGetHuoDongDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyHuodongData(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E8D RID: 16013 RVA: 0x00378EA8 File Offset: 0x003770A8
		private static TCPProcessCmdResults ProcessSpriteGetWLoginGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int whichOne = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ret = HuodongCachingMgr.ProcessGetWLoginGift(client, whichOne);
				string strcmd = string.Format("{0}:{1}", ret, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E8E RID: 16014 RVA: 0x00379028 File Offset: 0x00377228
		private static TCPProcessCmdResults ProcessSpriteGetLimitTimeLoginGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int whichOne = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ret = HuodongCachingMgr.ProcessGetLimitTimeLoginGift(client, whichOne);
				string strcmd = string.Format("{0}:{1}:{2}", ret, roleID, whichOne);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E8F RID: 16015 RVA: 0x003791B0 File Offset: 0x003773B0
		private static TCPProcessCmdResults ProcessSpriteGetMTimeGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int whichOne = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ret = HuodongCachingMgr.ProcessGetMOnlineTimeGift(client, whichOne);
				string strcmd = string.Format("{0}:{1}", ret, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E90 RID: 16016 RVA: 0x00379330 File Offset: 0x00377530
		private static TCPProcessCmdResults ProcessSpriteGetNewStepGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int step = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ret = HuodongCachingMgr.ProcessGetNewStepGift(client, step);
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					ret,
					roleID,
					client.ClientData.MyHuodongData.NewStep,
					client.ClientData.MyHuodongData.StepTime
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E91 RID: 16017 RVA: 0x00379514 File Offset: 0x00377714
		private static TCPProcessCmdResults ProcessSpriteGetBigGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int whichOne = Convert.ToInt32(fields[1]);
				int bigAwardID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ret = HuodongCachingMgr.ProcessGetBigAwardGift(client, bigAwardID, whichOne);
				string strcmd = string.Format("{0}:{1}", ret, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E92 RID: 16018 RVA: 0x003796A0 File Offset: 0x003778A0
		private static TCPProcessCmdResults ProcessSpriteGetSongLiGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				string liPinMa = fields[1];
				int songLiID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (string.IsNullOrEmpty(liPinMa))
				{
					strcmd = string.Format("{0}:{1}", -1020, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int ret = HuodongCachingMgr.ProcessGetSongLiGift(client, songLiID, liPinMa);
				strcmd = string.Format("{0}:{1}", ret, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E93 RID: 16019 RVA: 0x00379888 File Offset: 0x00377A88
		private static TCPProcessCmdResults ProcessSpriteEnterFuBenCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int fuBenID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (socket.IsKuaFuLogin)
				{
					strcmd = string.Format("{0}:{1}", -2002, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (GameManager.MonsterZoneMgr.WaitingAddFuBenMonsterQueueCount() >= MonsterZoneManager.MaxWaitingRunQueueNum)
				{
					strcmd = string.Format("{0}:{1}", -1111, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemFuBenItem = null;
				if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
				{
					strcmd = string.Format("{0}:{1}", -1, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int fuBenUseType = systemFuBenItem.GetIntValue("FuBenUse", -1);
				int num = fuBenUseType;
				if (num == 2 || num == 10)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("接收到了异常的进入副本指令,角色:{0},副本:{1},副本用途:{2}", Global.FormatRoleName4(client), fuBenID, fuBenUseType), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int fuBenTab = systemFuBenItem.GetIntValue("TabID", -1);
				int needTask = GlobalNew.GetFuBenTabNeedTask(fuBenTab);
				if (needTask > client.ClientData.MainTaskID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("接收到了异常的进入副本指令,角色:{0},副本:{1},需要完成任务:{2}", Global.FormatRoleName4(client), fuBenID, needTask), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int nUpCopyID = systemFuBenItem.GetIntValue("UpCopyID", -1);
				int nFinishNumber = systemFuBenItem.GetIntValue("FinishNumber", -1);
				if (nUpCopyID > 0 && nFinishNumber > 0)
				{
					if (!Global.FuBenPassed(client, nUpCopyID))
					{
						strcmd = string.Format("{0}:{1}", -1000, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				int minLevel = systemFuBenItem.GetIntValue("MinLevel", -1);
				int maxLevel = systemFuBenItem.GetIntValue("MaxLevel", -1);
				if (maxLevel <= 0)
				{
					maxLevel = 1000;
				}
				int copyType = systemFuBenItem.GetIntValue("CopyType", -1);
				int enterNumber = systemFuBenItem.GetIntValue("EnterNumber", -1);
				int finishNumber = systemFuBenItem.GetIntValue("FinishNumber", -1);
				int toMapCode = systemFuBenItem.GetIntValue("MapCode", -1);
				int enterGoods = systemFuBenItem.GetIntValue("EnterGoods", -1);
				int nYuanbao = systemFuBenItem.GetIntValue("NeedYuanBao", -1);
				int nMinZhuanSheng = systemFuBenItem.GetIntValue("MinZhuanSheng", -1);
				int nMaxZhuanSheng = systemFuBenItem.GetIntValue("MaxZhuanSheng", -1);
				if (nMaxZhuanSheng < 0)
				{
					nMaxZhuanSheng = 1000;
				}
				minLevel = Global.GetUnionLevel(nMinZhuanSheng, minLevel, false);
				maxLevel = Global.GetUnionLevel(nMaxZhuanSheng, maxLevel, true);
				int unionLevel = Global.GetUnionLevel(client.ClientData.ChangeLifeCount, client.ClientData.Level, false);
				if (unionLevel < minLevel || unionLevel > maxLevel)
				{
					strcmd = string.Format("{0}:{1}", -5, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
				int nFinishNum;
				int haveEnterNum = Global.GetFuBenEnterNum(fuBenData, out nFinishNum);
				int nNum = 0;
				int nMaxNum = 0;
				if (finishNumber > 0)
				{
					nNum = nFinishNum;
					nMaxNum = finishNumber;
				}
				else
				{
					nNum = haveEnterNum;
					nMaxNum = enterNumber;
				}
				int nActivityCopyNum = -1;
				int fuBenLingGoodsID = enterGoods;
				TeamData td = null;
				CopyTeamData ctd = null;
				if (1 == copyType)
				{
					if (!SingletonTemplate<CopyTeamManager>.Instance().CanEnterScene(client, out ctd))
					{
						strcmd = string.Format("{0}:{1}", -100, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (1 == copyType && MapTypes.MarriageCopy != Global.GetMapType(fuBenID))
				{
					if (client.ClientData.TeamID <= 0)
					{
						strcmd = string.Format("{0}:{1}", -100, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
					if (null == td)
					{
						strcmd = string.Format("{0}:{1}", -105, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					lock (td)
					{
						if (td.LeaderRoleID != client.ClientData.RoleID)
						{
							strcmd = string.Format("{0}:{1}", -110, roleID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
				}
				else if (copyType == 3 || copyType == 4)
				{
					strcmd = string.Format("{0}:{1}", -30, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool bIsWanMoTaMapCode = WanMotaCopySceneManager.IsWanMoTaMapCode(fuBenID);
				if (bIsWanMoTaMapCode)
				{
					if (client.ClientData.WanMoTaNextLayerOrder + WanMotaCopySceneManager.nWanMoTaFirstFuBenOrder != fuBenID)
					{
						strcmd = string.Format("{0}:{1}", -7, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (client.ClientData.WanMoTaProp.nSweepLayer >= 0)
					{
						strcmd = string.Format("{0}:{1}", -8, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				int needFuBenLingNum = 0;
				if (GameManager.BloodCastleCopySceneMgr.IsBloodCastleCopyScene(fuBenID))
				{
					if (GameManager.BloodCastleCopySceneMgr.EnterBloodCastSceneCopySceneCount(client, fuBenID, out nActivityCopyNum) < 0)
					{
						strcmd = string.Format("{0}:{1}", -1001, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (GameManager.DaimonSquareCopySceneMgr.IsDaimonSquareCopyScene(fuBenID))
				{
					if (GameManager.DaimonSquareCopySceneMgr.EnterDaimonSquareSceneCopySceneCount(client, fuBenID, out nActivityCopyNum) < 0)
					{
						strcmd = string.Format("{0}:{1}", -1002, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(fuBenID))
				{
					if (GameManager.GuildCopyMapMgr.IsRefuseTime())
					{
						strcmd = string.Format("{0}:{1}", -1003, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (GameManager.GuildCopyMapMgr.ProcessEndFlag)
					{
						strcmd = string.Format("{0}:{1}", -1003, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					BangHuiMiniData bangHuiMiniData = Global.GetBangHuiMiniData(client.ClientData.Faction, 0);
					if (null == bangHuiMiniData)
					{
						strcmd = string.Format("{0}:{1}", -1004, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int mapid;
					int seqid;
					GameManager.GuildCopyMapMgr.CheckCurrGuildCopyMap(client, out mapid, out seqid, toMapCode);
					if (mapid < 0)
					{
						strcmd = string.Format("{0}:{1}", -1005, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (mapid != fuBenID)
					{
						strcmd = string.Format("{0}:{1}", -1006, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if ((enterNumber >= 0 && haveEnterNum >= enterNumber && !bIsWanMoTaMapCode) || (finishNumber >= 0 && nFinishNum >= finishNumber))
				{
					bool bGoOn = false;
					int nVipLev = client.ClientData.VipLevel;
					if (Global.IsInExperienceCopyScene(fuBenID))
					{
						int[] nAddNum = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPJinYanFuBenNum", ',');
						if (nVipLev > 0 && nVipLev <= VIPEumValue.VIPENUMVALUE_MAXLEVEL && nAddNum != null && nAddNum.Length > VIPEumValue.VIPENUMVALUE_MAXLEVEL)
						{
							int nRealNum = enterNumber + nAddNum[nVipLev];
							if (haveEnterNum < nRealNum)
							{
								needFuBenLingNum = 1;
								bGoOn = true;
							}
						}
						if (!bGoOn)
						{
							strcmd = string.Format("{0}:{1}", -6, roleID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					else if (fuBenID == 5100)
					{
						int[] nAddNum = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPJinBiFuBenNum", ',');
						if (nVipLev > 0 && nVipLev <= VIPEumValue.VIPENUMVALUE_MAXLEVEL && nAddNum != null && nAddNum.Length > VIPEumValue.VIPENUMVALUE_MAXLEVEL)
						{
							int nRealNum = enterNumber + nAddNum[nVipLev];
							if (haveEnterNum < nRealNum)
							{
								needFuBenLingNum = 1;
								bGoOn = true;
							}
						}
						if (!bGoOn)
						{
							strcmd = string.Format("{0}:{1}", -6, roleID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					else
					{
						needFuBenLingNum = 1;
					}
				}
				if (needFuBenLingNum > 0)
				{
					int nValue = Global.GMax(1, nNum + 1 - nMaxNum);
					int nNeedYuanBao = nValue * nYuanbao;
					if (Global.IsInExperienceCopyScene(fuBenID))
					{
						nNeedYuanBao = nYuanbao;
					}
					if (fuBenLingGoodsID <= 0 && nYuanbao <= 0)
					{
						strcmd = string.Format("{0}:{1}", -6, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					bool bSubGoods = false;
					bool bSubYuanBo = false;
					if (fuBenLingGoodsID > 0)
					{
						if (Global.GetTotalGoodsCountByID(client, fuBenLingGoodsID) < needFuBenLingNum)
						{
							strcmd = string.Format("{0}:{1}", -10, roleID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						bSubGoods = true;
					}
					if (nYuanbao > 0)
					{
						lock (client.ClientData.UserMoneyMutex)
						{
							if (client.ClientData.UserMoney < nNeedYuanBao)
							{
								strcmd = string.Format("{0}:{1}", -12, roleID);
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
						}
						bSubYuanBo = true;
					}
					if (bSubGoods)
					{
						bool usedBinding = false;
						bool usedTimeLimited = false;
						if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, fuBenLingGoodsID, needFuBenLingNum, false, out usedBinding, out usedTimeLimited, false))
						{
							strcmd = string.Format("{0}:{1}", -11, roleID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					if (bSubYuanBo)
					{
						if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, nNeedYuanBao, "进入副本", true, true, false, DaiBiSySType.None))
						{
							strcmd = string.Format("{0}:{1}", -12, roleID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
				}
				int fuBenSeqID = -1;
				bool bRet = true;
				if (ZhuanShengShiLian.IsZhuanShengShiLianCopyScene(toMapCode))
				{
					if (!ZhuanShengShiLian.EnterSceneCopyScene(client, out fuBenSeqID, toMapCode))
					{
						strcmd = string.Format("{0}:{1}", 0, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (fuBenSeqID > 0)
					{
						Global.QuitFromTeam(client);
						bRet = false;
					}
				}
				else if (GameManager.BloodCastleCopySceneMgr.IsBloodCastleCopyScene(fuBenID))
				{
					lock (BloodCastleCopySceneManager.m_Mutex)
					{
						int nRet = GameManager.BloodCastleCopySceneMgr.EnterBloodCastSceneCopyScene(client, fuBenID, nActivityCopyNum, out fuBenSeqID, toMapCode);
						if (nRet < 0)
						{
							strcmd = string.Format("{0}:{1}", 0, roleID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						if (fuBenSeqID > 0)
						{
							bRet = false;
						}
					}
				}
				else if (GameManager.DaimonSquareCopySceneMgr.IsDaimonSquareCopyScene(fuBenID))
				{
					lock (DaimonSquareCopySceneManager.m_Mutex)
					{
						int nRet = GameManager.DaimonSquareCopySceneMgr.EnterDaimonSquareSceneCopyScene(client, fuBenID, nActivityCopyNum, out fuBenSeqID, toMapCode);
						if (nRet < 0)
						{
							strcmd = string.Format("{0}:{1}", 0, roleID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						if (fuBenSeqID > 0)
						{
							bRet = false;
						}
					}
				}
				else if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(fuBenID))
				{
					int fubenid = 0;
					GameManager.GuildCopyMapMgr.EnterGuildCopyMap(client, out fubenid, out fuBenSeqID, toMapCode);
					if (fubenid < 0 || fuBenSeqID < 0)
					{
						strcmd = string.Format("{0}:{1}", -19, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					bRet = false;
				}
				if (bRet)
				{
					string[] dbFields = Global.ExecuteDBCmd(10049, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
					if (dbFields == null || dbFields.Length < 2)
					{
						strcmd = string.Format("{0}:{1}", -20, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);
				}
				if (fuBenSeqID > 0 && client.ClientData.FuBenSeqID > 0)
				{
					GlobalEventSource.getInstance().fireEvent(new PlayerLeaveFuBenEventObject(client));
				}
				if (0 == copyType)
				{
					Global.UpdateFuBenData(client, fuBenID, 1, 0);
					GameMap gameMap = null;
					if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
					{
						strcmd = string.Format("{0}:{1}", -30, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					client.ClientData.FuBenSeqID = fuBenSeqID;
					client.ClientData.FuBenID = fuBenID;
					FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, 0, fuBenID);
					GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
				}
				else if (1 == copyType)
				{
					List<int> roleIDsList = new List<int>();
					if (MapTypes.MarriageCopy != Global.GetMapType(fuBenID))
					{
						SingletonTemplate<CopyTeamManager>.Instance().HandleClickStart(client, fuBenSeqID);
						return TCPProcessCmdResults.RESULT_OK;
					}
					MarriageInstance FubenInstance = MarryFuBenMgr.getInstance().GetMarriageInstanceEX(client);
					if (FubenInstance != null)
					{
						roleIDsList.Add(FubenInstance.nHusband_ID);
						roleIDsList.Add(FubenInstance.nWife_ID);
					}
					SingletonTemplate<CopyTeamManager>.Instance().NotifyTeamFuBenEnterMsg(roleIDsList, minLevel, maxLevel, client.ClientData.MapCode, client.ClientData.RoleID, fuBenID, fuBenSeqID, enterNumber, finishNumber, enterNumber <= 0);
				}
				else if (2 == copyType)
				{
					Global.UpdateFuBenData(client, fuBenID, 1, 0);
					GameMap gameMap = null;
					if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
					{
						strcmd = string.Format("{0}:{1}", -30, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					client.ClientData.FuBenSeqID = fuBenSeqID;
					client.ClientData.FuBenID = fuBenID;
					FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, 0, fuBenID);
					GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
				}
				else
				{
					List<int> roleIDsList = new List<int>();
					lock (td)
					{
						if (td.LeaderRoleID != client.ClientData.RoleID)
						{
							strcmd = string.Format("{0}:{1}", -110, roleID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						if (null != td.TeamRoles)
						{
							for (int i = 0; i < td.TeamRoles.Count; i++)
							{
								roleIDsList.Add(td.TeamRoles[i].RoleID);
							}
						}
					}
					GameManager.ClientMgr.NotifyTeamFuBenEnterMsg(roleIDsList, minLevel, maxLevel, client.ClientData.MapCode, client.ClientData.RoleID, fuBenID, fuBenSeqID, enterNumber, finishNumber, enterNumber <= 0);
				}
				strcmd = string.Format("{0}:{1}", 0, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E94 RID: 16020 RVA: 0x0037AD74 File Offset: 0x00378F74
		private static TCPProcessCmdResults ProcessSpriteNotifyEnterFuBenCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int fuBenID = Convert.ToInt32(fields[1]);
				int fuBenSeqID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SceneUIClasses sceneType = Global.GetMapSceneType(client.ClientData.MapCode);
				if (sceneType != SceneUIClasses.Normal)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.NotifyFuBenSeqID != fuBenSeqID || client.ClientData.NotifyFuBenID != fuBenID)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				SystemXmlItem systemFuBenItem = null;
				if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int minLevel = systemFuBenItem.GetIntValue("MinLevel", -1);
				int maxLevel = systemFuBenItem.GetIntValue("MaxLevel", -1);
				if (maxLevel <= 0)
				{
					maxLevel = 1000;
				}
				int copyType = systemFuBenItem.GetIntValue("CopyType", -1);
				int enterNumber = systemFuBenItem.GetIntValue("EnterNumber", -1);
				int finishNumber = systemFuBenItem.GetIntValue("FinishNumber", -1);
				int toMapCode = systemFuBenItem.GetIntValue("MapCode", -1);
				int nMinZhuanSheng = systemFuBenItem.GetIntValue("MinZhuanSheng", -1);
				int nMaxZhuanSheng = systemFuBenItem.GetIntValue("MaxZhuanSheng", -1);
				if (nMaxZhuanSheng <= 0)
				{
					nMaxZhuanSheng = 1000;
				}
				minLevel = Global.GetUnionLevel(nMinZhuanSheng, minLevel, false);
				maxLevel = Global.GetUnionLevel(nMaxZhuanSheng, maxLevel, true);
				int unionLevel = Global.GetUnionLevel(client.ClientData.ChangeLifeCount, client.ClientData.Level, false);
				if (unionLevel < minLevel || unionLevel > maxLevel)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				sceneType = Global.GetMapSceneType(toMapCode);
				SceneUIClasses sceneUIClasses = sceneType;
				switch (sceneUIClasses)
				{
				case SceneUIClasses.BloodCastle:
				case SceneUIClasses.Demon:
					break;
				default:
					if (sceneUIClasses != SceneUIClasses.ThemeZSSL)
					{
						if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(fuBenID))
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
						FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
						int nFinishNum;
						int haveEnterNum = Global.GetFuBenEnterNum(fuBenData, out nFinishNum);
						if ((enterNumber >= 0 && haveEnterNum >= enterNumber) || (finishNumber >= 0 && nFinishNum >= finishNumber))
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (1 == copyType)
						{
							if (MapTypes.MarriageCopy == Global.GetMapType(fuBenID))
							{
								MarryFuBenMgr.getInstance().StartInstance(client);
								if (-1 == client.ClientData.MyMarriageData.byMarrytype)
								{
									return TCPProcessCmdResults.RESULT_OK;
								}
							}
							Global.UpdateFuBenData(client, fuBenID, 1, 0);
							if (!SingletonTemplate<CopyTeamManager>.Instance().IsKuaFuCopy(fuBenID))
							{
								GameMap gameMap = null;
								if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
								{
									return TCPProcessCmdResults.RESULT_OK;
								}
								client.ClientData.FuBenSeqID = fuBenSeqID;
								client.ClientData.FuBenID = fuBenID;
								client.SumDamageForCopyTeam = 0L;
								SingletonTemplate<CopyTeamManager>.Instance().UnRegisterCopyTeamListNotify(client);
								SingletonTemplate<CopyTeamManager>.Instance().HandleQuitFromTeam(client, false);
								FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, 0, fuBenID);
								GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
							}
							else
							{
								FuBenMapItem mapItem = FuBenManager.FindMapCodeByFuBenID(fuBenID, systemFuBenItem.GetIntValue("MapCode", -1));
								GlobalNew.RecordSwitchKuaFuServerLog(client);
								client.sendCmd<KuaFuServerLoginData>(14000, Global.GetClientKuaFuServerLoginData(client), false);
							}
						}
						else if (1 == copyType)
						{
							Global.UpdateFuBenData(client, fuBenID, 1, 0);
							GameMap gameMap = null;
							if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							client.ClientData.FuBenSeqID = fuBenSeqID;
							client.ClientData.FuBenID = fuBenID;
							FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, 0, fuBenID);
							GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
						}
						return TCPProcessCmdResults.RESULT_OK;
					}
					break;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E95 RID: 16021 RVA: 0x0037B2FC File Offset: 0x003794FC
		private static TCPProcessCmdResults ProcessSpriteClientHeartCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			SCClientHeart cmdData = null;
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<SCClientHeart>(data, 0, count, socket.m_Socket);
				if (!CheckHelper.CheckTCPCmdHandle<SCClientHeart>(socket, nID, data, count, out cmdData))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = cmdData.RoleID;
				int roleRandToken = cmdData.RandToken;
				long clientTicks = (long)cmdData.Ticks;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					SCClientHeart scData = new SCClientHeart(0, (int)TimeUtil.NOW(), 0);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<SCClientHeart>(scData, Global._TCPManager.TcpOutPacketPool, 23);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!tcpRandKey.FindKey(roleRandToken))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("接收到客户端心跳后，检测token无效, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				long nowTicks = TimeUtil.NOW();
				if (client.ClientData.LastClientHeartTicks < nowTicks - 60000L)
				{
					int regUserID = Global.RegisterUserIDToDBServer(client.strUserID, 1, socket.ServerId, ref socket.session.LastLogoutServerTicks);
					if (regUserID > 0)
					{
						client.ClientData.LastClientHeartTicks = nowTicks;
						client.ClientData.ClientHeartCount = client.ClientData.ClientHeartCount + 1;
					}
				}
				int allowTicks = GameManager.GameConfigMgr.GetGameConfigItemInt("yuzhouticks", 2000);
				SingletonTemplate<SpeedUpTickCheck>.Instance().OnClientHeart(client, cmdData.ReportCliRealTick);
				SCClientHeart scData2 = new SCClientHeart(roleID, (int)TimeUtil.NOW(), allowTicks);
				client.sendCmd<SCClientHeart>(23, scData2, false);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E96 RID: 16022 RVA: 0x0037B4F4 File Offset: 0x003796F4
		private static TCPProcessCmdResults ProcessGetRandomNameCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int sex = Convert.ToInt32(fields[0]);
				string preName = "";
				string[] dbFields = Global.ExecuteDBCmd(nID, string.Format("{0}", sex), 0);
				if (dbFields != null && dbFields.Length == 2)
				{
					preName = dbFields[1];
				}
				string strcmd = string.Format("{0}:{1}", sex, preName);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E97 RID: 16023 RVA: 0x0037B648 File Offset: 0x00379848
		private static TCPProcessCmdResults ProcessGetFuBenHistDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int fuBenID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E98 RID: 16024 RVA: 0x0037B7B0 File Offset: 0x003799B0
		private static TCPProcessCmdResults ProcessGetFuBenBeginInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyFuBenBeginInfo(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E99 RID: 16025 RVA: 0x0037B900 File Offset: 0x00379B00
		private static TCPProcessCmdResults ProcessGetFuBenMonstersNumCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(client.ClientData.MapCode, client.ClientData.FuBenSeqID);
				if (null != copyMap)
				{
					GameManager.ClientMgr.NotifyAllFuBenMonstersNum(copyMap, false);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E9A RID: 16026 RVA: 0x0037BA84 File Offset: 0x00379C84
		private static TCPProcessCmdResults ProcessFindMonsterCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			SCFindMonster cmdData = null;
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<SCFindMonster>(data, 0, count, socket.m_Socket);
				if (!CheckHelper.CheckTCPCmdHandle<SCFindMonster>(socket, nID, data, count, out cmdData))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = cmdData.RoleID;
				int centerX = cmdData.X;
				int centerY = cmdData.Y;
				int radiusGridNum = cmdData.Num;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int totalMonsterNum = 0;
				Point pt = GameManager.ClientMgr.SeekMonsterPosition(client, centerX, centerY, radiusGridNum, out totalMonsterNum);
				SCFindMonster scData = new SCFindMonster(roleID, (int)pt.X, (int)pt.Y, totalMonsterNum);
				client.sendCmd<SCFindMonster>(nID, scData, false);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E9B RID: 16027 RVA: 0x0037BBB0 File Offset: 0x00379DB0
		private static TCPProcessCmdResults ProcessBatchYinPiaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int yinPiaoNum = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (yinPiaoNum <= 0)
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int yinPiaoGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("YinPiaoGoodsID", -1);
				if (yinPiaoNum > Global.GetTotalGoodsCountByID(client, yinPiaoGoodsID))
				{
					strcmd = string.Format("{0}:{1}", roleID, -10);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, yinPiaoGoodsID, yinPiaoNum, false, out usedBinding, out usedTimeLimited, false))
				{
					strcmd = string.Format("{0}:{1}", roleID, -20);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yinPiaoNum * 1000, "批量转换银票", false);
				strcmd = string.Format("{0}:{1}", roleID, yinPiaoNum);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E9C RID: 16028 RVA: 0x0037BE6C File Offset: 0x0037A06C
		private static TCPProcessCmdResults ProcessForceToLaoFangCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int toMapCode = Global.GetLaoFangMapCode();
				if (-1 != toMapCode)
				{
					GameMap gameMap = null;
					if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
					{
						GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E9D RID: 16029 RVA: 0x0037C024 File Offset: 0x0037A224
		private static TCPProcessCmdResults ProcessGetRoleDailyDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyRoleDailyData(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E9E RID: 16030 RVA: 0x0037C174 File Offset: 0x0037A374
		private static TCPProcessCmdResults ProcessGetBossInfoDictCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyBossInfoDictData(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003E9F RID: 16031 RVA: 0x0037C2C4 File Offset: 0x0037A4C4
		private static TCPProcessCmdResults ProcessGetPaiHangListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EA0 RID: 16032 RVA: 0x0037C320 File Offset: 0x0037A520
		private static TCPProcessCmdResults ProcessStartYaBiaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int yaBiaoID = Convert.ToInt32(fields[1]);
				int needGoodsID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.MyYaBiaoData != null && client.ClientData.MyYaBiaoData.YaBiaoID > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, yaBiaoID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int minLevel = 0;
				int maxLevel = 65536;
				int yaJin = 0;
				Global.GetYaBiaoCondition(yaBiaoID, out minLevel, out maxLevel, out yaJin);
				if (client.ClientData.Level < minLevel || client.ClientData.Level > maxLevel)
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, yaBiaoID, -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.YinLiang < yaJin)
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, yaBiaoID, -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (0 >= needGoodsID)
				{
					if (!Global.CanTakeNormalYaBiao(client))
					{
						strcmd = string.Format("{0}:{1}:{2}", roleID, yaBiaoID, -5);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else
				{
					needGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("YaBiaoLingGoodsID", -1);
					int totalNum = Global.GetTotalGoodsCountByID(client, needGoodsID);
					if (totalNum < 1)
					{
						strcmd = string.Format("{0}:{1}:{2}", roleID, yaBiaoID, -10);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					bool usedBinding = false;
					bool usedTimeLimited = false;
					if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, needGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
					{
						strcmd = string.Format("{0}:{1}:{2}", roleID, yaBiaoID, -11);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, yaJin, "接镖", false))
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, yaBiaoID, -20);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (null == client.ClientData.MyYaBiaoData)
				{
					client.ClientData.MyYaBiaoData = new YaBiaoData();
				}
				DateTime dateTime = TimeUtil.NowDateTime();
				client.ClientData.MyYaBiaoData.YaBiaoID = yaBiaoID;
				client.ClientData.MyYaBiaoData.StartTime = dateTime.Ticks / 10000L;
				client.ClientData.MyYaBiaoData.State = 0;
				client.ClientData.MyYaBiaoData.LineID = GameManager.ServerLineID;
				client.ClientData.MyYaBiaoData.TouBao = 0;
				if (needGoodsID <= 0)
				{
					if (dateTime.DayOfYear != client.ClientData.MyYaBiaoData.YaBiaoDayID)
					{
						client.ClientData.MyYaBiaoData.YaBiaoDayID = dateTime.DayOfYear;
						client.ClientData.MyYaBiaoData.YaBiaoNum = 1;
					}
					else
					{
						client.ClientData.MyYaBiaoData.YaBiaoNum++;
					}
				}
				client.ClientData.MyYaBiaoData.TakeGoods = 0;
				GameManager.DBCmdMgr.AddDBCmd(10057, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
				{
					client.ClientData.RoleID,
					client.ClientData.MyYaBiaoData.YaBiaoID,
					client.ClientData.MyYaBiaoData.StartTime,
					client.ClientData.MyYaBiaoData.State,
					client.ClientData.MyYaBiaoData.LineID,
					client.ClientData.MyYaBiaoData.TouBao,
					client.ClientData.MyYaBiaoData.YaBiaoDayID,
					client.ClientData.MyYaBiaoData.YaBiaoNum,
					client.ClientData.MyYaBiaoData.TakeGoods
				}), null, client.ServerId);
				GameManager.ClientMgr.NotifyYaBiaoData(client);
				BiaoCheManager.ProcessNewBiaoChe(tcpMgr.MySocketListener, pool, client, yaBiaoID);
				Global.AddYaBiaoEvent(client, yaBiaoID, "接镖");
				strcmd = string.Format("{0}:{1}:{2}", roleID, yaBiaoID, 0);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EA1 RID: 16033 RVA: 0x0037C9D0 File Offset: 0x0037ABD0
		private static TCPProcessCmdResults ProcessEndYaBiaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (null == client.ClientData.MyYaBiaoData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						0,
						0,
						0,
						-1
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.MyYaBiaoData.YaBiaoID <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						0,
						0,
						0,
						-1
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(roleID);
				int yaBiaoID = client.ClientData.MyYaBiaoData.YaBiaoID;
				bool success = false;
				int failedType = 0;
				long ticks = TimeUtil.NowDateTime().Ticks / 10000L;
				if (ticks - client.ClientData.MyYaBiaoData.StartTime < (long)Global.MaxYaBiaoTicks)
				{
					if (client.ClientData.MyYaBiaoData.State <= 0)
					{
						if (client.ClientData.MyYaBiaoData.TakeGoods <= 0)
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
							{
								yaBiaoID,
								0,
								0,
								-5
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						success = true;
					}
					else
					{
						failedType = 2;
					}
				}
				else
				{
					failedType = 1;
				}
				if (success)
				{
					if (client.ClientData.MyYaBiaoData.LineID != GameManager.ServerLineID)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							0,
							0,
							0,
							-6
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (null != biaoCheItem)
					{
						if (!Global.InCircle(new Point((double)biaoCheItem.PosX, (double)biaoCheItem.PosY), new Point((double)client.ClientData.PosX, (double)client.ClientData.PosY), 500.0))
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
							{
								0,
								0,
								0,
								-7
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
				}
				int yinLiang = 0;
				int experience = 0;
				int yaJin = 0;
				Global.GetYaBiaoReward(client.ClientData.MyYaBiaoData.YaBiaoID, out yinLiang, out experience, out yaJin);
				int needYinPiaoNum = Global.GetTouBaoYinPiaoNum(yinLiang);
				if (!success)
				{
					if (client.ClientData.MyYaBiaoData.TouBao > 0)
					{
					}
				}
				int isTouBao = client.ClientData.MyYaBiaoData.TouBao;
				if (!success)
				{
					yinLiang = 0;
					experience /= 2;
				}
				if (experience > 0)
				{
					GameManager.ClientMgr.ProcessRoleExperience(client, (long)experience, true, false, false, "none");
				}
				if (yinLiang > 0)
				{
					yinLiang = Global.FilterValue(client, yinLiang);
					GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yinLiang, "押镖完成", false);
					if (success)
					{
						GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yaJin, "退还用户押镖押金", false);
					}
				}
				if (!success)
				{
					if (client.ClientData.MyYaBiaoData.TouBao > 0)
					{
						GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYinPiaoNum, "押镖投保退还", ActivityTypes.None, "");
					}
				}
				client.ClientData.MyYaBiaoData.YaBiaoID = 0;
				client.ClientData.MyYaBiaoData.StartTime = 0L;
				client.ClientData.MyYaBiaoData.State = 0;
				client.ClientData.MyYaBiaoData.LineID = 0;
				client.ClientData.MyYaBiaoData.TouBao = 0;
				client.ClientData.MyYaBiaoData.TakeGoods = 0;
				GameManager.DBCmdMgr.AddDBCmd(10057, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
				{
					client.ClientData.RoleID,
					client.ClientData.MyYaBiaoData.YaBiaoID,
					client.ClientData.MyYaBiaoData.StartTime,
					client.ClientData.MyYaBiaoData.State,
					client.ClientData.MyYaBiaoData.LineID,
					client.ClientData.MyYaBiaoData.TouBao,
					client.ClientData.MyYaBiaoData.YaBiaoDayID,
					client.ClientData.MyYaBiaoData.YaBiaoNum,
					client.ClientData.MyYaBiaoData.TakeGoods
				}), null, client.ServerId);
				GameManager.ClientMgr.NotifyYaBiaoData(client);
				if (null != biaoCheItem)
				{
					BiaoCheManager.ProcessDelBiaoChe(tcpMgr.MySocketListener, pool, biaoCheItem.BiaoCheID);
				}
				if (success)
				{
					Global.BroadcastBiaoCheOkHint(client, biaoCheItem);
				}
				Global.AddYaBiaoEvent(client, yaBiaoID, success ? "成功交镖" : "失败交镖");
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					yaBiaoID,
					failedType,
					isTouBao,
					0
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EA2 RID: 16034 RVA: 0x0037D1E8 File Offset: 0x0037B3E8
		private static TCPProcessCmdResults ProcessTouBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (null == client.ClientData.MyYaBiaoData)
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.MyYaBiaoData.YaBiaoID <= 0)
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.MyYaBiaoData.TouBao > 0)
				{
					strcmd = string.Format("{0}:{1}", roleID, -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool success = false;
				long ticks = TimeUtil.NowDateTime().Ticks / 10000L;
				if (ticks - client.ClientData.MyYaBiaoData.StartTime < (long)Global.MaxYaBiaoTicks)
				{
					if (client.ClientData.MyYaBiaoData.State <= 0)
					{
						success = true;
					}
				}
				if (!success)
				{
					strcmd = string.Format("{0}:{1}", roleID, -5);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.MyYaBiaoData.LineID != GameManager.ServerLineID)
				{
					strcmd = string.Format("{0}:{1}", roleID, -6);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int yinLiang = 0;
				int experience = 0;
				int yaJin = 0;
				Global.GetYaBiaoReward(client.ClientData.MyYaBiaoData.YaBiaoID, out yinLiang, out experience, out yaJin);
				int needYinPiaoNum = Global.GetTouBaoYinPiaoNum(yinLiang);
				if (client.ClientData.UserMoney < needYinPiaoNum)
				{
					strcmd = string.Format("{0}:{1}", roleID, -10);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinPiaoNum, "运镖投保", true, true, false, DaiBiSySType.None))
				{
					strcmd = string.Format("{0}:{1}", roleID, -11);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				client.ClientData.MyYaBiaoData.TouBao = 1;
				GameManager.DBCmdMgr.AddDBCmd(10057, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
				{
					client.ClientData.RoleID,
					client.ClientData.MyYaBiaoData.YaBiaoID,
					client.ClientData.MyYaBiaoData.StartTime,
					client.ClientData.MyYaBiaoData.State,
					client.ClientData.MyYaBiaoData.LineID,
					client.ClientData.MyYaBiaoData.TouBao,
					client.ClientData.MyYaBiaoData.YaBiaoDayID,
					client.ClientData.MyYaBiaoData.YaBiaoNum,
					client.ClientData.MyYaBiaoData.TakeGoods
				}), null, client.ServerId);
				GameManager.ClientMgr.NotifyYaBiaoData(client);
				strcmd = string.Format("{0}:{1}", roleID, 0);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EA3 RID: 16035 RVA: 0x0037D724 File Offset: 0x0037B924
		private static TCPProcessCmdResults ProcessYaBiaoTakeGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (null == client.ClientData.MyYaBiaoData)
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.MyYaBiaoData.YaBiaoID <= 0)
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.MyYaBiaoData.TakeGoods > 0)
				{
					strcmd = string.Format("{0}:{1}", roleID, -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.MyYaBiaoData.LineID != GameManager.ServerLineID)
				{
					strcmd = string.Format("{0}:{1}", roleID, -4);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(roleID);
				if (null != biaoCheItem)
				{
					if (!Global.InCircle(new Point((double)biaoCheItem.PosX, (double)biaoCheItem.PosY), new Point((double)client.ClientData.PosX, (double)client.ClientData.PosY), 500.0))
					{
						strcmd = string.Format("{0}:{1}", roleID, -5);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				client.ClientData.MyYaBiaoData.TakeGoods = 1;
				GameManager.DBCmdMgr.AddDBCmd(10057, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
				{
					client.ClientData.RoleID,
					client.ClientData.MyYaBiaoData.YaBiaoID,
					client.ClientData.MyYaBiaoData.StartTime,
					client.ClientData.MyYaBiaoData.State,
					client.ClientData.MyYaBiaoData.LineID,
					client.ClientData.MyYaBiaoData.TouBao,
					client.ClientData.MyYaBiaoData.YaBiaoDayID,
					client.ClientData.MyYaBiaoData.YaBiaoNum,
					client.ClientData.MyYaBiaoData.TakeGoods
				}), null, client.ServerId);
				GameManager.ClientMgr.NotifyYaBiaoData(client);
				strcmd = string.Format("{0}:{1}", roleID, 0);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EA4 RID: 16036 RVA: 0x0037DB88 File Offset: 0x0037BD88
		private static TCPProcessCmdResults ProcessSpriteFindBiaoCheCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(roleID);
				int toMapCode = -1;
				int toPosX = 0;
				int toPosY = 0;
				if (null != biaoCheItem)
				{
					toMapCode = biaoCheItem.MapCode;
					toPosX = biaoCheItem.PosX;
					toPosY = biaoCheItem.PosY;
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					toMapCode,
					toPosX,
					toPosY
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EA5 RID: 16037 RVA: 0x0037DD70 File Offset: 0x0037BF70
		private static TCPProcessCmdResults ProcessSpriteAddHorseLuckyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int horseDbID = Convert.ToInt32(fields[1]);
				int luckyGoodsID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ret = ProcessHorse.ProcessAddHorseLucky(client, horseDbID, luckyGoodsID);
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					horseDbID,
					luckyGoodsID,
					ret
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EA6 RID: 16038 RVA: 0x0037DF3C File Offset: 0x0037C13C
		private static TCPProcessCmdResults ProcessSpriteGetChongZhiJiFenCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EA7 RID: 16039 RVA: 0x0037DF98 File Offset: 0x0037C198
		private static TCPProcessCmdResults ProcessSpriteGetInputPointsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				JieriIPointsExchgActivity act = HuodongCachingMgr.GetJieriIPointsExchgActivity();
				string cmdData = new UTF8Encoding().GetString(data, 0, count);
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				cmdData += ':';
				cmdData += act.FromDate.Replace(':', '$');
				cmdData += ':';
				cmdData += act.ToDate.Replace(':', '$');
				byte[] bytesCmd = new UTF8Encoding().GetBytes(cmdData);
				TCPProcessCmdResults eRet = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, bytesCmd, bytesCmd.Length, out tcpOutPacket, socket.ServerId);
				string cmdDataDB = null;
				tcpOutPacket.GetPacketCmdData(out cmdDataDB);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (null != act)
				{
					string cmdDataClient;
					act.BuildInputPointsDataCmdForClient(client, cmdDataDB, out cmdDataClient);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdDataClient, nID);
				}
				return eRet;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EA8 RID: 16040 RVA: 0x0037E15C File Offset: 0x0037C35C
		private static TCPProcessCmdResults ProcessGetWeekEndIputDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = "";
				WeedEndInputActivity act = HuodongCachingMgr.GetWeekEndInputActivity();
				if (act == null || !act.InActivityTime())
				{
					strcmd = string.Format("{0}:{1}", -1, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string strFlag = "WeekEndInputFlag";
				string WeekEndInputRandData = Global.GetRoleParamByName(client, strFlag);
				if (string.IsNullOrEmpty(WeekEndInputRandData))
				{
					strcmd = string.Format("{0}:{1}", -1, 0);
				}
				else
				{
					string[] InputRandData = WeekEndInputRandData.Split(new char[]
					{
						'#'
					});
					if (InputRandData.Length == 2)
					{
						strcmd = string.Format("{0}:{1}", 0, InputRandData[1]);
					}
				}
				act.UpdateWeekEndInputOpenDay(client);
				client._IconStateMgr.FlushChongZhiIconState(client);
				client._IconStateMgr.SendIconStateToClient(client);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EA9 RID: 16041 RVA: 0x0037E3C0 File Offset: 0x0037C5C0
		private static TCPProcessCmdResults ProcessGetFuBenHistListDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EAA RID: 16042 RVA: 0x0037E51C File Offset: 0x0037C71C
		private static TCPProcessCmdResults ProcessGetOtherHorseDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EAB RID: 16043 RVA: 0x0037E578 File Offset: 0x0037C778
		private static TCPProcessCmdResults ProcessSpriteGetOtherAttrib2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int ohterRoleID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameClient otherClient = GameManager.ClientMgr.FindClient(ohterRoleID);
				RoleDataEx roleDataEx;
				if (null == otherClient)
				{
					byte[] bytesData = null;
					if (TCPProcessCmdResults.RESULT_FAILED != Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out bytesData, socket.ServerId))
					{
						int length = BitConverter.ToInt32(bytesData, 0);
						roleDataEx = DataHelper.BytesToObject<RoleDataEx>(bytesData, 6, length - 2);
					}
					else
					{
						roleDataEx = new RoleDataEx
						{
							RoleID = -2
						};
					}
				}
				else
				{
					roleDataEx = otherClient.ClientData.GetRoleData();
				}
				GameManager.ClientMgr.NotifySelfOtherData(tcpMgr.MySocketListener, pool, client, roleDataEx, nID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EAC RID: 16044 RVA: 0x0037E784 File Offset: 0x0037C984
		private static TCPProcessCmdResults ProcessGetBangHuiListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EAD RID: 16045 RVA: 0x0037E8FC File Offset: 0x0037CAFC
		private static TCPProcessCmdResults ProcessCreateBangHuiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				string[] nameAndPingTaiID = fields[1].Split(new char[]
				{
					'$'
				});
				string bangHuiName = nameAndPingTaiID[0];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientSocket.IsKuaFuLogin)
				{
					strcmd = string.Format("{0}:{1}:{2}", -2, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string name = nameAndPingTaiID[0];
				int ret = NameServerNamager.CheckInvalidCharacters(name, false);
				if (ret <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", (ret == -40) ? -3 : ret, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				ret = NameServerNamager.RegisterNameToNameServer(client.ClientData.ZoneID, client.strUserID, nameAndPingTaiID, 1, roleID);
				if (ret <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", ret, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.ChangeLifeCount < Global.CreateBangHuiNeedZhuanShengLevel)
				{
					strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.ChangeLifeCount == Global.CreateBangHuiNeedZhuanShengLevel)
				{
					if (client.ClientData.Level < Global.CreateBangHuiNeedLevel)
					{
						strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				int createBangHuiGoodsID = Global.CreateBangHuiNeedGoodsID;
				if (createBangHuiGoodsID > 0)
				{
					if (Global.GetTotalGoodsCountByID(client, createBangHuiGoodsID) <= 0)
					{
						strcmd = string.Format("{0}:{1}:{2}", -50, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (client.ClientData.Money1 + client.ClientData.YinLiang < Global.CreateBangHuiNeedTongQian)
				{
					strcmd = string.Format("{0}:{1}:{2}", -10, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				cmdData += string.Format(":{0}", Global.GetZhanMengInitCoin());
				string[] retFields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
				if (retFields == null || 3 != retFields.Length || Convert.ToInt32(retFields[0]) < 0)
				{
					int dbRetCode = (retFields != null && retFields.Length > 0) ? Convert.ToInt32(retFields[0]) : -1031;
					if (dbRetCode == -1031)
					{
						dbRetCode = -1011;
					}
					else
					{
						dbRetCode = -1010;
					}
					strcmd = string.Format("{0}:{1}:{2}", dbRetCode, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int retCode = Convert.ToInt32(retFields[0]);
				if (retCode >= 0)
				{
					if (!Global.SubBindTongQianAndTongQian(client, Global.CreateBangHuiNeedTongQian, "创建帮会"))
					{
						strcmd = string.Format("{0}:{1}:{2}", -10, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					bool usedBinding = false;
					bool usedTimeLimited = false;
					if (createBangHuiGoodsID > 0)
					{
						GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, createBangHuiGoodsID, 1, false, out usedBinding, out usedTimeLimited, false);
					}
					client.ClientData.Faction = Convert.ToInt32(retFields[2]);
					client.ClientData.BHName = Global.FormatBangHuiName(client.ClientData.ZoneID, bangHuiName);
					client.ClientData.BHZhiWu = 1;
					GameManager.ClientMgr.ChangeBangHuiName(tcpMgr.MySocketListener, pool, client);
					GlobalEventSource4Scene.getInstance().fireEvent(new PostBangHuiChangeEventObject(client, client.ClientData.Faction), 10000);
					Global.SaveRoleParamsInt32ValueToDB(client, "EnterBangHuiUnixSecs", DataHelper.UnixSecondsNow(), true);
					Global.SaveRoleParamsDateTimeToDB(client, "10182", TimeUtil.NowDateTime(), true);
					JunQiManager.NotifySyncBangHuiJunQiItemsDict(client);
					Global.BroadcastBangHuiCreateOk(client, client.ClientData.BHName);
					GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createCreateZhanMengEvent(Global.FormatRoleName4(client), client.ClientData.Faction, client.ServerId));
					ChengJiuManager.OnFirstInFaction(client);
					UnionPalaceManager.initSetUnionPalaceProps(client, true);
					client._IconStateMgr.CheckGuildIcon(client, false);
					EventLogManager.AddBangHuiCreateEvent(client, client.ClientData.Faction);
				}
				strcmd = string.Format("{0}:{1}:{2}", retCode, roleID, retFields[2]);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EAE RID: 16046 RVA: 0x0037EFB4 File Offset: 0x0037D1B4
		private static TCPProcessCmdResults ProcessQueryBangHuiDetailCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int nChangeDayFlag = 0;
				int dayID = TimeUtil.NowDateTime().DayOfYear;
				if (client.ClientData.BGDayID1 != dayID || client.ClientData.BGDayID2 != dayID)
				{
					nChangeDayFlag = 1;
				}
				byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					bhid,
					nChangeDayFlag,
					dayID
				}));
				TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, sendBytesCmd, sendBytesCmd.Length, out tcpOutPacket, client.ServerId);
				if (TCPProcessCmdResults.RESULT_DATA == result && nChangeDayFlag > 0)
				{
					client.ClientData.BGDayID1 = dayID;
					client.ClientData.BGMoney = 0;
					client.ClientData.BGDayID2 = dayID;
					client.ClientData.BGGoods = 0;
				}
				return result;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EAF RID: 16047 RVA: 0x0037F23C File Offset: 0x0037D43C
		private static TCPProcessCmdResults ProcessUpdateBangHuiBulletinCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EB0 RID: 16048 RVA: 0x0037F398 File Offset: 0x0037D598
		private static TCPProcessCmdResults ProcessGetBHMemberDataListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EB1 RID: 16049 RVA: 0x0037F51C File Offset: 0x0037D71C
		private static TCPProcessCmdResults ProcessGetBHMemberDataListCmd2(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				List<BangHuiMemberData> BHList = Global.sendToDB<List<BangHuiMemberData>, string>(299, string.Format("{0}:{1}", roleID, bhid), 0);
				if (null == BHList)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				for (int i = 0; i < BHList.Count; i++)
				{
					BHList[i].YaoSaiBossState = YaoSaiBossManager.getInstance().GetRoleBossState(BHList[i].RoleID, roleID);
					if (BHList[i].YaoSaiBossState > 0)
					{
						BHList[i].YaoSaiJianYuState = YaoSaiJianYuManager.getInstance().GetYaoSaiJianYuState(BHList[i].RoleID, Global.GetUnionLevel2(BHList[i].BangHuiMemberChangeLifeLev, BHList[i].Level));
					}
				}
				client.sendCmd<List<BangHuiMemberData>>(nID, BHList, false);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EB2 RID: 16050 RVA: 0x0037F7B4 File Offset: 0x0037D9B4
		private static TCPProcessCmdResults ProcessUpdateBHVerifyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EB3 RID: 16051 RVA: 0x0037F910 File Offset: 0x0037DB10
		private static TCPProcessCmdResults ProcessApplyToBHMemberCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				string bhName = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.Faction > 0)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (Global.GetUnionLevel(client, false) < Global.GetUnionLevel(0, Global.JoinBangHuiNeedLevel, false) || !GlobalNew.IsGongNengOpened(client, GongNengIDs.ZhanMeng, true))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiAddMemberEventObject(client, bhid), 10000))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				fields = Global.ExecuteDBCmd(10070, cmdData, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("从DBServer查询战盟的管理成员时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int isVerify = Convert.ToInt32(fields[2]);
				if (isVerify < 0)
				{
					if (-1001 == isVerify || -1 == isVerify)
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(607, new object[0]), new object[]
						{
							bhName
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (1 == isVerify)
				{
					string gmCmdData = string.Format("-applytobh {0} {1} {2} {3} {4}", new object[]
					{
						roleID,
						NameServerNamager.EscapeName(client.ClientData.RoleName),
						bhid,
						NameServerNamager.EscapeName(bhName),
						fields[3]
					});
					GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
					{
						roleID,
						"",
						0,
						"",
						0,
						gmCmdData,
						0,
						0,
						-1
					}), null, client.ServerId);
					Global.SaveRoleParamsInt32ValueToDB(client, "EnterBangHuiUnixSecs", DataHelper.UnixSecondsNow(), true);
					Global.SaveRoleParamsDateTimeToDB(client, "10182", TimeUtil.NowDateTime(), true);
					GameManager.ClientMgr.NotifyHintMsg(client, string.Format(GLang.GetLang(608, new object[0]), NameServerNamager.EscapeName(bhName)));
					return TCPProcessCmdResults.RESULT_OK;
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					roleID,
					bhid,
					roleID,
					client.ClientData.RoleName,
					0
				});
				fields = Global.ExecuteDBCmd(302, strcmd, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("将角色添加为战盟的成员时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode < 0)
				{
					if (-1001 == retCode)
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(609, new object[0]), new object[]
						{
							bhName
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					}
					else if (-1060 == retCode)
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(610, new object[0]), new object[]
						{
							bhName
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					}
					else if (-1020 == retCode)
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(611, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					}
					else
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(612, new object[0]), new object[]
						{
							client.ClientData.RoleName,
							bhName,
							retCode
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createJoinZhanMengEvent(Global.FormatRoleName4(client), bhid, client.ServerId));
				client.ClientData.Faction = bhid;
				client.ClientData.BHName = bhName;
				client.ClientData.BHZhiWu = 0;
				GameManager.ClientMgr.ChangeBangHuiName(tcpMgr.MySocketListener, pool, client);
				GlobalEventSource4Scene.getInstance().fireEvent(new PostBangHuiChangeEventObject(client, bhid), 10000);
				Global.SaveRoleParamsInt32ValueToDB(client, "EnterBangHuiUnixSecs", DataHelper.UnixSecondsNow(), true);
				Global.SaveRoleParamsDateTimeToDB(client, "10182", TimeUtil.NowDateTime(), true);
				int junQiLevel = JunQiManager.GetJunQiLevelByBHID(client.ClientData.Faction);
				Global.UpdateBufferData(client, BufferItemTypes.JunQi, new double[]
				{
					(double)junQiLevel - 1.0
				}, 1, true);
				Global.BroadcastBangHuiMsg(client.ClientData.RoleID, bhid, StringUtil.substitute(GLang.GetLang(83, new object[0]), new object[]
				{
					client.ClientData.RoleName,
					bhName
				}), true, GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlyChatBox);
				ChengJiuManager.OnFirstInFaction(client);
				UnionPalaceManager.initSetUnionPalaceProps(client, true);
				AllyManager.getInstance().UnionDataChange(bhid, client.ServerId, false, 0);
				client._IconStateMgr.CheckGuildIcon(client, false);
				Global.UpdateChengHaoBuff(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EB4 RID: 16052 RVA: 0x00380098 File Offset: 0x0037E298
		private static TCPProcessCmdResults ProcessRefuseApplyToBHMemberCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				int otherRoleID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
				if (null != otherClient)
				{
					GameManager.ClientMgr.NotifyRefuseApplyToBHMember(otherClient, client.ClientData.RoleName, client.ClientData.BHName);
				}
				else
				{
					string gmCmdData = string.Format("-refusetobh {0} {1} {2} {3}", new object[]
					{
						otherRoleID,
						client.ClientData.RoleName,
						client.ClientData.BHName,
						0
					});
					GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
					{
						client.ClientData.RoleID,
						"",
						0,
						"",
						0,
						gmCmdData,
						0,
						0,
						GameManager.ServerLineID
					}), null, client.ServerId);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EB5 RID: 16053 RVA: 0x0038034C File Offset: 0x0037E54C
		private static TCPProcessCmdResults ProcessAddBHMemberCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				int otherRoleID = Convert.ToInt32(fields[2]);
				string otherRoleName = fields[3];
				int toVerify = Convert.ToInt32(fields[4]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (roleID == otherRoleID)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(613, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
				if (null == otherClient)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(614, new object[0]), new object[]
					{
						otherRoleName
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (Global.GetUnionLevel(otherClient, false) < Global.GetUnionLevel(0, Global.JoinBangHuiNeedLevel, false))
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(615, new object[0]), new object[]
					{
						otherRoleName,
						Global.JoinBangHuiNeedLevel
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiAddMemberEventObject(client, bhid), 10000))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				fields = Global.ExecuteDBCmd(302, cmdData, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("将角色添加为战盟的成员时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode >= 0)
				{
					GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createJoinZhanMengEvent(otherRoleName, bhid, otherClient.ServerId));
					if (null != otherClient)
					{
						GameManager.ClientMgr.NotifyJoinBangHui(tcpMgr.MySocketListener, pool, otherClient, bhid, client.ClientData.BHName);
						GlobalEventSource4Scene.getInstance().fireEvent(new PostBangHuiChangeEventObject(otherClient, bhid), 10000);
					}
					else
					{
						string gmCmdData = string.Format("-joinbh {0} {1} {2}", otherRoleID, bhid, client.ClientData.BHName);
						GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
						{
							client.ClientData.RoleID,
							"",
							0,
							"",
							0,
							gmCmdData,
							0,
							0,
							GameManager.ServerLineID
						}), null, client.ServerId);
					}
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (-1001 == retCode)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(609, new object[0]), new object[]
					{
						client.ClientData.BHName
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (-1060 == retCode)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(610, new object[0]), new object[]
					{
						client.ClientData.BHName
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (-1050 == retCode)
				{
					if (null != otherClient)
					{
						GameManager.ClientMgr.NotifyInviteToBangHui(tcpMgr.MySocketListener, pool, otherClient, client.ClientData.RoleID, client.ClientData.RoleName, bhid, client.ClientData.BHName, client.ClientData.ChangeLifeCount);
					}
					else
					{
						string gmCmdData = string.Format("-invitetobh {0} {1} {2} {3} {4}", new object[]
						{
							otherRoleID,
							client.ClientData.RoleID,
							client.ClientData.RoleName,
							bhid,
							client.ClientData.BHName
						});
						GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
						{
							client.ClientData.RoleID,
							"",
							0,
							"",
							0,
							gmCmdData,
							0,
							0,
							GameManager.ServerLineID
						}), null, client.ServerId);
					}
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(616, new object[0]), new object[]
					{
						otherRoleName,
						client.ClientData.BHName
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (-1020 == retCode)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(617, new object[0]), new object[]
					{
						otherRoleName
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(612, new object[0]), new object[]
				{
					otherRoleName,
					client.ClientData.BHName,
					retCode
				}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EB6 RID: 16054 RVA: 0x00380AF4 File Offset: 0x0037ECF4
		private static TCPProcessCmdResults ProcessAgreeToBHMemberCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int otherRoleID = Convert.ToInt32(fields[1]);
				int bhid = Convert.ToInt32(fields[2]);
				string bhName = fields[3];
				int agreeTo = Convert.ToInt32(fields[4]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.Faction > 0)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (Global.GetUnionLevel(client, false) < Global.GetUnionLevel(0, Global.JoinBangHuiNeedLevel, false))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (1 == agreeTo)
				{
					if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiAddMemberEventObject(client, bhid), 10000))
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
					string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						roleID,
						bhid,
						roleID,
						client.ClientData.RoleName,
						0
					});
					fields = Global.ExecuteDBCmd(302, strcmd, client.ServerId);
					if (fields == null || fields.Length != 4)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("将角色添加为战盟的成员时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
						return TCPProcessCmdResults.RESULT_FAILED;
					}
					int retCode = Global.SafeConvertToInt32(fields[0]);
					if (retCode < 0)
					{
						if (-1001 == retCode)
						{
							GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(609, new object[0]), new object[]
							{
								bhName
							}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						}
						else if (-1060 == retCode)
						{
							GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(610, new object[0]), new object[]
							{
								bhName
							}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						}
						else
						{
							GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(618, new object[0]), new object[]
							{
								client.ClientData.RoleName,
								bhName,
								retCode
							}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						}
						return TCPProcessCmdResults.RESULT_OK;
					}
					client.ClientData.Faction = bhid;
					client.ClientData.BHName = bhName;
					client.ClientData.BHZhiWu = 0;
					GameManager.ClientMgr.ChangeBangHuiName(tcpMgr.MySocketListener, pool, client);
					GlobalEventSource4Scene.getInstance().fireEvent(new PostBangHuiChangeEventObject(client, bhid), 10000);
					Global.SaveRoleParamsInt32ValueToDB(client, "EnterBangHuiUnixSecs", DataHelper.UnixSecondsNow(), true);
					Global.SaveRoleParamsDateTimeToDB(client, "10182", TimeUtil.NowDateTime(), true);
					int junQiLevel = JunQiManager.GetJunQiLevelByBHID(client.ClientData.Faction);
					Global.UpdateBufferData(client, BufferItemTypes.JunQi, new double[]
					{
						(double)junQiLevel - 1.0
					}, 1, true);
					Global.BroadcastBangHuiMsg(client.ClientData.RoleID, bhid, StringUtil.substitute(GLang.GetLang(83, new object[0]), new object[]
					{
						client.ClientData.RoleName,
						bhName
					}), true, GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlySysHint);
					GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createJoinZhanMengEvent(Global.FormatRoleName4(client), bhid, client.ServerId));
					ChengJiuManager.OnFirstInFaction(client);
					UnionPalaceManager.initSetUnionPalaceProps(client, true);
					client._IconStateMgr.CheckGuildIcon(client, false);
				}
				else
				{
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null != otherClient)
					{
						GameManager.ClientMgr.NotifyRefuseInviteToBHMember(otherClient, client.ClientData.RoleName, bhName);
					}
					else
					{
						string gmCmdData = string.Format("-refusetobh {0} {1} {2} {3}", new object[]
						{
							otherRoleID,
							client.ClientData.RoleName,
							bhName,
							1
						});
						GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
						{
							client.ClientData.RoleID,
							"",
							0,
							"",
							0,
							gmCmdData,
							0,
							0,
							GameManager.ServerLineID
						}), null, client.ServerId);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EB7 RID: 16055 RVA: 0x0038113C File Offset: 0x0037F33C
		private static TCPProcessCmdResults ProcessRemoveBHMemberCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				int otherRoleID = Convert.ToInt32(fields[2]);
				string otherRoleName = fields[3];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiRemoveMemberEventObject(client, bhid), 10000))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				fields = Global.ExecuteDBCmd(303, cmdData, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("将角色从战盟中删除时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				string strcmd;
				if (retCode < 0)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(619, new object[0]), new object[]
					{
						otherRoleName,
						client.ClientData.BHName,
						retCode
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						retCode,
						roleID,
						bhid,
						otherRoleID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
				if (null != otherClient)
				{
					GameManager.ClientMgr.NotifyLeaveBangHui(tcpMgr.MySocketListener, pool, otherClient, bhid, client.ClientData.BHName, 0);
					GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createLeaveZhanMengEvent(Global.FormatRoleName4(otherClient), bhid, otherClient.ServerId));
					JunTuanManager.getInstance().JunTuanZhiWuChanged(otherClient, new JunTuanBangHuiMiniData());
				}
				else
				{
					string gmCmdData = string.Format("-leavebh {0} {1} {2} {3}", new object[]
					{
						otherRoleID,
						bhid,
						client.ClientData.BHName,
						0
					});
					GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
					{
						client.ClientData.RoleID,
						"",
						0,
						"",
						0,
						gmCmdData,
						0,
						0,
						GameManager.ServerLineID
					}), null, client.ServerId);
				}
				AllyManager.getInstance().UnionDataChange(client.ClientData.Faction, client.ServerId, false, 0);
				JunTuanManager.getInstance().OnBangHuiMemberChanged(client, bhid);
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					retCode,
					roleID,
					bhid,
					otherRoleID
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EB8 RID: 16056 RVA: 0x003815E8 File Offset: 0x0037F7E8
		private static TCPProcessCmdResults ProcessQuitFromBangHuiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.Faction <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -2000, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (1 == client.ClientData.BHZhiWu)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(620, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					strcmd = string.Format("{0}:{1}:{2}", -2100, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiRemoveMemberEventObject(client, bhid), 10000))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				fields = Global.ExecuteDBCmd(304, cmdData, client.ServerId);
				if (fields == null || fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("将角色从战盟中删除时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode < 0)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(621, new object[0]), new object[]
					{
						client.ClientData.RoleName,
						client.ClientData.BHName,
						retCode
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					strcmd = string.Format("{0}:{1}:{2}", retCode, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.NotifyLeaveBangHui(tcpMgr.MySocketListener, pool, client, bhid, client.ClientData.BHName, 1);
				GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createLeaveZhanMengEvent(Global.FormatRoleName4(client), bhid, client.ServerId));
				EventLogManager.AddBangHuiQuitEvent(client, bhid);
				AllyManager.getInstance().UnionDataChange(client.ClientData.Faction, client.ServerId, false, 0);
				JunTuanManager.getInstance().OnBangHuiMemberChanged(client, bhid);
				JunTuanManager.getInstance().JunTuanZhiWuChanged(client, new JunTuanBangHuiMiniData());
				strcmd = string.Format("{0}:{1}:{2}", retCode, roleID, bhid);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EB9 RID: 16057 RVA: 0x00381A30 File Offset: 0x0037FC30
		private static TCPProcessCmdResults ProcessDestroyBangHuiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				BangHuiDetailData unionData = Global.GetBangHuiDetailData(-1, bhid, client.ServerId);
				if (client.ClientData.Faction != bhid || unionData == null)
				{
					string strcmd = string.Format("{0}:{1}:{2}", -2000, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int unionLevel = unionData.QiLevel;
				if (!GlobalEventSource4Scene.getInstance().fireEvent(new PreBangHuiRemoveMemberEventObject(client, bhid), 10000))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (LingDiCaiJiManager.getInstance().isLingZhu(roleID))
				{
					string strcmd = string.Format("{0}:{1}:{2}", -1032, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!BangHuiMatchManager.getInstance().PreRemoveBangHui(client))
				{
					string strcmd = string.Format("{0}:{1}:{2}", -1036, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!KuaFuLueDuoManager.getInstance().PreRemoveBangHui(client))
				{
					string strcmd = string.Format("{0}:{1}:{2}", -1036, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!JunTuanManager.getInstance().PreRemoveBangHui(client))
				{
					string strcmd = string.Format("{0}:{1}:{2}", -11000, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				fields = Global.ExecuteDBCmd(305, cmdData, client.ServerId);
				if (fields == null || fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("将角色从战盟中删除时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string bhName = client.ClientData.BHName;
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode < 0)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(622, new object[0]), new object[]
					{
						client.ClientData.RoleName,
						client.ClientData.BHName,
						retCode
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					string strcmd = string.Format("{0}:{1}:{2}", retCode, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.BroadcastBangHuiMsg(roleID, bhid, StringUtil.substitute(GLang.GetLang(623, new object[0]), new object[]
				{
					client.ClientData.RoleName,
					bhName
				}), true, GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlyChatBox);
				GameManager.ClientMgr.NotifyBangHuiDestroy(retCode, roleID, bhid);
				EventLogManager.AddBangHuiDestroyEvent(client, bhid);
				AllyManager.getInstance().UnionDataChange(bhid, client.ServerId, true, unionLevel);
				string gmCmdData = string.Format("-destroybh {0} {1} {2}", retCode, roleID, bhid);
				GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
				{
					client.ClientData.RoleID,
					"",
					0,
					"",
					0,
					gmCmdData,
					0,
					0,
					GameManager.ServerLineID
				}), null, client.ServerId);
				JunQiManager.SendClearJunQiCmd(bhid);
				JunQiManager.NotifySyncBangHuiJunQiItemsDict(client);
				JunQiManager.NotifySyncBangHuiLingDiItemsDict();
				if (HuangChengManager.GetHuangDiRoleID() == client.ClientData.RoleID)
				{
					HuangChengManager.HandleDeadHuangDiRoleChanging(null);
				}
				Global.RemoveBangHuiMiniData(bhid);
				GuildCopyMap mapData = GameManager.GuildCopyMapMgr.FindGuildCopyMap(bhid);
				if (null != mapData)
				{
					GameManager.GuildCopyMapMgr.RemoveGuildCopyMap(mapData.GuildID);
					GameManager.CopyMapMgr.CloseGuildCopyMap(mapData.SeqID, mapData.MapCode);
				}
				HongBaoManager.getInstance().OnDestoryZhanMeng(bhid);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EBA RID: 16058 RVA: 0x0038204C File Offset: 0x0038024C
		private static TCPProcessCmdResults ProcessBangHuiVerifyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int toVerify = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				client.ClientData.BHVerify = toVerify;
				Global.ExecuteDBCmd(nID, string.Format("{0}:{1}", roleID, toVerify), client.ServerId);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EBB RID: 16059 RVA: 0x003821D0 File Offset: 0x003803D0
		private static TCPProcessCmdResults ProcessChgBHMemberZhiWuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				int otherRoleID = Convert.ToInt32(fields[2]);
				int zhiWu = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.BHZhiWu != 1)
				{
					string cmdresult = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1030,
						roleID,
						bhid,
						otherRoleID,
						zhiWu
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdresult, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (roleID == otherRoleID)
				{
					string cmdresult = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1002,
						roleID,
						bhid,
						otherRoleID,
						zhiWu
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdresult, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				PreBangHuiChangeZhiWuEventObject changeZhiWuEventObj = new PreBangHuiChangeZhiWuEventObject(client, bhid, otherRoleID, zhiWu);
				if (!GlobalEventSource4Scene.getInstance().fireEvent(changeZhiWuEventObj, 10000) && changeZhiWuEventObj.Handled)
				{
					int ret = -1007;
					if (changeZhiWuEventObj.ErrorCode != 0)
					{
						ret = changeZhiWuEventObj.ErrorCode;
					}
					string cmdresult = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						ret,
						roleID,
						bhid,
						otherRoleID,
						zhiWu
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdresult, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (zhiWu == 1)
				{
					BangHuiLingDiItemData lingDiItemData = JunQiManager.GetItemByLingDiID(7);
					if (lingDiItemData != null && lingDiItemData.BHID > 0 && lingDiItemData.BHID == client.ClientData.Faction)
					{
						string cmdresult = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-1006,
							roleID,
							bhid,
							otherRoleID,
							zhiWu
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdresult, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (LingDiCaiJiManager.getInstance().isLingZhu(roleID))
					{
						string cmdresult = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-1032,
							roleID,
							bhid,
							otherRoleID,
							zhiWu
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdresult, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
				if (fields == null || fields.Length != 6)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("修改战盟成员的职务时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode >= 0)
				{
					int oldZhiWuRoleID = Global.SafeConvertToInt32(fields[5]);
					string gmCmdData = string.Format("-chbhzhiwu {0} {1} {2} {3}", new object[]
					{
						bhid,
						otherRoleID,
						zhiWu,
						oldZhiWuRoleID
					});
					GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
					{
						0,
						"",
						0,
						"",
						0,
						gmCmdData,
						0,
						0,
						-1
					}), null, client.ServerId);
					GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createChangeZhiWuEvent(Global.FormatRoleName4(client), bhid, zhiWu, otherRoleID, client.ServerId));
					AllyManager.getInstance().UnionDataChange(bhid, client.ServerId, false, 0);
					if (zhiWu == 1)
					{
						JunTuanManager.getInstance().UpdateJunTuanRoleList(bhid, client.ServerId);
					}
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					retCode,
					roleID,
					bhid,
					otherRoleID,
					zhiWu
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EBC RID: 16060 RVA: 0x0038282C File Offset: 0x00380A2C
		private static TCPProcessCmdResults ProcessChgBHMemberChengHaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EBD RID: 16061 RVA: 0x00382988 File Offset: 0x00380B88
		private static TCPProcessCmdResults ProcessSearchRolesFromDBCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (SingletonTemplate<CreateRoleLimitManager>.Instance().AddBHMemberSlotTicks > 0 && TimeUtil.NOW() - client.ClientData._AddBHMemberTicks < (long)SingletonTemplate<CreateRoleLimitManager>.Instance().AddBHMemberSlotTicks)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(129, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				client.ClientData._AddBHMemberTicks = TimeUtil.NOW();
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EBE RID: 16062 RVA: 0x00382B8C File Offset: 0x00380D8C
		private static TCPProcessCmdResults ProcessGetBangGongHistCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EBF RID: 16063 RVA: 0x00382CF4 File Offset: 0x00380EF4
		private static TCPProcessCmdResults ProcessDonateBGMoneyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				int nMoneyType = Convert.ToInt32(fields[2]);
				int nDonateNum = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.Faction != bhid || bhid <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						bhid,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nDonateNum != 1 && nDonateNum != 10)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-103,
						roleID,
						bhid,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] nValue = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanMengJinBiJuanZeng", ',');
				int[] nValue2 = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanMengZuanShiJuanZeng", ',');
				int bangGong = 0;
				int[] nAddNum = null;
				int nVIPLev = client.ClientData.VipLevel;
				if (nVIPLev > 0 && nVIPLev <= VIPEumValue.VIPENUMVALUE_MAXLEVEL)
				{
					nAddNum = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPJinBiJuanZeng", ',');
					int[] nAddNum2 = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPZuanShiJuanZeng", ',');
				}
				if (nMoneyType != 1)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-102,
						roleID,
						bhid,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nSubMoney = nDonateNum * nValue[0];
				if (client.ClientData.YinLiang < nSubMoney)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						bhid,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpMgr.tcpClientPool, pool, client, nSubMoney, "帮会贡献", false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						bhid,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bangGong = nDonateNum * nValue[1];
				int nGuildMoney = nDonateNum * nValue[2];
				int nBangGongLimit = nValue[3];
				if (nAddNum != null && nAddNum.Length > 0 && nAddNum.Length < 13)
				{
					nBangGongLimit += nAddNum[nVIPLev];
				}
				AddBangGongTypes bgType = AddBangGongTypes.BGGold;
				if (GameManager.ClientMgr.AddBangGong(tcpMgr.MySocketListener, tcpMgr.tcpClientPool, pool, client, ref bangGong, bgType, nBangGongLimit))
				{
					if (0 != bangGong)
					{
						GameManager.logDBCmdMgr.AddDBLogInfo(-1, "战功", "为帮会贡献铜板", "系统", client.ClientData.RoleName, "增加", bangGong, client.ClientData.ZoneID, client.strUserID, client.ClientData.BangGong, client.ServerId, null);
					}
				}
				string dbcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					bhid,
					nGuildMoney,
					client.ClientData.BangGong
				});
				fields = Global.ExecuteDBCmd(314, dbcmd, client.ServerId);
				if (fields == null || fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("角色为战盟贡献金币时时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode == 1)
				{
					GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createZhanMengJuanZengEvent(Global.FormatRoleName4(client), bhid, nSubMoney, nMoneyType, bangGong, client.ServerId));
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					retCode,
					roleID,
					bhid,
					nGuildMoney,
					bangGong
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EC0 RID: 16064 RVA: 0x00383380 File Offset: 0x00381580
		private static TCPProcessCmdResults ProcessDonateBGGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 7)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				int goods1Num = Convert.ToInt32(fields[2]);
				int goods2Num = Convert.ToInt32(fields[3]);
				int goods3Num = Convert.ToInt32(fields[4]);
				int goods4Num = Convert.ToInt32(fields[5]);
				int goods5Num = Convert.ToInt32(fields[6]);
				goods1Num = Global.GMax(0, goods1Num);
				goods2Num = Global.GMax(0, goods2Num);
				goods3Num = Global.GMax(0, goods3Num);
				goods4Num = Global.GMax(0, goods4Num);
				goods5Num = Global.GMax(0, goods5Num);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.Faction != bhid || bhid <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						bhid,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string donateGoodsIDs = GameManager.systemParamsList.GetParamValueByName("ZhanMengGoods");
				if (string.IsNullOrEmpty(donateGoodsIDs))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						bhid,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] donateGoodsIDArray = Global.String2IntArray(donateGoodsIDs, ',');
				if (donateGoodsIDArray == null || donateGoodsIDArray.Length != 4)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-20,
						roleID,
						bhid,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				List<int> goodsNumList = new List<int>();
				goodsNumList.Add(goods1Num);
				goodsNumList.Add(goods2Num);
				goodsNumList.Add(goods3Num);
				goodsNumList.Add(goods4Num);
				goodsNumList.Add(goods5Num);
				int[] nValue2 = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanMengGoodsJuanZeng", ',');
				int nGoodsOrder = 0;
				int bangGong = 0;
				for (int i = 0; i < donateGoodsIDArray.Length; i++)
				{
					if (Global.GetTotalGoodsCountByID(client, donateGoodsIDArray[i]) >= goodsNumList[i])
					{
						bool usedBinding = false;
						bool usedTimeLimited = false;
						if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, donateGoodsIDArray[i], goodsNumList[i], false, out usedBinding, out usedTimeLimited, false))
						{
							nGoodsOrder = i;
							bangGong += goodsNumList[i];
						}
						else
						{
							goodsNumList[i] = 0;
						}
					}
					else
					{
						goodsNumList[i] = 0;
					}
				}
				if (bangGong <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-30,
						roleID,
						bhid,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nGuildMoney = bangGong * nValue2[1];
				bangGong *= nValue2[0];
				if (GameManager.ClientMgr.AddBangGong(tcpMgr.MySocketListener, tcpMgr.tcpClientPool, pool, client, ref bangGong, AddBangGongTypes.BGGoods, nValue2[2]))
				{
					if (0 != bangGong)
					{
						GameManager.logDBCmdMgr.AddDBLogInfo(-1, "战功", "为帮会贡献道具", "系统", client.ClientData.RoleName, "增加", bangGong, client.ClientData.ZoneID, client.strUserID, client.ClientData.BangGong, client.ServerId, null);
					}
				}
				string dbcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
				{
					roleID,
					bhid,
					goodsNumList[0],
					goodsNumList[1],
					goodsNumList[2],
					goodsNumList[3],
					goodsNumList[4],
					bangGong,
					nGuildMoney
				});
				fields = Global.ExecuteDBCmd(315, dbcmd, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("角色为战盟贡献道具时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode == 0)
				{
					if (nGoodsOrder >= 0)
					{
						GlobalEventSource.getInstance().fireEvent(ZhanMengShijianEvent.createZhanMengGoodsJuanZengEvent(Global.FormatRoleName4(client), bhid, donateGoodsIDArray[nGoodsOrder], goodsNumList[nGoodsOrder], bangGong, client.ServerId));
					}
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					retCode,
					roleID,
					bhid,
					nGuildMoney,
					bangGong
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EC1 RID: 16065 RVA: 0x00383A74 File Offset: 0x00381C74
		private static TCPProcessCmdResults ProcessGetBangQiInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EC2 RID: 16066 RVA: 0x00383BDC File Offset: 0x00381DDC
		private static TCPProcessCmdResults ProcessRenameBangQiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				string bangQiName = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.Faction != bhid)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						bhid,
						bangQiName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string dbcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					bhid,
					bangQiName,
					Global.RenameBangQiNameNeedTongQian
				});
				fields = Global.ExecuteDBCmd(318, dbcmd, client.ServerId);
				if (fields == null || fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("修改帮旗名称时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode >= 0)
				{
					JunQiManager.NotifySyncBangHuiJunQiItemsDict(client);
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					fields[0],
					roleID,
					bhid,
					bangQiName
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EC3 RID: 16067 RVA: 0x00383EB4 File Offset: 0x003820B4
		private static TCPProcessCmdResults ProcessUpLevelBangQiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				int toLevel = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.Faction != bhid)
				{
					strcmd = string.Format("{0}:{1}:{2}", -1, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (toLevel > Global.MaxBangHuiFlagLevel)
				{
					strcmd = string.Format("{0}:{1}:{2}", -10, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemFlagUpLevelItem = null;
				if (!GameManager.systemBangHuiFlagUpLevelMgr.SystemXmlItemDict.TryGetValue(toLevel, out systemFlagUpLevelItem))
				{
					strcmd = string.Format("{0}:{1}:{2}", -20, roleID, bhid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int goods1Num = systemFlagUpLevelItem.GetIntValue("GoodsOneNumber", -1);
				int goods2Num = systemFlagUpLevelItem.GetIntValue("GoodsTwoNumber", -1);
				int goods3Num = systemFlagUpLevelItem.GetIntValue("GoodsThreeNumber", -1);
				int goods4Num = systemFlagUpLevelItem.GetIntValue("GoodsFourNumber", -1);
				int goods5Num = systemFlagUpLevelItem.GetIntValue("GoodsFiveNumber", -1);
				int needMoney = systemFlagUpLevelItem.GetIntValue("UseMoney", -1);
				string dbcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
				{
					roleID,
					bhid,
					goods1Num,
					goods2Num,
					goods3Num,
					goods4Num,
					goods5Num,
					needMoney,
					toLevel
				});
				fields = Global.ExecuteDBCmd(319, dbcmd, client.ServerId);
				if (fields == null || fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("升级帮旗等级时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode >= 0)
				{
					JunQiManager.NotifySyncBangHuiJunQiItemsDict(client);
					Global.BroadcastJunQiUpLevelHint(client, toLevel);
				}
				strcmd = string.Format("{0}:{1}:{2}", retCode, roleID, bhid);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EC4 RID: 16068 RVA: 0x00384290 File Offset: 0x00382490
		private static TCPProcessCmdResults ProcessGetBHLingDiInfoDictByBHIDCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EC5 RID: 16069 RVA: 0x003843F8 File Offset: 0x003825F8
		private static TCPProcessCmdResults ProcessSetLingDiTaxCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				int lingDiID = Convert.ToInt32(fields[2]);
				int newLingDiTax = Convert.ToInt32(fields[3]);
				newLingDiTax = Global.GMin(10, newLingDiTax);
				newLingDiTax = Global.GMax(0, newLingDiTax);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.Faction != bhid)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						bhid,
						lingDiID,
						newLingDiTax
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				fields = Global.ExecuteDBCmd(326, cmdData, client.ServerId);
				if (fields == null || fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("设置领地税率时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode >= 0)
				{
					Global.BroadcastYangZhouTaxHint(client, lingDiID, newLingDiTax);
					JunQiManager.NotifySyncBangHuiLingDiItemsDict();
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					retCode,
					roleID,
					bhid,
					lingDiID,
					newLingDiTax
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EC6 RID: 16070 RVA: 0x003846E0 File Offset: 0x003828E0
		private static TCPProcessCmdResults ProcessSpriteCityWarRequestCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int lingDiID = 6;
				int bhid = client.ClientData.Faction;
				string strcmd;
				if (client.ClientData.BHZhiWu != 1)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						bhid,
						lingDiID,
						""
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				BangHuiLingDiItemData lingDiItem = JunQiManager.GetItemByLingDiID(lingDiID);
				if (null == lingDiItem)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-2,
						roleID,
						bhid,
						lingDiID,
						""
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int retCode = -1;
				TimeSpan ts;
				lock (WangChengManager.ApplyWangChengWarMutex)
				{
					string oldWarRequest = lingDiItem.WarRequest;
					Dictionary<int, int> warRequstMap = WangChengManager.GetWarRequstMap(oldWarRequest);
					if (warRequstMap.ContainsKey(bhid))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-3,
							roleID,
							bhid,
							lingDiID,
							""
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					DateTime destWarDay = TimeUtil.NowDateTime().AddDays(1.0);
					int nMaxTimes = 20;
					while (warRequstMap.ContainsValue(destWarDay.DayOfYear) && nMaxTimes > 0)
					{
						destWarDay = destWarDay.AddDays(1.0);
						nMaxTimes--;
					}
					if (warRequstMap.ContainsValue(destWarDay.DayOfYear))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-4,
							roleID,
							bhid,
							lingDiID,
							""
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					bool usedBinding = false;
					bool usedTimeLimited = false;
					int[] needWarRequestGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("WarRequestGoods", ',');
					if (needWarRequestGoods == null || 2 != needWarRequestGoods.Length)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-44,
							roleID,
							bhid,
							lingDiID,
							""
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int needGoodsID = needWarRequestGoods[0];
					int needSubGoodsNum = needWarRequestGoods[1];
					if (needSubGoodsNum <= 0)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-23,
							roleID,
							bhid,
							lingDiID,
							needGoodsID
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (Global.GetTotalGoodsCountByID(client, needGoodsID) < needSubGoodsNum)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-21,
							roleID,
							bhid,
							lingDiID,
							needGoodsID
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needGoodsID, needSubGoodsNum, false, out usedBinding, out usedTimeLimited, false))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-22,
							roleID,
							bhid,
							lingDiID,
							needGoodsID
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					warRequstMap.Add(bhid, destWarDay.DayOfYear);
					string nowWarRequest = WangChengManager.GeWarRequstString(warRequstMap);
					retCode = WangChengManager.SetCityWarRequestToDBServer(lingDiID, nowWarRequest);
					ts = destWarDay - TimeUtil.NowDateTime().AddSeconds(1.0);
					if (0 == retCode)
					{
						Global.BroadcastCityWarRequestOk(client, client.ClientData.BHName, ts.Days + 1);
						WangChengManager.NotifyAllWangChengMapInfoData();
					}
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					retCode,
					roleID,
					bhid,
					lingDiID,
					ts.Days + 1
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EC7 RID: 16071 RVA: 0x00384DE4 File Offset: 0x00382FE4
		private static TCPProcessCmdResults ProcessTakeLingDiTaxMoneyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				int lingDiID = Convert.ToInt32(fields[2]);
				int takeTaxMoney = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.Faction != bhid)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						bhid,
						lingDiID,
						takeTaxMoney
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (takeTaxMoney <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						bhid,
						lingDiID,
						takeTaxMoney
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				fields = Global.ExecuteDBCmd(327, cmdData, client.ServerId);
				if (fields == null || fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("从领地税提取金币时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					retCode,
					roleID,
					bhid,
					lingDiID,
					takeTaxMoney
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EC8 RID: 16072 RVA: 0x00385108 File Offset: 0x00383308
		private static TCPProcessCmdResults ProcessTakeLingDiDailyAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bhid = Convert.ToInt32(fields[1]);
				int lingDiID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.Faction != bhid)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-1,
						roleID,
						bhid,
						lingDiID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (6 != lingDiID)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-12,
						roleID,
						bhid,
						lingDiID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (WangChengManager.IsInBattling())
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-13,
						roleID,
						bhid,
						lingDiID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.BHZhiWu != 1)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-11,
						roleID,
						bhid,
						lingDiID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				BangHuiLingDiItemData lingDiItem = JunQiManager.GetItemByLingDiID(lingDiID);
				if (null == lingDiItem)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-2,
						roleID,
						bhid,
						lingDiID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (lingDiItem.AwardFetchDay == TimeUtil.NowDateTime().DayOfYear)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-3,
						roleID,
						bhid,
						lingDiID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("从领地税提取每日奖励设置领取标志位失败时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				int yuanBao = 2000;
				int yinLiang = 2000000;
				if (0 == retCode)
				{
					int[] awardArray = GameManager.systemParamsList.GetParamValueIntArrayByName("KingBangHuiAward", ',');
					if (2 == awardArray.Length)
					{
						yuanBao = awardArray[0];
						yinLiang = awardArray[1];
					}
					if (yuanBao > 0)
					{
						GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yuanBao, "王城福利", ActivityTypes.None, "");
						GameManager.SystemServerEvents.AddEvent(string.Format("角色根据领地特权领取元宝, roleID={0}({1}), Money={2}, newMoney={3}, bhid={4}", new object[]
						{
							client.ClientData.RoleID,
							client.ClientData.RoleName,
							client.ClientData.UserMoney,
							yuanBao,
							bhid
						}), EventLevels.Record);
						GameManager.DBCmdMgr.AddDBCmd(10113, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, yuanBao, GLang.GetLang(624, new object[0])), null, client.ServerId);
					}
					if (yinLiang > 0)
					{
						GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yinLiang, "王城福利", false);
						GameManager.SystemServerEvents.AddEvent(string.Format("角色根据领地特权领取银两, roleID={0}({1}), Money={2}, newMoney={3}, bhid={4}", new object[]
						{
							client.ClientData.RoleID,
							client.ClientData.RoleName,
							client.ClientData.YinLiang,
							yinLiang,
							bhid
						}), EventLevels.Record);
					}
					JunQiManager.NotifySyncBangHuiLingDiItemsDict();
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
				{
					retCode,
					roleID,
					bhid,
					lingDiID,
					yuanBao,
					yinLiang
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EC9 RID: 16073 RVA: 0x00385850 File Offset: 0x00383A50
		private static TCPProcessCmdResults ProcessGetHuangDiBHInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ECA RID: 16074 RVA: 0x003859AC File Offset: 0x00383BAC
		private static TCPProcessCmdResults ProcessOpenYangGongBKCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				bool allowAutobuy = 1 == Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<GoodsData> goodsDataList = null;
				int yangGongMiDianGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("YangGongMiDianGoodsID", -1);
				if (Global.GetTotalGoodsCountByID(client, yangGongMiDianGoodsID) <= 0)
				{
				}
				bool needBuyKunLunJing = false;
				int kunLunJingGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("KunLunJingGoodsID", -1);
				if (Global.GetTotalGoodsCountByID(client, kunLunJingGoodsID) <= 0)
				{
					if (!allowAutobuy)
					{
						string goodsName = Global.GetGoodsNameByID(kunLunJingGoodsID);
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(625, new object[0]), new object[]
						{
							goodsName
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					needBuyKunLunJing = true;
				}
				bool isBaoWuBinding = false;
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, yangGongMiDianGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
				{
				}
				usedBinding = false;
				usedTimeLimited = false;
				if (needBuyKunLunJing)
				{
					int needKunLungJingNum = 1;
					int subMoney = Global.SubUserMoneyForGoods(client, kunLunJingGoodsID, needKunLungJingNum, "开启杨公宝库");
					if (subMoney <= 0)
					{
						string goodsName = Global.GetGoodsNameByID(kunLunJingGoodsID);
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(626, new object[0]), new object[]
						{
							goodsName
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, kunLunJingGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
				{
					string goodsName = Global.GetGoodsNameByID(kunLunJingGoodsID);
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(625, new object[0]), new object[]
					{
						goodsName
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				isBaoWuBinding = (isBaoWuBinding || usedBinding);
				YangGongBKItem yangGongBKItem = YangGongBKManager.OpenYangGongBK(client, isBaoWuBinding);
				if (null == yangGongBKItem)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(627, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				client.ClientData.MyYangGongBKItem = yangGongBKItem;
				goodsDataList = yangGongBKItem.GoodsDataList;
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ECB RID: 16075 RVA: 0x00385DC4 File Offset: 0x00383FC4
		private static TCPProcessCmdResults ProcessRefreshYangGongBKCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<GoodsData> goodsDataList = null;
				if (null == client.ClientData.MyYangGongBKItem)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(628, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.MyYangGongBKItem.FreeRefreshNum >= Global.MaxFreeRefreshNum)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(629, new object[0]), new object[]
					{
						Global.MaxFreeRefreshNum
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.MyYangGongBKItem.ClickBKNum > 0)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(630, new object[0]), new object[]
					{
						Global.MaxFreeRefreshNum
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				YangGongBKItem yangGongBKItem = YangGongBKManager.OpenYangGongBK(client, client.ClientData.MyYangGongBKItem.IsBaoWuBinding);
				if (null == yangGongBKItem)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(631, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				client.ClientData.MyYangGongBKItem.FallGoodsItemList = yangGongBKItem.FallGoodsItemList;
				client.ClientData.MyYangGongBKItem.GoodsDataList = yangGongBKItem.GoodsDataList;
				client.ClientData.MyYangGongBKItem.TempGoodsDataList = yangGongBKItem.TempGoodsDataList;
				client.ClientData.MyYangGongBKItem.FreeRefreshNum++;
				goodsDataList = yangGongBKItem.GoodsDataList;
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(goodsDataList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ECC RID: 16076 RVA: 0x00386158 File Offset: 0x00384358
		private static TCPProcessCmdResults ProcessClickYangGongBKCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bkIndex = Convert.ToInt32(fields[1]);
				bool allowAutobuy = 1 == Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				YangGongBKItem yangGongBKItem = client.ClientData.MyYangGongBKItem;
				string strcmd;
				if (null == yangGongBKItem)
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, -1, bkIndex);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (yangGongBKItem.ClickBKNum >= Global.MaxClickYangGongBKNum)
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, -100, bkIndex);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData goodsData = null;
				int findIndex = YangGongBKManager.ClickYangGongBK(client, yangGongBKItem, out goodsData);
				if (findIndex < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, findIndex, bkIndex);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (yangGongBKItem.IsBaoWuBinding)
				{
					goodsData.Binding = 1;
				}
				if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, -500, bkIndex);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needKunLungJingNum = Global.CalcNeedKunLungJingNum(yangGongBKItem.ClickBKNum);
				bool needBuyKunLunJing = false;
				if (needKunLungJingNum > 0)
				{
					int kunLunJingGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("KunLunJingGoodsID", -1);
					if (Global.GetTotalGoodsCountByID(client, kunLunJingGoodsID) < needKunLungJingNum)
					{
						if (!allowAutobuy)
						{
							strcmd = string.Format("{0}:{1}:{2}", roleID, -700, bkIndex);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						needBuyKunLunJing = true;
					}
					bool usedBinding = false;
					bool usedTimeLimited = false;
					if (needBuyKunLunJing)
					{
						int needKouChuKunLunJingNum = Global.GetTotalGoodsCountByID(client, kunLunJingGoodsID);
						if (needKouChuKunLunJingNum < 0)
						{
							needKouChuKunLunJingNum = 0;
						}
						int needBuyKunLunJingNum = needKunLungJingNum - needKouChuKunLunJingNum;
						if (needKouChuKunLunJingNum > 0)
						{
							if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, kunLunJingGoodsID, needKouChuKunLunJingNum, false, out usedBinding, out usedTimeLimited, false))
							{
								strcmd = string.Format("{0}:{1}:{2}", roleID, -701, bkIndex);
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
						}
						int subMoney = Global.SubUserMoneyForGoods(client, kunLunJingGoodsID, needBuyKunLunJingNum, "杨公宝库点击物品");
						if (subMoney <= 0)
						{
							strcmd = string.Format("{0}:{1}:{2}", roleID, subMoney, bkIndex);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					else if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, kunLunJingGoodsID, needKunLungJingNum, false, out usedBinding, out usedTimeLimited, false))
					{
						strcmd = string.Format("{0}:{1}:{2}", roleID, -701, bkIndex);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (usedBinding)
					{
						goodsData.Binding = 1;
					}
				}
				yangGongBKItem.PickUpDict[goodsData.Id] = true;
				yangGongBKItem.ClickBKNum++;
				Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, 0, "", true, 1, "杨公宝库挖宝", goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, 0, 0, 0, null, null, 0, true);
				SystemXmlItem item = null;
				if (GameManager.systemLuckyMgr.SystemXmlItemDict.TryGetValue(yangGongBKItem.ClickBKNum, out item))
				{
					int jifen = item.GetIntValue("Lucky", -1);
					int exp = item.GetIntValue("Exp", -1);
					if (exp > 0)
					{
						GameManager.ClientMgr.ProcessRoleExperience(client, (long)exp, true, false, false, "none");
					}
					if (jifen > 0)
					{
						if (null == client.ClientData.YangGongBKDailyJiFen)
						{
							client.ClientData.YangGongBKDailyJiFen = new YangGongBKDailyJiFenData
							{
								DayID = TimeUtil.NowDateTime().DayOfYear,
								JiFen = 0,
								AwardHistory = 0L
							};
						}
						if (client.ClientData.YangGongBKDailyJiFen.DayID != TimeUtil.NowDateTime().DayOfYear)
						{
							client.ClientData.YangGongBKDailyJiFen.DayID = TimeUtil.NowDateTime().DayOfYear;
							client.ClientData.YangGongBKDailyJiFen.JiFen = 0;
							client.ClientData.YangGongBKDailyJiFen.AwardHistory = 0L;
						}
						client.ClientData.YangGongBKDailyJiFen.JiFen += jifen;
						Global.UpdateYangGongBKDailyJiFenData(client, -1);
					}
				}
				Global.BroadcastYangGongBKGoodsHint(client, goodsData);
				strcmd = string.Format("{0}:{1}:{2}", roleID, goodsData.Id, bkIndex);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ECD RID: 16077 RVA: 0x00386894 File Offset: 0x00384A94
		private static TCPProcessCmdResults ProcessRefreshQiZhenGeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<QiZhenGeItemData> qiZhenGeGoodsList = null;
				if (client.ClientData.UserMoney < Global.MaxNeedYuanBaoPerRefresh)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(632, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<QiZhenGeItemData>>(qiZhenGeGoodsList, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int oldUserMoney = client.ClientData.UserMoney;
				if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, Global.MaxNeedYuanBaoPerRefresh, "奇珍阁刷新", true, true, false, DaiBiSySType.None))
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(632, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<QiZhenGeItemData>>(qiZhenGeGoodsList, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.AddRoleRefreshQiZhenGeEvent(client, oldUserMoney);
				qiZhenGeGoodsList = QiZhenGeManager.GetQiZhenGeGoodsList(client);
				Dictionary<int, QiZhenGeItemData> qiZhenGeGoodsDict = new Dictionary<int, QiZhenGeItemData>();
				for (int i = 0; i < qiZhenGeGoodsList.Count; i++)
				{
					qiZhenGeGoodsDict[qiZhenGeGoodsList[i].ItemID] = qiZhenGeGoodsList[i];
				}
				client.ClientData.QiZhenGeGoodsDict = qiZhenGeGoodsDict;
				client.ClientData.QiZhenGeBuyNum = 0;
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<QiZhenGeItemData>>(qiZhenGeGoodsList, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ECE RID: 16078 RVA: 0x00386B58 File Offset: 0x00384D58
		private static TCPProcessCmdResults ProcessQiZhenGeBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int itemID = Convert.ToInt32(fields[1]);
				int goodsNum = Convert.ToInt32(fields[2]);
				bool autoUseGold = 1 == Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (goodsNum <= 0 || goodsNum >= 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("奇珍阁, 非法的外挂购买, 物品数量不能小于等于0或者大于2, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						goodsNum
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				Dictionary<int, QiZhenGeItemData> qiZhenGeGoodsDict = client.ClientData.QiZhenGeGoodsDict;
				if (null == qiZhenGeGoodsDict)
				{
					string strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsNum <= 0)
				{
					string strcmd = string.Format("{0}:{1}:{2}", -5, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				QiZhenGeItemData qiZhenGeItemData = null;
				if (!qiZhenGeGoodsDict.TryGetValue(itemID, out qiZhenGeItemData))
				{
					string strcmd = string.Format("{0}:{1}:{2}", -10, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.QiZhenGeBuyNum >= Global.MaxNumPerRefreshQiZhenGe)
				{
					string strcmd = string.Format("{0}:{1}:{2}", -20, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int price = qiZhenGeItemData.Price;
				if (price <= 0)
				{
					string strcmd = string.Format("{0}:{1}:{2}", -100, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int goodsID = qiZhenGeItemData.GoodsID;
				if (goodsID <= 0)
				{
					string strcmd = string.Format("{0}:{1}:{2}", -101, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.UserMoney < price * goodsNum)
				{
					string strcmd = string.Format("{0}:{1}:{2}", -200, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int gridNum = Global.GetGoodsGridNumByID(goodsID);
				gridNum = Global.GMax(gridNum, 1);
				int addCount = (goodsNum - 1) / gridNum + 1;
				for (int i = 0; i < addCount; i++)
				{
					int thisTimeNum = gridNum;
					if (i >= addCount - 1 && goodsNum % gridNum > 0)
					{
						thisTimeNum = goodsNum % gridNum;
					}
					string strcmd;
					if (!Global.CanAddGoods(client, goodsID, thisTimeNum, 0, "1900-01-01 12:00:00", true, false))
					{
						strcmd = string.Format("{0}:{1}:{2}", -300, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					if (autoUseGold)
					{
						if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, price * thisTimeNum, "奇珍阁购买自动扣除", true, true, false, DaiBiSySType.None))
						{
							strcmd = string.Format("{0}:{1}:{2}", -400, roleID, 0);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
							break;
						}
					}
					else if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, price * thisTimeNum, "奇珍阁购买", true, true, false, DaiBiSySType.None))
					{
						strcmd = string.Format("{0}:{1}:{2}", -400, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					client.ClientData.TotalUsedMoney += price * thisTimeNum;
					int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", 0, 0, 0, "", true, 1, "奇珍阁购买", "1900-01-01 12:00:00", 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
					if (dbRet < 0)
					{
						strcmd = string.Format("{0}:{1}:{2}", -500, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					Global.AddRoleQiZhenGeBuyWithYuanBaoEvent(client, goodsID, thisTimeNum, price * thisTimeNum);
					client.ClientData.QiZhenGeBuyNum++;
					strcmd = string.Format("{0}:{1}:{2}", dbRet, goodsID, thisTimeNum);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ECF RID: 16079 RVA: 0x00387218 File Offset: 0x00385418
		private static TCPProcessCmdResults ProcessQueryQiZhenGeBuyHistCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ED0 RID: 16080 RVA: 0x00387374 File Offset: 0x00385574
		private static TCPProcessCmdResults ProcessQuickJingMaiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int jingMaiID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JingMaiData jingMaiData = Global.GetJingMaiDataByJMID(client, client.ClientData.JingMaiBodyLevel, jingMaiID);
				string strcmd;
				if (jingMaiData != null && jingMaiData.JingMaiLevel >= Global.MaxJingMaiLevel)
				{
					string jingMaiName = Global.GetJingMaiName(jingMaiID);
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(633, new object[0]), new object[]
					{
						jingMaiName
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					strcmd = string.Format("{0}", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] jingMaiShenTongDanGoodsIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("JingMaiShenTongDanGoodsIDs", ',');
				if (null == jingMaiShenTongDanGoodsIDs)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(634, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					strcmd = string.Format("{0}", -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int jingMaiShenTongDanGoodsID = jingMaiShenTongDanGoodsIDs[client.ClientData.JingMaiBodyLevel - 1];
				if (Global.GetTotalGoodsCountByID(client, jingMaiShenTongDanGoodsID) < 1)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(635, new object[0]), new object[]
					{
						Global.GetGoodsNameByID(jingMaiShenTongDanGoodsID)
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					strcmd = string.Format("{0}", -10);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, jingMaiShenTongDanGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(636, new object[0]), new object[]
					{
						Global.GetGoodsNameByID(jingMaiShenTongDanGoodsID)
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					strcmd = string.Format("{0}", -20);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int jingMaiLevel = Global.MaxJingMaiLevel;
				Global.UpdateJingMaiListProps(client, false);
				int jingMaiBodyLevel = client.ClientData.JingMaiBodyLevel;
				int ret = Global.ProcessUpJingmaiLevel(client, jingMaiBodyLevel, jingMaiID, ref jingMaiLevel, 0);
				Global.UpdateJingMaiListProps(client, true);
				if (ret > 0)
				{
					GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
					GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
					GameManager.ClientMgr.NotifyJingMaiInfoCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
				}
				GameManager.ClientMgr.NotifyJingMaiResult(client, ret, jingMaiID, jingMaiLevel);
				Global.AddSelfQuickJingMaiExp(client);
				strcmd = string.Format("{0}", 0);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ED1 RID: 16081 RVA: 0x00387818 File Offset: 0x00385A18
		private static TCPProcessCmdResults ProcessQuickHorseEnchanceCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int horseDbID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int ret = ProcessHorse.ProcessHorseQuickAllEnchance(client, horseDbID);
				string strcmd = string.Format("{0}", ret);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ED2 RID: 16082 RVA: 0x0038799C File Offset: 0x00385B9C
		private static TCPProcessCmdResults ProcessSprMendEquipmentCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int goodsDbID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, goodsDbID);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}", -1, goodsDbID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				if (category < 0 || category > 49)
				{
					strcmd = string.Format("{0}:{1}:{2}", -11, goodsDbID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemGoods = null;
				if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods) || null == systemGoods)
				{
					LogManager.WriteLog(LogTypes.Warning, string.Format("处理修理装备物品时，获取物品xml信息失败: GoodsID={0}", goodsData.GoodsID), null, true);
					strcmd = string.Format("{0}:{1}:{2}", -2, goodsDbID, goodsData.Strong);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int priceTwo = systemGoods.GetIntValue("PriceTwo", -1);
				int[] equipProps = systemGoods.GetIntArrayValue("EquipProps", ',');
				if (equipProps == null || equipProps.Length < 2 || priceTwo <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -3, goodsDbID, goodsData.Strong);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				double fMaxStrong = (double)equipProps[1];
				if (fMaxStrong <= 0.0 || (double)goodsData.Strong <= 0.0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -4, goodsDbID, goodsData.Strong);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needYinLiang = (int)((double)priceTwo / 3.0 * (double)goodsData.Strong / fMaxStrong);
				needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
				if (needYinLiang > client.ClientData.YinLiang || needYinLiang < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -5, goodsDbID, goodsData.Strong);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.SubBindTongQianAndTongQian(client, needYinLiang, "修理装备"))
				{
					strcmd = string.Format("{0}:{1}:{2}", -6, goodsDbID, goodsData.Strong);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.SubEquipStrong(client, goodsData, goodsData.Strong);
				if (goodsData.Using > 0)
				{
					Global.RefreshEquipPropAndNotify(client);
				}
				strcmd = string.Format("{0}:{1}:{2}", 0, goodsDbID, 0);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ED3 RID: 16083 RVA: 0x00387E54 File Offset: 0x00386054
		private static TCPProcessCmdResults ProcessQuickEquipEnchanceCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int goodsDbID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, goodsDbID);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-1,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-9998,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-9999,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Quality >= 4)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-4,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needNum = 1;
				int needRockGoodsID = -1;
				int needYinLiang = 0;
				if (goodsData.Quality == 2)
				{
					needRockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("WuXiaZiSeTiPinGoodsID", -1);
					needYinLiang = Global.QuickEnchanceToPurpleNeedYinLiang;
				}
				else if (goodsData.Quality == 3)
				{
					needRockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("WuXiaJinSeTiPinGoodsID", -1);
					needYinLiang = Global.QuickEnchanceToGoldNeedYinLiang;
				}
				int totalNum = Global.GetTotalGoodsCountByID(client, needRockGoodsID);
				if (totalNum < needNum)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-2,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
				if (needYinLiang > client.ClientData.YinLiang)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-3,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang, "快速强化装备", false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-5,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int newGoodsBinding = goodsData.Binding;
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, needRockGoodsID, needNum, false, out usedBinding, out usedTimeLimited, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-100,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (newGoodsBinding <= 0)
				{
					newGoodsBinding = (usedBinding ? 1 : 0);
				}
				string props = "";
				if (Global.StartQuickEnchance(client, goodsData))
				{
					goodsData.Quality++;
					goodsData.Binding = newGoodsBinding;
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						1,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					Global.BroadcastEnchanceOk(client, goodsData);
				}
				else
				{
					goodsData.Binding = newGoodsBinding;
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						0,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
				}
				string[] dbFields = null;
				string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					client.ClientData.RoleID,
					goodsData.Id,
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.Quality,
					props,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.Binding,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-10,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-10,
						roleID,
						goodsDbID,
						goodsData.Quality,
						goodsData.Props,
						goodsData.Binding
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.ModRoleGoodsEvent(client, goodsData, 0, "快速提品", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "快速提品");
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ED4 RID: 16084 RVA: 0x00388878 File Offset: 0x00386A78
		private static TCPProcessCmdResults ProcessQuickEquipForgeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Forge_level < 20)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-9997,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-9998,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-9999,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Forge_level >= 20)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-4,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needNum = 1;
				int rockGoodsID = -1;
				int needYinLiang = Global.QuickForgeToNextLevelNeedYinLiang;
				if (10 == goodsData.Forge_level)
				{
					rockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ShenDuanChui11GoodsID", -1);
				}
				else if (11 == goodsData.Forge_level)
				{
					rockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ShenDuanChui12GoodsID", -1);
				}
				else if (12 == goodsData.Forge_level)
				{
					rockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ShenDuanChui13GoodsID", -1);
				}
				else if (13 == goodsData.Forge_level)
				{
					rockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ShenDuanChui14GoodsID", -1);
				}
				else if (14 == goodsData.Forge_level)
				{
					rockGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ShenDuanChui15GoodsID", -1);
				}
				int totalNum = Global.GetTotalGoodsCountByID(client, rockGoodsID);
				if (totalNum < needNum)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-2,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
				if (needYinLiang > client.ClientData.YinLiang)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang, "快速锻造装备", false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-5,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int newGoodsBinding = goodsData.Binding;
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, rockGoodsID, needNum, false, out usedBinding, out usedTimeLimited, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-100,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (newGoodsBinding <= 0)
				{
					newGoodsBinding = (usedBinding ? 1 : 0);
				}
				if (Global.StartQuickForge(client, goodsData))
				{
					goodsData.Forge_level++;
					goodsData.Binding = newGoodsBinding;
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						1,
						roleID,
						id,
						goodsData.Forge_level,
						goodsData.Binding
					});
					Global.BroadcastForgeOk(client, goodsData);
				}
				else
				{
					goodsData.Binding = newGoodsBinding;
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						0,
						roleID,
						id,
						goodsData.Forge_level,
						goodsData.Binding
					});
				}
				string[] dbFields = null;
				string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					client.ClientData.RoleID,
					goodsData.Id,
					"*",
					goodsData.Forge_level,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.Binding,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-10,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.ModRoleGoodsEvent(client, goodsData, 0, "快速强化", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "快速强化");
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ED5 RID: 16085 RVA: 0x0038928C File Offset: 0x0038748C
		private static TCPProcessCmdResults ProcessGetHuangDiDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int huangDiRoleID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				byte[] bytesData = null;
				if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out bytesData, client.ServerId))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int length = BitConverter.ToInt32(bytesData, 0);
				ushort cmd = BitConverter.ToUInt16(bytesData, 4);
				RoleDataEx roleDataEx = DataHelper.BytesToObject<RoleDataEx>(bytesData, 6, length - 2);
				RoleData roleData = Global.RoleDataExToRoleData(roleDataEx);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<RoleData>(roleData, pool, (int)cmd);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ED6 RID: 16086 RVA: 0x00389460 File Offset: 0x00387660
		private static TCPProcessCmdResults ProcessAddHuangFeiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int otherRoleID = Convert.ToInt32(fields[1]);
				string otherRoleName = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
				string strcmd;
				if (null == otherClient)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						otherRoleID,
						otherRoleName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (otherClient.ClientData.RoleSex == client.ClientData.RoleSex)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-10,
						roleID,
						otherRoleID,
						otherRoleName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (otherClient.ClientData.HuangHou > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-20,
						roleID,
						otherRoleID,
						otherRoleName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int ruYiPeiGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("RuYiPeiGoodsID", -1);
				if (Global.GetTotalGoodsCountByID(client, ruYiPeiGoodsID) <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-30,
						roleID,
						otherRoleID,
						otherRoleName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.NotifyInviteAddHuangFei(otherClient, client.ClientData.RoleID, Global.FormatRoleName(client, client.ClientData.RoleName), HuangChengManager.NewXuanFeiSafeNum(otherClient.ClientData.RoleID));
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					fields[0],
					roleID,
					otherRoleID,
					otherRoleName
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ED7 RID: 16087 RVA: 0x0038981C File Offset: 0x00387A1C
		private static TCPProcessCmdResults ProcessAgreeAddHuangFeiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int huangDiRoleID = Convert.ToInt32(fields[1]);
				string huangDiRoleName = fields[2];
				int randNum = Convert.ToInt32(fields[3]);
				int agreeState = Convert.ToInt32(fields[4]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameClient otherClient = GameManager.ClientMgr.FindClient(huangDiRoleID);
				string strcmd;
				if (null == otherClient)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						huangDiRoleID,
						huangDiRoleName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (agreeState <= 0)
				{
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, otherClient, StringUtil.substitute(GLang.GetLang(637, new object[0]), new object[]
					{
						Global.FormatRoleName(client, client.ClientData.RoleName)
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.HuangHou > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-20,
						roleID,
						huangDiRoleID,
						huangDiRoleName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int ruYiPeiGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("RuYiPeiGoodsID", -1);
				if (Global.GetTotalGoodsCountByID(otherClient, ruYiPeiGoodsID) <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-30,
						roleID,
						huangDiRoleID,
						huangDiRoleName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, otherClient, ruYiPeiGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-40,
						roleID,
						huangDiRoleID,
						huangDiRoleName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string dbcmd = string.Format("{0}:{1}:{2}", huangDiRoleID, client.ClientData.RoleID, client.ClientData.RoleName);
				fields = Global.ExecuteDBCmd(341, dbcmd, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("向DBServer请求添加皇妃操作时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode >= 0)
				{
					Global.UpdateRoleHuangHou(client, 1, Global.FormatRoleName(otherClient, otherClient.ClientData.RoleName));
					GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, otherClient, StringUtil.substitute(GLang.GetLang(638, new object[0]), new object[]
					{
						Global.FormatRoleName(client, client.ClientData.RoleName)
					}), GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					retCode,
					roleID,
					huangDiRoleID,
					huangDiRoleName
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ED8 RID: 16088 RVA: 0x00389D24 File Offset: 0x00387F24
		private static TCPProcessCmdResults ProcessRemoveHuangFeiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int otherRoleID = Convert.ToInt32(fields[1]);
				string otherRoleName = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("向DBServer请求添加皇妃操作时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode >= 0)
				{
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null != otherClient)
					{
						Global.UpdateRoleHuangHou(otherClient, 0, Global.FormatRoleName(client, client.ClientData.RoleName));
					}
					else
					{
						string gmCmdData = string.Format("-removehuangfei {0} {1}", otherRoleID, Global.FormatRoleName(client, client.ClientData.RoleName));
						GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
						{
							client.ClientData.RoleID,
							"",
							0,
							"",
							0,
							gmCmdData,
							0,
							0,
							GameManager.ServerLineID
						}), null, client.ServerId);
					}
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					fields[0],
					roleID,
					otherRoleID,
					otherRoleName
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003ED9 RID: 16089 RVA: 0x0038A040 File Offset: 0x00388240
		private static TCPProcessCmdResults ProcessGetHuangFeiDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EDA RID: 16090 RVA: 0x0038A19C File Offset: 0x0038839C
		private static TCPProcessCmdResults ProcessBanChatCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int otherRoleID = Convert.ToInt32(fields[1]);
				string otherRoleName = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("向DBServer请求添加皇妃操作时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode >= 0)
				{
					int banHours = 1;
					Global.BanRoleChatToDBServer(otherRoleName, banHours);
					BanChatManager.AddBanRoleName(otherRoleName, banHours);
					Global.BroadcastBanChatHint(Global.FormatRoleName(client, client.ClientData.RoleName), otherRoleName);
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					fields[0],
					roleID,
					otherRoleID,
					otherRoleName
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EDB RID: 16091 RVA: 0x0038A3F4 File Offset: 0x003885F4
		private static TCPProcessCmdResults ProcessSendToLaoFangCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int otherRoleID = Convert.ToInt32(fields[1]);
				string otherRoleName = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
				string strcmd;
				if (null == otherClient)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						otherRoleID,
						otherRoleName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (otherClient.ClientData.MapCode != GameManager.MainMapCode)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-10,
						roleID,
						otherRoleID,
						otherRoleName
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("向DBServer请求添加皇妃操作时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode >= 0)
				{
					Global.ForceSendToLaoFangMap(otherClient, Global.GMax(Global.MinLeaveJailPKPoints + 300, otherClient.ClientData.PKPoint));
					Global.BroadcastSendToLaoFangHint(client, Global.FormatRoleName(otherClient, otherClient.ClientData.RoleName));
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					fields[0],
					roleID,
					otherRoleID,
					otherRoleName
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EDC RID: 16092 RVA: 0x0038A730 File Offset: 0x00388930
		private static TCPProcessCmdResults ProcessTakeOutLaoFangCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int otherRoleID = Convert.ToInt32(fields[1]);
				string otherRoleName = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				fields = Global.ExecuteDBCmd(nID, cmdData, client.ServerId);
				if (fields == null || fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("向DBServer请求释放玩家出牢房时失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int retCode = Global.SafeConvertToInt32(fields[0]);
				if (retCode >= 0)
				{
					GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
					if (null != otherClient)
					{
						Global.ForceTakeOutLaoFangMap(otherClient, otherClient.ClientData.PKPoint);
						Global.BroadcastTakeOutLaoFangHint(Global.FormatRoleName(client, client.ClientData.RoleName), Global.FormatRoleName(otherClient, otherClient.ClientData.RoleName));
					}
					else
					{
						string gmCmdData = string.Format("-leavelaofang {0} {1}", otherRoleID, Global.FormatRoleName(client, client.ClientData.RoleName));
						GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
						{
							client.ClientData.RoleID,
							"",
							0,
							"",
							0,
							gmCmdData,
							0,
							0,
							GameManager.ServerLineID
						}), null, client.ServerId);
					}
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					fields[0],
					roleID,
					otherRoleID,
					otherRoleName
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EDD RID: 16093 RVA: 0x0038AA70 File Offset: 0x00388C70
		private static TCPProcessCmdResults ProcessGetLingDiMapInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				LingDiMapInfoData lingDiMapInfoData = JunQiManager.GetLingDiMapData(client);
				GameManager.ClientMgr.NotifyLingDiMapInfoData(client, lingDiMapInfoData);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EDE RID: 16094 RVA: 0x0038ABCC File Offset: 0x00388DCC
		private static TCPProcessCmdResults ProcessGetHuangChengMapInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				HuangChengMapInfoData huangChengMapInfoData = HuangChengManager.FormatHuangChengMapInfoData();
				GameManager.ClientMgr.NotifyHuangChengMapInfoData(client, huangChengMapInfoData);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EDF RID: 16095 RVA: 0x0038AD28 File Offset: 0x00388F28
		private static TCPProcessCmdResults ProcessTaskTransportCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int toMapCode = Convert.ToInt32(fields[1]);
				int posX = Convert.ToInt32(fields[2]);
				int posY = Convert.ToInt32(fields[3]);
				int useChuanSongJuan = Convert.ToInt32(fields[4]);
				if (MapTypes.Normal != Global.GetMapType(toMapCode))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				SceneUIClasses sceneType = Global.GetMapSceneType(toMapCode);
				if (Data.CanTeleportMapHashSet.Contains((int)sceneType))
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (Data.FightStateTime > 0L && client.buffManager.IsBuffEnabled(114))
				{
					GameManager.ClientMgr.NotifyImportantMsg(client, GLang.GetLang(639, new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					bool _canTransInKuaFu = false;
					if (KuaFuMapManager.getInstance().IsKuaFuMap(client.ClientData.MapCode) || CompManager.getInstance().IfInMyselfCompMap(client))
					{
						if (toMapCode == client.ClientData.MapCode || Global.GetMapSceneType(toMapCode) == SceneUIClasses.Normal)
						{
							_canTransInKuaFu = true;
						}
					}
					if (!_canTransInKuaFu)
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
				}
				if (client.ClientData.CurrentLifeV <= 0)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				bool bCanTransport = false;
				int nVipLev = client.ClientData.VipLevel;
				if (nVipLev > 0 && nVipLev >= 1)
				{
					bCanTransport = true;
				}
				if (!bCanTransport)
				{
					if (useChuanSongJuan <= 0)
					{
						if (Global.GetFreeChuanSongNum(client) <= 0)
						{
							GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(640, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 26);
							return TCPProcessCmdResults.RESULT_OK;
						}
						Global.AddFreeChuanSongNum(client);
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(641, new object[0]), new object[]
						{
							Global.GetFreeChuanSongNum(client)
						}), GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
					}
					else
					{
						bool canTransport = false;
						GoodsData goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID);
						if (null != goodsData)
						{
							if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false, false))
							{
								canTransport = true;
							}
						}
						else
						{
							goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID2);
							if (null != goodsData)
							{
								if (GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false, false))
								{
									canTransport = true;
								}
							}
						}
						if (!canTransport)
						{
							GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(642, new object[0]), new object[]
							{
								Global.GetGoodsNameByID(Global.MapTransGoodsID)
							}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
				}
				GameMap gameMap = null;
				if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
				{
					int toMapX = posX;
					int toMapY = posY;
					Point pos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, toMapX, toMapY, 60);
					toMapX = (int)pos.X;
					toMapY = (int)pos.Y;
					client.ClientData.CurrentAction = 0;
					if (toMapCode == client.ClientData.MapCode)
					{
						if (!Global.InObs(ObjectTypes.OT_CLIENT, client.ClientData.MapCode, toMapX, toMapY, 0, 0))
						{
							GameManager.ClientMgr.ChangePosition(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapX, toMapY, client.ClientData.RoleDirection, 159, 0);
						}
					}
					else
					{
						if (KuaFuMapManager.getInstance().IsKuaFuMap(client.ClientData.MapCode) && !KuaFuMapManager.getInstance().IsKuaFuMap(toMapCode))
						{
							Point grid = Global.PixelToGrid(toMapCode, pos);
							Global.ModifyMapRecordData(client, (ushort)toMapCode, (ushort)grid.X, (ushort)grid.Y, 0);
							KuaFuManager.getInstance().GotoLastMap(client);
							return TCPProcessCmdResults.RESULT_OK;
						}
						if (!Global.InObs(ObjectTypes.OT_CLIENT, toMapCode, toMapX, toMapY, 0, 0))
						{
							int toDirection = Global.GetRandomNumber(0, 8);
							GameManager.ClientMgr.NotifyChangeMap(tcpMgr.MySocketListener, pool, client, toMapCode, toMapX, toMapY, toDirection, 0);
						}
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EE0 RID: 16096 RVA: 0x0038B32C File Offset: 0x0038952C
		private static TCPProcessCmdResults ProcessTaskTransport2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int taskID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				Global.ProcessAutoTaskFindRoad(client, taskID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EE1 RID: 16097 RVA: 0x0038B4A0 File Offset: 0x003896A0
		private static TCPProcessCmdResults ProcessActivityTransportCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int taskType = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SystemXmlItem xmlItem = null;
				if (!GameManager.systemActivityTipMgr.SystemXmlItemDict.TryGetValue(taskType, out xmlItem) || null == xmlItem)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据活动类型定位传送目标配置信息出错, CMD={0}, Client={1}, RoleID={2}, taskType={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						taskType
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int toMapCode = xmlItem.GetIntValue("ToMapID", -1);
				int posX = xmlItem.GetIntValue("ToX", -1);
				int posY = xmlItem.GetIntValue("ToY", -1);
				string showTimes = xmlItem.GetStringValue("ShowTimes");
				string weekDaysStr = xmlItem.GetStringValue("WeekDays");
				string[] weekDays = weekDaysStr.Split(new char[]
				{
					','
				});
				string[] times = showTimes.Split(new char[]
				{
					'|'
				});
				bool bInTimes = false;
				string weekDayOfNow = string.Format("{0}", (int)TimeUtil.NowDateTime().DayOfWeek);
				if (string.IsNullOrEmpty(weekDaysStr.Trim()) || weekDays.ToList<string>().IndexOf(weekDayOfNow) >= 0)
				{
					string nowTime = TimeUtil.NowDateTime().ToString("HH:mm:ss");
					foreach (string item in times)
					{
						string[] arr = item.Split(new char[]
						{
							'-'
						});
						if (arr.Length == 2)
						{
							if (nowTime.CompareTo(arr[0]) > 0 && nowTime.CompareTo(arr[1]) < 0)
							{
								bInTimes = true;
								break;
							}
						}
					}
				}
				if (!bInTimes)
				{
					string strcmd = string.Format("-1:{0}:{1}", roleID, taskType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameMap gameMap = null;
				if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
				{
					int toMapX = posX;
					int toMapY = posY;
					Point pos = Global.GetMapPoint(ObjectTypes.OT_CLIENT, toMapCode, toMapX, toMapY, 60);
					toMapX = (int)pos.X;
					toMapY = (int)pos.Y;
					client.ClientData.CurrentAction = 0;
					if (toMapCode == client.ClientData.MapCode)
					{
						if (!Global.InObs(ObjectTypes.OT_CLIENT, client.ClientData.MapCode, toMapX, toMapY, 0, 0))
						{
							GameManager.ClientMgr.ChangePosition(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapX, toMapY, client.ClientData.RoleDirection, 159, 0);
						}
					}
					else
					{
						int toDirection = Global.GetRandomNumber(0, 8);
						GameManager.ClientMgr.NotifyChangeMap(tcpMgr.MySocketListener, pool, client, toMapCode, toMapX, toMapY, toDirection, 0);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EE2 RID: 16098 RVA: 0x0038B91C File Offset: 0x00389B1C
		private static TCPProcessCmdResults ProcessLingLiGuanZhuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int doWork = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (0 == doWork)
				{
					int juLingZhuKongGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("JuLingZhuKongGoodsID", -1);
					int JuLingZhuManGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("JuLingZhuManGoodsID", -1);
					if (client.ClientData.InterPower < 30000)
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(643, new object[0]), new object[]
						{
							30000
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GoodsData goodsData = Global.GetGoodsByID(client, juLingZhuKongGoodsID);
					if (null == goodsData)
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(644, new object[0]), new object[]
						{
							Global.GetGoodsNameByID(juLingZhuKongGoodsID)
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (!Global.CanAddGoods(client, juLingZhuKongGoodsID, 1, goodsData.Binding, "1900-01-01 12:00:00", true, false))
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(645, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (!GameManager.ClientMgr.SubInterPower(client, 30000))
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(646, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					bool usedBinding = false;
					bool usedTimeLimited = false;
					if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, juLingZhuKongGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(647, new object[0]), new object[]
						{
							Global.GetGoodsNameByID(juLingZhuKongGoodsID)
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					Global.AddGoodsDBCommand(pool, client, JuLingZhuManGoodsID, 1, 0, "", 0, 0, 0, "", true, 1, "提取灵力", "1900-01-01 12:00:00", 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
				}
				else
				{
					int JuLingZhuManGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("JuLingZhuManGoodsID", -1);
					int XuanTianDingGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("XuanTianDingGoodsID", -1);
					if (client.ClientData.InterPower >= 30000)
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(648, new object[0]), new object[]
						{
							30000
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (Global.GetTotalGoodsCountByID(client, JuLingZhuManGoodsID) <= 0)
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(649, new object[0]), new object[]
						{
							Global.GetGoodsNameByID(JuLingZhuManGoodsID)
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					if (Global.GetTotalGoodsCountByID(client, XuanTianDingGoodsID) <= 0)
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(649, new object[0]), new object[]
						{
							Global.GetGoodsNameByID(XuanTianDingGoodsID)
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					bool usedBinding = false;
					bool usedTimeLimited = false;
					if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, JuLingZhuManGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(650, new object[0]), new object[]
						{
							Global.GetGoodsNameByID(JuLingZhuManGoodsID)
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					usedBinding = false;
					usedTimeLimited = false;
					if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, XuanTianDingGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(650, new object[0]), new object[]
						{
							Global.GetGoodsNameByID(XuanTianDingGoodsID)
						}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
						return TCPProcessCmdResults.RESULT_OK;
					}
					GameManager.ClientMgr.AddInterPower(client, 30000, false, true);
				}
				string strcmd = string.Format("{0}:{1}:{2}", roleID, doWork, 0);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EE3 RID: 16099 RVA: 0x0038BF58 File Offset: 0x0038A158
		private static TCPProcessCmdResults ProcessGetGoodsByDbIDCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EE4 RID: 16100 RVA: 0x0038C050 File Offset: 0x0038A250
		private static TCPProcessCmdResults ProcessQuickCompleteTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int taskID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				TaskData taskData = Global.GetTaskData(client, taskID);
				if (null == taskData)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				SystemXmlItem systemTask = null;
				string strcmd;
				if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, taskID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string taskName = systemTask.GetStringValue("Title");
				int needYuanBao = systemTask.GetIntValue("YuanBaoComplete", -1);
				if (needYuanBao <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, taskID, -10);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int targetNum = systemTask.GetIntValue("TargetNum1", -1);
				int targetNum2 = systemTask.GetIntValue("TargetNum2", -1);
				if (taskData.DoingTaskVal1 >= targetNum && taskData.DoingTaskVal2 >= targetNum2)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				if (client.ClientData.UserMoney < needYuanBao)
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, taskID, -20);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYuanBao, "快速完成任务1", true, true, false, DaiBiSySType.None))
				{
					strcmd = string.Format("{0}:{1}:{2}", roleID, taskID, -20);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				ProcessTask.ProcessTaskValue(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, taskName, 1, targetNum);
				ProcessTask.ProcessTaskValue(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, taskName, 2, targetNum2);
				ProcessTask.ClearTaskGoods(tcpMgr.MySocketListener, pool, client, taskID);
				strcmd = string.Format("{0}:{1}:{2}", roleID, taskID, 0);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EE5 RID: 16101 RVA: 0x0038C404 File Offset: 0x0038A604
		private static TCPProcessCmdResults ProcessQueryChongZhiMoneyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int totalChongZhiMoney = GameManager.ClientMgr.QueryTotaoChongZhiMoney(client);
				string strcmd = string.Format("{0}", totalChongZhiMoney);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EE6 RID: 16102 RVA: 0x0038C580 File Offset: 0x0038A780
		private static TCPProcessCmdResults ProcessGetFirstChongZhiDaLiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.CZTaskID > 0)
				{
					strcmd = string.Format("{0}", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Activity instActivity = Global.GetActivity(ActivityTypes.InputFirst);
				if (null == instActivity)
				{
					strcmd = string.Format("{0}", -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.CanGetFirstChongZhiDaLiByUserID(client))
				{
					strcmd = string.Format("{0}", -1111);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!instActivity.HasEnoughBagSpaceForAwardGoods(client, client.ClientData.Occupation))
				{
					strcmd = string.Format("{0}", -20);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int totalChongZhiMoney = GameManager.ClientMgr.QueryTotaoChongZhiMoney(client);
				if (totalChongZhiMoney <= 0)
				{
					strcmd = string.Format("{0}", -5);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nOcc = Global.CalcOriginalOccupationID(client);
				instActivity.GiveAward(client);
				Global.JugeCompleteChongZhiSecondTask(client, 1);
				Global.BroadcastShouChongDaLiHint(client);
				strcmd = string.Format("{0}", 0);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EE7 RID: 16103 RVA: 0x0038C864 File Offset: 0x0038AA64
		private static TCPProcessCmdResults ProcessGetDayChongZhiDaLiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nRoleID = Convert.ToInt32(fields[0]);
				int nActivityType = Global.SafeConvertToInt32(fields[1]);
				int nBtnIndex = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != nRoleID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), nRoleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				Activity instActivity = Global.GetActivity((ActivityTypes)nActivityType);
				string strcmd;
				if (null == instActivity)
				{
					strcmd = string.Format("{0}:{1}::", -1, nActivityType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int result = 0;
				int nRetValue = 0;
				switch (nActivityType)
				{
				case 27:
				{
					if (!instActivity.HasEnoughBagSpaceForAwardGoods(client, nBtnIndex))
					{
						strcmd = string.Format("{0}:{1}::", -20, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!Global.CanGetDayChongZhiDaLi(client, nBtnIndex))
					{
						strcmd = string.Format("{0}:{1}::", -1111, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					AwardItem tmp = instActivity.GetAward(client, nBtnIndex);
					if (tmp == null)
					{
						strcmd = string.Format("{0}:{1}::", -1, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int totalChongZhiMoneyToday = GameManager.ClientMgr.QueryTotaoChongZhiMoneyToday(client);
					totalChongZhiMoneyToday = Global.TransMoneyToYuanBao(totalChongZhiMoneyToday);
					if (totalChongZhiMoneyToday < tmp.MinAwardCondionValue)
					{
						strcmd = string.Format("{0}:{1}::", -5, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					instActivity.GiveAward(client, nBtnIndex);
					Global.CompleteDayChongZhiDaLi(client, nBtnIndex);
					Global.BroadcastDayChongDaLiHint(client);
					result = 0;
					for (int i = 1; i <= 3; i++)
					{
						if (!Global.CanGetDayChongZhiDaLi(client, i))
						{
							result |= Global.GetBitValue(i);
						}
					}
					break;
				}
				case 28:
				{
					if (!instActivity.HasEnoughBagSpaceForAwardGoods(client, nBtnIndex))
					{
						strcmd = string.Format("{0}:{1}::", -20, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int nOcc = Global.CalcOriginalOccupationID(client);
					int nChangeLifeLev = client.ClientData.ChangeLifeCount;
					AwardItem tmpItem = instActivity.GetAward(client, nOcc, 1);
					if (tmpItem == null)
					{
						strcmd = string.Format("{0}:{1}::", -1, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (nChangeLifeLev < tmpItem.MinAwardCondionValue)
					{
						strcmd = string.Format("{0}:{1}::", -100, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!Global.CanGetChongJiLingQuShenZhuang(client, nBtnIndex))
					{
						strcmd = string.Format("{0}:{1}::", -1111, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int nQuota = Global.GetChongJiLingQuShenZhuangQuota(client, nBtnIndex);
					if (nQuota >= tmpItem.MinAwardCondionValue2)
					{
						strcmd = string.Format("{0}:{1}::", -101, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					instActivity.GiveAward(client, nBtnIndex, nOcc);
					Global.CompleteChongJiLingQuShenZhuang(client, nBtnIndex, nQuota + 1);
					AwardItem tmpItem2 = instActivity.GetAward(client, nBtnIndex, 2);
					Global.BroadcastChongJiLingQuShengZhuangHint(client, nBtnIndex, tmpItem2.GoodsDataList[nOcc].GoodsID);
					result = 0;
					for (int i = 1; i <= 5; i++)
					{
						if (!Global.CanGetChongJiLingQuShenZhuang(client, i))
						{
							result |= Global.GetBitValue(i);
						}
					}
					nRetValue = nQuota + 1;
					break;
				}
				case 29:
				{
					if (!instActivity.HasEnoughBagSpaceForAwardGoods(client))
					{
						strcmd = string.Format("{0}:{1}::", -20, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int nRet = Global.GetShenZhuangHuiKuiStatus(client);
					if (nRet == 0)
					{
						strcmd = string.Format("{0}:{1}::", -102, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (nRet == 2)
					{
						strcmd = string.Format("{0}:{1}::", -103, nActivityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (nRet == 1)
					{
						AwardItem tmpItem = instActivity.GetAward(client);
						if (tmpItem == null)
						{
							strcmd = string.Format("{0}:{1}::", -20, nActivityType);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						int nQuota = GameManager.GameConfigMgr.GetGameConfigItemInt("ShenZhuangHuiKuiGift", 0);
						if (nQuota >= tmpItem.MinAwardCondionValue)
						{
							strcmd = string.Format("{0}:{1}::", -104, nActivityType);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						instActivity.GiveAward(client, 0);
						Global.CompleteShenZhuangHuiKui(client, nQuota + 1);
						Global.BroadcastShengZhuangJiQingHuiKuiHint(client);
						result = 0;
						if (Global.GetShenZhuangHuiKuiStatus(client) == 2)
						{
							result |= Global.GetBitValue(1);
						}
						nRetValue = nQuota + 1;
					}
					break;
				}
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					result,
					nActivityType,
					nRetValue,
					nBtnIndex
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EE8 RID: 16104 RVA: 0x0038CFEC File Offset: 0x0038B1EC
		private static TCPProcessCmdResults ProcessCompleteTinyClientCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if ((client.ClientData.OnceAwardFlag & 1L) > 0L)
				{
					strcmd = string.Format("{0}", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] tinyClientDaLiIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("TinyClientDaLiID", ',');
				if (tinyClientDaLiIDs == null || tinyClientDaLiIDs.Length < 3)
				{
					strcmd = string.Format("{0}", -9);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nOcc = Global.CalcOriginalOccupationID(client);
				int tinyClientDaLiID = tinyClientDaLiIDs[nOcc];
				if (tinyClientDaLiID <= 0)
				{
					strcmd = string.Format("{0}", -10);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.CanAddGoods(client, tinyClientDaLiID, 1, 1, "1900-01-01 12:00:00", true, false))
				{
					strcmd = string.Format("{0}", -20);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemGoods = null;
				if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(tinyClientDaLiID, out systemGoods))
				{
					strcmd = string.Format("{0}", -40);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, tinyClientDaLiID, 1, 0, "", 0, 1, 0, "", true, 1, "微端大礼包", "1900-01-01 12:00:00", 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
				client.ClientData.OnceAwardFlag = (client.ClientData.OnceAwardFlag | 1L);
				Global.SubmitOnceAwardMaskToDB(client);
				Global.BroadcastTinyClientDaLiHint(client);
				strcmd = string.Format("{0}", client.ClientData.OnceAwardFlag);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EE9 RID: 16105 RVA: 0x0038D344 File Offset: 0x0038B544
		private static TCPProcessCmdResults ProcessFetchVipOnceAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (!Global.CanFetchOnceVipAward(client))
				{
					strcmd = string.Format("{0}", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needBagSpaceNum = Global.GetGoodsCountForVipPriority(Global.GetVipOnceAwardPriorityID(client));
				if (needBagSpaceNum > 0 && !Global.CanAddGoodsNum(client, needBagSpaceNum))
				{
					strcmd = string.Format("{0}", -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.GiveVipOnceAwardForPriority(client))
				{
					strcmd = string.Format("{0}", -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.UpdateOnceVipAwardFlag(client);
				Global.SubmitOnceAwardMaskToDB(client);
				Global.BroadcastVipOnceAwardHint(client);
				strcmd = string.Format("{0}", client.ClientData.OnceAwardFlag);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EEA RID: 16106 RVA: 0x0038D5A0 File Offset: 0x0038B7A0
		public static TCPProcessCmdResults ProcessSpriteSendUserMailCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 11)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int senderrid = Convert.ToInt32(fields[0]);
				string senderrname = fields[1];
				int receiverrid = Convert.ToInt32(fields[2]);
				string reveiverrname = fields[3];
				string subject = fields[4];
				string content = fields[5];
				int yinliang = Convert.ToInt32(fields[6]);
				int tongqian = Convert.ToInt32(fields[7]);
				int yuanbao = Convert.ToInt32(fields[8]);
				yuanbao = 0;
				tongqian = 0;
				if (yinliang < 0)
				{
					yinliang = 0;
				}
				string goodslist = fields[9];
				string[] goodsDbIDArr = new string[0];
				if (!string.IsNullOrWhiteSpace(goodslist))
				{
					goodsDbIDArr = goodslist.Split(new char[]
					{
						'|'
					});
				}
				string mailSendSecurityCode = fields[10];
				bool hasAttachment = goodsDbIDArr.Length > 0;
				int needYinLiang = yinliang + Global.GetChargeYinLiangForSendMail(hasAttachment);
				int needTongQian = tongqian;
				int needYuanBao = yuanbao;
				List<GoodsData> needGoodsList = new List<GoodsData>();
				string strcmd;
				if ((long)client.ClientData.Level < GameManager.systemParamsList.GetParamValueIntByName("MinLevelForMailSend", -1))
				{
					strcmd = string.Format("{0}:{1}", -90, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (string.IsNullOrEmpty(client.ClientData.MailSendSecurityCode) || 0 != mailSendSecurityCode.CompareTo(client.ClientData.MailSendSecurityCode))
				{
					strcmd = string.Format("{0}:{1}", -100, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (string.IsNullOrEmpty(subject) || string.IsNullOrEmpty(content))
				{
					strcmd = string.Format("{0}:{1}", -107, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int maxSubjectLen = Global.GetValueBetweenMinAndMax((int)GameManager.systemParamsList.GetParamValueIntByName("MaxSubjectLen", -1), 10, 49);
				int maxContentLen = Global.GetValueBetweenMinAndMax((int)GameManager.systemParamsList.GetParamValueIntByName("MaxContentLen", -1), 150, 10000);
				if (subject.Length > maxSubjectLen || content.Length > maxContentLen)
				{
					strcmd = string.Format("{0}:{1}", -101, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string[] dbRoleFields = Global.ExecuteDBCmd(10088, reveiverrname, client.ServerId);
				if (dbRoleFields == null || dbRoleFields.Length != 2 || int.Parse(dbRoleFields[0]) < 0)
				{
					strcmd = string.Format("{0}:{1}", -109, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				receiverrid = int.Parse(dbRoleFields[0]);
				if (receiverrid == senderrid)
				{
					strcmd = string.Format("{0}:{1}", -108, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (needTongQian > 0)
				{
					if (client.ClientData.Money1 < needTongQian)
					{
						strcmd = string.Format("{0}:{1}", -110, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (needYinLiang > 0)
				{
					if (client.ClientData.YinLiang < needYinLiang)
					{
						strcmd = string.Format("{0}:{1}", -120, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (needYuanBao > 0)
				{
					if (client.ClientData.UserMoney < needYuanBao)
					{
						strcmd = string.Format("{0}:{1}", -130, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (goodsDbIDArr.Length > 0)
				{
					foreach (string goodsdbid in goodsDbIDArr)
					{
						if (!string.IsNullOrEmpty(goodsdbid))
						{
							int dbid = int.Parse(goodsdbid);
							GoodsData goodsData = Global.GetGoodsByDbID(client, dbid);
							if (null == goodsData)
							{
								strcmd = string.Format("{0}:{1}", -140, roleID);
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
							if (0 != goodsData.Binding)
							{
								strcmd = string.Format("{0}:{1}", -135, roleID);
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
							if (goodsData.Using > 0)
							{
								strcmd = string.Format("{0}:{1}", -200, roleID);
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
							if (goodsData.GCount <= 0)
							{
								strcmd = string.Format("{0}:{1}", -134, roleID);
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
							needGoodsList.Add(goodsData);
						}
					}
				}
				if (needGoodsList.Count > 10)
				{
					strcmd = string.Format("{0}:{1}", -149, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (needTongQian > 0)
				{
					if (!GameManager.ClientMgr.SubMoney1(tcpMgr.MySocketListener, tcpClientPool, pool, client, needTongQian, "发送邮件"))
					{
						strcmd = string.Format("{0}:{1}", -150, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (needYinLiang > 0)
				{
					if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang, "发送邮件", false))
					{
						strcmd = string.Format("{0}:{1}", -160, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (needYuanBao > 0)
				{
					if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "邮件发送元宝", true, true, false, DaiBiSySType.None))
					{
						strcmd = string.Format("{0}:{1}", -170, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				string mailGoodsString = "";
				foreach (GoodsData item in needGoodsList)
				{
					int useCount = item.GCount;
					mailGoodsString += string.Format("{0}_{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}_{9}_{10}_{11}_{12}_{13}_{14}_{15}", new object[]
					{
						item.GoodsID,
						item.Forge_level,
						item.Quality,
						item.Props,
						useCount,
						0,
						0,
						item.Jewellist,
						item.AddPropIndex,
						item.Binding,
						item.BornIndex,
						item.Lucky,
						item.Strong,
						item.ExcellenceInfo,
						item.AppendPropLev,
						item.ChangeLifeLevForEquip
					});
					if (useCount <= 0)
					{
						useCount = 1;
					}
					if (!GameManager.ClientMgr.NotifyUseGoodsByDbId(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, item.Id, useCount, false, false))
					{
						strcmd = string.Format("{0}:{1}", -180, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (mailGoodsString.Length > 0)
					{
						mailGoodsString += "|";
					}
				}
				string strDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", new object[]
				{
					senderrid,
					fields[1],
					receiverrid,
					fields[3],
					fields[4],
					fields[5],
					yinliang,
					tongqian,
					yuanbao,
					mailGoodsString
				});
				string[] dbFields = Global.ExecuteDBCmd(10086, strDbCmd, client.ServerId);
				if (dbFields == null || dbFields.Length != 3)
				{
					strcmd = string.Format("{0}:{1}", -190, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameClient receiverClient = GameManager.ClientMgr.FindClient(receiverrid);
				if (null != receiverClient)
				{
					receiverClient._IconStateMgr.CheckEmailCount(client, true);
				}
				int mailID = Convert.ToInt32(dbFields[1]);
				int mailGoodsCountToDB = Convert.ToInt32(dbFields[2]);
				if (mailID >= 0)
				{
					client.ClientData.MailSendSecurityCode = "";
				}
				strcmd = string.Format("{0}:{1}", mailID, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EEB RID: 16107 RVA: 0x0038E19C File Offset: 0x0038C39C
		public static TCPProcessCmdResults ProcessGetUserMailListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EEC RID: 16108 RVA: 0x0038E2F8 File Offset: 0x0038C4F8
		public static TCPProcessCmdResults ProcessGetUserMailDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
				client._IconStateMgr.CheckEmailCount(client, true);
				return result;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EED RID: 16109 RVA: 0x0038E468 File Offset: 0x0038C668
		public static TCPProcessCmdResults ProcessFetchMailGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int mailID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if ("1" != GameManager.GameConfigMgr.GetGameConfigItemStr("canfetchmailattachment", "1"))
				{
					strcmd = string.Format("{0}:{1}:{2}", -99, roleID, mailID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				byte[] bytes = null;
				int dataStartPos = 0;
				int dataLen = 0;
				Global.RequestToDBServer4(tcpClientPool, pool, 10087, cmdData, out bytes, out dataStartPos, out dataLen, client.ServerId);
				if (bytes == null || bytes.Length <= 0 || bytes.Length < dataStartPos + dataLen || dataStartPos < 0 || dataLen < 1)
				{
					strcmd = string.Format("{0}:{1}:{2}", -100, roleID, mailID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				MailData mailData = DataHelper.BytesToObject<MailData>(bytes, dataStartPos, dataLen);
				if (null == mailData)
				{
					strcmd = string.Format("{0}:{1}:{2}", -110, roleID, mailID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (mailData.ReceiverRID != roleID)
				{
					strcmd = string.Format("{0}:{1}:{2}", -115, roleID, mailID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (mailData.GoodsList != null && mailData.GoodsList.Count <= 0 && mailData.Yinliang <= 0 && mailData.Tongqian <= 0 && mailData.YuanBao <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -120, roleID, mailID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (mailData.Hasfetchattachment != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -121, roleID, mailID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (mailData.GoodsList != null && mailData.GoodsList.Count > 0)
				{
					bool fail = false;
					Dictionary<int, int> typeVSNumDict = new Dictionary<int, int>();
					foreach (MailGoodsData item in mailData.GoodsList)
					{
						SystemXmlItem systemGoods = null;
						if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(item.GoodsID, out systemGoods))
						{
							int categoriy = systemGoods.GetIntValue("Categoriy", -1);
							if (RebornEquip.IsRebornType(item.GoodsID))
							{
								item.Site = 15000;
							}
							else
							{
								item.Site = Global.GetSiteByCategoriy(categoriy);
							}
							item.Binding = Global.GetBindingByCategoriy(categoriy, item.Binding);
							if (!typeVSNumDict.ContainsKey(item.Site))
							{
								typeVSNumDict[item.Site] = 0;
							}
							int gridNum = Global.GetGoodsGridNumByID(item.GoodsID);
							gridNum = Global.GMax(gridNum, 1);
							Dictionary<int, int> dictionary;
							int site;
							(dictionary = typeVSNumDict)[site = item.Site] = dictionary[site] + (int)Math.Ceiling((double)item.GCount / (double)gridNum);
						}
					}
					foreach (KeyValuePair<int, int> item2 in typeVSNumDict)
					{
						if (!Global.CanAddGoodsNum(client, item2.Key, item2.Value))
						{
							fail = true;
							break;
						}
					}
					if (fail)
					{
						strcmd = string.Format("{0}:{1}:{2}", -125, roleID, mailID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				string strCostList = "";
				int useMoney = Math.Abs(mailData.YuanBao);
				if (mailData.YuanBao < 0)
				{
					if (!MoneyUtil.CheckHasMoney(client, 40, useMoney))
					{
						GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(419, new object[0]));
						strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				int useYinLiang = Math.Abs(mailData.Yinliang);
				if (mailData.Yinliang < 0)
				{
					if (!MoneyUtil.CheckHasMoney(client, 8, useYinLiang))
					{
						GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(535, new object[0]));
						strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				int useTongQian = Math.Abs(mailData.Tongqian);
				if (mailData.Tongqian < 0)
				{
					if (!MoneyUtil.CheckHasMoney(client, 1, useTongQian))
					{
						GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(535, new object[0]));
						strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				string[] dbFields = Global.ExecuteDBCmd(365, cmdData, client.ServerId);
				if (dbFields == null || dbFields.Length != 3)
				{
					strcmd = string.Format("{0}:{1}:{2}", -130, roleID, mailID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (int.Parse(dbFields[2]) != 1)
				{
					strcmd = string.Format("{0}:{1}:{2}", -140, roleID, mailID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (mailData.YuanBao < 0)
				{
					if (!MoneyUtil.CostMoney(client, 40, useMoney, ref strCostList, "领取邮件扣除钻石", false))
					{
						GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(419, new object[0]));
						strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (mailData.Yinliang < 0)
				{
					if (!MoneyUtil.CostMoney(client, 8, useYinLiang, ref strCostList, "领取邮件扣除金币", false))
					{
						GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(535, new object[0]));
						strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (mailData.Tongqian < 0)
				{
					if (!MoneyUtil.CostMoney(client, 1, useTongQian, ref strCostList, "领取邮件扣除绑金", false))
					{
						GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(535, new object[0]));
						strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (mailData.Tongqian > 0)
				{
					GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.Tongqian, "提取邮件", false);
					GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取金币, roleID={0}({1}), Money={2}, newMoney={3}", new object[]
					{
						client.ClientData.RoleID,
						client.ClientData.RoleName,
						client.ClientData.Money1,
						mailData.Tongqian
					}), EventLevels.Record);
				}
				if (mailData.Yinliang > 0)
				{
					GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.Yinliang, "提取邮件", false);
					GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取银两, roleID={0}({1}), Money={2}, newMoney={3}", new object[]
					{
						client.ClientData.RoleID,
						client.ClientData.RoleName,
						client.ClientData.YinLiang,
						mailData.Yinliang
					}), EventLevels.Record);
				}
				if (mailData.YuanBao > 0)
				{
					GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.YuanBao, "提取邮件", ActivityTypes.None, "");
					GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取元宝, roleID={0}({1}), Money={2}, newMoney={3}", new object[]
					{
						client.ClientData.RoleID,
						client.ClientData.RoleName,
						client.ClientData.UserMoney,
						mailData.YuanBao
					}), EventLevels.Record);
				}
				Global.AddRoleFetchMailMoneyEvent(client, mailData.YuanBao, mailData.Yinliang, mailData.Tongqian);
				int nFetchGoodsCount = 0;
				if (mailData.GoodsList != null && mailData.GoodsList.Count > 0)
				{
					foreach (MailGoodsData item in mailData.GoodsList)
					{
						GoodsData goodsData = new GoodsData
						{
							Id = -1,
							GoodsID = item.GoodsID,
							Using = 0,
							Forge_level = item.Forge_level,
							Starttime = "1900-01-01 12:00:00",
							Endtime = "1900-01-01 12:00:00",
							Site = item.Site,
							Quality = item.Quality,
							Props = item.Props,
							GCount = item.GCount,
							Binding = item.Binding,
							Jewellist = item.Jewellist,
							BagIndex = 0,
							AddPropIndex = item.AddPropIndex,
							BornIndex = item.BornIndex,
							Lucky = item.Lucky,
							Strong = item.Strong,
							ExcellenceInfo = item.ExcellenceInfo,
							AppendPropLev = item.AppendPropLev,
							ChangeLifeLevForEquip = item.EquipChangeLifeLev
						};
						if (item.Jewellist != "" && item.Jewellist != "*")
						{
							byte[] washStr = Convert.FromBase64String(item.Jewellist);
							goodsData.WashProps = DataHelper.BytesToObject<List<int>>(washStr, 0, washStr.Length);
							goodsData.Jewellist = "";
						}
						if (item.Props != "" && item.Props != "*")
						{
							byte[] ehinfo = Convert.FromBase64String(item.Props);
							goodsData.ElementhrtsProps = DataHelper.BytesToObject<List<int>>(ehinfo, 0, ehinfo.Length);
							goodsData.Props = "";
						}
						if (item.OrigHoleNum > 0)
						{
							goodsData.JuHunID = item.OrigHoleNum;
						}
						if (goodsData.AppendPropLev > 0)
						{
							int maxAppend = TCPCmdHandler.getGoodsAppendMax(goodsData);
							if (item.AppendPropLev > maxAppend)
							{
								goodsData.AppendPropLev = maxAppend;
							}
						}
						goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, goodsData.Site, goodsData.Jewellist, true, 1, "提取邮件获取", goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip, goodsData.WashProps, goodsData.ElementhrtsProps, goodsData.JuHunID, true);
						if (goodsData.Id >= 0)
						{
							nFetchGoodsCount++;
						}
					}
					if (nFetchGoodsCount != mailData.GoodsList.Count)
					{
						strcmd = string.Format("{0}:{1}:{2}", -150, roleID, mailID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				strcmd = string.Format("1:{0}:{1}", roleID, mailID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EEE RID: 16110 RVA: 0x0038F42C File Offset: 0x0038D62C
		public static TCPProcessCmdResults ProcessBatchFetchMailGoodsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				List<int> mailIDList = Global.StringToIntList(fields[1], ',');
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if ("1" != GameManager.GameConfigMgr.GetGameConfigItemStr("canfetchmailattachment", "1"))
				{
					string strcmd = string.Format("{0}:{1}:{2}", -99, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (mailIDList == null || mailIDList.Count == 0)
				{
					string strcmd = string.Format("{0}:{1}:{2}", -110, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nCmdID = 672;
				string preString = string.Format("{0}:", roleID);
				foreach (int mailID in mailIDList)
				{
					byte[] bytes = null;
					int dataStartPos = 0;
					int dataLen = 0;
					string mailIDStr = preString + mailID;
					Global.RequestToDBServer4(tcpClientPool, pool, 10087, mailIDStr, out bytes, out dataStartPos, out dataLen, client.ServerId);
					if (bytes == null || bytes.Length <= 0 || bytes.Length < dataStartPos + dataLen || dataStartPos < 0 || dataLen < 1)
					{
						string strcmd = string.Format("{0}:{1}:{2}", -100, roleID, mailID);
						client.sendCmd(nCmdID, strcmd, false);
					}
					else
					{
						MailData mailData = DataHelper.BytesToObject<MailData>(bytes, dataStartPos, dataLen);
						if (null == mailData)
						{
							string strcmd = string.Format("{0}:{1}:{2}", -110, roleID, mailID);
							client.sendCmd(nCmdID, strcmd, false);
						}
						else if (mailData.ReceiverRID != roleID)
						{
							string strcmd = string.Format("{0}:{1}:{2}", -115, roleID, mailID);
							client.sendCmd(nCmdID, strcmd, false);
						}
						else if (mailData.GoodsList != null && mailData.GoodsList.Count <= 0 && mailData.Yinliang <= 0 && mailData.Tongqian <= 0 && mailData.YuanBao <= 0)
						{
							string strcmd = string.Format("{0}:{1}:{2}", -120, roleID, mailID);
							client.sendCmd(nCmdID, strcmd, false);
						}
						else if (mailData.Hasfetchattachment != 0)
						{
							string strcmd = string.Format("{0}:{1}:{2}", -121, roleID, mailID);
							client.sendCmd(nCmdID, strcmd, false);
						}
						else
						{
							if (mailData.GoodsList != null && mailData.GoodsList.Count > 0)
							{
								bool fail = false;
								Dictionary<int, int> typeVSNumDict = new Dictionary<int, int>();
								foreach (MailGoodsData item in mailData.GoodsList)
								{
									SystemXmlItem systemGoods = null;
									if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(item.GoodsID, out systemGoods))
									{
										int categoriy = systemGoods.GetIntValue("Categoriy", -1);
										if (RebornEquip.IsRebornType(item.GoodsID))
										{
											item.Site = 15000;
										}
										else
										{
											item.Site = Global.GetSiteByCategoriy(categoriy);
										}
										item.Binding = Global.GetBindingByCategoriy(categoriy, item.Binding);
										if (!typeVSNumDict.ContainsKey(item.Site))
										{
											typeVSNumDict[item.Site] = 0;
										}
										int gridNum = Global.GetGoodsGridNumByID(item.GoodsID);
										gridNum = Global.GMax(gridNum, 1);
										Dictionary<int, int> dictionary;
										int site;
										(dictionary = typeVSNumDict)[site = item.Site] = dictionary[site] + (int)Math.Ceiling((double)item.GCount / (double)gridNum);
									}
								}
								foreach (KeyValuePair<int, int> item2 in typeVSNumDict)
								{
									if (!Global.CanAddGoodsNum(client, item2.Key, item2.Value))
									{
										fail = true;
										break;
									}
								}
								if (fail)
								{
									string strcmd = string.Format("{0}:{1}:{2}", -125, roleID, mailID);
									tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
									return TCPProcessCmdResults.RESULT_DATA;
								}
							}
							string strCostList = "";
							int useMoney = Math.Abs(mailData.YuanBao);
							if (mailData.YuanBao < 0)
							{
								if (!MoneyUtil.CheckHasMoney(client, 40, useMoney))
								{
									GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(419, new object[0]));
									continue;
								}
							}
							int useYinLiang = Math.Abs(mailData.Yinliang);
							if (mailData.Yinliang < 0)
							{
								if (!MoneyUtil.CheckHasMoney(client, 8, useYinLiang))
								{
									GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(535, new object[0]));
									continue;
								}
							}
							int useTongQian = Math.Abs(mailData.Tongqian);
							if (mailData.Tongqian < 0)
							{
								if (!MoneyUtil.CheckHasMoney(client, 1, useTongQian))
								{
									GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(535, new object[0]));
									continue;
								}
							}
							string[] dbFields = Global.ExecuteDBCmd(365, mailIDStr, client.ServerId);
							if (dbFields == null || dbFields.Length != 3)
							{
								string strcmd = string.Format("{0}:{1}:{2}", -130, roleID, mailID);
								client.sendCmd(nCmdID, strcmd, false);
							}
							else if (int.Parse(dbFields[2]) != 1)
							{
								string strcmd = string.Format("{0}:{1}:{2}", -140, roleID, mailID);
								client.sendCmd(nCmdID, strcmd, false);
							}
							else
							{
								string strcmd;
								if (mailData.YuanBao < 0)
								{
									if (!MoneyUtil.CostMoney(client, 40, useMoney, ref strCostList, "领取邮件扣除钻石", false))
									{
										GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(419, new object[0]));
										strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
										tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
										return TCPProcessCmdResults.RESULT_DATA;
									}
								}
								if (mailData.Yinliang < 0)
								{
									if (!MoneyUtil.CostMoney(client, 8, useYinLiang, ref strCostList, "领取邮件扣除金币", false))
									{
										GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(535, new object[0]));
										strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
										tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
										return TCPProcessCmdResults.RESULT_DATA;
									}
								}
								if (mailData.Tongqian < 0)
								{
									if (!MoneyUtil.CostMoney(client, 1, useTongQian, ref strCostList, "领取邮件扣除绑金", false))
									{
										GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(535, new object[0]));
										strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
										tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
										return TCPProcessCmdResults.RESULT_DATA;
									}
								}
								if (mailData.Tongqian > 0)
								{
									GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.Tongqian, "提取邮件", false);
									GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取金币, roleID={0}({1}), Money={2}, newMoney={3}", new object[]
									{
										client.ClientData.RoleID,
										client.ClientData.RoleName,
										client.ClientData.Money1,
										mailData.Tongqian
									}), EventLevels.Record);
								}
								if (mailData.Yinliang > 0)
								{
									GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.Yinliang, "提取邮件", false);
									GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取银两, roleID={0}({1}), Money={2}, newMoney={3}", new object[]
									{
										client.ClientData.RoleID,
										client.ClientData.RoleName,
										client.ClientData.YinLiang,
										mailData.Yinliang
									}), EventLevels.Record);
								}
								if (mailData.YuanBao > 0)
								{
									GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, mailData.YuanBao, "提取邮件", ActivityTypes.None, "");
									GameManager.SystemServerEvents.AddEvent(string.Format("角色提取邮件获取元宝, roleID={0}({1}), Money={2}, newMoney={3}", new object[]
									{
										client.ClientData.RoleID,
										client.ClientData.RoleName,
										client.ClientData.UserMoney,
										mailData.YuanBao
									}), EventLevels.Record);
								}
								Global.AddRoleFetchMailMoneyEvent(client, mailData.YuanBao, mailData.Yinliang, mailData.Tongqian);
								int nFetchGoodsCount = 0;
								if (mailData.GoodsList != null && mailData.GoodsList.Count > 0)
								{
									foreach (MailGoodsData item in mailData.GoodsList)
									{
										GoodsData goodsData = new GoodsData
										{
											Id = -1,
											GoodsID = item.GoodsID,
											Using = 0,
											Forge_level = item.Forge_level,
											Starttime = "1900-01-01 12:00:00",
											Endtime = "1900-01-01 12:00:00",
											Site = item.Site,
											Quality = item.Quality,
											Props = item.Props,
											GCount = item.GCount,
											Binding = item.Binding,
											Jewellist = item.Jewellist,
											BagIndex = 0,
											AddPropIndex = item.AddPropIndex,
											BornIndex = item.BornIndex,
											Lucky = item.Lucky,
											Strong = item.Strong,
											ExcellenceInfo = item.ExcellenceInfo,
											AppendPropLev = item.AppendPropLev,
											ChangeLifeLevForEquip = item.EquipChangeLifeLev
										};
										if (item.Jewellist != "" && item.Jewellist != "*")
										{
											byte[] washStr = Convert.FromBase64String(item.Jewellist);
											goodsData.WashProps = DataHelper.BytesToObject<List<int>>(washStr, 0, washStr.Length);
											goodsData.Jewellist = "";
										}
										if (item.Props != "" && item.Props != "*")
										{
											byte[] ehinfo = Convert.FromBase64String(item.Props);
											goodsData.ElementhrtsProps = DataHelper.BytesToObject<List<int>>(ehinfo, 0, ehinfo.Length);
											goodsData.Props = "";
										}
										if (item.OrigHoleNum > 0)
										{
											goodsData.JuHunID = item.OrigHoleNum;
										}
										if (goodsData.AppendPropLev > 0)
										{
											int maxAppend = TCPCmdHandler.getGoodsAppendMax(goodsData);
											if (item.AppendPropLev > maxAppend)
											{
												goodsData.AppendPropLev = maxAppend;
											}
										}
										goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, goodsData.Site, goodsData.Jewellist, true, 1, "提取邮件获取", goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip, goodsData.WashProps, goodsData.ElementhrtsProps, goodsData.JuHunID, true);
										if (goodsData.Id >= 0)
										{
											nFetchGoodsCount++;
										}
									}
									if (nFetchGoodsCount != mailData.GoodsList.Count)
									{
										strcmd = string.Format("{0}:{1}:{2}", -150, roleID, mailID);
										client.sendCmd(nCmdID, strcmd, false);
										continue;
									}
								}
								strcmd = string.Format("1:{0}:{1}", roleID, mailID);
								client.sendCmd(nCmdID, strcmd, false);
							}
						}
					}
				}
				client._IconStateMgr.CheckEmailCount(client, true);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EEF RID: 16111 RVA: 0x0039042C File Offset: 0x0038E62C
		private static int getGoodsAppendMax(GoodsData goodsData)
		{
			int nExcellenceNum = Global.GetEquipExcellencePropNum(goodsData);
			int nMaxLevel;
			if (nExcellenceNum == 0)
			{
				nMaxLevel = 20;
			}
			else if (nExcellenceNum >= 1 && nExcellenceNum <= 2)
			{
				nMaxLevel = 40;
			}
			else if (nExcellenceNum >= 3 && nExcellenceNum <= 4)
			{
				nMaxLevel = 60;
			}
			else if (nExcellenceNum >= 5 && nExcellenceNum <= 6)
			{
				nMaxLevel = 80;
			}
			else
			{
				nMaxLevel = 80;
			}
			return nMaxLevel;
		}

		// Token: 0x06003EF0 RID: 16112 RVA: 0x0039049C File Offset: 0x0038E69C
		public static TCPProcessCmdResults ProcessSpriteGetMailSendCodeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				client.ClientData.MailSendSecurityCode = string.Format("{0}", Global.GetRandomNumber(100000, 1000000));
				string strcmd = string.Format("{0}:{1}", roleID, client.ClientData.MailSendSecurityCode);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EF1 RID: 16113 RVA: 0x00390654 File Offset: 0x0038E854
		public static TCPProcessCmdResults ProcessDeleteUserMailCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
				client._IconStateMgr.CheckEmailCount(client, true);
				return result;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EF2 RID: 16114 RVA: 0x003907C4 File Offset: 0x0038E9C4
		private static TCPProcessCmdResults ProcessSprQueryInputFanLiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.InputFanLi, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003EF3 RID: 16115 RVA: 0x00390950 File Offset: 0x0038EB50
		private static TCPProcessCmdResults ProcessSprQueryInputJiaSongCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.InputJiaSong, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003EF4 RID: 16116 RVA: 0x00390ADC File Offset: 0x0038ECDC
		private static TCPProcessCmdResults ProcessSprQueryInputKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.InputKing, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003EF5 RID: 16117 RVA: 0x00390C68 File Offset: 0x0038EE68
		private static TCPProcessCmdResults ProcessSprQueryLevelKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.LevelKing, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003EF6 RID: 16118 RVA: 0x00390DF4 File Offset: 0x0038EFF4
		private static TCPProcessCmdResults ProcessSprQueryEquipKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.EquipKing, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003EF7 RID: 16119 RVA: 0x00390F80 File Offset: 0x0038F180
		private static TCPProcessCmdResults ProcessSprQueryHorseKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.HorseKing, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003EF8 RID: 16120 RVA: 0x0039110C File Offset: 0x0038F30C
		private static TCPProcessCmdResults ProcessSprQueryJingMaiKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JingMaiKing, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003EF9 RID: 16121 RVA: 0x00391298 File Offset: 0x0038F498
		private static TCPProcessCmdResults ProcessSprQueryAwardHistoryCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int activityType = Global.SafeConvertToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				Activity instActivity = Global.GetActivity((ActivityTypes)activityType);
				if (null == instActivity)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据activityType定位活动对象失败, CMD={0}, Client={1}, RoleID={2}, activityType={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						activityType
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString((ActivityTypes)activityType, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003EFA RID: 16122 RVA: 0x003914B0 File Offset: 0x0038F6B0
		private static TCPProcessCmdResults ProcessSprFetchActivityAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int activityType = Global.SafeConvertToInt32(fields[1]);
				int extTag = Global.SafeConvertToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = "";
				if (50 == activityType || 51 == activityType || 52 == activityType)
				{
					Debug.Assert(false);
				}
				Activity instActivity = Global.GetActivity((ActivityTypes)activityType);
				if (null == instActivity)
				{
					strcmd = string.Format("{0}:{1}:{2}", -1, roleID, activityType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!instActivity.CanGiveAward())
				{
					strcmd = string.Format("{0}:{1}:{2}", -2, roleID, activityType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!instActivity.CheckCondition(client, extTag))
				{
					if (64 == activityType)
					{
						strcmd = string.Format("{0}:{1}:{2}", -10888, roleID, activityType);
					}
					else
					{
						strcmd = string.Format("{0}:{1}:{2}", -10007, roleID, activityType);
					}
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (10 == activityType || 12 == activityType || 13 == activityType || 64 == activityType || 40 == activityType || 69 == activityType || 70 == activityType)
				{
					if (!instActivity.HasEnoughBagSpaceForAwardGoods(client, extTag))
					{
						strcmd = string.Format("{0}:{1}:{2}", -3, roleID, activityType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (!instActivity.HasEnoughBagSpaceForAwardGoods(client))
				{
					strcmd = string.Format("{0}:{1}:{2}", -3, roleID, activityType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (14 == activityType)
				{
					strcmd = HuodongCachingMgr.MergeZiKa(client, extTag);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (154 == activityType)
				{
					strcmd = (instActivity as ThemeDuiHuanActivity).MergeGoods(client, extTag);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string[] dbFields = null;
				int nDBExecuteID = Global.GetDBServerExecuteActivityAwardCmdID((ActivityTypes)activityType);
				string dbCmds = Global.GetActivityRequestCmdString((ActivityTypes)activityType, client, extTag);
				if (nDBExecuteID <= 0 || string.IsNullOrEmpty(dbCmds))
				{
					strcmd = string.Format("{0}:{1}:{2}", -4, roleID, activityType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.RequestToDBServer(tcpClientPool, pool, nDBExecuteID, dbCmds, out dbFields, client.ServerId);
				if (dbFields == null || dbFields.Length != 3)
				{
					strcmd = string.Format("{0}:{1}:{2}", -5, roleID, activityType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int result = Global.SafeConvertToInt32(dbFields[0]);
				if (result <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", result, roleID, activityType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (instActivity is JieRiMeiRiLeiJiActivity)
				{
					int day = extTag / 1000;
					int dbFields2 = Global.SafeConvertToInt32(dbFields[2]);
					dbFields[2] = (day * 1000 + dbFields2).ToString();
				}
				if (!instActivity.GiveAward(client, Global.SafeConvertToInt32(dbFields[2])))
				{
					strcmd = string.Format("{0}:{1}:{2}", -7, roleID, activityType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (activityType == 3)
				{
					Global.BroadcastJiaSongOk(client);
				}
				if (client._IconStateMgr.CheckJieRiActivity(client, false))
				{
					client._IconStateMgr.SendIconStateToClient(client);
				}
				if (activityType == 64)
				{
					JieriIPointsExchgActivity act = HuodongCachingMgr.GetJieriIPointsExchgActivity();
					if (null != act)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							result,
							roleID,
							activityType,
							act.GetIPointsLeftMergeNum(client, extTag),
							extTag
						});
					}
				}
				else
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						result,
						roleID,
						activityType,
						extTag
					});
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003EFB RID: 16123 RVA: 0x00391B64 File Offset: 0x0038FD64
		private static TCPProcessCmdResults ProcessSpriteMallZhenQiBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int malID = Convert.ToInt32(fields[1]);
				int goodsNum = Convert.ToInt32(fields[2]);
				if (goodsNum <= 0 || goodsNum >= 10000)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("商城购买, 非法的外挂购买, 物品数量不能小于等于0或者大于10000, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						goodsNum
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SystemXmlItem systemMallItem = null;
				if (!GameManager.systemMallMgr.SystemXmlItemDict.TryGetValue(malID, out systemMallItem))
				{
					string strcmd = string.Format("{0}::", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int price = systemMallItem.GetIntValue("ZhenQi", -1);
				if (price <= 0)
				{
					string strcmd = string.Format("{0}::", -100);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int goodsID = systemMallItem.GetIntValue("GoodsID", -1);
				if (goodsID <= 0)
				{
					string strcmd = string.Format("{0}::", -101);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string pubStartTime = systemMallItem.GetStringValue("PubStartTime");
				string pubEndTime = systemMallItem.GetStringValue("PubEndTime");
				if (!string.IsNullOrEmpty(pubStartTime) && !string.IsNullOrEmpty(pubEndTime))
				{
					long startTime = Global.SafeConvertToTicks(pubStartTime);
					long endTime = Global.SafeConvertToTicks(pubEndTime);
					long nowTicks = TimeUtil.NOW();
					if (nowTicks < startTime || nowTicks > endTime)
					{
						string strcmd = string.Format("{0}::", -105);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				MallGoodsCacheItem mallGoodsCacheItem = MallGoodsMgr.GetMallGoodsCacheItem(goodsID);
				if (null == mallGoodsCacheItem)
				{
					string strcmd = string.Format("{0}::", -1101);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int oldUserMoney = client.ClientData.UserMoney;
				int oldUserGlod = client.ClientData.Gold;
				if (client.ClientData.Gold < price * goodsNum)
				{
					string strcmd = string.Format("{0}::", -30001);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int toBinding = 1;
				int gridNum = Global.GetGoodsGridNumByID(goodsID);
				gridNum = Global.GMax(gridNum, 1);
				int addCount = (goodsNum - 1) / gridNum + 1;
				for (int i = 0; i < addCount; i++)
				{
					int thisTimeNum = gridNum;
					if (i >= addCount - 1 && goodsNum % gridNum > 0)
					{
						thisTimeNum = goodsNum % gridNum;
					}
					string strcmd;
					if (!Global.CanAddGoods(client, goodsID, thisTimeNum, 0, "1900-01-01 12:00:00", true, false))
					{
						strcmd = string.Format("{0}::", -3);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					if (!GameManager.ClientMgr.SubUserGold(tcpMgr.MySocketListener, tcpClientPool, pool, client, price * thisTimeNum, "商城购买_绑定元宝", false))
					{
						strcmd = string.Format("{0}::", -444);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					GoodsData tmpGoodsData = new GoodsData
					{
						GoodsID = goodsID,
						GCount = thisTimeNum,
						Binding = toBinding,
						Forge_level = mallGoodsCacheItem.Forge_level,
						Lucky = mallGoodsCacheItem.Lucky,
						ExcellenceInfo = mallGoodsCacheItem.ExcellenceInfo,
						AppendPropLev = mallGoodsCacheItem.AppendPropLev
					};
					int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", 0, toBinding, 0, "", true, 1, "商城购买_绑定元宝", "1900-01-01 12:00:00", 0, 0, mallGoodsCacheItem.Lucky, 0, mallGoodsCacheItem.ExcellenceInfo, mallGoodsCacheItem.AppendPropLev, 0, null, null, 0, true);
					if (dbRet < 0)
					{
						strcmd = string.Format("{0}::", -5);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					tmpGoodsData.Id = dbRet;
					string castResList = EventLogManager.NewResPropString(ResLogType.FristBindZuanShi, new object[]
					{
						-(price * thisTimeNum),
						oldUserGlod,
						client.ClientData.Gold,
						oldUserMoney,
						client.ClientData.UserMoney
					});
					string strResList = EventLogManager.NewGoodsDataPropString(tmpGoodsData);
					EventLogManager.AddPurchaseEvent(client, 3, malID, castResList, strResList);
					Global.AddRoleBuyWithGlodEvent(client, goodsID, thisTimeNum, price * thisTimeNum);
					strcmd = string.Format("{0}:{1}:{2}", dbRet, goodsID, thisTimeNum);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EFC RID: 16124 RVA: 0x00392224 File Offset: 0x00390424
		private static TCPProcessCmdResults ProcessSpriteMallMoBiBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int malID = Convert.ToInt32(fields[1]);
				int goodsNum = Convert.ToInt32(fields[2]);
				if (goodsNum <= 0 || goodsNum >= 10000)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("商城购买, 非法的外挂购买, 物品数量不能小于等于0或者大于10000, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						goodsNum
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SystemXmlItem systemMallItem = null;
				if (!GameManager.systemMallMgr.SystemXmlItemDict.TryGetValue(malID, out systemMallItem))
				{
					string strcmd = string.Format("{0}::", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int price = systemMallItem.GetIntValue("MoBi", -1);
				if (price <= 0)
				{
					string strcmd = string.Format("{0}::", -100);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int goodsID = systemMallItem.GetIntValue("GoodsID", -1);
				if (goodsID <= 0)
				{
					string strcmd = string.Format("{0}::", -101);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string pubStartTime = systemMallItem.GetStringValue("PubStartTime");
				string pubEndTime = systemMallItem.GetStringValue("PubEndTime");
				if (!string.IsNullOrEmpty(pubStartTime) && !string.IsNullOrEmpty(pubEndTime))
				{
					long startTime = Global.SafeConvertToTicks(pubStartTime);
					long endTime = Global.SafeConvertToTicks(pubEndTime);
					long nowTicks = TimeUtil.NOW();
					if (nowTicks < startTime || nowTicks > endTime)
					{
						string strcmd = string.Format("{0}::", -105);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				MallGoodsCacheItem mallGoodsCacheItem = MallGoodsMgr.GetMallGoodsCacheItem(goodsID);
				if (null == mallGoodsCacheItem)
				{
					string strcmd = string.Format("{0}::", -1101);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int oldUserMoney = client.ClientData.UserMoney;
				int oldUserGlod = client.ClientData.MoBi;
				if (oldUserGlod < price * goodsNum)
				{
					string strcmd = string.Format("{0}::", -30001);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int toBinding = 1;
				int gridNum = Global.GetGoodsGridNumByID(goodsID);
				gridNum = Global.GMax(gridNum, 1);
				int addCount = (goodsNum - 1) / gridNum + 1;
				for (int i = 0; i < addCount; i++)
				{
					int thisTimeNum = gridNum;
					if (i >= addCount - 1 && goodsNum % gridNum > 0)
					{
						thisTimeNum = goodsNum % gridNum;
					}
					string strcmd;
					if (!Global.CanAddGoods(client, goodsID, thisTimeNum, 0, "1900-01-01 12:00:00", true, false))
					{
						strcmd = string.Format("{0}::", -3);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					if (!GameManager.ClientMgr.ModifyMoBiValue(client, -price * thisTimeNum, "商城购买_魔币", false))
					{
						strcmd = string.Format("{0}::", -444);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					GoodsData tmpGoodsData = new GoodsData
					{
						GoodsID = goodsID,
						GCount = thisTimeNum,
						Binding = toBinding,
						Forge_level = mallGoodsCacheItem.Forge_level,
						Lucky = mallGoodsCacheItem.Lucky,
						ExcellenceInfo = mallGoodsCacheItem.ExcellenceInfo,
						AppendPropLev = mallGoodsCacheItem.AppendPropLev
					};
					int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", 0, toBinding, 0, "", true, 1, "商城购买_魔币", "1900-01-01 12:00:00", 0, 0, mallGoodsCacheItem.Lucky, 0, mallGoodsCacheItem.ExcellenceInfo, mallGoodsCacheItem.AppendPropLev, 0, null, null, 0, true);
					if (dbRet < 0)
					{
						strcmd = string.Format("{0}::", -5);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					tmpGoodsData.Id = dbRet;
					string castResList = EventLogManager.NewResPropString(ResLogType.MoBi, new object[]
					{
						-(price * thisTimeNum),
						oldUserGlod,
						client.ClientData.Gold,
						oldUserMoney,
						client.ClientData.UserMoney
					});
					string strResList = EventLogManager.NewGoodsDataPropString(tmpGoodsData);
					EventLogManager.AddPurchaseEvent(client, 3, malID, castResList, strResList);
					strcmd = string.Format("{0}:{1}:{2}", dbRet, goodsID, thisTimeNum);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EFD RID: 16125 RVA: 0x003928C4 File Offset: 0x00390AC4
		private static TCPProcessCmdResults ProcessSpriteUseVipDailyPriorityCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int priority = Convert.ToInt32(fields[1]);
				int dayID = TimeUtil.NowDateTime().DayOfYear;
				int ret = Global.CanGiveVipDailyAwardForPriority(client, priority, dayID);
				string strcmd;
				if (ret < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", ret, roleID, priority);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needBagSpaceNum = Global.GetGoodsCountForVipPriority(priority);
				if (needBagSpaceNum > 0 && !Global.CanAddGoodsNum(client, needBagSpaceNum))
				{
					strcmd = string.Format("{0}:{1}:{2}", -125, roleID, priority);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.UpdateVipDailyData(client, dayID, priority))
				{
					strcmd = string.Format("{0}:{1}:{2}", -135, roleID, priority);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.GiveVipDailyAwardForPriority(client, priority))
				{
					strcmd = string.Format("{0}:{1}:{2}", -145, roleID, priority);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				strcmd = string.Format("1:{0}:{1}", roleID, priority);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EFE RID: 16126 RVA: 0x00392BA4 File Offset: 0x00390DA4
		private static TCPProcessCmdResults ProcessSpriteQueryVipDailyDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyVipDailyData(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003EFF RID: 16127 RVA: 0x00392CF4 File Offset: 0x00390EF4
		private static TCPProcessCmdResults ProcessSpriteQueryYangGongBKDailyDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientData.YangGongBKDailyJiFen != null && client.ClientData.YangGongBKDailyJiFen.DayID != TimeUtil.NowDateTime().DayOfYear)
				{
					client.ClientData.YangGongBKDailyJiFen.JiFen = 0;
					client.ClientData.YangGongBKDailyJiFen.DayID = TimeUtil.NowDateTime().DayOfYear;
					client.ClientData.YangGongBKDailyJiFen.AwardHistory = 0L;
					Global.UpdateYangGongBKDailyJiFenData(client, -1);
					return TCPProcessCmdResults.RESULT_OK;
				}
				GameManager.ClientMgr.NotifyYangGongBKAwardDailyData(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F00 RID: 16128 RVA: 0x00392EE8 File Offset: 0x003910E8
		private static TCPProcessCmdResults ProcessSpriteFetchYangGongBKJiFenAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int awardNo = Convert.ToInt32(fields[1]);
				int dayID = TimeUtil.NowDateTime().DayOfYear;
				int ret = Global.CanGiveAwardForYangGongBKJifen(client, awardNo, dayID);
				string strcmd;
				if (ret < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", ret, roleID, awardNo);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needBagSpaceNum = Global.GetYangGongBkAwardGoodsNum(awardNo);
				if (needBagSpaceNum > 0 && !Global.CanAddGoodsNum(client, needBagSpaceNum))
				{
					strcmd = string.Format("{0}:{1}:{2}", -125, roleID, awardNo);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.UpdateYangGongBKDailyJiFenData(client, awardNo))
				{
					strcmd = string.Format("{0}:{1}:{2}", -135, roleID, awardNo);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.GiveYangGongBKAwardForDailyJiFen(client, awardNo))
				{
					strcmd = string.Format("{0}:{1}:{2}", -145, roleID, awardNo);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				strcmd = string.Format("1:{0}:{1}", roleID, awardNo);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F01 RID: 16129 RVA: 0x003931C4 File Offset: 0x003913C4
		private static TCPProcessCmdResults ProcessSpriteQueryShiLianTaAwardDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<ShiLianTaAwardsInfoData>(Global.GetShiLianTaFuBenAwardsInfoData(client), Global._TCPManager.TcpOutPacketPool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F02 RID: 16130 RVA: 0x00393324 File Offset: 0x00391524
		private static TCPProcessCmdResults ProcessSpriteFetchShiLianTaAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				bool leave = Convert.ToInt32(fields[1]) == 1;
				bool allowAutoBuy = Convert.ToInt32(fields[2]) == 1;
				string strcmd;
				if (!Global.ProcessFuBenMapGetAward(client, false))
				{
					if (Global.GetLeftMonsterByCopyMapID(client.ClientData.CopyMapID) > 0)
					{
						strcmd = string.Format("{0}:{1}", -6, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (leave)
				{
					GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 2, -1, -1, -1, 0);
					strcmd = string.Format("{0}:{1}", 9, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int ret = Global.DeductShiLianTaNextFloorGateGoods(client, allowAutoBuy);
				if (ret <= 0)
				{
					strcmd = string.Format("{0}:{1}", ret, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.ProcessGoToNextFuBenMap(client);
				strcmd = string.Format("{0}:{1}", 1, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F03 RID: 16131 RVA: 0x003935D8 File Offset: 0x003917D8
		private static TCPProcessCmdResults ProcessQueryShengXiaoGuessHistCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int param = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (param >= 0 && param != roleID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("试图查询别人的竞猜历史信息, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F04 RID: 16132 RVA: 0x00393798 File Offset: 0x00391998
		private static TCPProcessCmdResults ProcessSpriteAddShengXiaoMortgageCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				string[] mortgageArr = fields[1].Split(new char[]
				{
					'|'
				});
				bool allowAutoBuy = 1 == Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if ("1" != GameManager.GameConfigMgr.GetGameConfigItemStr("hasshengxiaoguess", "1"))
				{
					strcmd = string.Format("{0}:{1}", -30, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int totalMortgage = 0;
				for (int i = 0; i < mortgageArr.Length; i++)
				{
					string[] mortgage = mortgageArr[i].Split(new char[]
					{
						'_'
					});
					if (2 != mortgage.Length)
					{
						strcmd = string.Format("{0}:{1}", -60, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int ret = GameManager.ShengXiaoGuessMgr.IsMortgageLegal(int.Parse(mortgage[0]), int.Parse(mortgage[1]));
					if (ret < 0)
					{
						strcmd = string.Format("{0}:{1}", ret, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					totalMortgage += int.Parse(mortgage[1]);
				}
				if (totalMortgage > 0)
				{
					int ret = GameManager.ShengXiaoGuessMgr.SubNeedGoods(client, totalMortgage, allowAutoBuy);
					if (ret < 0)
					{
						strcmd = string.Format("{0}:{1}", ret, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				for (int i = 0; i < mortgageArr.Length; i++)
				{
					string[] mortgage = mortgageArr[i].Split(new char[]
					{
						'_'
					});
					int ret = GameManager.ShengXiaoGuessMgr.AddGuess(client, int.Parse(mortgage[0]), int.Parse(mortgage[1]), false);
					if (ret < 0)
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("添加竞猜注码时出错, CMD={0}, Client={1}, RoleID={2}, ret={3}", new object[]
						{
							(TCPGameServerCmds)nID,
							Global.GetSocketRemoteEndPoint(socket, false),
							roleID,
							ret
						}), null, true);
					}
				}
				strcmd = string.Format("{0}:{1}", 1, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F05 RID: 16133 RVA: 0x00393BA4 File Offset: 0x00391DA4
		private static TCPProcessCmdResults ProcessSpriteQuerySelfShengXiaoGuessListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(GameManager.ShengXiaoGuessMgr.GetRoleGuessDictionay(roleID), pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F06 RID: 16134 RVA: 0x00393D00 File Offset: 0x00391F00
		private static TCPProcessCmdResults ProcessQueryShengXiaoGuessRecentResultListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = string.Format("{0}", GameManager.ShengXiaoGuessMgr.GetGuessResultHistory());
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F07 RID: 16135 RVA: 0x00393E70 File Offset: 0x00392070
		private static TCPProcessCmdResults ProcessUpdateTengXunFcmRateCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				double rate = 1.0;
				try
				{
					rate = Convert.ToDouble(fields[1]);
				}
				catch
				{
				}
				if (rate > 1.0 || rate < 0.0)
				{
					rate = 1.0;
				}
				client.ClientData.TengXunFCMRate = rate;
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F08 RID: 16136 RVA: 0x00394048 File Offset: 0x00392248
		private static TCPProcessCmdResults ProcessExtGridByYuanBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3 && fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int addGridNum = Convert.ToInt32(fields[1]);
				int nType = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nUseZuanShi = -1;
				if (client.CodeRevision >= 2)
				{
					nUseZuanShi = Convert.ToInt32(fields[3]);
				}
				int bagCapacity = Global.GetPortableBagCapacity(client);
				if (nType == 2 && bagCapacity >= Global.MaxPortableGridNum)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(156, new object[0]), new object[]
					{
						Global.MaxPortableGridNum
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int nCurrent = client.ClientData.MyPortableBagData.ExtGridNum;
				int nOpenGridIndex = nCurrent - Global.DefaultPortableGridNum + 1;
				if (nType == 1 && addGridNum == 1 && nCurrent < Global.ExtraBagGridPriceStartPos)
				{
					int nNeedTime = nOpenGridIndex * 1500;
					if (client.ClientData.OpenPortableGridTime < nNeedTime)
					{
						LogManager.WriteLog(LogTypes.Warning, string.Format("客户端自动推送开启背包消息 但服务器认为时间没到 客-服时间有误差, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
						return TCPProcessCmdResults.RESULT_OK;
					}
					client.ClientData.OpenPortableGridTime = 0;
					Global.SaveRoleParamsInt32ValueToDB(client, "OpenPortableGridTick", client.ClientData.OpenPortableGridTime, true);
					client.ClientData.MyPortableBagData.ExtGridNum++;
					GameManager.DBCmdMgr.AddDBCmd(10044, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.MyPortableBagData.ExtGridNum), null, client.ServerId);
					GameManager.ClientMgr.NotifyPortableBagData(client);
				}
				else if (nType == 2)
				{
					Global.ExtGridPortableBagWithYuanBao(pool, client, addGridNum, nUseZuanShi);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F09 RID: 16137 RVA: 0x003943A4 File Offset: 0x003925A4
		private static TCPProcessCmdResults ProcessSpriteRequestSubMoneyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int subType = Convert.ToInt32(fields[1]);
				int _params = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int result = -1;
				int needYuanBao = 20;
				if (1 == subType)
				{
					needYuanBao = 20;
				}
				else
				{
					result = -100;
				}
				if (needYuanBao > 0)
				{
					if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "打开移动仓库", true, true, false, DaiBiSySType.None))
					{
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(651, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
						result = -101;
					}
					else
					{
						result = 1;
					}
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					subType,
					_params,
					result
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F0A RID: 16138 RVA: 0x0039461C File Offset: 0x0039281C
		private static TCPProcessCmdResults ProcessExtBagNumByYuanBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3 && fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int addGridNum = Convert.ToInt32(fields[1]);
				int nType = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nUseZuanShi = -1;
				if (client.CodeRevision >= 2)
				{
					nUseZuanShi = Convert.ToInt32(fields[3]);
				}
				int bagCapacity = Global.GetSelfBagCapacity(client);
				if (nType == 2 && bagCapacity >= Global.MaxBagGridNum)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(156, new object[0]), new object[]
					{
						Global.MaxBagGridNum
					}), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int result = 0;
				int nCurrent = client.ClientData.BagNum;
				int nOpenGridIndex = nCurrent - Global.DefaultBagGridNum + 1;
				if (nType == 1 && addGridNum == 1 && nCurrent < Global.MaxBagGridNum)
				{
					int nNeedTime = nOpenGridIndex * 3000;
					if (client.ClientData.OpenGridTime < nNeedTime)
					{
						LogManager.WriteLog(LogTypes.Warning, string.Format("客户端自动推送开启背包消息 但服务器认为时间没到 客-服时间有误差, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
						return TCPProcessCmdResults.RESULT_OK;
					}
					client.ClientData.BagNum++;
					client.ClientData.OpenGridTime = 0;
					Global.SaveRoleParamsInt32ValueToDB(client, "OpenGridTick", client.ClientData.OpenGridTime, true);
					GameManager.DBCmdMgr.AddDBCmd(10097, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.BagNum), null, client.ServerId);
				}
				else if (nType == 2)
				{
					result = Global.ExtRoleBagNumWithYuanBao(pool, client, addGridNum, nUseZuanShi);
				}
				string strCmd = string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.BagNum, result);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(Global._TCPManager.TcpOutPacketPool, strCmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F0B RID: 16139 RVA: 0x003949AC File Offset: 0x00392BAC
		private static TCPProcessCmdResults ProcessExcuteNpcLuaTalkCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int mapCode = Convert.ToInt32(fields[1]);
				int npcID = Convert.ToInt32(fields[2]);
				int extensionID = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				Global.ExecNpcTalkText(client, mapCode, npcID, extensionID, 0);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F0C RID: 16140 RVA: 0x00394B20 File Offset: 0x00392D20
		private static TCPProcessCmdResults ProcessExcuteNpcLuaFunctionCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 6)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int mapCode = Convert.ToInt32(fields[1]);
				int npcID = Convert.ToInt32(fields[2]);
				int extensionID = Convert.ToInt32(fields[3]);
				int tag = Convert.ToInt32(fields[4]);
				string luaFunction = fields[5];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				LuaCallResultData luaCallResultData = new LuaCallResultData
				{
					RoleID = roleID,
					MapCode = mapCode,
					NPCID = npcID,
					ExtensionID = extensionID,
					IsSuccess = -1,
					Tag = tag
				};
				string scriptFile;
				if (npcID > 0)
				{
					scriptFile = Global.GetNpcLuaScriptFile(extensionID);
				}
				else
				{
					scriptFile = Global.GetRunLuaScriptFile(extensionID);
				}
				Global.ExcuteLuaFunction(client, scriptFile, luaFunction, new object[]
				{
					client,
					" 配置 "
				}, luaCallResultData);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<LuaCallResultData>(luaCallResultData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F0D RID: 16141 RVA: 0x00394D50 File Offset: 0x00392F50
		private static TCPProcessCmdResults ProcessQueryChengJiuDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				ChengJiuManager.NotifyClientChengJiuData(client, -1);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F0E RID: 16142 RVA: 0x00394E9C File Offset: 0x0039309C
		private static TCPProcessCmdResults ProcessFetchChengJiuAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int chengJiuID = Convert.ToInt32(fields[1]);
				int ret = ChengJiuManager.GiveChengJiuAward(client, chengJiuID, "领取成就奖励:" + chengJiuID);
				if (0 == ret)
				{
					ChengJiuManager.NotifyClientChengJiuData(client, -1);
				}
				string strcmd = string.Format("{0}:{1}:{2}", ret, roleID, chengJiuID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F0F RID: 16143 RVA: 0x00395070 File Offset: 0x00393270
		private static TCPProcessCmdResults ProcessSprJingYuanExchangeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-2,
						roleID,
						goodsData.Id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3,
						roleID,
						goodsData.Id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				if (category < 0 || category > 49)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-4,
						roleID,
						goodsData.Id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] exchangeParams = GameManager.systemParamsList.GetParamValueIntArrayByName("JingYuanExchange", ',');
				if (exchangeParams == null || 2 != exchangeParams.Length)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-41,
						roleID,
						goodsData.Id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int minEquipLevel = exchangeParams[0];
				int experienceMult = exchangeParams[1];
				SystemXmlItem xmlItem = null;
				if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out xmlItem) || null == xmlItem)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-5,
						roleID,
						goodsData.Id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (xmlItem.GetIntValue("ToLevel", -1) < minEquipLevel)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-6,
						roleID,
						goodsData.Id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nCanExchangedJingYuan = xmlItem.GetIntValue("ChangeJinYuan", -1);
				int nCanExchangedExperience = nCanExchangedJingYuan * experienceMult;
				if (nCanExchangedJingYuan <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-7,
						roleID,
						goodsData.Id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsData, 1, false, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-8,
						roleID,
						goodsData.Id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, nCanExchangedJingYuan, "魔晶兑换", true, true, false);
				if (nCanExchangedExperience > 0)
				{
					GameManager.ClientMgr.ProcessRoleExperience(client, (long)nCanExchangedExperience, true, false, false, "none");
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					1,
					roleID,
					goodsData.Id,
					nCanExchangedJingYuan,
					nCanExchangedExperience
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F10 RID: 16144 RVA: 0x00395744 File Offset: 0x00393944
		private static TCPProcessCmdResults ProcessSprHuiZhangExchangeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-2,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-3,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				int minPercent = (int)GameManager.systemParamsList.GetParamValueIntByName("HuiZhangExchange", -1);
				if (minPercent <= 0 || minPercent > 100)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-41,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem xmlItem = null;
				if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out xmlItem) || null == xmlItem)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-5,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nLieShaPrice = xmlItem.GetIntValue("LieShaPrice", -1);
				if (nLieShaPrice <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-6,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsData, 1, false, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-8,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nCanExchangedLieShaZhi = nLieShaPrice * Global.GetRandomNumber(minPercent, 101) / 100;
				nCanExchangedLieShaZhi = Math.Max(1, nCanExchangedLieShaZhi);
				GameManager.ClientMgr.ModifyLieShaValue(client, nCanExchangedLieShaZhi, true, true);
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					1,
					roleID,
					goodsData.Id,
					nCanExchangedLieShaZhi
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F11 RID: 16145 RVA: 0x00395CA4 File Offset: 0x00393EA4
		private static TCPProcessCmdResults ProcessSprActivateNextLevelJingMaiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int curJingMaiLevel = GameManager.ClientMgr.GetJingMaiLevelValue(client);
				int nextJingMaiLevel = curJingMaiLevel + 1;
				int[] jingMaiBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("JingMaiBufferGoodsIDs", ',');
				string strcmd;
				if (nextJingMaiLevel > jingMaiBufferGoods.Length)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						curJingMaiLevel,
						nextJingMaiLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem jingMailXmlItem = null;
				if (!GameManager.SystemJingMaiLevel.SystemXmlItemDict.TryGetValue(nextJingMaiLevel, out jingMailXmlItem) || null == jingMailXmlItem)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-2,
						roleID,
						curJingMaiLevel,
						nextJingMaiLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needRoleLevel = jingMailXmlItem.GetIntValue("LevelLimit", -1);
				int needZhenQi = jingMailXmlItem.GetIntValue("ZhenQi", -1);
				int needBindMoney = jingMailXmlItem.GetIntValue("BindMoney", -1);
				int needGoodsID = -1;
				int needGoodsNum = 0;
				int[] needGoods = jingMailXmlItem.GetIntArrayValue("NeedGoods", ',');
				if (needGoods != null && 2 == needGoods.Length)
				{
					needGoodsID = needGoods[0];
					needGoodsNum = needGoods[1];
				}
				if (needRoleLevel > client.ClientData.Level)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-3,
						roleID,
						curJingMaiLevel,
						nextJingMaiLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int curRoleZhenQi = GameManager.ClientMgr.GetZhenQiValue(client);
				if (curRoleZhenQi < needZhenQi)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-4,
						roleID,
						curJingMaiLevel,
						nextJingMaiLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.Money1 < needBindMoney)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-5,
						roleID,
						curJingMaiLevel,
						nextJingMaiLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (needGoodsID > 0 && needGoodsNum > 0 && Global.GetTotalGoodsCountByID(client, needGoodsID) < needGoodsNum)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-6,
						roleID,
						curJingMaiLevel,
						nextJingMaiLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (needGoodsID > 0 && needGoodsNum > 0 && !GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needGoodsID, needGoodsNum, false, out usedBinding, out usedTimeLimited, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-7,
						roleID,
						curJingMaiLevel,
						nextJingMaiLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.SubMoney1(tcpMgr.MySocketListener, tcpClientPool, pool, client, needBindMoney, "激活经脉"))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-8,
						roleID,
						curJingMaiLevel,
						nextJingMaiLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.ModifyZhenQiValue(client, -needZhenQi, true, true);
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					1,
					roleID,
					curJingMaiLevel,
					nextJingMaiLevel
				});
				Global.BroadcastClientChuanQiJingMai(client, nextJingMaiLevel);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F12 RID: 16146 RVA: 0x003962D8 File Offset: 0x003944D8
		private static TCPProcessCmdResults ProcessSprActivateNextLevelWuXueCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int curWuXueLevel = GameManager.ClientMgr.GetWuXueLevelValue(client);
				int nextWuXueLevel = curWuXueLevel + 1;
				int[] wuXueBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("WuXueBufferGoodsIDs", ',');
				string strcmd;
				if (nextWuXueLevel > wuXueBufferGoods.Length)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						curWuXueLevel,
						nextWuXueLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem wuXueXmlItem = null;
				if (!GameManager.SystemWuXueLevel.SystemXmlItemDict.TryGetValue(nextWuXueLevel, out wuXueXmlItem) || null == wuXueXmlItem)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-2,
						roleID,
						curWuXueLevel,
						nextWuXueLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needRoleLevel = wuXueXmlItem.GetIntValue("LevelLimit", -1);
				int needWuXing = wuXueXmlItem.GetIntValue("WuXing", -1);
				int needYinLiang = wuXueXmlItem.GetIntValue("NeedMoney", -1);
				bool autoActivate = 0 == wuXueXmlItem.GetIntValue("Select", -1);
				double dayXiaoHao = wuXueXmlItem.GetDoubleValue("DayXiaoHao");
				if (needRoleLevel > client.ClientData.Level)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-3,
						roleID,
						curWuXueLevel,
						nextWuXueLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int curRoleWuXing = GameManager.ClientMgr.GetWuXingValue(client);
				if (curRoleWuXing < needWuXing)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-4,
						roleID,
						curWuXueLevel,
						nextWuXueLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.YinLiang < needYinLiang)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-5,
						roleID,
						curWuXueLevel,
						nextWuXueLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.SubUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYinLiang, "激活经脉", false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-8,
						roleID,
						curWuXueLevel,
						nextWuXueLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.ModifyWuXingValue(client, -needWuXing, true, true, true);
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					1,
					roleID,
					curWuXueLevel,
					nextWuXueLevel
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F13 RID: 16147 RVA: 0x003967CC File Offset: 0x003949CC
		private static TCPProcessCmdResults ProcessSprCaiJiStartCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int caiJiRoleID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int GatherTime = 0;
				SceneUIClasses sceneType = Global.GetMapSceneType(client.ClientData.MapCode);
				string strcmd;
				if (sceneType == SceneUIClasses.HuanYingSiYuan)
				{
					int result = CaiJiLogic.ReqStartCaiJi(client, caiJiRoleID, out GatherTime);
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						result,
						roleID,
						caiJiRoleID,
						GatherTime
					});
				}
				else
				{
					int result = CaiJiLogic.ReqStartCaiJi(client, caiJiRoleID, out GatherTime);
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						result,
						roleID,
						caiJiRoleID,
						GatherTime
					});
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F14 RID: 16148 RVA: 0x00396A08 File Offset: 0x00394C08
		private static TCPProcessCmdResults ProcessSprCaiJiFinishCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int caiJiRoleID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int result = CaiJiLogic.ReqFinishCaiJi(client, caiJiRoleID);
				string strcmd = string.Format("{0}:{1}:{2}", result, roleID, caiJiRoleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F15 RID: 16149 RVA: 0x00396B90 File Offset: 0x00394D90
		private static TCPProcessCmdResults ProcessSprCaiJiLastNumCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int huodongType = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int lastnum = 0;
				int result = CaiJiLogic.ReqCaiJiLastNum(client, huodongType, out lastnum);
				string strcmd = string.Format("{0}:{1}:{2}", result, huodongType, lastnum);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F16 RID: 16150 RVA: 0x00396D1C File Offset: 0x00394F1C
		private static TCPProcessCmdResults ProcessSprRunTaskPlotLuaCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int taskPlotID = Convert.ToInt32(fields[1]);
				int startOrEnd = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string luaFileName = Global.GetTaskPlotLuaScriptFile(taskPlotID, startOrEnd);
				if (!string.IsNullOrEmpty(luaFileName))
				{
					Global.ExcuteLuaFunction(client, luaFileName, "run", null, null);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F17 RID: 16151 RVA: 0x00396EA0 File Offset: 0x003950A0
		private static TCPProcessCmdResults ProcessSprChangePetAiTypeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int petRoleID = Convert.ToInt32(fields[1]);
				int petAiType = Convert.ToInt32(fields[2]);
				int result = -1;
				Monster petMonster = Global.GetPetMonsterByMonsterRoleID(client, petRoleID);
				if (null != petMonster)
				{
					petMonster.PetAiControlType = petAiType;
					result = 1;
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					result,
					roleID,
					petRoleID,
					petAiType
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F18 RID: 16152 RVA: 0x00397090 File Offset: 0x00395290
		private static TCPProcessCmdResults ProcessSprTransferSomethingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int taskID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				TaskData taskData = Global.GetTaskData(client, taskID);
				if (null == taskData)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要执行交付物品的任务没有在列表中找到, CMD={0}, Client={1}, RoleID={2}, TaskID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						taskID
					}), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				SystemXmlItem systemTask = null;
				if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要执行交付物品的任务不存在, CMD={0}, Client={1}, RoleID={2}, TaskID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						taskID
					}), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int mapCode = -1;
				int npcType = -1;
				int npcID = -1;
				if (!Global.JugeTaskTargetComplete(systemTask, 1, taskData.DoingTaskVal1))
				{
					int targetType = systemTask.GetIntValue(StringUtil.substitute("TargetType{0}", new object[]
					{
						1
					}), -1);
					if (5 == targetType)
					{
						Global.GetTaskTargetID(systemTask, 1, out mapCode, out npcType, out npcID, true);
						int extensionID = npcID;
						npcID = 2130706432 + extensionID;
						ProcessTask.Process(tcpMgr.MySocketListener, pool, client, npcID, extensionID, -1, TaskTypes.TransferSomething, null, 0, -1L, null);
					}
				}
				else if (!Global.JugeTaskTargetComplete(systemTask, 2, taskData.DoingTaskVal2))
				{
					int targetType2 = systemTask.GetIntValue(StringUtil.substitute("TargetType{0}", new object[]
					{
						2
					}), -1);
					if (5 == targetType2)
					{
						Global.GetTaskTargetID(systemTask, 2, out mapCode, out npcType, out npcID, true);
						int extensionID = npcID;
						npcID = 2130706432 + extensionID;
						ProcessTask.Process(tcpMgr.MySocketListener, pool, client, npcID, extensionID, -1, TaskTypes.TransferSomething, null, 0, -1L, null);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F19 RID: 16153 RVA: 0x003973EC File Offset: 0x003955EC
		private static TCPProcessCmdResults ProcessSprFetchMallDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int mallDataType = Convert.ToInt32(fields[1]);
				MallSaleData mallData = Global.GetMallSaleData(client);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<MallSaleData>(mallData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F1A RID: 16154 RVA: 0x00397550 File Offset: 0x00395750
		private static TCPProcessCmdResults ProcessSpriteMallQiangGouBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int qiangGouID = Convert.ToInt32(fields[1]);
				int goodsNum = Convert.ToInt32(fields[2]);
				bool autoUseGold = false;
				int goodsID = Convert.ToInt32(fields[4]);
				if (goodsNum <= 0 || goodsNum >= 10000)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("商城购买, 非法的外挂购买, 物品数量不能小于等于0或者大于10000, CMD={0}, Client={1}, RoleID={2}, GoodsNum={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						goodsNum
					}), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (Global.IsGmStopQiangGou())
				{
					string strcmd = string.Format("{0}:0:", -106);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				QiangGouItemData itemData = Global.GetQiangGouItemData(client, qiangGouID, goodsID);
				if (null == itemData)
				{
					string strcmd = string.Format("{0}:0:", -20002);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int actStartDay;
				switch (itemData.Type)
				{
				case 1:
					actStartDay = Global.GetOffsetDay(Global.GetHefuStartDay());
					break;
				case 2:
					actStartDay = Global.GetOffsetDay(Global.GetJieriStartDay());
					break;
				default:
					actStartDay = 0;
					break;
				}
				int singleHasPurchase = 0;
				int fullHasPurchase = 0;
				if (!Global.QueryQiangGouItemInfo(roleID, qiangGouID, goodsID, itemData.Random, actStartDay, client.ServerId, out singleHasPurchase, out fullHasPurchase))
				{
					string strcmd = string.Format("{0}:0:", -1106);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int price = 100000;
				int nResult = Global.CheckQiangGou(client, singleHasPurchase, fullHasPurchase, qiangGouID, goodsNum, goodsID, out price);
				if (nResult <= 0)
				{
					string strcmd = string.Format("{0}:0:", nResult);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (price <= 0)
				{
					string strcmd = string.Format("{0}:0:", -100);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsID <= 0)
				{
					string strcmd = string.Format("{0}:0:", -101);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.UserMoney < price * goodsNum)
				{
					string strcmd = string.Format("{0}:0:", -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.CanAddGoods(client, goodsID, goodsNum, 1, "1900-01-01 12:00:00", true, false))
				{
					string strcmd = string.Format("{0}:0:", -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string toDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
				{
					client.ClientData.RoleID,
					goodsID,
					goodsNum,
					goodsNum * price,
					client.ClientData.UserMoney - goodsNum * price,
					qiangGouID,
					actStartDay
				});
				string[] dbCmds = null;
				Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10101, toDbCmd, out dbCmds, client.ServerId);
				if (dbCmds == null || 2 != dbCmds.Length)
				{
					string strcmd = string.Format("{0}:0:", -4);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int ret = int.Parse(dbCmds[1]);
				if (ret < 0)
				{
					string strcmd = string.Format("{0}:0:", ret);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int oldUserMoney = client.ClientData.UserMoney;
				int oldUserGlod = client.ClientData.Gold;
				int toBinding = 1;
				int gridNum = Global.GetGoodsGridNumByID(goodsID);
				gridNum = Global.GMax(gridNum, 1);
				int addCount = (goodsNum - 1) / gridNum + 1;
				for (int i = 0; i < addCount; i++)
				{
					int thisTimeNum = gridNum;
					if (i >= addCount - 1 && goodsNum % gridNum > 0)
					{
						thisTimeNum = goodsNum % gridNum;
					}
					string strcmd;
					if (!Global.CanAddGoods(client, goodsID, thisTimeNum, 0, "1900-01-01 12:00:00", true, false))
					{
						strcmd = string.Format("{0}:0:", -3);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					if (autoUseGold)
					{
						if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, price * thisTimeNum, "商城抢购自动扣除", true, true, false, DaiBiSySType.None))
						{
							strcmd = string.Format("{0}:0:", -4);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
							break;
						}
					}
					else if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, price * thisTimeNum, "商城抢购", true, true, false, DaiBiSySType.None))
					{
						strcmd = string.Format("{0}:0:", -4);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					client.ClientData.TotalUsedMoney += price * thisTimeNum;
					GoodsData tmpGoodsData = new GoodsData
					{
						GoodsID = goodsID,
						GCount = thisTimeNum,
						Binding = toBinding
					};
					int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, thisTimeNum, 0, "", 0, toBinding, 0, "", true, 1, "商城购买_限时抢购", "1900-01-01 12:00:00", 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
					if (dbRet < 0)
					{
						strcmd = string.Format("{0}:0:", -5);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
						break;
					}
					tmpGoodsData.Id = dbRet;
					DailyActiveManager.ProcessBuyItemInMallForDailyActive(client, price * thisTimeNum);
					if (!Global.QueryQiangGouItemInfo(roleID, qiangGouID, goodsID, itemData.Random, actStartDay, client.ServerId, out singleHasPurchase, out fullHasPurchase))
					{
					}
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						dbRet,
						qiangGouID,
						thisTimeNum,
						fullHasPurchase
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					tcpMgr.MySocketListener.SendData(socket, tcpOutPacket, true);
					string castResList = EventLogManager.NewResPropString(ResLogType.FristBindZuanShi, new object[]
					{
						-(price * thisTimeNum),
						oldUserGlod,
						client.ClientData.Gold,
						oldUserMoney,
						client.ClientData.UserMoney
					});
					string strResList = EventLogManager.NewGoodsDataPropString(tmpGoodsData);
					EventLogManager.AddPurchaseEvent(client, 4, qiangGouID, castResList, strResList);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F1B RID: 16155 RVA: 0x00397E34 File Offset: 0x00396034
		private static TCPProcessCmdResults ProcessSprFetchActivitiesDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int mallDataType = Convert.ToInt32(fields[1]);
				ActivitiesData activitiesData = Global.GetActivitiesData(client);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<ActivitiesData>(activitiesData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F1C RID: 16156 RVA: 0x00397F98 File Offset: 0x00396198
		private static TCPProcessCmdResults ProcessSpriteFetchZuanHuangAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				bool isJustCheck = Convert.ToInt32(fields[1]) != 0;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				long totalInputYuanBao = Global.GetUserInputAllYuanBao(client);
				int ret = Global.TryToGiveZuanHuangWeekAward(client, isJustCheck);
				if (isJustCheck)
				{
					if (ret >= 0)
					{
						ret = 6000;
					}
					else
					{
						ret = 7000;
					}
				}
				string strcmd = string.Format("{0}:{1}:{2}", ret, roleID, totalInputYuanBao);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F1D RID: 16157 RVA: 0x003981AC File Offset: 0x003963AC
		private static TCPProcessCmdResults ProcessSpriteSystemOpenParamsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int activateIndex = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (activateIndex < 0 || activateIndex > 31)
				{
					strcmd = string.Format("{0}:{1}:{2}", -3, roleID, activateIndex);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.ModifySystemOpenValue(client, activateIndex, true, true);
				strcmd = string.Format("{0}:{1}:{2}", 1, roleID, activateIndex);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F1E RID: 16158 RVA: 0x003983D0 File Offset: 0x003965D0
		private static TCPProcessCmdResults ProcessSpriteEnterTaskFuBenCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int taskID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				TaskData taskData = Global.GetTaskData(client, taskID);
				if (null == taskData)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要执行交付物品的任务没有在列表中找到, CMD={0}, Client={1}, RoleID={2}, TaskID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						taskID
					}), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				SystemXmlItem systemTask = null;
				if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("要执行交付物品的任务不存在, CMD={0}, Client={1}, RoleID={2}, TaskID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						taskID
					}), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				bool enterFuBen = false;
				int mapCode = -1;
				int npcType = -1;
				int npcID = -1;
				if (!Global.JugeTaskTargetComplete(systemTask, 1, taskData.DoingTaskVal1))
				{
					Global.GetTaskTargetID(systemTask, 1, out mapCode, out npcType, out npcID, false);
					if (MapTypes.TaskCopy == Global.GetMapType(mapCode))
					{
						enterFuBen = true;
					}
				}
				else if (!Global.JugeTaskTargetComplete(systemTask, 2, taskData.DoingTaskVal2))
				{
					Global.GetTaskTargetID(systemTask, 2, out mapCode, out npcType, out npcID, false);
					if (MapTypes.TaskCopy == Global.GetMapType(mapCode))
					{
						enterFuBen = true;
					}
				}
				if (enterFuBen)
				{
					Global.EnterTaskTargetFuBen(client, mapCode);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F1F RID: 16159 RVA: 0x003986E0 File Offset: 0x003968E0
		private static TCPProcessCmdResults ProcessSpriteGetTaskAwardsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int taskID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SystemXmlItem systemTask = null;
				if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("获取任务奖励时任务不存在, CMD={0}, Client={1}, RoleID={2}, TaskID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						taskID
					}), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				TaskAwardsData taskAwardsData = Global.GetTaskAwardsData(client, taskID, systemTask);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskAwardsData>(taskAwardsData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F20 RID: 16160 RVA: 0x003988FC File Offset: 0x00396AFC
		private static TCPProcessCmdResults ProcessSpriteNotifyGetGoodsPackCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.GoodsPackMgr.ProcessClickGoodsPackWhenMovingEnd(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F21 RID: 16161 RVA: 0x00398A7C File Offset: 0x00396C7C
		private static TCPProcessCmdResults ProcessGetTo60AwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int awardID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				HuodongCachingMgr.ProcessGetUpLevelAward4_60Level_100Level(client, awardID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F22 RID: 16162 RVA: 0x00398C04 File Offset: 0x00396E04
		private static TCPProcessCmdResults ProcessGetKaiFuOnlineInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int zoneID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<int> onlineSecsList = new List<int>();
				for (int i = 1; i <= 7; i++)
				{
					int onlineSecs = Global.GetRoleParamsInt32FromDB(client, string.Format("{0}{1}", "KaiFuOnlineDayTimes_", i));
					if (onlineSecsList.Count > 0)
					{
						onlineSecs = Math.Max(onlineSecs, onlineSecsList[onlineSecsList.Count - 1]);
					}
					onlineSecsList.Add(onlineSecs);
				}
				int totalOnlineSecs = 0;
				int dayID = 0;
				if (HuodongCachingMgr.GetCurrentDayKaiFuOnlineSecs(client, out totalOnlineSecs, out dayID))
				{
					dayID--;
					if (dayID >= 0 && dayID < onlineSecsList.Count)
					{
						onlineSecsList[dayID] = totalOnlineSecs;
						for (int i = dayID + 1; i < onlineSecsList.Count; i++)
						{
							onlineSecsList[i] = Math.Max(onlineSecsList[i - 1], onlineSecsList[i]);
						}
					}
				}
				byte[] bytesData = null;
				if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, 10114, data, count, out bytesData, client.ServerId))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int length = BitConverter.ToInt32(bytesData, 0);
				List<KaiFuOnlineAwardData> list = DataHelper.BytesToObject<List<KaiFuOnlineAwardData>>(bytesData, 6, length - 2);
				KaiFuOnlineInfoData kaiFuOnlineInfoData = new KaiFuOnlineInfoData
				{
					SelfDayBit = Global.GetRoleParamsInt32FromDB(client, "KaiFuOnlineDayBit"),
					SelfDayOnlineSecsList = onlineSecsList,
					KaiFuOnlineAwardDataList = list
				};
				int elapsedDays = Global.GetDaysSpanNum(TimeUtil.NowDateTime(), Global.GetKaiFuTime(), true);
				elapsedDays++;
				if (elapsedDays >= 1 && elapsedDays <= 7)
				{
					if (elapsedDays > 1)
					{
						HuodongCachingMgr.FixKaiFuOnlineAwardDataList(kaiFuOnlineInfoData.KaiFuOnlineAwardDataList, dayID - 1, client.ServerId);
					}
					HuodongCachingMgr.FixKaiFuOnlineAwardDataList(kaiFuOnlineInfoData.KaiFuOnlineAwardDataList, dayID, client.ServerId);
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<KaiFuOnlineInfoData>(kaiFuOnlineInfoData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F23 RID: 16163 RVA: 0x00398FA0 File Offset: 0x003971A0
		private static TCPProcessCmdResults ProcessGetEverydayActXmlDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int clientVersion = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriXmlData jieriXmlData = Global.LoadEverydayActXmlData();
				if (jieriXmlData.Version == clientVersion)
				{
					jieriXmlData = new JieriXmlData
					{
						XmlList = null,
						Version = jieriXmlData.Version
					};
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<JieriXmlData>(jieriXmlData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F24 RID: 16164 RVA: 0x00399180 File Offset: 0x00397380
		private static TCPProcessCmdResults ProcessGetEverydayActDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				EverydayActivityData EverydayActData = null;
				EverydayActivity act = HuodongCachingMgr.GetEverydayActivity();
				if (null != act)
				{
					EverydayActData = act.GetEverydayActivityDataForClient(client);
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<EverydayActivityData>(EverydayActData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F25 RID: 16165 RVA: 0x00399324 File Offset: 0x00397524
		private static TCPProcessCmdResults ProcessFetchEverydayActAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int actID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				EverydayActivity act = HuodongCachingMgr.GetEverydayActivity();
				string strcmd;
				if (null == act)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3,
						roleID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int ErrCode = act.EverydayActCheckCondition(client, actID, true);
				if (ErrCode != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						ErrCode,
						roleID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!act.HasEnoughBagSpaceForAwardGoods(client, actID))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-100,
						roleID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				ErrCode = act.EverydayActGiveAward(client, actID);
				if (ErrCode != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						ErrCode,
						roleID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				strcmd = act.BuildFetchEverydayActAwardCmd(client, ErrCode, actID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F26 RID: 16166 RVA: 0x003996B0 File Offset: 0x003978B0
		private static TCPProcessCmdResults ProcessGetSpecialActXmlDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int clientVersion = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriXmlData jieriXmlData = Global.LoadSpecActXmlData();
				if (jieriXmlData.Version == clientVersion)
				{
					jieriXmlData = new JieriXmlData
					{
						XmlList = null,
						Version = jieriXmlData.Version
					};
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<JieriXmlData>(jieriXmlData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F27 RID: 16167 RVA: 0x00399890 File Offset: 0x00397A90
		private static TCPProcessCmdResults ProcessGetSpecActDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SpecialActivityData SpecActData = null;
				SpecialActivity act = HuodongCachingMgr.GetSpecialActivity();
				if (null != act)
				{
					SpecActData = act.GetSpecialActivityDataForClient(client);
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<SpecialActivityData>(SpecActData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F28 RID: 16168 RVA: 0x00399A34 File Offset: 0x00397C34
		private static TCPProcessCmdResults ProcessFetchSpecActAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int actID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SpecialActivity act = HuodongCachingMgr.GetSpecialActivity();
				string strcmd;
				if (null == act)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3,
						roleID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int ErrCode = act.SpecActCheckCondition(client, actID, true);
				if (ErrCode != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						ErrCode,
						roleID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!act.HasEnoughBagSpaceForAwardGoods(client, actID))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-100,
						roleID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				ErrCode = act.SpecActGiveAward(client, actID);
				if (ErrCode != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						ErrCode,
						roleID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				strcmd = act.BuildFetchSpecActAwardCmd(client, ErrCode, actID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F29 RID: 16169 RVA: 0x00399DC0 File Offset: 0x00397FC0
		private static TCPProcessCmdResults ProcessGetSpecPriorityActXmlDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int clientVersion = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriXmlData jieriXmlData = Global.LoadSpecPriorityActXmlData();
				if (jieriXmlData.Version == clientVersion)
				{
					jieriXmlData = new JieriXmlData
					{
						XmlList = null,
						Version = jieriXmlData.Version
					};
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<JieriXmlData>(jieriXmlData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F2A RID: 16170 RVA: 0x00399FA0 File Offset: 0x003981A0
		private static TCPProcessCmdResults ProcessGetSpecPriorityActDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SpecPriorityActivityData SpecPActData = null;
				SpecPriorityActivity act = HuodongCachingMgr.GetSpecPriorityActivity();
				if (null != act)
				{
					SpecPActData = act.GetSpecPriorityActivityDataForClient(client);
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<SpecPriorityActivityData>(SpecPActData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F2B RID: 16171 RVA: 0x0039A144 File Offset: 0x00398344
		private static TCPProcessCmdResults ProcessFetchSpecPriorityActAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int tequanID = Convert.ToInt32(fields[1]);
				int actID = Convert.ToInt32(fields[2]);
				int purNum = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SpecPriorityActivity act = HuodongCachingMgr.GetSpecPriorityActivity();
				string strcmd;
				if (null == act)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-3,
						roleID,
						tequanID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int ErrCode = act.SpecActCheckCondition(client, tequanID, actID, purNum, true);
				if (ErrCode != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						ErrCode,
						roleID,
						tequanID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!act.HasEnoughBagSpaceForAwardGoods(client, tequanID, actID, purNum))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-100,
						roleID,
						tequanID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				ErrCode = act.SpecActGiveAward(client, tequanID, actID, purNum);
				if (ErrCode != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						ErrCode,
						roleID,
						tequanID,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				strcmd = act.BuildFetchSpecActAwardCmd(client, ErrCode, tequanID, actID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F2C RID: 16172 RVA: 0x0039A520 File Offset: 0x00398720
		private static TCPProcessCmdResults ProcessSpecPriorityActDonateCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int groupID = Convert.ToInt32(fields[1]);
				int useMoney = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SpecPriorityActivity act = HuodongCachingMgr.GetSpecPriorityActivity();
				string strcmd;
				if (null == act)
				{
					strcmd = string.Format("{0}:{1}", -3, groupID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int ret = act.Donate(client, groupID, useMoney);
				strcmd = string.Format("{0}:{1}", ret, groupID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F2D RID: 16173 RVA: 0x0039A740 File Offset: 0x00398940
		private static TCPProcessCmdResults ProcessQueryJieriVIPYouHuiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriVIPYouHuiActivity act = HuodongCachingMgr.GetJieriVIPYouHuiAct();
				if (null == act)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "|", nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string strcmd = act.BuildQueryVIPYouHuiActivityCmd(client);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F2E RID: 16174 RVA: 0x0039A910 File Offset: 0x00398B10
		private static TCPProcessCmdResults ProcessFetchJieriVIPYouHuiAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int actID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = "";
				JieriVIPYouHuiActivity act = HuodongCachingMgr.GetJieriVIPYouHuiAct();
				if (null == act)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-3,
						actID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				lock (act)
				{
					if (!act.CheckCondition(client, actID))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-12,
							actID,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!act.HasEnoughBagSpaceForAwardGoods(client, actID))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-100,
							actID,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!act.GiveAward(client, actID))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-2001,
							actID,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						0,
						actID,
						act.GetFullPurchase(client, actID),
						act.GetSinglePurchase(client, actID)
					});
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F2F RID: 16175 RVA: 0x0039ACF0 File Offset: 0x00398EF0
		private static TCPProcessCmdResults ProcessGetThemeXmlDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int clientVersion = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriXmlData jieriXmlData = Global.LoadThemeActXmlData();
				if (jieriXmlData.Version == clientVersion)
				{
					jieriXmlData = new JieriXmlData
					{
						XmlList = null,
						Version = jieriXmlData.Version
					};
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<JieriXmlData>(jieriXmlData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F30 RID: 16176 RVA: 0x0039AED0 File Offset: 0x003990D0
		private static TCPProcessCmdResults ProcessGetJieriXmlDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int clientVersion = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriXmlData jieriXmlData = Global.LoadJieriXmlData();
				if (jieriXmlData.Version == clientVersion)
				{
					jieriXmlData = new JieriXmlData
					{
						XmlList = null,
						Version = jieriXmlData.Version
					};
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<JieriXmlData>(jieriXmlData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F31 RID: 16177 RVA: 0x0039B0B0 File Offset: 0x003992B0
		private static TCPProcessCmdResults ProcessQueryJieriGiveKingInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieRiGiveKingActivity gkActivity = HuodongCachingMgr.GetJieriGiveKingActivity();
				byte[] rspData = (gkActivity != null) ? gkActivity.QueryActivityInfo(client) : null;
				if (rspData == null)
				{
					rspData = DataHelper.ObjectToBytes<JieriGiveKingData>(new JieriGiveKingData
					{
						MyData = new JieriGiveKingItemData
						{
							RoleID = client.ClientData.RoleID,
							Rolename = client.ClientData.RoleName,
							TotalGive = 0,
							Rank = -1,
							GetAwardTimes = 0,
							ZoneID = client.ClientData.ZoneID
						}
					});
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rspData, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F32 RID: 16178 RVA: 0x0039B2A8 File Offset: 0x003994A8
		private static TCPProcessCmdResults ProcessGetJieriGiveKingAward(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int awardid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieRiGiveKingActivity gkActivity = HuodongCachingMgr.GetJieriGiveKingActivity();
				if (gkActivity == null)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}", 2, awardid), nID);
				}
				else
				{
					string rsp = gkActivity.ProcRoleGetAward(client, awardid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
				}
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F33 RID: 16179 RVA: 0x0039B458 File Offset: 0x00399658
		private static TCPProcessCmdResults ProcessQueryJieriRecvKingInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieRiRecvKingActivity rkActivity = HuodongCachingMgr.GetJieriRecvKingActivity();
				byte[] rspData = (rkActivity != null) ? rkActivity.QueryActivityInfo(client) : null;
				if (rspData == null)
				{
					rspData = DataHelper.ObjectToBytes<JieriRecvKingData>(new JieriRecvKingData
					{
						MyData = new JieriRecvKingItemData
						{
							RoleID = client.ClientData.RoleID,
							Rolename = client.ClientData.RoleName,
							TotalRecv = 0,
							Rank = -1,
							GetAwardTimes = 0,
							ZoneID = client.ClientData.ZoneID
						}
					});
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rspData, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F34 RID: 16180 RVA: 0x0039B678 File Offset: 0x00399878
		private static TCPProcessCmdResults ProcessGetJieriRecvKingAward(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int awardid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieRiRecvKingActivity gkActivity = HuodongCachingMgr.GetJieriRecvKingActivity();
				if (gkActivity == null)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}", 2, awardid), nID);
				}
				else
				{
					string rsp = gkActivity.ProcRoleGetAward(client, awardid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
				}
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F35 RID: 16181 RVA: 0x0039B828 File Offset: 0x00399A28
		private static TCPProcessCmdResults ProcessQueryRoleJieriGiveInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriGiveActivity act = HuodongCachingMgr.GetJieriGiveActivity();
				string cmd = string.Empty;
				if (act == null)
				{
					cmd = "0:0:0";
				}
				else
				{
					cmd = act.QueryActInfo(client);
				}
				client.sendCmd(nID, cmd, false);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F36 RID: 16182 RVA: 0x0039B9F4 File Offset: 0x00399BF4
		private static TCPProcessCmdResults ProcessRoleGetJieriGiveAward(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleid = Convert.ToInt32(fields[0]);
				int awardid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleid))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleid), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriGiveActivity act = HuodongCachingMgr.GetJieriGiveActivity();
				if (act == null)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}", 1, awardid), nID);
				}
				else
				{
					string rsp = act.ProcRoleGetAward(client, awardid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
				}
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F37 RID: 16183 RVA: 0x0039BBE4 File Offset: 0x00399DE4
		private static TCPProcessCmdResults ProcessRoleJieriGiveToOther(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				string receiverRolename = fields[1];
				int goodsID = Convert.ToInt32(fields[2]);
				int goodsCnt = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriGiveActivity act = HuodongCachingMgr.GetJieriGiveActivity();
				if (act == null)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						1,
						0,
						0,
						0
					}), nID);
				}
				else
				{
					string rsp = act.ProcRoleGiveToOther(client, receiverRolename, goodsID, goodsCnt);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
				}
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F38 RID: 16184 RVA: 0x0039BE10 File Offset: 0x0039A010
		private static TCPProcessCmdResults ProcessRoleGetJieriRecvAward(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleid = Convert.ToInt32(fields[0]);
				int awardid = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleid))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleid), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriRecvActivity act = HuodongCachingMgr.GetJieriRecvActivity();
				if (act == null)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}", 1, awardid), nID);
				}
				else
				{
					string rsp = act.ProcRoleGetAward(client, awardid);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
				}
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F39 RID: 16185 RVA: 0x0039C000 File Offset: 0x0039A200
		private static TCPProcessCmdResults ProcessQueryRoleJieriRecvInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriRecvActivity act = HuodongCachingMgr.GetJieriRecvActivity();
				string cmd = string.Empty;
				if (act == null)
				{
					cmd = "0:0";
				}
				else
				{
					cmd = act.QueryActInfo(client);
				}
				client.sendCmd(nID, cmd, false);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F3A RID: 16186 RVA: 0x0039C1CC File Offset: 0x0039A3CC
		private static TCPProcessCmdResults ProcessSetFunctionOpen(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int bitIndex = Convert.ToInt32(fields[1]);
				int open = (Convert.ToInt32(fields[2]) == 1) ? 1 : 0;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (bitIndex >= 0 && bitIndex <= 62)
				{
					long oldSettings = Global.GetRoleParamsInt64FromDB(client, "SettingBitFlags");
					long oldSettings_bak = oldSettings;
					long newSettings = (open == 1) ? (oldSettings | 1L << bitIndex) : (oldSettings & (~(1L << bitIndex) & long.MaxValue));
					if (newSettings != oldSettings_bak)
					{
						Global.SaveRoleParamsInt64ValueToDB(client, "SettingBitFlags", newSettings, true);
					}
				}
				string rsp = string.Format("{0}", Global.GetRoleParamsInt64FromDB(client, "SettingBitFlags"));
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, rsp, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F3B RID: 16187 RVA: 0x0039C418 File Offset: 0x0039A618
		private static TCPProcessCmdResults ProcessGetJieriLianXuChargeAward(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int awardId = Convert.ToInt32(fields[1]);
				int lianXuDay = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriLianXuChargeActivity act = HuodongCachingMgr.GetJieriLianXuChargeActivity();
				int ec = (int)((act == null) ? JieriLianXuChargeErrorCode.ActivityNotOpen : act.HandleGetAward(client, awardId, lianXuDay));
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}:{1}:{2}", ec, awardId, lianXuDay), nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F3C RID: 16188 RVA: 0x0039C600 File Offset: 0x0039A800
		private static TCPProcessCmdResults ProcessQueryJieriLianXuChargeInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieriLianXuChargeActivity act = HuodongCachingMgr.GetJieriLianXuChargeActivity();
				if (act == null)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, string.Format("{0}", 2), nID);
				}
				else
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, act.QueryMyActInfo(client), nID);
				}
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F3D RID: 16189 RVA: 0x0039C7D8 File Offset: 0x0039A9D8
		private static TCPProcessCmdResults ProcessQueryThemeDaLiBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.ThemeDaLiBao, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F3E RID: 16190 RVA: 0x0039C968 File Offset: 0x0039AB68
		private static TCPProcessCmdResults ProcessQueryJieriDaLiBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriDaLiBao, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F3F RID: 16191 RVA: 0x0039CAF4 File Offset: 0x0039ACF4
		private static TCPProcessCmdResults ProcessQueryJieriDengLuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriDengLuHaoLi, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F40 RID: 16192 RVA: 0x0039CC80 File Offset: 0x0039AE80
		private static TCPProcessCmdResults ProcessQueryJieriVIPCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriVIP, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F41 RID: 16193 RVA: 0x0039CE0C File Offset: 0x0039B00C
		private static TCPProcessCmdResults ProcessQueryJieriCZSongCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriCZSong, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F42 RID: 16194 RVA: 0x0039CF98 File Offset: 0x0039B198
		private static TCPProcessCmdResults ProcessQueryJieriCZLeiJiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriLeiJiCZ, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F43 RID: 16195 RVA: 0x0039D124 File Offset: 0x0039B324
		private static TCPProcessCmdResults ProcessQueryJieriTotalConsumeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriTotalConsume, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F44 RID: 16196 RVA: 0x0039D2B0 File Offset: 0x0039B4B0
		private static TCPProcessCmdResults ProcessQueryJieRiMeiRiLeiChongCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int dayNum = Convert.ToInt32(fields[1]) * 1000;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieRiMeiRiLeiJi, client, dayNum), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F45 RID: 16197 RVA: 0x0039D450 File Offset: 0x0039B650
		private static TCPProcessCmdResults ProcessQueryThemeDuiHuanCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				ThemeDuiHuanActivity activity = HuodongCachingMgr.GetThemeDuiHuanActivity();
				if (null == activity)
				{
					LogManager.WriteLog(LogTypes.Error, "HuodongCachingMgr.GetThemeDuiHuanActivity()失败", null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				List<int> IndexList = activity.GetIndexAll();
				if (null == IndexList)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("activity.GetIndexByType失败", new object[0]), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string result = "";
				foreach (int item in IndexList)
				{
					result += item.ToString();
					result += ",";
					result += activity.GetThemeDHTodayLeftMergeNum(client, item).ToString();
					result += "|";
				}
				string strcmd = string.Format("{0}:{1}:{2}", 1, roleID, result);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F46 RID: 16198 RVA: 0x0039D730 File Offset: 0x0039B930
		private static TCPProcessCmdResults ProcessQueryJieriCZZiKaCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int type = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				JieRiZiKaLiaBaoActivity activity = HuodongCachingMgr.GetJieRiZiKaLiaBaoActivity();
				if (null == activity)
				{
					LogManager.WriteLog(LogTypes.Error, "HuodongCachingMgr.GetJieRiZiKaLiaBaoActivity()失败", null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				List<int> IndexList = activity.GetIndexByType(type);
				if (null == IndexList)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("activity.GetIndexByType失败 type=", type), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string result = "";
				foreach (int item in IndexList)
				{
					result += item.ToString();
					result += ",";
					result += HuodongCachingMgr.GetZiKaTodayLeftMergeNum(client, item).ToString();
					result += "|";
				}
				string strcmd = string.Format("{0}:{1}:{2}", 1, roleID, result);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F47 RID: 16199 RVA: 0x0039DA1C File Offset: 0x0039BC1C
		private static TCPProcessCmdResults ProcessQueryOneDollarBuyCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string cmd = "";
				OneDollarBuyActivity act = HuodongCachingMgr.GetOneDollarBuyActivity();
				if (null == act)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				cmd = act.BuildOneDollarBuyActInfoForClient(client);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F48 RID: 16200 RVA: 0x0039DBF0 File Offset: 0x0039BDF0
		private static TCPProcessCmdResults ProcessQueryThemeZhiGouCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				Dictionary<int, int> ZhiGouInfoDict = new Dictionary<int, int>();
				ThemeZhiGouActivity act = HuodongCachingMgr.GetThemeZhiGouActivity();
				if (null == act)
				{
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(ZhiGouInfoDict, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				ZhiGouInfoDict = act.BuildThemeZhiGouInfoForClient(client);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(ZhiGouInfoDict, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F49 RID: 16201 RVA: 0x0039DDC4 File Offset: 0x0039BFC4
		private static TCPProcessCmdResults ProcessExcuteJieriSuperInputCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string cmd = "";
				JieriSuperInputActivity act = HuodongCachingMgr.GetJieRiSuperInputActivity();
				if (null == act)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				cmd = act.ExecuteSuperInput(client);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F4A RID: 16202 RVA: 0x0039DF98 File Offset: 0x0039C198
		private static TCPProcessCmdResults ProcessQueryJieriSuperInputCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string cmd = "";
				JieriSuperInputActivity act = HuodongCachingMgr.GetJieRiSuperInputActivity();
				if (null == act)
				{
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				cmd = act.BuildSuperInputFanLiActInfoForClient(client);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F4B RID: 16203 RVA: 0x0039E16C File Offset: 0x0039C36C
		private static TCPProcessCmdResults ProcessQueryJieriCZQGCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				List<JieriCZQGData> list = null;
				JieRiCZQGActivity act = HuodongCachingMgr.GetJieRiCZQGActivity();
				if (null == act)
				{
					tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<JieriCZQGData>>(list, pool, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				list = act.BuildChongZhiQiangGouInfoForClient(client);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<JieriCZQGData>>(list, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F4C RID: 16204 RVA: 0x0039E33C File Offset: 0x0039C53C
		private static TCPProcessCmdResults ProcessQueryJieriXiaoFeiKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriPTXiaoFeiKing, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F4D RID: 16205 RVA: 0x0039E4C8 File Offset: 0x0039C6C8
		private static TCPProcessCmdResults ProcessQueryJieriCZKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.JieriPTCZKing, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F4E RID: 16206 RVA: 0x0039E654 File Offset: 0x0039C854
		private static TCPProcessCmdResults ProcessQueryYuanBaoCompleteTaskCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int npcID = Convert.ToInt32(fields[1]);
				int taskID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (TCPProcessCmdResults.RESULT_OK == Global.TakeNewTask(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, 125, client, roleID, taskID, npcID, out tcpOutPacket))
				{
					TaskData taskData = Global.GetTaskData(client, taskID);
					if (null == taskData)
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
					int needYuanBao = Math.Max(0, (int)GameManager.systemParamsList.GetParamValueIntByName("YuanBaoCompleteTask", -1));
					if (needYuanBao > 0)
					{
						SystemXmlItem systemTask = null;
						if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
						{
							int targetNum = systemTask.GetIntValue("TargetNum1", -1);
							int targetNum2 = systemTask.GetIntValue("TargetNum2", -1);
							if (taskData.DoingTaskVal1 >= targetNum && taskData.DoingTaskVal2 >= targetNum2)
							{
								return TCPProcessCmdResults.RESULT_OK;
							}
							if (!Global.CanCompleteTaskByGridNum(tcpMgr.MySocketListener, pool, client, taskID))
							{
								tcpOutPacket = DataHelper.ObjectToTCPOutPacket<SCCompTask>(new SCCompTask(roleID, npcID, taskID, -2), pool, 140);
								return TCPProcessCmdResults.RESULT_DATA;
							}
							if (!Global.CanCompleteTaskByBlessPoint(client, systemTask))
							{
								tcpOutPacket = DataHelper.ObjectToTCPOutPacket<SCCompTask>(new SCCompTask(roleID, npcID, taskID, -300), pool, 140);
								return TCPProcessCmdResults.RESULT_DATA;
							}
							if (client.ClientData.UserMoney < needYuanBao)
							{
								GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, GLang.GetLang(654, new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
							}
							else if (GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, needYuanBao, "快速完成任务2", true, true, false, DaiBiSySType.None))
							{
								string taskName = systemTask.GetStringValue("Title");
								ProcessTask.ProcessTaskValue(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, taskName, 1, targetNum);
								ProcessTask.ProcessTaskValue(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, taskName, 2, targetNum2);
								int isMainTask = (systemTask.GetIntValue("TaskClass", -1) == 0) ? 1 : 0;
								byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
								{
									roleID,
									npcID,
									taskID,
									taskData.DbID,
									isMainTask
								}));
								byte[] bytesData = null;
								if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, 140, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
								{
									LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", TCPGameServerCmds.CMD_SPR_COMPTASK), null, true);
									tcpOutPacket = DataHelper.ObjectToTCPOutPacket<SCCompTask>(new SCCompTask(roleID, npcID, taskID, -3), pool, 140);
									return TCPProcessCmdResults.RESULT_DATA;
								}
								int length = BitConverter.ToInt32(bytesData, 0);
								string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);
								string[] fieldsData = strData.Split(new char[]
								{
									':'
								});
								SCCompTask sCCompTask;
								if (fieldsData.Length < 3 || fieldsData[2] == "-1")
								{
									sCCompTask = new SCCompTask(roleID, npcID, taskID, -1);
								}
								else if (ProcessTask.Complete(tcpMgr.MySocketListener, pool, client, npcID, -1, taskID, taskData.DbID, false, 3.0, false))
								{
									if (isMainTask > 0 && taskID > client.ClientData.MainTaskID)
									{
										client.ClientData.MainTaskID = taskID;
										Global.AutoLearnSkills(client);
										GlobalNew.RefreshGongNeng(client);
									}
									sCCompTask = new SCCompTask(roleID, npcID, taskID, 0);
								}
								else
								{
									sCCompTask = new SCCompTask(roleID, npcID, taskID, -1);
								}
								tcpOutPacket = DataHelper.ObjectToTCPOutPacket<SCCompTask>(sCCompTask, pool, 140);
								return TCPProcessCmdResults.RESULT_DATA;
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F4F RID: 16207 RVA: 0x0039EBF0 File Offset: 0x0039CDF0
		private static TCPProcessCmdResults ProcessQueryHeFuDaLiBaoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F50 RID: 16208 RVA: 0x0039EC0C File Offset: 0x0039CE0C
		private static TCPProcessCmdResults ProcessQueryHeFuVIPCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F51 RID: 16209 RVA: 0x0039EC28 File Offset: 0x0039CE28
		private static TCPProcessCmdResults ProcessQueryHeFuCZSongCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F52 RID: 16210 RVA: 0x0039EC44 File Offset: 0x0039CE44
		private static TCPProcessCmdResults ProcessQueryHeFuPKKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F53 RID: 16211 RVA: 0x0039EC60 File Offset: 0x0039CE60
		private static TCPProcessCmdResults ProcessQueryHeFuWCKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F54 RID: 16212 RVA: 0x0039EC7C File Offset: 0x0039CE7C
		private static TCPProcessCmdResults ProcessQueryHeFuCZFanLiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F55 RID: 16213 RVA: 0x0039EC98 File Offset: 0x0039CE98
		private static TCPProcessCmdResults ProcessQueryXinCZFanLiCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, Global.GetActivityRequestCmdString(ActivityTypes.XinCZFanLi, client, 0), out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F56 RID: 16214 RVA: 0x0039EE24 File Offset: 0x0039D024
		private static TCPProcessCmdResults ProcessOneKeyQuickSaleOutCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int oType = Convert.ToInt32(fields[1]);
				string goodsDbIds = fields[2];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (oType == 5)
				{
					ZuoQiManager.getInstance().SaleMountProcess(client, roleID, goodsDbIds);
				}
				else
				{
					if (oType == 3)
					{
						return SaleDamons.SaleDamonsProcess(client, roleID, goodsDbIds);
					}
					if (oType == 7)
					{
						return RebornEquip.SaleRebornEquipProcess(client, roleID, goodsDbIds);
					}
					if (oType == 1)
					{
						int totalYinLiangPrice = 0;
						int totalTongQianPrice = 0;
						int totalZaiZao = 0;
						int totalJingYuan = 0;
						int totalCharm = 0;
						string[] idsList = goodsDbIds.Split(new char[]
						{
							','
						});
						int i = 0;
						while (i < idsList.Length)
						{
							int goodsDbID = Global.SafeConvertToInt32(idsList[i]);
							GoodsData goodsData = Global.GetGoodsByDbID(client, goodsDbID);
							if (goodsData != null && goodsData.Site == 0 && goodsData.Using <= 0)
							{
								int goodsPrice = Global.GetGoodsDataPrice(goodsData);
								int zaiZao = Global.GetGoodsDataZaiZao(goodsData);
								int jingYuan = Global.GetGoodsDataJingYuan(goodsData);
								int charmPoint = OrnamentManager.getInstance().GetOrnamentCharmPoint(goodsData);
								string modGoodsCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
								{
									client.ClientData.RoleID,
									4,
									goodsData.Id,
									goodsData.GoodsID,
									0,
									goodsData.Site,
									goodsData.GCount,
									goodsData.BagIndex,
									""
								});
								if (TCPProcessCmdResults.RESULT_OK == Global.ModifyGoodsByCmdParams(client, modGoodsCmd, "客户端修改", null))
								{
									if (goodsData.Binding > 0)
									{
										totalTongQianPrice += goodsPrice;
									}
									else
									{
										totalYinLiangPrice += goodsPrice;
									}
									if (zaiZao > 0)
									{
										totalZaiZao += zaiZao;
									}
									if (jingYuan > 0)
									{
										totalJingYuan += jingYuan;
									}
									if (charmPoint > 0)
									{
										totalCharm += charmPoint;
									}
								}
							}
							IL_345:
							i++;
							continue;
							goto IL_345;
						}
						if (totalCharm > 0)
						{
							GameManager.ClientMgr.ModifyOrnamentCharmPointValue(client, totalCharm, "一键出售或者回收", true, true, false);
						}
						if (totalZaiZao > 0)
						{
							GameManager.ClientMgr.ModifyZaiZaoValue(client, totalZaiZao, "一键出售或者回收", true, true, false);
						}
						if (totalJingYuan > 0)
						{
							SevenDayGoalEventObject evSale = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.RecoverMoJing);
							evSale.Arg1 = totalJingYuan;
							GlobalEventSource.getInstance().fireEvent(evSale);
							GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, totalJingYuan, "一键出售或者回收", true, true, false);
						}
						GameManager.ClientMgr.AddUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, totalYinLiangPrice, "一键出售或者回收", false);
						GameManager.ClientMgr.AddMoney1(tcpMgr.MySocketListener, tcpClientPool, pool, client, totalTongQianPrice, "一键出售或者回收", true);
						if (totalYinLiangPrice > 0 && totalTongQianPrice > 0)
						{
							GameManager.LuaMgr.Hot(client, StringUtil.substitute(GLang.GetLang(655, new object[0]), new object[]
							{
								totalYinLiangPrice,
								totalTongQianPrice
							}), 0);
						}
						else if (totalYinLiangPrice > 0)
						{
							GameManager.LuaMgr.Hot(client, StringUtil.substitute(GLang.GetLang(656, new object[0]), new object[]
							{
								totalYinLiangPrice
							}), 0);
						}
						else if (totalTongQianPrice > 0)
						{
							GameManager.LuaMgr.Hot(client, StringUtil.substitute(GLang.GetLang(657, new object[0]), new object[]
							{
								totalTongQianPrice
							}), 0);
						}
					}
					else if (oType == 2)
					{
						int totalJingYuan = 0;
						int totalZaiZao = 0;
						int totalCharm = 0;
						string[] idsList = goodsDbIds.Split(new char[]
						{
							','
						});
						int i = 0;
						while (i < idsList.Length)
						{
							int goodsDbID = Global.SafeConvertToInt32(idsList[i]);
							GoodsData goodsData = Global.GetGoodsByDbID(client, goodsDbID);
							if (goodsData != null && goodsData.Site == 0 && goodsData.Using <= 0)
							{
								int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
								SystemXmlItem xmlItem = null;
								if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out xmlItem) && null != xmlItem)
								{
									double nModulus = 1.0;
									if (goodsData.ExcellenceInfo != 0)
									{
										int nCount = Global.GetEquipExcellencePropNum(goodsData);
										if (nCount != 0)
										{
											double[] nValue = GameManager.systemParamsList.GetParamValueDoubleArrayByName("ZhuoYueHuiShouXiShu", ',');
											if (nValue != null && nValue.Length >= nCount)
											{
												nModulus = nValue[nCount - 1];
											}
										}
									}
									int nCanExchangedJingYuan = (int)((double)xmlItem.GetIntValue("ChangeJinYuan", -1) * nModulus);
									int nZaiZao = 0;
									if (xmlItem.GetIntValue("SuitID", -1) >= 10)
									{
										if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.Artifact, false))
										{
											goto IL_843;
										}
										nZaiZao = xmlItem.GetIntValue("ChangeZaiZao", -1);
										if (nZaiZao > 0)
										{
											int excellentCount = Global.GetEquipExcellencePropNum(goodsData);
											if (excellentCount > 0)
											{
												int[] rates = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuoYueHuiShouZaiZaoXiShu", ',');
												nZaiZao *= rates[excellentCount - 1];
											}
										}
									}
									int nCharmPoint = OrnamentManager.getInstance().GetOrnamentCharmPoint(goodsData);
									if (category != 23 || OrnamentManager.getInstance().OrnamentCanSaleBack(client, goodsData.GoodsID))
									{
										if (nCanExchangedJingYuan > 0 || nZaiZao > 0 || nCharmPoint > 0)
										{
											string modGoodsCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
											{
												client.ClientData.RoleID,
												4,
												goodsData.Id,
												goodsData.GoodsID,
												0,
												goodsData.Site,
												goodsData.GCount,
												goodsData.BagIndex,
												""
											});
											int _gccount = goodsData.GCount;
											if (TCPProcessCmdResults.RESULT_OK == Global.ModifyGoodsByCmdParams(client, modGoodsCmd, "客户端修改", null))
											{
												totalJingYuan += nCanExchangedJingYuan;
												totalZaiZao += nZaiZao;
												totalCharm += nCharmPoint;
												SevenDayGoalEventObject evObj = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.RecoverEquipBlueUp);
												evObj.Arg1 = goodsData.GoodsID;
												evObj.Arg2 = _gccount;
												evObj.Arg3 = Global.GetEquipExcellencePropNum(goodsData);
												GlobalEventSource.getInstance().fireEvent(evObj);
											}
										}
									}
								}
							}
							IL_843:
							i++;
							continue;
							goto IL_843;
						}
						if (totalJingYuan > 0)
						{
							SevenDayGoalEventObject evSaleBack = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.RecoverMoJing);
							evSaleBack.Arg1 = totalJingYuan;
							GlobalEventSource.getInstance().fireEvent(evSaleBack);
							GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, totalJingYuan, "一键出售或者回收", true, true, false);
						}
						if (totalZaiZao > 0)
						{
							GameManager.ClientMgr.ModifyZaiZaoValue(client, totalZaiZao, "一键出售或者回收", true, true, false);
						}
						if (totalCharm > 0)
						{
							GameManager.ClientMgr.ModifyOrnamentCharmPointValue(client, totalCharm, "一键出售或者回收", true, true, false);
						}
					}
					else
					{
						if (oType == 4)
						{
							return SaleDamons.SaleStoreDamonsProcess(client, roleID, goodsDbIds);
						}
						if (oType == 6)
						{
							return ZuoQiManager.getInstance().SaleStoreMountProcess(client, roleID, goodsDbIds);
						}
						if (oType == 8)
						{
							return RebornEquip.SaleStoreRebornEquipProcess(client, roleID, goodsDbIds);
						}
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F57 RID: 16215 RVA: 0x0039F7E4 File Offset: 0x0039D9E4
		private static TCPProcessCmdResults ProcessSprActivateNextLevelZhanHunCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int curZhanHunLevel = GameManager.ClientMgr.GetZhanHunLevelValue(client);
				int nextZhanHunLevel = curZhanHunLevel + 1;
				int[] ZhanHunBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanhunBufferGoodsIDs", ',');
				string strcmd;
				if (nextZhanHunLevel > ZhanHunBufferGoods.Length)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						curZhanHunLevel,
						nextZhanHunLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem ZhanHunlXmlItem = null;
				if (!GameManager.SystemZhanHunLevel.SystemXmlItemDict.TryGetValue(nextZhanHunLevel, out ZhanHunlXmlItem) || null == ZhanHunlXmlItem)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-2,
						roleID,
						curZhanHunLevel,
						nextZhanHunLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needRoleLevel = ZhanHunlXmlItem.GetIntValue("LevelLimit", -1);
				int needZhanHun = ZhanHunlXmlItem.GetIntValue("ZhanHun", -1);
				if (needRoleLevel > client.ClientData.Level)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-3,
						roleID,
						curZhanHunLevel,
						nextZhanHunLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int curRoleZhanHun = GameManager.ClientMgr.GetZhanHunValue(client);
				if (curRoleZhanHun < needZhanHun)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-4,
						roleID,
						curZhanHunLevel,
						nextZhanHunLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.ModifyZhanHunValue(client, -needZhanHun, true, true);
				GameManager.ClientMgr.ModifyZhanHunLevelValue(client, 1, true, true);
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					1,
					roleID,
					curZhanHunLevel,
					nextZhanHunLevel
				});
				Global.BroadcastClientChuanQiZhanHun(client, nextZhanHunLevel);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F58 RID: 16216 RVA: 0x0039FBD4 File Offset: 0x0039DDD4
		private static TCPProcessCmdResults ProcessSprActivateNextLevelRongYuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int curRongYuLevel = GameManager.ClientMgr.GetRongYuLevelValue(client);
				int nextRongYuLevel = curRongYuLevel + 1;
				int[] RongYuBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("RongyaoBufferGoodsIDs", ',');
				string strcmd;
				if (nextRongYuLevel > RongYuBufferGoods.Length)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						curRongYuLevel,
						nextRongYuLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem RongYulXmlItem = null;
				if (!GameManager.SystemRongYuLevel.SystemXmlItemDict.TryGetValue(nextRongYuLevel, out RongYulXmlItem) || null == RongYulXmlItem)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-2,
						roleID,
						curRongYuLevel,
						nextRongYuLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needRoleLevel = RongYulXmlItem.GetIntValue("LevelLimit", -1);
				int needRongYu = RongYulXmlItem.GetIntValue("RongYu", -1);
				if (needRoleLevel > client.ClientData.Level)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-3,
						roleID,
						curRongYuLevel,
						nextRongYuLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int curRoleRongYu = GameManager.ClientMgr.GetRongYuValue(client);
				if (curRoleRongYu < needRongYu)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-4,
						roleID,
						curRongYuLevel,
						nextRongYuLevel
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.ModifyRongYuValue(client, -needRongYu, true, true);
				GameManager.ClientMgr.ModifyRongYuLevelValue(client, 1, true, true);
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					1,
					roleID,
					curRongYuLevel,
					nextRongYuLevel
				});
				Global.BroadcastClientChuanQiRongYu(client, nextRongYuLevel);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F59 RID: 16217 RVA: 0x0039FFC4 File Offset: 0x0039E1C4
		private static TCPProcessCmdResults ProcessSprActivateRongYuBufferCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int curRongYuLevel = GameManager.ClientMgr.GetRongYuLevelValue(client);
				string strcmd;
				if (curRongYuLevel < 1)
				{
					strcmd = string.Format("{0}:{1}", -1, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem RongYulXmlItem = null;
				if (!GameManager.SystemRongYuLevel.SystemXmlItemDict.TryGetValue(curRongYuLevel, out RongYulXmlItem) || null == RongYulXmlItem)
				{
					strcmd = string.Format("{0}:{1}", -2, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needRongYu = RongYulXmlItem.GetIntValue("KaiQiXiaoHao", -1);
				int curRoleRongYu = GameManager.ClientMgr.GetRongYuValue(client);
				if (curRoleRongYu < needRongYu)
				{
					strcmd = string.Format("{0}:{1}", -4, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.ModifyRongYuValue(client, -needRongYu, true, true);
				Global.ActiveRongYuBuffer(client, true);
				strcmd = string.Format("{0}:{1}", 1, roleID);
				Global.BroadcastClientChuanQiRongYu(client, curRongYuLevel);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F5A RID: 16218 RVA: 0x003A0270 File Offset: 0x0039E470
		private static TCPProcessCmdResults ProcessSprLianLuJingLianCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int id2 = Convert.ToInt32(fields[2]);
				int id3 = Convert.ToInt32(fields[3]);
				int luckyGoodsID = Convert.ToInt32(fields[4]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData goodsData2 = Global.GetGoodsByDbID(client, id2);
				if (null == goodsData2)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-11,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData goodsData3 = Global.GetGoodsByDbID(client, id3);
				if (null == goodsData3)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-111,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int shouShiSuitID = Global.GetGoodsShouShiSuitID(goodsData.GoodsID);
				int shouShiSuitID2 = Global.GetGoodsShouShiSuitID(goodsData2.GoodsID);
				int shouShiSuitID3 = Global.GetGoodsShouShiSuitID(goodsData3.GoodsID);
				if (shouShiSuitID != shouShiSuitID2 || shouShiSuitID2 != shouShiSuitID3)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-222,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int qualityID = Global.GetGoodsQualityID(goodsData.GoodsID);
				int qualityID2 = Global.GetGoodsQualityID(goodsData2.GoodsID);
				int qualityID3 = Global.GetGoodsQualityID(goodsData3.GoodsID);
				if (qualityID != qualityID2 || qualityID2 != qualityID3)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-333,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (qualityID < 0 || qualityID > 3)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-444,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (luckyGoodsID > 0 && Global.GetLuckyGoodsIndex(luckyGoodsID) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-555,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemGoodsItem = null;
				if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoodsItem))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-666,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem qualityUpXmlNode = Global.GetQualityUpXmlNode(systemGoodsItem.GetIntValue("Categoriy", -1), systemGoodsItem.GetIntValue("ShouShiSuitID", -1), systemGoodsItem.GetIntValue("QualityID", -1) + 1);
				if (null == qualityUpXmlNode)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-777,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int jingLianRockGoodsID = qualityUpXmlNode.GetIntValue("NeedGoodsID", -1);
				int jingLianRockGoodsNum = qualityUpXmlNode.GetIntValue("GoodsNum", -1);
				int money = qualityUpXmlNode.GetIntValue("Money", -1);
				int jingYuan = qualityUpXmlNode.GetIntValue("JingYuan", -1);
				int succeed = qualityUpXmlNode.GetIntValue("Succeed", -1);
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-888,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData2.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-999,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData3.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1111,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-2222,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData2.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3333,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData3.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-4444,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int totalNum = Global.GetTotalGoodsCountByID(client, jingLianRockGoodsID);
				if (totalNum < jingLianRockGoodsNum)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-2,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (money > Global.GetTotalBindTongQianAndTongQianVal(client))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (jingYuan > 0)
				{
					if (jingYuan > GameManager.ClientMgr.GetTianDiJingYuanValue(client))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-33,
							roleID,
							id,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				SystemXmlItem goodsXmlNodeByQualityUp = Global.GetGoodsXmlNodeByQualityUp(systemGoodsItem.GetIntValue("Categoriy", -1), systemGoodsItem.GetIntValue("ShouShiSuitID", -1), systemGoodsItem.GetIntValue("QualityID", -1) + 1, Global.GetMainOccupationByGoodsID(goodsData.GoodsID));
				if (null == goodsXmlNodeByQualityUp)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-34,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.SubBindTongQianAndTongQian(client, money, "炼炉精炼"))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-5,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (jingYuan > 0)
				{
					GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, jingYuan, "炼炉精炼", true, true, false);
				}
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, jingLianRockGoodsID, jingLianRockGoodsNum, false, out usedBinding, out usedTimeLimited, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-100,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int luckValue = 0;
				if (luckyGoodsID > 0)
				{
					totalNum = Global.GetTotalGoodsCountByID(client, luckyGoodsID);
					usedBinding = false;
					if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, luckyGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-102,
							roleID,
							id,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					luckValue = Global.GetLuckyValue(luckyGoodsID);
				}
				succeed += luckValue;
				int rndNum = Global.GetRandomNumber(0, 101);
				if (rndNum > succeed)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-5555,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-5555,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData2.Id, false, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-6666,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData3.Id, false, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-7777,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int newGoodsID = goodsXmlNodeByQualityUp.GetIntValue("ID", -1);
				if (Global.AddGoodsDBCommand(pool, client, newGoodsID, 1, 0, "", goodsData.Forge_level, 0, 0, "", false, 1, "传奇精炼合成", "1900-01-01 12:00:00", 0, goodsData.BornIndex, 0, 0, 0, 0, 0, null, null, 0, true) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-6666,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (systemGoodsItem.GetIntValue("QualityID", -1) >= 1)
				{
					Global.BroadcastJingLianOk(client, newGoodsID);
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					0,
					roleID,
					id,
					0,
					0
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F5B RID: 16219 RVA: 0x003A1318 File Offset: 0x0039F518
		private static TCPProcessCmdResults ProcessSprZJDJiFenCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.ClientMgr.NotifyZaJinDanKAwardDailyData(client);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F5C RID: 16220 RVA: 0x003A1468 File Offset: 0x0039F668
		private static TCPProcessCmdResults ProcessSprFetchZJDJiFenAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int awardNo = Convert.ToInt32(fields[1]);
				int ret = Global.CanGiveAwardForZaJinDanJifen(client, awardNo);
				string strcmd;
				if (ret < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", ret, roleID, awardNo);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needBagSpaceNum = Global.GetZaJinDanAwardGoodsNum(awardNo);
				if (needBagSpaceNum > 0 && !Global.CanAddGoodsNum(client, needBagSpaceNum))
				{
					strcmd = string.Format("{0}:{1}:{2}", -125, roleID, awardNo);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.UpdateZaJinDanDailyJiFenData(client, awardNo))
				{
					strcmd = string.Format("{0}:{1}:{2}", -135, roleID, awardNo);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.GiveZaJinDanAwardForDailyJiFen(client, awardNo))
				{
					strcmd = string.Format("{0}:{1}:{2}", -145, roleID, awardNo);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				strcmd = string.Format("1:{0}:{1}", roleID, awardNo);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F5D RID: 16221 RVA: 0x003A1734 File Offset: 0x0039F934
		private static TCPProcessCmdResults ProcessSprQueryActivityInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nXingYunChouJiangYB = (int)GameManager.systemParamsList.GetParamValueIntByName("ChongzhiNumByXinyunDazhuanpan", -1);
				if (nXingYunChouJiangYB <= 0)
				{
					string strcmd = string.Format("{0}:{1}", -110, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string[] dbFields = Global.ExecuteDBCmd(nID, string.Format("{0}", roleID), client.ServerId);
				JiQingHuiKuiData JiQingHuiKuiRetData = new JiQingHuiKuiData();
				JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota = new List<int>();
				JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota.Add(Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ChongJiLingQuShenZhuang1")));
				JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota.Add(Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ChongJiLingQuShenZhuang2")));
				JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota.Add(Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ChongJiLingQuShenZhuang3")));
				JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota.Add(Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ChongJiLingQuShenZhuang4")));
				JiQingHuiKuiRetData.ChongJiQingQuShenZhuangQuota.Add(Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ChongJiLingQuShenZhuang5")));
				JiQingHuiKuiRetData.ShenZhuangHuiZengQuoto = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ShenZhuangHuiKuiGift"));
				int nIputYuanBao = Global.SafeConvertToInt32(dbFields[0]);
				int nCanPlayCount = nIputYuanBao / nXingYunChouJiangYB;
				int nhasPlaytimes = Global.SafeConvertToInt32(dbFields[1]);
				JiQingHuiKuiRetData.XingYunChouJiangCount = nCanPlayCount - nhasPlaytimes;
				JiQingHuiKuiRetData.TodayYuanBao = Global.SafeConvertToInt32(dbFields[2]);
				JiQingHuiKuiRetData.TodayYuanBaoState = 0;
				for (int i = 1; i <= 3; i++)
				{
					if (!Global.CanGetDayChongZhiDaLi(client, i))
					{
						JiQingHuiKuiRetData.TodayYuanBaoState |= Global.GetBitValue(i);
					}
				}
				for (int i = 1; i <= 5; i++)
				{
					if (!Global.CanGetChongJiLingQuShenZhuang(client, i))
					{
						JiQingHuiKuiRetData.ChongJiLingQuShenZhuangState |= Global.GetBitValue(i);
					}
				}
				JiQingHuiKuiRetData.XingYunChouJiangYuanBao = nIputYuanBao;
				if (Global.GetShenZhuangHuiKuiStatus(client) == 2)
				{
					JiQingHuiKuiRetData.ShenZhuangHuiZengState |= Global.GetBitValue(1);
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<JiQingHuiKuiData>(JiQingHuiKuiRetData, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F5E RID: 16222 RVA: 0x003A1B08 File Offset: 0x0039FD08
		private static TCPProcessCmdResults ProcessSprXingYunChouJiangCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.JinDanGoodsDataList != null && Global.GetJinDanBagCapacity(client) - client.ClientData.JinDanGoodsDataList.Count < 1)
				{
					strcmd = string.Format("{0}:{1}", -20, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nType = 1;
				int nYuanBaoValue = (int)GameManager.systemParamsList.GetParamValueIntByName("ChongzhiNumByXinyunDazhuanpan", -1);
				string sFrom = GameManager.GameConfigMgr.GetGameConifgItem("kaifutime");
				DateTime tStartTime = new DateTime(2000, 1, 1, 0, 0, 0);
				DateTime.TryParse(sFrom, out tStartTime);
				string sEnd = Global.GetAddDaysDataTime(tStartTime, 3, true).ToString("yyyy-MM-dd HH:mm:ss");
				string[] sFields = Global.GetXingYunChouJiangInfoUserID(client, nType, nYuanBaoValue, sFrom.Replace(":", "$"), sEnd.Replace(":", "$"));
				int nTotalTime = Convert.ToInt32(sFields[1]);
				int nHasPlayTime = Convert.ToInt32(sFields[2]);
				int nYuanBao = Convert.ToInt32(sFields[3]);
				int nCount = nTotalTime - nHasPlayTime;
				if (nCount <= 0)
				{
					strcmd = string.Format("{0}:{1}", -100, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Dictionary<int, SystemXmlItem> SystemXmlItemDic = GameManager.systemXingYunChouJiangMgr.SystemXmlItemDict;
				string strRecord;
				string gainString = QianKunManager.ProcessRandomWaBaoByZaDan(client, SystemXmlItemDic, 2, out strRecord, 0, false);
				string[] sFields2 = Global.CompleteXingYunChouJiang(client, 1, nHasPlayTime, "", "");
				int nRet = Convert.ToInt32(sFields2[0]);
				if (nRet == 1)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						1,
						roleID,
						nCount - 1,
						nYuanBao
					});
				}
				else
				{
					strcmd = string.Format("{0}:{1}::", -1, roleID);
					LogManager.WriteLog(LogTypes.Error, string.Format("幸运抽奖失败--DB返回值为{0}, Client={1}", nRet, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F5F RID: 16223 RVA: 0x003A1E9C File Offset: 0x003A009C
		private static TCPProcessCmdResults ProcessSpriteExecuteCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (client.ClientData.JinDanGoodsDataList != null && Global.GetJinDanBagCapacity(client) - client.ClientData.JinDanGoodsDataList.Count < 1)
				{
					strcmd = string.Format("{0}:{1}", -20, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Activity instActivity = Global.GetActivity(ActivityTypes.YuDuZhuanPanChouJiang);
				int nYuanBaoValue = (int)GameManager.systemParamsList.GetParamValueIntByName("ChongzhiNumByYueduDazhuanpan", -1);
				string[] sFields = Global.GetXingYunChouJiangInfoUserID(client, 2, nYuanBaoValue, instActivity.FromDate.Replace(":", "$"), instActivity.ToDate.Replace(":", "$"));
				int nTotalTime = Convert.ToInt32(sFields[1]);
				int nHasPlayTime = Convert.ToInt32(sFields[2]);
				int nYuanBao = Convert.ToInt32(sFields[3]);
				int nCount = nTotalTime - nHasPlayTime;
				if (nCount <= 0)
				{
					strcmd = string.Format("{0}:{1}", -100, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string preString = string.Format("{0}_{1}_{2}", roleID, client.ClientData.RoleName, client.ClientData.ZoneID);
				StringBuilder strBuilder = new StringBuilder();
				string strRecord;
				string gainString = QianKunManager.ProcessRandomWaBaoByZaDan(client, GameManager.systemYueDuZhuanPanChouJiangMgr.SystemXmlItemDict, 3, out strRecord, 0, false);
				if (strRecord.Length > 0)
				{
					if (strBuilder.Length > 0)
					{
						strBuilder.Append(";");
					}
					strBuilder.Append(string.Format("{0}_{1}", preString, strRecord));
				}
				if (strBuilder.Length > 0)
				{
					GameManager.DBCmdMgr.AddDBCmd(10125, string.Format("{0}", strBuilder.ToString()), null, client.ServerId);
				}
				string[] sFields2 = Global.CompleteXingYunChouJiang(client, 2, nHasPlayTime, instActivity.FromDate.Replace(":", "$"), instActivity.ToDate.Replace(":", "$"));
				int nRet = Convert.ToInt32(sFields2[0]);
				if (nRet == 1)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						1,
						roleID,
						nCount - 1,
						nYuanBao
					});
				}
				else
				{
					strcmd = string.Format("{0}:{1}::", -1, roleID);
					LogManager.WriteLog(LogTypes.Error, string.Format("月度抽奖失败--DB返回值为{0}, Client={1}", nRet, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F60 RID: 16224 RVA: 0x003A22CC File Offset: 0x003A04CC
		private static TCPProcessCmdResults ProcessQueryYueDuChouJiangHistoryCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int param = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (param >= 0 && param != roleID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("试图查询别人的砸金蛋历史信息, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F61 RID: 16225 RVA: 0x003A248C File Offset: 0x003A068C
		private static TCPProcessCmdResults ProcessQueryYueDuChouJiangInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				Activity instActivity = Global.GetActivity(ActivityTypes.YuDuZhuanPanChouJiang);
				int nYuanBaoValue = (int)GameManager.systemParamsList.GetParamValueIntByName("ChongzhiNumByYueduDazhuanpan", -1);
				string[] sFields = Global.GetXingYunChouJiangInfoUserID(client, 2, nYuanBaoValue, instActivity.FromDate.Replace(":", "$"), instActivity.ToDate.Replace(":", "$"));
				int nTotalTime = Convert.ToInt32(sFields[1]);
				int nHasPlayTime = Convert.ToInt32(sFields[2]);
				int nYuanBao = Convert.ToInt32(sFields[3]);
				int nCount = nTotalTime - nHasPlayTime;
				if (nCount < 0)
				{
					nCount = 0;
				}
				string strcmd = string.Format("{0}:{1}:{2}", roleID, nCount, nYuanBao);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F62 RID: 16226 RVA: 0x003A26AC File Offset: 0x003A08AC
		private static TCPProcessCmdResults ProcessExecuteHunQiExchangeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-2,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-3,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				int minPercent = (int)GameManager.systemParamsList.GetParamValueIntByName("HuiZhangExchange", -1);
				if (minPercent <= 0 || minPercent > 100)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-41,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem xmlItem = null;
				if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out xmlItem) || null == xmlItem)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-5,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nZhanHunPrice = xmlItem.GetIntValue("ZhanHunPrice", -1);
				if (nZhanHunPrice <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-6,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsData, 1, false, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-8,
						roleID,
						goodsData.Id,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nCanExchangedZhanHunZhi = nZhanHunPrice * Global.GetRandomNumber(minPercent, 101) / 100;
				nCanExchangedZhanHunZhi = Math.Max(1, nCanExchangedZhanHunZhi);
				GameManager.ClientMgr.ModifyZhanHunValue(client, nCanExchangedZhanHunZhi, true, true);
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					1,
					roleID,
					goodsData.Id,
					nCanExchangedZhanHunZhi
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F63 RID: 16227 RVA: 0x003A2C0C File Offset: 0x003A0E0C
		private static TCPProcessCmdResults ProcessExecuteChangeOccupationCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int[] nValue = GameManager.systemParamsList.GetParamValueIntArrayByName("OccupMaxValue", ',');
				int nOcc = Global.CalcOriginalOccupationID(client);
				string strcmd;
				if (client.ClientData.Occupation >= nValue[nOcc])
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-12,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nAfterOccuID = Global.CalcChangeOccupationID(client);
				ChangeOccupInfo temChagOccInfo = null;
				temChagOccInfo = Data.ChangeOccupInfoList[nAfterOccuID];
				if (temChagOccInfo == null)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-11,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nLev = client.ClientData.Level;
				if (nLev < temChagOccInfo.NeedLevel)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.SubBindTongQianAndTongQian(client, temChagOccInfo.NeedMoney, "转职"))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-2,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (temChagOccInfo.NeedGoodsDataList != null)
				{
					for (int i = 0; i < temChagOccInfo.NeedGoodsDataList.Count; i++)
					{
						GoodsData goodsData = Global.GetGoodsByID(client, temChagOccInfo.NeedGoodsDataList[i].GoodsID);
						if (null == goodsData)
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
							{
								-3,
								roleID,
								0,
								0
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						if (goodsData.GCount < temChagOccInfo.NeedGoodsDataList[i].GCount)
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
							{
								-4,
								roleID,
								0,
								0
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					for (int i = 0; i < temChagOccInfo.NeedGoodsDataList.Count; i++)
					{
						bool usedBinding = false;
						bool usedTimeLimited = false;
						if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, temChagOccInfo.NeedGoodsDataList[i].GoodsID, temChagOccInfo.NeedGoodsDataList[i].GCount, false, out usedBinding, out usedTimeLimited, true))
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
							{
								-3,
								roleID,
								0,
								0
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
				}
				byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}", roleID, nAfterOccuID));
				byte[] bytesData = null;
				if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, 10126, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-100,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int length = BitConverter.ToInt32(bytesData, 0);
				string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);
				string[] fieldsData = strData.Split(new char[]
				{
					':'
				});
				if (fieldsData[1] == "-1")
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("转生时 DBServer发生错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-100,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				client.ClientData.Occupation = nAfterOccuID;
				int nNewPoint;
				lock (client.ClientData.PropPointMutex)
				{
					int nOldPoint = Global.GetRoleParamsInt32FromDB(client, "TotalPropPoint");
					nNewPoint = nOldPoint + temChagOccInfo.AwardPropPoint;
					Global.SaveRoleParamsInt32ValueToDB(client, "TotalPropPoint", nNewPoint, true);
				}
				if (temChagOccInfo.AwardGoodsDataList != null)
				{
					for (int i = 0; i < temChagOccInfo.AwardGoodsDataList.Count; i++)
					{
						Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, temChagOccInfo.AwardGoodsDataList[i].GoodsID, temChagOccInfo.AwardGoodsDataList[i].GCount, 0, "", 0, 1, 0, "", true, 1, "转职奖励物品", "1900-01-01 12:00:00", 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
					}
				}
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					1,
					roleID,
					nAfterOccuID,
					nNewPoint
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F64 RID: 16228 RVA: 0x003A345C File Offset: 0x003A165C
		private static TCPProcessCmdResults ProcessExecuteChangeLifeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nValue = (int)GameManager.systemParamsList.GetParamValueIntByName("ChangeLifeMaxValue", -1);
				string strcmd;
				if (client.ClientData.ChangeLifeCount >= nValue)
				{
					strcmd = string.Format("{0}:{1}:{2}", -12, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.HideGM > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -12, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				long oldYinLiang = (long)client.ClientData.YinLiang;
				long oldMoney = (long)client.ClientData.Money1;
				int oldNum = client.ClientData.ChangeLifeCount;
				int nChangeCount = client.ClientData.ChangeLifeCount + 1;
				Dictionary<int, ChangeLifeDataInfo> tmpDic = new Dictionary<int, ChangeLifeDataInfo>();
				if (!GameManager.ChangeLifeMgr.m_ChangeLifeInfoList.TryGetValue(client.ClientData.Occupation, out tmpDic) || tmpDic == null)
				{
					strcmd = string.Format("{0}:{1}:{2}", -30, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				ChangeLifeDataInfo temChagLifeInfo = new ChangeLifeDataInfo();
				if (!tmpDic.TryGetValue(nChangeCount, out temChagLifeInfo) || temChagLifeInfo == null)
				{
					strcmd = string.Format("{0}:{1}:{2}", -30, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nLev = client.ClientData.Level;
				if (nLev < temChagLifeInfo.NeedLevel)
				{
					strcmd = string.Format("{0}:{1}:{2}", -1, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.Money1 + client.ClientData.YinLiang < temChagLifeInfo.NeedMoney)
				{
					strcmd = string.Format("{0}:{1}:{2}", -2, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.SubBindTongQianAndTongQian(client, temChagLifeInfo.NeedMoney, "转生"))
				{
					strcmd = string.Format("{0}:{1}:{2}", -2, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string resList = EventLogManager.NewResPropString(ResLogType.SubJinbi, new object[]
				{
					-temChagLifeInfo.NeedMoney,
					oldYinLiang,
					client.ClientData.YinLiang,
					oldMoney,
					client.ClientData.Money1
				});
				int nHaveMoJing = GameManager.ClientMgr.GetTianDiJingYuanValue(client);
				if (nHaveMoJing < temChagLifeInfo.NeedMoJing)
				{
					strcmd = string.Format("{0}:{1}:{2}", -20, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, -temChagLifeInfo.NeedMoJing, "转生", true, true, false);
				int newRonglian = GameManager.ClientMgr.GetTianDiJingYuanValue(client);
				resList += EventLogManager.AddResPropString(ResLogType.RongLianZhi, new object[]
				{
					-temChagLifeInfo.NeedMoJing,
					nHaveMoJing,
					newRonglian
				});
				if (null != temChagLifeInfo.NeedGoodsDataList)
				{
					for (int i = 0; i < temChagLifeInfo.NeedGoodsDataList.Count; i++)
					{
						GoodsData goodsData = Global.GetGoodsByID(client, temChagLifeInfo.NeedGoodsDataList[i].GoodsID);
						if (null == goodsData)
						{
							strcmd = string.Format("{0}:{1}:{2}", -3, roleID, 0);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						if (goodsData.GCount < temChagLifeInfo.NeedGoodsDataList[i].GCount)
						{
							strcmd = string.Format("{0}:{1}:{2}", -4, roleID, 0);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					for (int i = 0; i < temChagLifeInfo.NeedGoodsDataList.Count; i++)
					{
						bool usedBinding = false;
						bool usedTimeLimited = false;
						if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, temChagLifeInfo.NeedGoodsDataList[i].GoodsID, temChagLifeInfo.NeedGoodsDataList[i].GCount, false, out usedBinding, out usedTimeLimited, true))
						{
							strcmd = string.Format("{0}:{1}:{2}", -3, roleID, 0);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
				}
				byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}", roleID, nChangeCount));
				byte[] bytesData = null;
				if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
					strcmd = string.Format("{0}:{1}:{2}", -100, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int length = BitConverter.ToInt32(bytesData, 0);
				string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);
				string[] fieldsData = strData.Split(new char[]
				{
					':'
				});
				if (fieldsData[1] == "-1")
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("转生时 DBServer发生错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
					strcmd = string.Format("{0}:{1}", -100, roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				client.ClientData.ChangeLifeCount++;
				long nExperienceNow = client.ClientData.Experience;
				client.ClientData.Level = 1;
				client.ClientData.Experience = 0L;
				HuodongCachingMgr.ProcessGetUpLevelGift(client, false);
				if (nExperienceNow <= 0L)
				{
					GameManager.ClientMgr.NotifySelfExperience(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, nExperienceNow);
				}
				else
				{
					GameManager.ClientMgr.ProcessRoleExperience(client, nExperienceNow, false, true, false, "none");
				}
				GameManager.ChangeLifeMgr.InitPlayerChangeLifePorperty(client);
				GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
				GameManager.ClientMgr.NotifyTeamUpLevel(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, false);
				GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, true, 7);
				Global.AutoLearnSkills(client);
				if (nChangeCount >= 2)
				{
					Global.BroadcastChangeLifeSuccess(client, nChangeCount);
				}
				if (temChagLifeInfo.AwardGoodsDataList != null)
				{
					for (int i = 0; i < temChagLifeInfo.AwardGoodsDataList.Count; i++)
					{
						Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, temChagLifeInfo.AwardGoodsDataList[i].GoodsID, temChagLifeInfo.AwardGoodsDataList[i].GCount, 0, "", 0, 1, 0, "", true, 1, "转生奖励物品", "1900-01-01 12:00:00", 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
					}
				}
				ChengJiuManager.OnRoleChangeLife(client);
				EventLogManager.AddChangeLifeEvent(client, oldNum, client.ClientData.ChangeLifeCount, resList);
				SpreadManager.getInstance().SpreadIsLevel(client);
				FundManager.FundChangeLife(client);
				DailyActiveManager.ProcessDailyActiveChangeLife(client);
				VideoLogic.getInstance().GetOrSendPlayerVideoStatus(client, client.ClientData.RoleCommonUseIntPamams);
				if (client._IconStateMgr.CheckReborn(client))
				{
					client._IconStateMgr.SendIconStateToClient(client);
				}
				strcmd = string.Format("{0}:{1}:{2}", 1, roleID, nChangeCount);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F65 RID: 16229 RVA: 0x003A3F1C File Offset: 0x003A211C
		private static TCPProcessCmdResults ProcessGetUsingGoodsDataListCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				return Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out tcpOutPacket, socket.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F66 RID: 16230 RVA: 0x003A3F78 File Offset: 0x003A2178
		private static TCPProcessCmdResults ProcessExecutePropAddPointCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nPropIndex = Convert.ToInt32(fields[1]);
				int nPoint = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (nPoint <= 0)
				{
					strcmd = string.Format("{0}:{1}", 1, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nTotal = Global.GetRoleParamsInt32FromDB(client, "TotalPropPoint");
				int nStrength = Global.GetRoleParamsInt32FromDB(client, "PropStrength");
				int nIntelligence = Global.GetRoleParamsInt32FromDB(client, "PropIntelligence");
				int nDexterity = Global.GetRoleParamsInt32FromDB(client, "PropDexterity");
				int nConstitution = Global.GetRoleParamsInt32FromDB(client, "PropConstitution");
				int nRemainPoint = nTotal - nStrength - nIntelligence - nDexterity - nConstitution;
				if (nRemainPoint < nPoint)
				{
					strcmd = string.Format("{0}:{1}", -1, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				switch (nPropIndex)
				{
				case 0:
					client.ClientData.PropStrength += nPoint;
					Global.SaveRoleParamsInt32ValueToDB(client, "PropStrength", client.ClientData.PropStrength, true);
					break;
				case 1:
					client.ClientData.PropIntelligence += nPoint;
					Global.SaveRoleParamsInt32ValueToDB(client, "PropIntelligence", client.ClientData.PropIntelligence, true);
					break;
				case 2:
					client.ClientData.PropDexterity += nPoint;
					Global.SaveRoleParamsInt32ValueToDB(client, "PropDexterity", client.ClientData.PropDexterity, true);
					break;
				case 3:
					client.ClientData.PropConstitution += nPoint;
					Global.SaveRoleParamsInt32ValueToDB(client, "PropConstitution", client.ClientData.PropConstitution, true);
					break;
				}
				GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
				client.ClientData.LifeV = (int)RoleAlgorithm.GetMaxLifeV(client);
				client.ClientData.MagicV = (int)RoleAlgorithm.GetMaxMagicV(client);
				if (client.ClientData.CurrentLifeV > client.ClientData.LifeV)
				{
					client.ClientData.CurrentLifeV = client.ClientData.LifeV;
				}
				if (client.ClientData.CurrentMagicV > client.ClientData.MagicV)
				{
					client.ClientData.CurrentMagicV = client.ClientData.MagicV;
				}
				GameManager.ClientMgr.NotifySelfLifeChanged(Global._TCPManager.MySocketListener, pool, client);
				strcmd = string.Format("{0}:{1}", 1, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F67 RID: 16231 RVA: 0x003A43AC File Offset: 0x003A25AC
		private static TCPProcessCmdResults ProcessExecuteRecommendPropAddPointCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			CSPropAddPoint cmdData = null;
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<CSPropAddPoint>(data, 0, count, socket.m_Socket);
				if (!CheckHelper.CheckTCPCmdHandle<CSPropAddPoint>(socket, nID, data, count, out cmdData))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = cmdData.RoleID;
				int nStrengthPoint = cmdData.Strength;
				int nIntelligencePoint = cmdData.Intelligence;
				int nDexterityPoint = cmdData.Dexterity;
				int nConstitutionPoint = cmdData.Constitution;
				long nPoint = (long)nStrengthPoint + (long)nIntelligencePoint + (long)nDexterityPoint + (long)nConstitutionPoint;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (nStrengthPoint < 0 || nIntelligencePoint < 0 || nDexterityPoint < 0 || nConstitutionPoint < 0 || nPoint <= 0L)
				{
					strcmd = string.Format("{0}:{1}", -1, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nTotal = Global.GetRoleParamsInt32FromDB(client, "TotalPropPoint");
				int nStrength = Global.GetRoleParamsInt32FromDB(client, "PropStrength");
				int nIntelligence = Global.GetRoleParamsInt32FromDB(client, "PropIntelligence");
				int nDexterity = Global.GetRoleParamsInt32FromDB(client, "PropDexterity");
				int nConstitution = Global.GetRoleParamsInt32FromDB(client, "PropConstitution");
				int nRemainPoint = nTotal - nStrength - nIntelligence - nDexterity - nConstitution;
				if ((long)nRemainPoint < nPoint)
				{
					strcmd = string.Format("{0}:{1}", -1, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				client.ClientData.PropStrength += nStrengthPoint;
				Global.SaveRoleParamsInt32ValueToDB(client, "PropStrength", client.ClientData.PropStrength, true);
				client.ClientData.PropIntelligence += nIntelligencePoint;
				Global.SaveRoleParamsInt32ValueToDB(client, "PropIntelligence", client.ClientData.PropIntelligence, true);
				client.ClientData.PropDexterity += nDexterityPoint;
				Global.SaveRoleParamsInt32ValueToDB(client, "PropDexterity", client.ClientData.PropDexterity, true);
				client.ClientData.PropConstitution += nConstitutionPoint;
				Global.SaveRoleParamsInt32ValueToDB(client, "PropConstitution", client.ClientData.PropConstitution, true);
				Global.RefreshEquipProp(client);
				client.ClientData.LifeV = (int)RoleAlgorithm.GetMaxLifeV(client);
				client.ClientData.MagicV = (int)RoleAlgorithm.GetMaxMagicV(client);
				if (client.ClientData.CurrentLifeV > client.ClientData.LifeV)
				{
					client.ClientData.CurrentLifeV = client.ClientData.LifeV;
				}
				if (client.ClientData.CurrentMagicV > client.ClientData.MagicV)
				{
					client.ClientData.CurrentMagicV = client.ClientData.MagicV;
				}
				GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
				GameManager.ClientMgr.NotifySelfLifeChanged(Global._TCPManager.MySocketListener, pool, client);
				strcmd = string.Format("{0}:{1}", 1, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F68 RID: 16232 RVA: 0x003A476C File Offset: 0x003A296C
		private static TCPProcessCmdResults ProcessExecuteCleanPropAddPointCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int needYuanBao = 0;
				long mianFeiXiDian = GameManager.systemParamsList.GetParamValueIntByName("MianFeiXiDian", -1);
				if ((long)client.ClientData.ChangeLifeCount > mianFeiXiDian)
				{
					needYuanBao = 100;
				}
				string strcmd;
				if (needYuanBao > 0 && !GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "洗点", true, true, false, DaiBiSySType.ShuXingXiDian))
				{
					strcmd = string.Format("{0}:{1}", -2, roleID);
				}
				else
				{
					client.ClientData.PropStrength = Global.GetRoleParamsInt32FromDB(client, "PropStrengthChangeless");
					Global.SaveRoleParamsInt32ValueToDB(client, "PropStrength", client.ClientData.PropStrength, true);
					client.ClientData.PropIntelligence = Global.GetRoleParamsInt32FromDB(client, "PropIntelligenceChangeless");
					Global.SaveRoleParamsInt32ValueToDB(client, "PropIntelligence", client.ClientData.PropIntelligence, true);
					client.ClientData.PropDexterity = Global.GetRoleParamsInt32FromDB(client, "PropDexterityChangeless");
					Global.SaveRoleParamsInt32ValueToDB(client, "PropDexterity", client.ClientData.PropDexterity, true);
					client.ClientData.PropConstitution = Global.GetRoleParamsInt32FromDB(client, "PropConstitutionChangeless");
					Global.SaveRoleParamsInt32ValueToDB(client, "PropConstitution", client.ClientData.PropConstitution, true);
					Global.RefreshEquipProp(client);
					GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
					strcmd = string.Format("{0}:{1}", 1, roleID);
				}
				client.ClientData.LifeV = (int)RoleAlgorithm.GetMaxLifeV(client);
				client.ClientData.MagicV = (int)RoleAlgorithm.GetMaxMagicV(client);
				if (client.ClientData.CurrentLifeV > client.ClientData.LifeV)
				{
					client.ClientData.CurrentLifeV = client.ClientData.LifeV;
				}
				if (client.ClientData.CurrentMagicV > client.ClientData.MagicV)
				{
					client.ClientData.CurrentMagicV = client.ClientData.MagicV;
				}
				GameManager.ClientMgr.NotifySelfLifeChanged(Global._TCPManager.MySocketListener, pool, client);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F69 RID: 16233 RVA: 0x003A4B18 File Offset: 0x003A2D18
		private static TCPProcessCmdResults ProcessQueryCleanPropAddPointCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nValue = Global.GetRoleParamsInt32FromDB(client, "TotalPropPoint") - Global.GetRoleParamsInt32FromDB(client, "PropStrengthChangeless") - Global.GetRoleParamsInt32FromDB(client, "PropIntelligenceChangeless") - Global.GetRoleParamsInt32FromDB(client, "PropDexterityChangeless") - Global.GetRoleParamsInt32FromDB(client, "PropConstitutionChangeless");
				string strcmd = string.Format("{0}:{1}", roleID, nValue);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F6A RID: 16234 RVA: 0x003A4CE8 File Offset: 0x003A2EE8
		private static TCPProcessCmdResults ProcessExecuteFuBenCleanOutCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nMapID = Convert.ToInt32(fields[1]);
				int nFuMapID = Convert.ToInt32(fields[2]);
				int nExchangeMojing = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (Global.GetMapType(client.ClientData.MapCode) != MapTypes.Normal || client.ClientData.WaitingNotifyChangeMap)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(658, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				string strcmd;
				if (nExchangeMojing < 0 || nExchangeMojing > 1)
				{
					strcmd = string.Format("{0}:{1}", roleID, -301);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nMapID == 5100)
				{
					strcmd = string.Format("{0}:{1}", roleID, -300);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (Global.IsInExperienceCopyScene(nMapID))
				{
					strcmd = string.Format("{0}:{1}", roleID, -302);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nVipLev = client.ClientData.VipLevel;
				if (nVipLev <= 0 && nVipLev > VIPEumValue.VIPENUMVALUE_MAXLEVEL)
				{
					strcmd = string.Format("{0}:{1}", roleID, -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nVIPNeedLev = (int)GameManager.systemParamsList.GetParamValueIntByName("VIPSaoDang", -1);
				if (nVIPNeedLev > nVipLev)
				{
					strcmd = string.Format("{0}:{1}", roleID, -4);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemFuBenItem = null;
				if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(nFuMapID, out systemFuBenItem))
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(659, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					LogManager.WriteLog(LogTypes.SQL, string.Format("外挂?副本扫荡时错误, 没有找到副本配置, CMD={0}, IP={1}, RoleID={2}, nFuMapID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						nFuMapID
					}), null, true);
					strcmd = string.Format("{0}:{1}", roleID, 0);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				FuBenMapItem fuBenMapItem = FuBenManager.FindMapCodeByFuBenID(nFuMapID, nMapID);
				if (null == fuBenMapItem)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(659, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					LogManager.WriteLog(LogTypes.SQL, string.Format("外挂?副本扫荡时错误, 没有找到副本配置, CMD={0}, IP={1}, RoleID={2}, nFuMapID={3}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						nFuMapID
					}), null, true);
					strcmd = string.Format("{0}:{1}", roleID, 0);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				FuBenData tmpfubdata = Global.GetFuBenData(client, nFuMapID);
				if (tmpfubdata == null || tmpfubdata.QuickPassTimer > fuBenMapItem.MinSaoDangTimer * 60)
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nClientSec = tmpfubdata.QuickPassTimer;
				int nEnterNum = tmpfubdata.EnterNum;
				int nFinishNum = tmpfubdata.FinishNum;
				int enterNumber = systemFuBenItem.GetIntValue("EnterNumber", -1);
				int finishNumber = systemFuBenItem.GetIntValue("FinishNumber", -1);
				if ((enterNumber >= 0 && nEnterNum >= enterNumber) || (finishNumber >= 0 && nFinishNum >= finishNumber))
				{
					strcmd = string.Format("{0}:{1}", roleID, -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nMaxTime = fuBenMapItem.MaxTime * 60;
				int nKillNum = 0;
				List<int> goodsID = new List<int>();
				FuBenTongGuanData fuBenTongGuanData = Global.GiveCopyMapGiftForScore(client, nFuMapID, nMapID, nMaxTime, nClientSec, nKillNum, 0, fuBenMapItem.Experience, fuBenMapItem.Money1, fuBenMapItem, null);
				if (fuBenTongGuanData != null)
				{
				}
				int nBossGoodsPackID = systemFuBenItem.GetIntValue("BossGoodsList", -1);
				if (nBossGoodsPackID > 0)
				{
					int maxFallCountByID = GameManager.GoodsPackMgr.GetFallGoodsMaxCount(nBossGoodsPackID);
					if (maxFallCountByID <= 0)
					{
						maxFallCountByID = GoodsPackManager.MaxFallCount;
					}
					List<GoodsData> goodsDataList = GameManager.GoodsPackMgr.GetGoodsDataList(client, nBossGoodsPackID, maxFallCountByID, 0, 1.0);
					List<GoodsData> listReally = new List<GoodsData>();
					foreach (GoodsData item in goodsDataList)
					{
						if (!GoodsPackManager.IsFallTongQianGoods(item.GoodsID))
						{
							listReally.Add(item);
						}
					}
					if (nExchangeMojing == 1)
					{
						if (listReally.Count > 0)
						{
							Global.EquipExchangeToMoJing(client, listReally);
						}
					}
					int bagInt;
					if (!RebornEquip.MoreIsCanIntoRebornOrBaseBag(client, listReally, out bagInt))
					{
						int nTotalGroup = listReally.Count / 5;
						int nRemain = listReally.Count % 5;
						int nIndex = 0;
						if (nTotalGroup > 0)
						{
							for (int i = 0; i < nTotalGroup; i++)
							{
								List<GoodsData> goods = new List<GoodsData>();
								for (int j = 0; j < 5; j++)
								{
									goods.Add(listReally[nIndex]);
									nIndex++;
								}
								Global.UseMailGivePlayerAward2(client, goods, GLang.GetLang(162, new object[0]), GLang.GetLang(162, new object[0]), 0, 0, 0);
							}
						}
						if (nRemain > 0)
						{
							List<GoodsData> goods2 = new List<GoodsData>();
							for (int i = 0; i < nRemain; i++)
							{
								goods2.Add(listReally[nIndex]);
								nIndex++;
							}
							Global.UseMailGivePlayerAward2(client, goods2, GLang.GetLang(162, new object[0]), GLang.GetLang(162, new object[0]), 0, 0, 0);
						}
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(660, new object[0]), new object[0]), GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
					}
					else
					{
						foreach (GoodsData item in listReally)
						{
							GoodsData goodsData = new GoodsData
							{
								Id = -1,
								GoodsID = item.GoodsID,
								Using = 0,
								Forge_level = item.Forge_level,
								Starttime = "1900-01-01 12:00:00",
								Endtime = "1900-01-01 12:00:00",
								Site = 0,
								Quality = item.Quality,
								Props = item.Props,
								GCount = item.GCount,
								Binding = item.Binding,
								Jewellist = item.Jewellist,
								BagIndex = 0,
								AddPropIndex = item.AddPropIndex,
								BornIndex = item.BornIndex,
								Lucky = item.Lucky,
								Strong = item.Strong,
								ExcellenceInfo = item.ExcellenceInfo,
								AppendPropLev = item.AppendPropLev,
								ChangeLifeLevForEquip = item.ChangeLifeLevForEquip
							};
							goodsData.Id = Global.AddGoodsDBCommand_Hook(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, 0, goodsData.Jewellist, true, 1, "副本通关获取物品", true, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip, true, null, null, "1900-01-01 12:00:00", 0, true);
						}
					}
				}
				Global.UpdateFuBenData(client, nFuMapID, 1, 1);
				ProcessTask.ProcessAddTaskVal(client, TaskTypes.CompleteFuBen, nFuMapID, 1, new object[0]);
				int nLev = systemFuBenItem.GetIntValue("FuBenLevel", -1);
				bool bActiveChengJiu = true;
				if (GameManager.BloodCastleCopySceneMgr.IsBloodCastleCopyScene(nFuMapID) && GameManager.DaimonSquareCopySceneMgr.IsDaimonSquareCopyScene(nFuMapID))
				{
					bActiveChengJiu = false;
				}
				GameManager.ClientMgr.UpdateRoleDailyData_FuBenNum(client, 1, nLev, bActiveChengJiu);
				strcmd = string.Format("{0}:{1}", roleID, 1);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F6B RID: 16235 RVA: 0x003A5830 File Offset: 0x003A3A30
		private static TCPProcessCmdResults ProcessQueryFuBenInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			try
			{
				SingletonTemplate<ProtoChecker>.Instance().Check<CS_QueryFuBen>(data, 0, count, socket.m_Socket);
				CS_QueryFuBen _queryCopy = null;
				if (!CheckHelper.CheckTCPCmdHandle<CS_QueryFuBen>(socket, nID, data, count, out _queryCopy))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = _queryCopy.RoleId;
				int nMapID = _queryCopy.MapId;
				int nFuMapID = _queryCopy.FuBenId;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int nClientSec = -1;
				int nEnterNum = 0;
				int nFinishNum = 0;
				string strDbCmd = string.Format("{0}:{1}", roleID, nFuMapID);
				string[] strRet = Global.ExecuteDBCmd(10129, strDbCmd, client.ServerId);
				string strName;
				int nBestTimer;
				if (strRet != null && strRet.Length == 3 && Convert.ToInt32(strRet[0]) != -1)
				{
					strName = strRet[1];
					nBestTimer = Convert.ToInt32(strRet[2]);
				}
				else
				{
					strName = "";
					nBestTimer = -1;
				}
				FuBenData tmpfubdata = Global.GetFuBenData(client, nFuMapID);
				if (null != tmpfubdata)
				{
					if (tmpfubdata.DayID == TimeUtil.NowDateTime().DayOfYear)
					{
						nClientSec = tmpfubdata.QuickPassTimer;
						nEnterNum = tmpfubdata.EnterNum;
						nFinishNum = tmpfubdata.FinishNum;
					}
					else
					{
						nClientSec = tmpfubdata.QuickPassTimer;
						nEnterNum = 0;
						nFinishNum = 0;
					}
				}
				bool bIsOpen = true;
				SystemXmlItem systemFuBenItem = null;
				if (GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(nFuMapID, out systemFuBenItem))
				{
					int nUpCopyID = systemFuBenItem.GetIntValue("UpCopyID", -1);
					int nFinishNumber = systemFuBenItem.GetIntValue("FinishNumber", -1);
					if (nUpCopyID > 0 && nFinishNumber > 0)
					{
						if (!Global.FuBenPassed(client, nUpCopyID))
						{
							bIsOpen = false;
						}
					}
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
				{
					nFuMapID,
					nClientSec,
					nEnterNum,
					strName,
					nBestTimer,
					nFinishNum,
					bIsOpen
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F6C RID: 16236 RVA: 0x003A5B0C File Offset: 0x003A3D0C
		private static TCPProcessCmdResults ProcessSpriteAttack2Cmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			TCPProcessCmdResults result;
			try
			{
				string cmdData = new UTF8Encoding().GetString(data, 0, count);
				result = TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				result = TCPProcessCmdResults.RESULT_FAILED;
			}
			return result;
		}

		// Token: 0x06003F6D RID: 16237 RVA: 0x003A5B74 File Offset: 0x003A3D74
		private static TCPProcessCmdResults ProcessSpriteCompleteFlashSceneCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				byte[] bytesData = null;
				if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nID, data, count, out bytesData, client.ServerId))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (bytesData.Length != 2)
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = string.Format("{0}:{1}", roleID, bytesData[1]);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F6E RID: 16238 RVA: 0x003A5D44 File Offset: 0x003A3F44
		private static TCPProcessCmdResults ProcessSpriteRefurbishTaskStarLevelCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int TaskID = Convert.ToInt32(fields[1]);
				int dbID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				TaskData taskData = Global.GetTaskDataByDbID(client, dbID);
				string strcmd;
				if (null == taskData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						roleID,
						-1,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemTask = null;
				if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(TaskID, out systemTask))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						roleID,
						-3,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int taskClass = systemTask.GetIntValue("TaskClass", -1);
				if (taskClass != 8)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						roleID,
						-4,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (Data.TaskStarInfo.Count <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						roleID,
						-3,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nValue = (int)GameManager.systemParamsList.GetParamValueIntByName("TaskStarInfosNeedJinBi", -1);
				if (!Global.SubBindTongQianAndTongQian(client, nValue, "刷新任务星级"))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						roleID,
						-4,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int starLevel = 5;
				string[] dbCmds = null;
				string strDbCmd = string.Format("{0}:{1}:{2}", roleID, dbID, starLevel);
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10132, strDbCmd, out dbCmds, client.ServerId);
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					-10,
					TaskID,
					0
				});
				if (TCPProcessCmdResults.RESULT_FAILED == dbRequestResult)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("刷新失败 DB错误, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbCmds.Length != 2 || Global.SafeConvertToInt32(dbCmds[1]) == -1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("刷新失败 DB错误, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				taskData.StarLevel = starLevel;
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					1,
					TaskID,
					starLevel
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F6F RID: 16239 RVA: 0x003A6270 File Offset: 0x003A4470
		private static TCPProcessCmdResults ProcessSpriteCompleteDailyCircleTaskForOnceClickCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nNpcID = Convert.ToInt32(fields[1]);
				int extensionID = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.RiChangRenWu, false))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("外挂一键完成日常任务, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nVipLev = client.ClientData.VipLevel;
				int nNeedVIPLev = (int)GameManager.systemParamsList.GetParamValueIntByName("VIPRiChangYiJianWanCheng", -1);
				string strcmd;
				if (nVipLev < nNeedVIPLev)
				{
					strcmd = string.Format("{0}:{1}", roleID, -22);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				NPCData npcdata = new NPCData();
				npcdata.MapCode = client.ClientData.MapCode;
				npcdata.RoleID = roleID;
				npcdata.NPCID = nNpcID;
				npcdata.NewTaskIDs = null;
				npcdata.OperationIDs = null;
				npcdata.ExtensionID = extensionID;
				SystemXmlItem systemNPC = null;
				if (!GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(extensionID, out systemNPC))
				{
					strcmd = string.Format("{0}:{1}", roleID, -11);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				List<int> tasksList = null;
				if (!GameManager.NPCTasksMgr.SourceNPCTasksDict.TryGetValue(extensionID, out tasksList))
				{
					strcmd = string.Format("{0}:{1}", roleID, -12);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				List<int> paoHuanTaskIDList8 = new List<int>();
				int i;
				for (i = 0; i < tasksList.Count; i++)
				{
					SystemXmlItem systemTask = null;
					if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(tasksList[i], out systemTask))
					{
						int taskClass = systemTask.GetIntValue("TaskClass", -1);
						if (8 == taskClass)
						{
							paoHuanTaskIDList8.Add(tasksList[i]);
						}
					}
				}
				if (paoHuanTaskIDList8.Count <= 0)
				{
					strcmd = string.Format("{0}:{1}", roleID, -13);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nEnterNum = 10;
				DailyTaskData dailyTaskData = Global.FindDailyTaskDataByTaskClass(client, 8);
				if (dailyTaskData != null)
				{
					int maxNum = Global.GetMaxDailyTaskNum(client, 8, dailyTaskData);
					nEnterNum = maxNum;
					if (maxNum <= 0)
					{
						strcmd = string.Format("{0}:{1}", roleID, -2);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
					if (dailyTaskData.RecTime == today)
					{
						if (dailyTaskData.RecNum >= maxNum)
						{
							strcmd = string.Format("{0}:{1}", roleID, -10);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						nEnterNum = maxNum - dailyTaskData.RecNum;
					}
				}
				int nValue = (int)GameManager.systemParamsList.GetParamValueIntByName("CompleteTaskNeedYuanBao", -1);
				nValue += (int)GameManager.systemParamsList.GetParamValueIntByName("DoubleExp", -1);
				int needYuanBao = nEnterNum * nValue;
				if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "一键完日常任务", true, true, false, DaiBiSySType.YiJianWanChengRiChang))
				{
					strcmd = string.Format("{0}:{1}", roleID, -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemTask2 = null;
				i = 0;
				while (i < client.ClientData.TaskDataList.Count)
				{
					if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(client.ClientData.TaskDataList[i].DoingTaskID, out systemTask2))
					{
						LogManager.WriteLog(LogTypes.Error, string.Format("出错了!!!，任务不存在, 一键完成日常跑环任务失败 CMD={0}, Client={1}, RoleID={2}, TaskID={3}", new object[]
						{
							(TCPGameServerCmds)nID,
							Global.GetSocketRemoteEndPoint(socket, false),
							client.ClientData.RoleID,
							client.ClientData.TaskDataList[i].DoingTaskID
						}), null, true);
						strcmd = string.Format("{0}:{1}", roleID, -20);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int nID2 = client.ClientData.TaskDataList[i].DoingTaskID;
					int taskClass = systemTask2.GetIntValue("TaskClass", -1);
					if (taskClass == 8)
					{
						int nMsgID = 140;
						byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							roleID,
							nNpcID,
							nID2,
							client.ClientData.TaskDataList[i].DbID,
							0
						}));
						byte[] bytesData = null;
						if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nMsgID, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
						{
							LogManager.WriteLog(LogTypes.Error, string.Format("一键完成日常跑环任务时与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
						}
						else if (ProcessTask.Complete(tcpMgr.MySocketListener, pool, client, nNpcID, extensionID, client.ClientData.TaskDataList[i].DoingTaskID, client.ClientData.TaskDataList[i].DbID, false, 2.0, true))
						{
							nEnterNum--;
						}
					}
					IL_700:
					i++;
					continue;
					goto IL_700;
				}
				SystemXmlItem systemTask3 = null;
				i = 0;
				while (i < nEnterNum)
				{
					int nTaskID = Global.GetDailyCircleTaskIDBaseChangeLifeLev(client);
					if (nTaskID != -1)
					{
						if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(nTaskID, out systemTask3))
						{
							strcmd = string.Format("{0}:{1}", roleID, -1);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						if (systemTask3.GetIntValue("TaskClass", -1) != 8)
						{
							strcmd = string.Format("{0}:{1}", roleID, -2);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						TaskData tmpTask = Global.TakeNewTaskForDailyCircleTask(tcpMgr, socket, tcpClientPool, pool, client, nTaskID, nNpcID, 125);
						if (tmpTask.DbID >= 0 && Global.GetTaskDataByDbID(client, tmpTask.DbID) != null)
						{
							int nMsgID = 140;
							byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
							{
								roleID,
								nNpcID,
								nTaskID,
								tmpTask.DbID,
								0
							}));
							byte[] bytesData = null;
							if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, nMsgID, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
							{
								LogManager.WriteLog(LogTypes.Error, string.Format("一键完成日常跑环任务时与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
							}
							else
							{
								int length = BitConverter.ToInt32(bytesData, 0);
								string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);
								string[] fieldsData = strData.Split(new char[]
								{
									':'
								});
								if (fieldsData.Length < 3 || fieldsData[2] == "-1")
								{
									LogManager.WriteLog(LogTypes.Error, string.Format("一键完成日常跑环任务时 DBServer发生错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
								}
								else
								{
									bool nRet = ProcessTask.Complete(tcpMgr.MySocketListener, pool, client, nNpcID, extensionID, nTaskID, tmpTask.DbID, false, 2.0, true);
								}
							}
						}
					}
					IL_969:
					i++;
					continue;
					goto IL_969;
				}
				strcmd = string.Format("{0}:{1}", roleID, 1);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F70 RID: 16240 RVA: 0x003A6C7C File Offset: 0x003A4E7C
		private static TCPProcessCmdResults ProcessSpriteAdmiredPlayerCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				int roleBID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nCount = Global.GetAdmireCount(client);
				string strcmd;
				if (nCount >= 10)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-10,
						roleAID,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nDate = TimeUtil.NowDateTime().DayOfYear;
				string strDbCmd = string.Format("{0}:{1}:{2}", roleAID, roleBID, nDate);
				string[] dbFields = null;
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 528, strDbCmd, out dbFields, client.ServerId);
				if (dbFields == null || dbFields.Length <= 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-100,
						roleAID,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (Convert.ToInt32(dbFields[1]) == -2)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-101,
						roleAID,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (Convert.ToInt32(dbFields[1]) == -1)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
					{
						-102,
						roleAID,
						0,
						0,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nNum = Convert.ToInt32(dbFields[2]);
				GameClient ClientB = GameManager.ClientMgr.FindClient(roleBID);
				if (ClientB != null)
				{
					ClientB.ClientData.AdmiredCount = nNum;
				}
				Global.ProcessIncreaseAdmireCount(client);
				double nRate;
				if (client.ClientData.ChangeLifeCount == 0)
				{
					nRate = 1.0;
				}
				else
				{
					nRate = Data.ChangeLifeEverydayExpRate[client.ClientData.ChangeLifeCount];
				}
				long nExperience = (long)(nRate * (double)Data.PaihangbangAdration);
				GameManager.ClientMgr.ProcessRoleExperience(client, nExperience, false, true, false, "none");
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
				{
					1,
					roleAID,
					roleBID,
					Global.GetRoleParamsInt32FromDB(client, "AdmireCount"),
					nNum,
					nExperience
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				if (client._IconStateMgr.CheckPaiHangState(client))
				{
					client._IconStateMgr.SendIconStateToClient(client);
				}
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F71 RID: 16241 RVA: 0x003A7188 File Offset: 0x003A5388
		private static TCPProcessCmdResults ProcessSpriteQueryBloodCastleInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nDate = TimeUtil.NowDateTime().DayOfYear;
				int nType = 1;
				int nCount = Global.QueryDayActivityEnterCountToDB(client, client.ClientData.RoleID, nDate, nType);
				int nSelfValue = client.ClientData.BloodCastleAwardTotalPoint;
				int nTotal = GameManager.BloodCastleCopySceneMgr.m_nTotalPointValue;
				string sFinalName = null;
				string sName = GameManager.BloodCastleCopySceneMgr.m_sTotalPointName;
				if (!string.IsNullOrEmpty(sName))
				{
					sFinalName = sName;
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
				{
					1,
					roleAID,
					nCount,
					nSelfValue,
					nTotal,
					sFinalName,
					client.ClientData.BloodCastleAwardPoint
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F72 RID: 16242 RVA: 0x003A73CC File Offset: 0x003A55CC
		private static TCPProcessCmdResults ProcessGetBloodCastleAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				int nValue = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int[] nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("BloodCastleExp", ',');
				int nNeedMoney;
				string strcmd;
				if (nValue == 1)
				{
					nNeedMoney = 0;
				}
				else if (nValue == 2)
				{
					nNeedMoney = nArry[0];
				}
				else
				{
					if (nValue != 3)
					{
						strcmd = string.Format("{0}:{1}", -2, roleAID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					nNeedMoney = nArry[1];
				}
				if (nNeedMoney > 0)
				{
					int nMoney = client.ClientData.UserMoney;
					if (nMoney < nNeedMoney)
					{
						strcmd = string.Format("{0}:{1}", -1, roleAID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				int FuBenSeqID = Global.GetRoleParamsInt32FromDB(client, "BloodCastleFuBenSeqID");
				int nSceneID = Global.GetRoleParamsInt32FromDB(client, "BloodCastleSceneid");
				int nFlag = Global.GetRoleParamsInt32FromDB(client, "BloodCastleSceneFinishFlag");
				int awardState = GameManager.CopyMapMgr.FindAwardState(client.ClientData.RoleID, FuBenSeqID, nSceneID);
				if (awardState > 0)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(21, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
				}
				else
				{
					if (nNeedMoney > 0)
					{
						if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nNeedMoney, "领取血色城堡奖励", true, true, false, DaiBiSySType.None))
						{
							strcmd = string.Format("{0}:{1}", -1, roleAID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					GameManager.BloodCastleCopySceneMgr.GiveAwardBloodCastCopyScene(client, nValue);
				}
				strcmd = string.Format("{0}:{1}", 1, roleAID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F73 RID: 16243 RVA: 0x003A776C File Offset: 0x003A596C
		private static TCPProcessCmdResults ProcessSpriteEquipAppendPropCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int nProtectStone = Convert.ToInt32(fields[2]);
				int nUseBindItemFirst = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.EquipAppend, false))
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(3, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						0,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-1,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				if (nCategories < 0 || (nCategories > 6 && nCategories < 11) || nCategories > 21)
				{
					if (!GoodsUtil.CanUpgrade(nCategories, 1))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-8,
							roleID,
							id,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (nProtectStone > 0 && Global.GetProtectStoneGoodsIndexForEquipAppendProp(nProtectStone) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-2,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nExcellenceNum = Global.GetEquipExcellencePropNum(goodsData);
				int nMaxLevel;
				if (nExcellenceNum == 0)
				{
					nMaxLevel = 20;
				}
				else if (nExcellenceNum >= 1 && nExcellenceNum <= 2)
				{
					nMaxLevel = 40;
				}
				else if (nExcellenceNum >= 3 && nExcellenceNum <= 4)
				{
					nMaxLevel = 60;
				}
				else if (nExcellenceNum >= 5 && nExcellenceNum <= 6)
				{
					nMaxLevel = 80;
				}
				else
				{
					nMaxLevel = 80;
				}
				if (goodsData.AppendPropLev >= nMaxLevel)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-4,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int useGoodsID = Global.GetEquipAppendPropNeedStoneGoodsList(goodsData);
				int needGoodsCnt = Global.GetEquipAppendPropNeedStoneGoodsNum(goodsData);
				if (useGoodsID < 0 || needGoodsCnt < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-6,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				client.ClientData._ReplaceExtArg.Reset();
				client.ClientData._ReplaceExtArg.CurrEquipZhuiJiaLevel = goodsData.AppendPropLev;
				if (SingletonTemplate<GoodsReplaceManager>.Instance().NeedCheckSuit(nCategories))
				{
					client.ClientData._ReplaceExtArg.CurrEquipSuit = Global.GetEquipGoodsSuitID(goodsData.GoodsID);
				}
				GoodsReplaceResult replaceRet = SingletonTemplate<GoodsReplaceManager>.Instance().GetReplaceResult(client, useGoodsID);
				if (replaceRet == null || replaceRet.TotalGoodsCnt() < needGoodsCnt)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-7,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needYinLiang = Global.GetEquipAppendPropNextLevelYinLiang(goodsData);
				needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
				if (!Global.SubBindTongQianAndTongQian(client, needYinLiang, "装备追加"))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-3,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				List<GoodsReplaceResult.ReplaceItem> realCostList = new List<GoodsReplaceResult.ReplaceItem>();
				if (nUseBindItemFirst >= 1)
				{
					realCostList.AddRange(replaceRet.BindList);
					realCostList.Add(replaceRet.OriginBindGoods);
					realCostList.AddRange(replaceRet.UnBindList);
					realCostList.Add(replaceRet.OriginUnBindGoods);
				}
				else
				{
					realCostList.AddRange(replaceRet.UnBindList);
					realCostList.Add(replaceRet.OriginUnBindGoods);
					realCostList.AddRange(replaceRet.BindList);
					realCostList.Add(replaceRet.OriginBindGoods);
				}
				int stillNeedCnt = needGoodsCnt;
				bool bRealUseBinding = false;
				foreach (GoodsReplaceResult.ReplaceItem item in realCostList)
				{
					if (item.GoodsCnt > 0)
					{
						int realCostCnt = Math.Min(stillNeedCnt, item.GoodsCnt);
						if (realCostCnt <= 0)
						{
							break;
						}
						bool usedBinding_just_placeholder = false;
						bool usedTimeLimited_just_placeholder = false;
						bool bFailed = false;
						if (item.IsBind)
						{
							bRealUseBinding = true;
							if (!GameManager.ClientMgr.NotifyUseBindGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, item.GoodsID, realCostCnt, false, out usedBinding_just_placeholder, out usedTimeLimited_just_placeholder, false))
							{
								bFailed = true;
							}
						}
						else if (!GameManager.ClientMgr.NotifyUseNotBindGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, item.GoodsID, realCostCnt, false, out usedBinding_just_placeholder, out usedTimeLimited_just_placeholder, false))
						{
							bFailed = true;
						}
						stillNeedCnt -= item.GoodsCnt;
						if (bFailed)
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
							{
								-200,
								roleID,
								id,
								0,
								0
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
				}
				if (nProtectStone > 0)
				{
					bool usedBinding = false;
					bool usedTimeLimited = false;
					GoodsData goodsInfo = Global.GetGoodsByID(client, nProtectStone);
					if (goodsInfo == null || !GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsInfo.GoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
						{
							-200,
							roleID,
							id,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				int nBindProp = goodsData.Binding;
				if (nBindProp <= 0 && bRealUseBinding)
				{
					nBindProp = 1;
				}
				int oldUsing = goodsData.Using;
				if (goodsData.Using > 0)
				{
					goodsData.Using = 0;
				}
				goodsData.AppendPropLev++;
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					1,
					roleID,
					id,
					goodsData.AppendPropLev,
					nBindProp
				});
				Global.BroadcastEquipAppendPropOk(client, goodsData);
				ChengJiuManager.OnFirstAppend(client);
				ChengJiuManager.OnRoleGoodsAppend(client, goodsData.AppendPropLev);
				DailyActiveManager.ProcessDailyActiveEquipAppend(client);
				if (client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriAddon))
				{
					client._IconStateMgr.AddFlushIconState(14000, client._IconStateMgr.IsAnyJieRiTipActived());
					client._IconStateMgr.SendIconStateToClient(client);
				}
				string[] dbFields = null;
				string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
				{
					client.ClientData.RoleID,
					goodsData.Id,
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					"*",
					nBindProp,
					"*",
					"*",
					"*",
					"*",
					"*",
					goodsData.AppendPropLev,
					"*"
				});
				TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
				if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED || null == dbFields)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-100,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						-100,
						roleID,
						id,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.ModifyGoodsBindPorp(client, id, nBindProp);
				if (oldUsing != goodsData.Using)
				{
					goodsData.Using = oldUsing;
					Global.RefreshEquipProp(client);
					GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
					GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
				}
				if (goodsData.Using > 0)
				{
					SevenDayGoalEventObject evObj_peidai_append = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiAppendEquip);
					GlobalEventSource.getInstance().fireEvent(evObj_peidai_append);
				}
				SevenDayGoalEventObject evObj_append_lvl = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.AppendEquipLevel);
				evObj_append_lvl.Arg1 = goodsData.AppendPropLev;
				GlobalEventSource.getInstance().fireEvent(evObj_append_lvl);
				ProcessTask.ProcessRoleTaskVal(client, TaskTypes.EquipZhuiJiaLevel, goodsData.AppendPropLev);
				SevenDayGoalEventObject evObj_append_times = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.AppendEquipTimes);
				GlobalEventSource.getInstance().fireEvent(evObj_append_times);
				Global.ModRoleGoodsEvent(client, goodsData, 0, "追加", false);
				EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "追加");
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F74 RID: 16244 RVA: 0x003A8544 File Offset: 0x003A6744
		private static TCPProcessCmdResults ProcessSpriteEquipAppendPropInheritCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int leftGoodsDbID = Convert.ToInt32(fields[1]);
				int rightGoodsDbID = Convert.ToInt32(fields[2]);
				int nSubMoneyType = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData leftGoodsData = Global.GetGoodsByDbID(client, leftGoodsDbID);
				string strcmd;
				if (null == leftGoodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-1,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData rightGoodsData = Global.GetGoodsByDbID(client, rightGoodsDbID);
				if (null == rightGoodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-2,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nLeftExcellencePropNum = Global.GetEquipExcellencePropNum(leftGoodsData);
				int nRightExcellencePropNum = Global.GetEquipExcellencePropNum(rightGoodsData);
				int nLeftColor;
				if (nLeftExcellencePropNum == 0)
				{
					nLeftColor = 0;
				}
				else if (nLeftExcellencePropNum >= 1 && nLeftExcellencePropNum <= 2)
				{
					nLeftColor = 1;
				}
				else if (nLeftExcellencePropNum >= 3 && nLeftExcellencePropNum <= 4)
				{
					nLeftColor = 2;
				}
				else if (nLeftExcellencePropNum >= 5 && nLeftExcellencePropNum <= 6)
				{
					nLeftColor = 3;
				}
				else
				{
					nLeftColor = 3;
				}
				int nRigthColor;
				int nMaxLevel;
				if (nRightExcellencePropNum == 0)
				{
					nRigthColor = 0;
					nMaxLevel = 20;
				}
				else if (nRightExcellencePropNum >= 1 && nRightExcellencePropNum <= 2)
				{
					nRigthColor = 1;
					nMaxLevel = 40;
				}
				else if (nRightExcellencePropNum >= 3 && nRightExcellencePropNum <= 4)
				{
					nRigthColor = 2;
					nMaxLevel = 60;
				}
				else if (nRightExcellencePropNum >= 5 && nRightExcellencePropNum <= 6)
				{
					nRigthColor = 3;
					nMaxLevel = 80;
				}
				else
				{
					nRigthColor = 3;
					nMaxLevel = 80;
				}
				int OccupationLeft = Global.GetMainOccupationByGoodsID(leftGoodsData.GoodsID);
				int OccupationRight = Global.GetMainOccupationByGoodsID(rightGoodsData.GoodsID);
				if (OccupationLeft != OccupationRight)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-203,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int categoryLeft = Global.GetGoodsCatetoriy(leftGoodsData.GoodsID);
				int categoryRight = Global.GetGoodsCatetoriy(rightGoodsData.GoodsID);
				int ret = GoodsUtil.CanUpgradeInhert(categoryLeft, categoryRight, 6);
				if (ret < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						ret,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (leftGoodsData.Site != 0 || rightGoodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-5,
						roleID,
						leftGoodsData.Id,
						rightGoodsData.Id
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nSubMoneyType < 1 || nSubMoneyType > 2)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-20,
						roleID,
						leftGoodsDbID,
						rightGoodsDbID
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nSubMoneyType == 1)
				{
					int nNeedMoney = Global.GetEquipAppendInheritNeedMoney(leftGoodsData, 1);
					if (!Global.SubBindTongQianAndTongQian(client, nNeedMoney, "装备追加传承"))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-21,
							roleID,
							leftGoodsDbID,
							rightGoodsDbID
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (nSubMoneyType == 2)
				{
					int nNeedMoney = Global.GetEquipAppendInheritNeedMoney(leftGoodsData, 2);
					if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, nNeedMoney, "追加传承", true, true, false, DaiBiSySType.None))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-22,
							roleID,
							leftGoodsDbID,
							rightGoodsDbID
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (leftGoodsData.AppendPropLev <= 0 || leftGoodsData.AppendPropLev <= rightGoodsData.AppendPropLev)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-9,
						roleID,
						leftGoodsData.Id,
						rightGoodsData.Id
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nBinding = 0;
				if (rightGoodsData.Binding == 1 || leftGoodsData.Binding == 1)
				{
					nBinding = 1;
				}
				int rightGoodsOldAppendPropLev = rightGoodsData.AppendPropLev;
				int leftGoodsOldAppendPropLev = leftGoodsData.AppendPropLev;
				int result = 1;
				if (Global.IsAppendPropChuanChenSuccess(leftGoodsData))
				{
					if (nLeftColor > nRigthColor)
					{
						int nLeftAppp = leftGoodsData.AppendPropLev;
						if (nLeftAppp > nMaxLevel)
						{
							rightGoodsData.AppendPropLev = nMaxLevel;
						}
						else
						{
							rightGoodsData.AppendPropLev = nLeftAppp;
						}
					}
					else
					{
						rightGoodsData.AppendPropLev = leftGoodsData.AppendPropLev;
					}
					leftGoodsData.AppendPropLev = 0;
					string[] dbFields = null;
					string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
					{
						client.ClientData.RoleID,
						leftGoodsData.Id,
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						leftGoodsData.AppendPropLev,
						"*"
					});
					TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
					if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-12,
							roleID,
							leftGoodsData.Id,
							rightGoodsData.Id
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-13,
							roleID,
							leftGoodsData.Id,
							rightGoodsData.Id
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					dbFields = null;
					strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
					{
						client.ClientData.RoleID,
						rightGoodsData.Id,
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						nBinding,
						"*",
						"*",
						"*",
						"*",
						"*",
						rightGoodsData.AppendPropLev,
						"*"
					});
					dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
					if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-14,
							roleID,
							leftGoodsData.Id,
							rightGoodsData.Id
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
						{
							-15,
							roleID,
							leftGoodsData.Id,
							rightGoodsData.Id
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					Global.ModRoleGoodsEvent(client, leftGoodsData, 0, "装备追加传承_提供方", false);
					Global.ModRoleGoodsEvent(client, rightGoodsData, 0, "装备追加传承_接受方", false);
					EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, leftGoodsData.GoodsID, (long)leftGoodsData.Id, 0, leftGoodsData.GCount, "装备追加传承_提供方");
					EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, rightGoodsData.GoodsID, (long)rightGoodsData.Id, 0, rightGoodsData.GCount, "装备追加传承_接受方");
					ProcessTask.ProcessAddTaskVal(client, TaskTypes.EquipChuanCheng, -1, 1, new object[0]);
					Global.BroadcastAppendChuanChengOk(client, leftGoodsData, rightGoodsData);
					if (leftGoodsData.Using > 0 || rightGoodsData.Using > 0)
					{
						Global.RefreshEquipPropAndNotify(client);
					}
					strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}:{14}:{15}:{16}:{17}", new object[]
					{
						result,
						roleID,
						leftGoodsData.Id,
						rightGoodsData.Id,
						leftGoodsData.BornIndex,
						leftGoodsData.AddPropIndex,
						leftGoodsData.Quality,
						leftGoodsData.AppendPropLev,
						leftGoodsData.Binding,
						leftGoodsData.Lucky,
						leftGoodsData.Strong,
						rightGoodsData.BornIndex,
						rightGoodsData.AddPropIndex,
						rightGoodsData.Quality,
						rightGoodsData.AppendPropLev,
						nBinding,
						rightGoodsData.Lucky,
						rightGoodsData.Strong
					});
					Global.ModifyGoodsBindPorp(client, rightGoodsDbID, nBinding);
				}
				else
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}:0:0:0:0:0:0:0:0:0:0:0:0:0:0", new object[]
					{
						-23,
						roleID,
						leftGoodsData.Id,
						rightGoodsData.Id
					});
				}
				GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.EquipChuanChengTimes));
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F75 RID: 16245 RVA: 0x003A939C File Offset: 0x003A759C
		private static TCPProcessCmdResults ProcessSpriteQueryCopyTeamDamageInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (Global.IsInTeamCopyScene(client.ClientData.MapCode) && client.ClientData.CopyMapID >= 0)
				{
					CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(client.ClientData.CopyMapID);
					if (null != copyMap)
					{
						GameManager.CopyMapMgr.BroadcastCopyMapDamageInfo(copyMap, -1);
					}
				}
				if (GameManager.GuildCopyMapMgr.IsGuildCopyMap(client.ClientData.MapCode))
				{
					CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(client.ClientData.CopyMapID);
					if (null != copyMap)
					{
						GameManager.CopyMapMgr.SendCopyMapMaxDamageInfo(client, copyMap, GameManager.GuildCopyMapMgr.MaxDamageSendCount);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F76 RID: 16246 RVA: 0x003A95B8 File Offset: 0x003A77B8
		private static TCPProcessCmdResults ProcessSpriteQueryCampBattleInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nSelfValue = client.ClientData.CampBattleTotalPoint;
				int nTotal = BattleManager.BattleMaxPoint;
				string sFinalName = null;
				string sName = BattleManager.BattleMaxPointName;
				if (!string.IsNullOrEmpty(sName))
				{
					sFinalName = Global.FormatRoleName(client, sName);
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleAID,
					nSelfValue,
					nTotal,
					sFinalName
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F77 RID: 16247 RVA: 0x003A97A4 File Offset: 0x003A79A4
		private static TCPProcessCmdResults ProcessSpriteQueryDaimoSquareInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nDate = TimeUtil.NowDateTime().DayOfYear;
				int nCount = Global.QueryDayActivityEnterCountToDB(client, client.ClientData.RoleID, nDate, 2);
				int nSelfValue = client.ClientData.DaimonSquarePointTotalPoint;
				int nTotal = GameManager.DaimonSquareCopySceneMgr.m_nDaimonSquareMaxPoint;
				string sFinalName = null;
				string sName = GameManager.DaimonSquareCopySceneMgr.m_nDaimonSquareMaxName;
				if (!string.IsNullOrEmpty(sName))
				{
					sFinalName = sName;
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
				{
					roleAID,
					nSelfValue,
					nCount,
					nTotal,
					sFinalName,
					client.ClientData.DaimonSquarePoint
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F78 RID: 16248 RVA: 0x003A99DC File Offset: 0x003A7BDC
		private static TCPProcessCmdResults ProcessGetDaimonsquareAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				int nValue = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int[] nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("BloodCastleExp", ',');
				int nNeedMoney;
				string strcmd;
				if (nValue == 1)
				{
					nNeedMoney = 0;
				}
				else if (nValue == 2)
				{
					nNeedMoney = nArry[0];
				}
				else
				{
					if (nValue != 3)
					{
						strcmd = string.Format("{0}:{1}", -2, roleAID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					nNeedMoney = nArry[1];
				}
				if (nNeedMoney > 0)
				{
					int nMoney = client.ClientData.UserMoney;
					if (nMoney < nNeedMoney && !HuanLeDaiBiManager.GetInstance().HuanledaibiEnough(client, nNeedMoney))
					{
						strcmd = string.Format("{0}:{1}", -1, roleAID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				int FuBenSeqID = Global.GetRoleParamsInt32FromDB(client, "DaimonSquareFuBenSeqID");
				int nSceneID = Global.GetRoleParamsInt32FromDB(client, "DaimonSquareSceneid");
				int nFlag = Global.GetRoleParamsInt32FromDB(client, "DaimonSquareSceneFinishFlag");
				int nTimer = Global.GetRoleParamsInt32FromDB(client, "DaimonSquareSceneTimer");
				int awardState = GameManager.CopyMapMgr.FindAwardState(client.ClientData.RoleID, FuBenSeqID, nSceneID);
				if (awardState > 0)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(21, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
				}
				else
				{
					if (nNeedMoney > 0)
					{
						if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nNeedMoney, "领取恶魔广场奖励", true, true, false, DaiBiSySType.EMoDuoBei))
						{
							strcmd = string.Format("{0}:{1}", -1, roleAID);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					GameManager.DaimonSquareCopySceneMgr.GiveAwardDaimonSquareCopyScene(client, nValue);
				}
				strcmd = string.Format("{0}:{1}", 1, roleAID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F79 RID: 16249 RVA: 0x003A9D98 File Offset: 0x003A7F98
		private static TCPProcessCmdResults ProcessSpriteUpdateEverydayOnlineAwardGiftInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					client.ClientData.RoleID,
					client.ClientData.DayOnlineSecond,
					client.ClientData.MyHuodongData.EveryDayOnLineAwardStep,
					client.ClientData.MyHuodongData.EveryDayOnLineAwardGoodsID
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F7A RID: 16250 RVA: 0x003A9F9C File Offset: 0x003A819C
		private static TCPProcessCmdResults ProcessSpriteGetEveryDayOnLineAwardGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nTimer = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int[] nGoodsID = new int[]
				{
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1
				};
				int nRet = -1;
				int nDate = TimeUtil.NowDateTime().DayOfYear;
				List<GoodsData> goodsDataList = new List<GoodsData>();
				if (nTimer == 1)
				{
					int nStep = HuodongCachingMgr.ProcessGetEveryDayOnLineAwardGift2(client, goodsDataList, out nRet);
					client.ClientData.DailyOnLineAwardGift = goodsDataList;
					int nCount = goodsDataList.Count;
					if (goodsDataList != null && goodsDataList.Count != 0)
					{
						for (int i = 0; i < goodsDataList.Count; i++)
						{
							if (goodsDataList[i].GoodsID > 0)
							{
								nGoodsID[i] = goodsDataList[i].GoodsID;
							}
						}
					}
					string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", new object[]
					{
						roleID,
						nRet,
						nStep,
						client.ClientData.DayOnlineSecond,
						nGoodsID[0],
						nGoodsID[1],
						nGoodsID[2],
						nGoodsID[3],
						nGoodsID[4],
						nGoodsID[5],
						nGoodsID[6]
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nTimer == 2)
				{
					if (client.ClientData.MyHuodongData.GetEveryDayOnLineAwardDayID != nDate)
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
					int nTotal = HuodongCachingMgr.GetEveryDayOnLineItemCount();
					if (nTotal == client.ClientData.MyHuodongData.EveryDayOnLineAwardStep)
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
					goodsDataList = client.ClientData.DailyOnLineAwardGift;
					if (goodsDataList != null && goodsDataList.Count > 0)
					{
						for (int j = 0; j < goodsDataList.Count; j++)
						{
							Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsDataList[j].GoodsID, goodsDataList[j].GCount, goodsDataList[j].Quality, goodsDataList[j].Props, goodsDataList[j].Forge_level, 1, 0, "", true, 1, "每日在线奖励物品", goodsDataList[j].Endtime, goodsDataList[j].AddPropIndex, goodsDataList[j].BornIndex, goodsDataList[j].Lucky, goodsDataList[j].Strong, 0, 0, 0, null, null, 0, true);
							client.ClientData.AddAwardRecord(RoleAwardMsg.MeiRiZaiXian, goodsDataList[j], false);
							if (client.ClientData.MyHuodongData.GetEveryDayOnLineAwardDayID != nDate)
							{
								client.ClientData.MyHuodongData.EveryDayOnLineAwardStep = 0;
								client.ClientData.MyHuodongData.GetEveryDayOnLineAwardDayID = nDate;
							}
							nGoodsID[j] = goodsDataList[j].GoodsID;
							client.ClientData.MyHuodongData.EveryDayOnLineAwardStep++;
							if (nTotal <= client.ClientData.MyHuodongData.EveryDayOnLineAwardStep)
							{
								break;
							}
						}
					}
					GameManager.ClientMgr.NotifyGetAwardMsg(client, RoleAwardMsg.MeiRiZaiXian, "");
					bool bGoOn = true;
					string strAwardID = "";
					if (client.ClientData.MyHuodongData.EveryDayOnLineAwardGoodsID != null && client.ClientData.MyHuodongData.EveryDayOnLineAwardGoodsID.Length > 0)
					{
						string[] strOldId = client.ClientData.MyHuodongData.EveryDayOnLineAwardGoodsID.Split(new char[]
						{
							','
						});
						if (strOldId != null && strOldId.Length > 0)
						{
							for (int i = 0; i < strOldId.Length; i++)
							{
								if (Global.SafeConvertToInt32(strOldId[i]) <= 0)
								{
									break;
								}
								strAwardID += strOldId[i];
								strAwardID += ',';
								bGoOn = false;
							}
							for (int j = 0; j < goodsDataList.Count; j++)
							{
								strAwardID += goodsDataList[j].GoodsID;
								strAwardID += ',';
								bGoOn = false;
							}
						}
					}
					if (bGoOn)
					{
						strAwardID = string.Format("{0},{1},{2},{3},{4},{5},{6}", new object[]
						{
							nGoodsID[0],
							nGoodsID[1],
							nGoodsID[2],
							nGoodsID[3],
							nGoodsID[4],
							nGoodsID[5],
							nGoodsID[6]
						});
					}
					client.ClientData.MyHuodongData.EveryDayOnLineAwardGoodsID = strAwardID;
					client.ClientData.MyHuodongData.GetEveryDayOnLineAwardDayID = nDate;
					Global.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, client);
					GameManager.ClientMgr.NotifyHuodongData(client);
					if (client._IconStateMgr.CheckFuMeiRiZaiXian(client))
					{
						client._IconStateMgr.SendIconStateToClient(client);
					}
					nRet = 1;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F7B RID: 16251 RVA: 0x003AA6E4 File Offset: 0x003A88E4
		private static TCPProcessCmdResults ProcessSpriteUpdateEverydaySeriesLoginInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					client.ClientData.RoleID,
					Global.GMin(client.ClientData.SeriesLoginNum, 7),
					client.ClientData.MyHuodongData.SeriesLoginGetAwardStep,
					client.ClientData.MyHuodongData.SeriesLoginAwardGoodsID
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F7C RID: 16252 RVA: 0x003AA8EC File Offset: 0x003A8AEC
		private static TCPProcessCmdResults ProcessSpriteGetSeriesLoginAwardGiftCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nTimer = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nDay = TimeUtil.NowDateTime().DayOfYear;
				if (client.ClientData.MyHuodongData.SeriesLoginAwardDayID == nDay && client.ClientData.MyHuodongData.SeriesLoginGetAwardStep == client.ClientData.SeriesLoginNum)
				{
					GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(661, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int[] nGoodsID = new int[]
				{
					-1,
					-1,
					-1,
					-1,
					-1,
					-1,
					-1
				};
				int nRet = -1;
				List<GoodsData> goodsDataList = new List<GoodsData>();
				if (nTimer == 1)
				{
					int nStep = HuodongCachingMgr.ProcessGetSeriesLoginGift2(client, goodsDataList);
					client.ClientData.SeriesLoginAwardGift = goodsDataList;
					if (goodsDataList != null && goodsDataList.Count != 0)
					{
						for (int i = 0; i < goodsDataList.Count; i++)
						{
							if (goodsDataList[i].GoodsID > 0)
							{
								nGoodsID[i] = goodsDataList[i].GoodsID;
							}
						}
					}
					string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", new object[]
					{
						roleID,
						nRet,
						nStep,
						client.ClientData.SeriesLoginNum,
						nGoodsID[0],
						nGoodsID[1],
						nGoodsID[2],
						nGoodsID[3],
						nGoodsID[4],
						nGoodsID[5],
						nGoodsID[6]
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nTimer == 2)
				{
					if (client.ClientData.MyHuodongData.SeriesLoginAwardDayID == nDay && client.ClientData.SeriesLoginNum <= client.ClientData.MyHuodongData.SeriesLoginGetAwardStep)
					{
						return TCPProcessCmdResults.RESULT_OK;
					}
					goodsDataList = client.ClientData.SeriesLoginAwardGift;
					if (goodsDataList != null && goodsDataList.Count > 0)
					{
						for (int j = 0; j < goodsDataList.Count; j++)
						{
							Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsDataList[j].GoodsID, goodsDataList[j].GCount, goodsDataList[j].Quality, goodsDataList[j].Props, goodsDataList[j].Forge_level, 1, 0, "", true, 1, "连续登陆奖励物品", goodsDataList[j].Endtime, goodsDataList[j].AddPropIndex, goodsDataList[j].BornIndex, goodsDataList[j].Lucky, goodsDataList[j].Strong, 0, 0, 0, null, null, 0, true);
							client.ClientData.AddAwardRecord(RoleAwardMsg.LianXuDengLu, goodsDataList[j], false);
							int nDate = TimeUtil.NowDateTime().DayOfYear;
							nGoodsID[j] = goodsDataList[j].GoodsID;
							if (client.ClientData.MyHuodongData.GetEveryDayOnLineAwardDayID != nDate)
							{
								client.ClientData.MyHuodongData.EveryDayOnLineAwardStep = 0;
								client.ClientData.MyHuodongData.GetEveryDayOnLineAwardDayID = nDate;
							}
							client.ClientData.MyHuodongData.SeriesLoginGetAwardStep++;
							if (client.ClientData.SeriesLoginNum <= client.ClientData.MyHuodongData.SeriesLoginGetAwardStep)
							{
								break;
							}
						}
						GameManager.ClientMgr.NotifyGetAwardMsg(client, RoleAwardMsg.LianXuDengLu, "");
						bool bGoOn = true;
						string strAwardID = "";
						if (client.ClientData.MyHuodongData.SeriesLoginAwardGoodsID != null && client.ClientData.MyHuodongData.SeriesLoginAwardGoodsID.Length > 0)
						{
							string[] strOldId = client.ClientData.MyHuodongData.SeriesLoginAwardGoodsID.Split(new char[]
							{
								','
							});
							if (strOldId != null && strOldId.Length > 0)
							{
								for (int i = 0; i < strOldId.Length; i++)
								{
									if (Global.SafeConvertToInt32(strOldId[i]) <= 0)
									{
										break;
									}
									strAwardID += strOldId[i];
									strAwardID += ',';
									bGoOn = false;
								}
								for (int j = 0; j < goodsDataList.Count; j++)
								{
									strAwardID += goodsDataList[j].GoodsID;
									strAwardID += ',';
									bGoOn = false;
								}
							}
						}
						if (bGoOn)
						{
							strAwardID = string.Format("{0},{1},{2},{3},{4},{5},{6}", new object[]
							{
								nGoodsID[0],
								nGoodsID[1],
								nGoodsID[2],
								nGoodsID[3],
								nGoodsID[4],
								nGoodsID[5],
								nGoodsID[6]
							});
						}
						client.ClientData.MyHuodongData.SeriesLoginAwardGoodsID = strAwardID;
					}
					client.ClientData.MyHuodongData.SeriesLoginAwardDayID = nDay;
					Global.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, client);
					GameManager.ClientMgr.NotifyHuodongData(client);
					if (client._IconStateMgr.CheckFuLiLianXuDengLu(client))
					{
						client._IconStateMgr.SendIconStateToClient(client);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F7D RID: 16253 RVA: 0x003AB0B8 File Offset: 0x003A92B8
		private static TCPProcessCmdResults ProcessSpriteUpdateGetThingsFlagCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int flag = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				client.ClientData.AutoFightGetThings = flag;
				Global.SaveRoleParamsInt32ValueToDB(client, "FightGetThings", flag, true);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F7E RID: 16254 RVA: 0x003AB224 File Offset: 0x003A9424
		private static TCPProcessCmdResults ProcessSpriteEffectHideFlagsCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			int[] cmdData = null;
			try
			{
				cmdData = DataHelper.BytesToObject<int[]>(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				if (cmdData != null && cmdData.Length > 0)
				{
					GameClient client = GameManager.ClientMgr.FindClient(socket);
					if (null != client)
					{
						client.ClientEffectHideFlag1 = cmdData[0];
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F7F RID: 16255 RVA: 0x003AB2E4 File Offset: 0x003A94E4
		private static TCPProcessCmdResults PorcessMoJingExchangeInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				Global.QueryToDBRoleMoJingExchangeInfo(client);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(client.ClientData.MoJingExchangeInfo, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F80 RID: 16256 RVA: 0x003AB448 File Offset: 0x003A9648
		private static TCPProcessCmdResults ProcessSpriteExchangeMoJingAndQiFuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nId = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SystemXmlItem systemExChangeItem = null;
				if (!GameManager.SystemExchangeMoJingAndQiFu.SystemXmlItemDict.TryGetValue(nId, out systemExChangeItem))
				{
					LogManager.WriteLog(LogTypes.Warning, string.Format("根据id定位魔晶和祈福兑换配置项失败, id={0}", nId), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				string strcmd = "";
				int nDuiHuanType = systemExChangeItem.GetIntValue("DuiHuanType", -1);
				int nMax = systemExChangeItem.GetIntValue("DayDuiHuanNum", -1);
				int nMoJingExchangeCount = 0;
				SystemXmlItem systemExChangeType = null;
				GameManager.SystemExchangeType.SystemXmlItemDict.TryGetValue(nDuiHuanType, out systemExChangeType);
				int nSaleType = (systemExChangeType == null) ? -1 : systemExChangeType.GetIntValue("SaleType", -1);
				if (nMax > 0)
				{
					if (9 == nSaleType)
					{
						if (client.ClientData.CompType <= 0)
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
						int nCompShopDuiHuanType = CompManager.getInstance().GetCompShopDuiHuanType(CompShopDHTypeIndex.CSDH_CompShop);
						if (nCompShopDuiHuanType == nDuiHuanType)
						{
							nMax = CompManager.getInstance().GetDayDuiHuanNum(client, nMax);
						}
						else if (!CompBattleManager.getInstance().CheckCompShopDuiHuanType(client, nDuiHuanType))
						{
							return TCPProcessCmdResults.RESULT_OK;
						}
					}
					Global.QueryToDBRoleMoJingExchangeInfo(client);
					if (client.ClientData.MoJingExchangeInfo == null)
					{
						client.ClientData.MoJingExchangeInfo = new Dictionary<int, int>();
					}
					client.ClientData.MoJingExchangeInfo.TryGetValue(nId, out nMoJingExchangeCount);
					if (nMax > 0 && nMoJingExchangeCount >= nMax)
					{
						strcmd = string.Format("{0}:{1}", roleID, -10);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				bool nRet = true;
				int nNeedMoJing = systemExChangeItem.GetIntValue("MoJing", -1);
				int nNeedQiFuJiFen = systemExChangeItem.GetIntValue("QiFuJiFen", -1);
				int nNeedZhanGong = systemExChangeItem.GetIntValue("ZhanGong", -1);
				int nNeedZhanMengLevel = systemExChangeItem.GetIntValue("NeedZhanMengLevel", -1);
				int nNeedPetJiFen = systemExChangeItem.GetIntValue("PetJiFen", -1);
				int nNeedTianTiRongYao = systemExChangeItem.GetIntValue("RongYao", -1);
				int[] nNeedGoods = systemExChangeItem.GetIntArrayValue("NeedGoods", ',');
				int[] nNewGoods = systemExChangeItem.GetIntArrayValue("NewGoods", ',');
				int nNeedTreasureJiFen = systemExChangeItem.GetIntValue("TreasureJiFen", -1);
				int nNeedTreasureXueZuan = systemExChangeItem.GetIntValue("TreasureXueZuan", -1);
				int nNeedZhengBaPoint = systemExChangeItem.GetIntValue("ZhengBaDianShu", -1);
				int nNeedBHMatchJifen = systemExChangeItem.GetIntValue("LeagueNum", -1);
				int nNeedCompDonate = systemExChangeItem.GetIntValue("CompHonor", -1);
				int nNeedHuntNum = systemExChangeItem.GetIntValue("HuntNum", -1);
				int nNeedTeamRongYao = systemExChangeItem.GetIntValue("TeamRongYao", -1);
				int nNeedTeamPoint = systemExChangeItem.GetIntValue("TeamPoint", -1);
				int nMoJingPoint = 0;
				int nQiFuJiFen = 0;
				int nZhanGong = 0;
				int nPetJiFen = 0;
				if (nNeedMoJing > 0)
				{
					nMoJingPoint = GameManager.ClientMgr.GetTianDiJingYuanValue(client);
					if (nMoJingPoint < nNeedMoJing)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -1);
					}
				}
				if (nNeedQiFuJiFen > 0)
				{
					nQiFuJiFen = Global.GetRoleParamsInt32FromDB(client, "ZJDJiFen");
					if (nQiFuJiFen < nNeedQiFuJiFen)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -2);
					}
				}
				BangHuiDetailData banghuiDetaiData = null;
				if (nNeedZhanGong > 0)
				{
					banghuiDetaiData = Global.GetBangHuiDetailData(client.ClientData.RoleID, client.ClientData.Faction, 0);
					if (null == banghuiDetaiData)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -6);
					}
					else
					{
						nZhanGong = client.ClientData.BangGong;
						if (nZhanGong < nNeedZhanGong)
						{
							nRet = false;
							strcmd = string.Format("{0}:{1}", roleID, -7);
						}
					}
				}
				if (nNeedPetJiFen > 0)
				{
					nPetJiFen = Global.GetRoleParamsInt32FromDB(client, "PetJiFen");
					if (nPetJiFen < nNeedPetJiFen)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -9);
					}
				}
				if (nNeedTianTiRongYao > 0)
				{
					if (client.ClientData.TianTiData.RongYao < nNeedTianTiRongYao)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -12);
					}
				}
				if (nNeedTreasureJiFen > 0)
				{
					int nTreasureJiFen = Global.GetRoleParamsInt32FromDB(client, "TreasureJiFen");
					if (nTreasureJiFen < nNeedTreasureJiFen)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -13);
					}
				}
				if (nNeedTreasureXueZuan > 0)
				{
					int nTreasureXueZuan = Global.GetRoleParamsInt32FromDB(client, "TreasureXueZuan");
					if (nTreasureXueZuan < nNeedTreasureXueZuan)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -14);
					}
				}
				if (nNeedZhanMengLevel > 0)
				{
					if (null == banghuiDetaiData)
					{
						banghuiDetaiData = Global.GetBangHuiDetailData(client.ClientData.RoleID, client.ClientData.Faction, 0);
					}
					if (null == banghuiDetaiData)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -8);
					}
					else if (banghuiDetaiData.QiLevel < nNeedZhanMengLevel)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -8);
					}
				}
				if (nNeedZhengBaPoint > 0)
				{
					int nZhengBaPoint = Global.GetRoleParamsInt32FromDB(client, "ZhengBaPoint");
					if (nZhengBaPoint < nNeedZhengBaPoint)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -15);
					}
				}
				if (nNeedHuntNum > 0)
				{
					int nHuntPoint = Global.GetRoleParamsInt32FromDB(client, "10209");
					if (nHuntPoint < nNeedHuntNum)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -16);
					}
				}
				if (nNeedBHMatchJifen > 0)
				{
					int nBHMatchJifen = Global.GetRoleParamsInt32FromDB(client, "10190");
					if (nBHMatchJifen < nNeedBHMatchJifen)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -17);
					}
				}
				if (nNeedCompDonate > 0)
				{
					int nCompDonate = GameManager.ClientMgr.GetCompDonateValue(client);
					if (nCompDonate < nNeedCompDonate)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -18);
					}
				}
				if (nNeedTeamRongYao > 0)
				{
					int nTeamRongYao = client.ClientData.TeamRongYao;
					if (nTeamRongYao < nNeedTeamRongYao)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -19);
					}
				}
				if (nNeedTeamPoint > 0)
				{
					int nTeamPoint = client.ClientData.TeamPoint;
					if (nTeamPoint < nNeedTeamPoint)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -19);
					}
				}
				if (!Global.CanAddGoodsNum(client, 1))
				{
					strcmd = string.Format("{0}:{1}", roleID, -5);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData goodsdatainfo = null;
				if (nNeedGoods != null && nRet)
				{
					goodsdatainfo = Global.GetGoodsByID(client, nNeedGoods[0], nNeedGoods[1], nNeedGoods[2], nNeedGoods[3], nNeedGoods[4], nNeedGoods[5], nNeedGoods[6], false);
					if (goodsdatainfo == null)
					{
						nRet = false;
						strcmd = string.Format("{0}:{1}", roleID, -3);
					}
				}
				List<GoodsData> goodsDataList = new List<GoodsData>();
				if (nRet)
				{
					if (nNeedGoods != null)
					{
						int nGoodID = goodsdatainfo.GoodsID;
						int nForgeLev = goodsdatainfo.Forge_level;
						int nBinding = goodsdatainfo.Binding;
						int nExcellenceInfo = goodsdatainfo.ExcellenceInfo;
						int nLucky = goodsdatainfo.Lucky;
						int nAppendPropLev = goodsdatainfo.AppendPropLev;
						bool usedBinding = false;
						bool usedTimeLimited = false;
						if (goodsdatainfo == null || !GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsdatainfo, 1, false, out usedBinding, out usedTimeLimited, false))
						{
							strcmd = string.Format("{0}:{1}", roleID, -4);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
					}
					if (nNeedMoJing > 0)
					{
						GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, -nNeedMoJing, "魔晶兑换物品", false, true, false);
						SevenDayGoalEventObject evObj_MoJingExchange = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.ExchangeJinHuaJingShiByMoJing);
						evObj_MoJingExchange.Arg1 = nNewGoods[0];
						GlobalEventSource.getInstance().fireEvent(evObj_MoJingExchange);
					}
					if (nNeedQiFuJiFen > 0)
					{
						Global.AddZaJinDanJiFen(client, -nNeedQiFuJiFen, "兑换物品", false);
						SevenDayGoalEventObject evObj_QiFuExchange = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.ExchangeJinHuaJingShiByQiFuScore);
						evObj_QiFuExchange.Arg1 = nNewGoods[0];
						GlobalEventSource.getInstance().fireEvent(evObj_QiFuExchange);
					}
					if (nNeedTreasureJiFen > 0)
					{
						GameManager.ClientMgr.ModifyTreasureJiFenValue(client, -nNeedTreasureJiFen, "兑换物品", true);
					}
					if (nNeedTreasureXueZuan > 0)
					{
						GameManager.ClientMgr.ModifyTreasureXueZuanValue(client, -nNeedTreasureXueZuan, true, true);
					}
					if (nNeedZhengBaPoint > 0)
					{
						GameManager.ClientMgr.ModifyZhengBaPointValue(client, -nNeedZhengBaPoint, "兑换", true, true);
					}
					if (nNeedTeamRongYao > 0)
					{
						GameManager.ClientMgr.ModifyTeamRongYaoValue(client, -nNeedTeamRongYao, "兑换", true);
					}
					if (nNeedTeamPoint > 0)
					{
						GameManager.ClientMgr.ModifyTeamPointValue(client, -nNeedTeamPoint, "兑换", true);
					}
					if (nNeedBHMatchJifen > 0)
					{
						GameManager.ClientMgr.ModifyBHMatchGuessJiFenValue(client, -nNeedBHMatchJifen, "兑换", true, true, false);
					}
					if (nNeedCompDonate > 0)
					{
						GameManager.ClientMgr.ModifyCompDonateValue(client, -nNeedCompDonate, "兑换", true, true, false);
					}
					if (nNeedZhanGong > 0)
					{
						if (!GameManager.ClientMgr.SubUserBangGong(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nNeedZhanGong))
						{
							strcmd = string.Format("{0}:{1}", roleID, -7);
						}
						else
						{
							GameManager.logDBCmdMgr.AddDBLogInfo(-1, "战功", "魔晶兑换", "系统", client.ClientData.RoleName, "减少", nNeedZhanGong, client.ClientData.ZoneID, client.strUserID, client.ClientData.BangGong, client.ServerId, null);
						}
					}
					if (nNeedPetJiFen > 0)
					{
						GameManager.ClientMgr.ModifyPetJiFenValue(client, -nNeedPetJiFen, "商店兑换", false, true);
					}
					if (nNeedTianTiRongYao > 0)
					{
						GameManager.ClientMgr.ModifyTianTiRongYaoValue(client, -nNeedTianTiRongYao, "荣耀兑换", true);
					}
					if (nNeedHuntNum > 0)
					{
						GameManager.ClientMgr.ModifyMountPointValue(client, -nNeedHuntNum, "坐骑点兑换", true, true, false);
					}
					if (nNewGoods != null && nNewGoods.Length == 7)
					{
						if (nMax > 0)
						{
							client.ClientData.MoJingExchangeInfo[nId] = nMoJingExchangeCount + 1;
							byte[] sendBytesCmd = new UTF8Encoding().GetBytes(string.Format("{0}:{1}:{2}:{3}", new object[]
							{
								roleID,
								nId,
								Global.GetOffsetDayNow(),
								nMoJingExchangeCount + 1
							}));
							byte[] bytesData = null;
							if (TCPProcessCmdResults.RESULT_FAILED == Global.TransferRequestToDBServer2(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, 10157, sendBytesCmd, sendBytesCmd.Length, out bytesData, client.ServerId))
							{
								LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
								strcmd = string.Format("{0}:{1}", roleID, -11);
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
						}
						if (nNeedGoods == null)
						{
							GoodsData tmpGoodsData = new GoodsData
							{
								GoodsID = nNewGoods[0],
								Forge_level = nNewGoods[3],
								GCount = nNewGoods[1],
								Binding = 1,
								Lucky = nNewGoods[5],
								ExcellenceInfo = nNewGoods[6],
								AppendPropLev = nNewGoods[4]
							};
							tmpGoodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, nNewGoods[0], nNewGoods[1], 0, "", nNewGoods[3], 1, 0, "", true, 1, "魔晶和祈福兑换", "1900-01-01 12:00:00", 0, 0, nNewGoods[5], 0, nNewGoods[6], nNewGoods[4], 0, null, null, 0, true);
							goodsDataList.Add(tmpGoodsData);
						}
						else if (nNeedMoJing > 0)
						{
							goodsDataList.Add(new GoodsData(goodsdatainfo)
							{
								GoodsID = nNewGoods[0],
								GCount = nNewGoods[1],
								Binding = 1,
								Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, nNewGoods[0], nNewGoods[1], 0, "", goodsdatainfo.Forge_level, 1, 0, "", true, 1, "魔晶兑换", "1900-01-01 12:00:00", 0, 0, goodsdatainfo.Lucky, 0, goodsdatainfo.ExcellenceInfo, goodsdatainfo.AppendPropLev, 0, null, null, 0, true)
							});
						}
						else
						{
							goodsDataList.Add(new GoodsData(goodsdatainfo)
							{
								GoodsID = nNewGoods[0],
								GCount = nNewGoods[1],
								Binding = 1,
								Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, nNewGoods[0], nNewGoods[1], 0, "", goodsdatainfo.Forge_level, 1, 0, "", true, 1, "积分兑换", "1900-01-01 12:00:00", 0, 0, goodsdatainfo.Lucky, 0, goodsdatainfo.ExcellenceInfo, goodsdatainfo.AppendPropLev, 0, null, null, 0, true)
							});
						}
					}
					strcmd = string.Format("{0}:{1}", roleID, 1);
				}
				string castResList = "";
				if (nNeedMoJing > 0)
				{
					castResList += EventLogManager.AddResPropString(ResLogType.RongLianZhi, new object[]
					{
						-nNeedMoJing,
						nMoJingPoint,
						GameManager.ClientMgr.GetTianDiJingYuanValue(client)
					});
				}
				if (nNeedQiFuJiFen > 0)
				{
					castResList += EventLogManager.AddResPropString(ResLogType.QiFuJiFen, new object[]
					{
						-nNeedQiFuJiFen,
						nQiFuJiFen,
						Global.GetRoleParamsInt32FromDB(client, "ZJDJiFen")
					});
				}
				if (nNeedZhanGong > 0)
				{
					castResList += EventLogManager.AddResPropString(ResLogType.BangGong, new object[]
					{
						-nNeedZhanGong,
						nZhanGong,
						client.ClientData.BangGong
					});
				}
				if (nNeedPetJiFen > 0)
				{
					castResList += EventLogManager.AddResPropString(ResLogType.PetJiFen, new object[]
					{
						-nNeedPetJiFen,
						nPetJiFen,
						Global.GetRoleParamsInt32FromDB(client, "PetJiFen")
					});
				}
				if (null != goodsdatainfo)
				{
					castResList += "@";
					castResList += EventLogManager.NewGoodsDataPropString(goodsdatainfo);
				}
				if (castResList.Length > 0)
				{
					castResList = castResList.Remove(0, 1);
				}
				string strResList = EventLogManager.MakeGoodsDataPropString(goodsDataList);
				EventLogManager.AddPurchaseEvent(client, 5, nId, castResList, strResList);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F81 RID: 16257 RVA: 0x003AC664 File Offset: 0x003AA864
		private static TCPProcessCmdResults ProcessSpriteStartMeditateCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int meditateState = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SystemXmlItem xmlItem;
				if (meditateState == 0)
				{
					Global.EndMeditate(client);
				}
				else if (!GameManager.SystemSystemOpen.SystemXmlItemDict.TryGetValue(14, out xmlItem) || client.ClientData.MainTaskID >= xmlItem.GetIntValue("TimeParameters", -1))
				{
					Global.StartMeditate(client);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F82 RID: 16258 RVA: 0x003AC834 File Offset: 0x003AAA34
		private static TCPProcessCmdResults ProcessSpriteGetMeditateExpCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nStep = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = "0:0";
				long nowTime = TimeUtil.NOW();
				int msecs = Global.GetRoleParamsInt32FromDB(client, "MeditateTime");
				int msecs_notsafe = 0;
				int nChangeLifeLev = client.ClientData.ChangeLifeCount;
				int nLev = client.ClientData.Level;
				int nBaseStarSoul = -1;
				long nBaseValue = Global.GetMingXiangExpr(nChangeLifeLev, nLev, out nBaseStarSoul);
				int rem_secs;
				int mins = Math.DivRem(msecs, 60000, out rem_secs);
				int remsecs_unsafe;
				int mins_unsafe = Math.DivRem(msecs_notsafe, 60000, out remsecs_unsafe);
				if (rem_secs + remsecs_unsafe >= 60000)
				{
					if (rem_secs > remsecs_unsafe)
					{
						mins++;
					}
					else
					{
						mins_unsafe++;
					}
				}
				long nExp = (long)mins * nBaseValue;
				nExp += (long)mins_unsafe * nBaseValue;
				int nStarSoul = mins * nBaseStarSoul;
				nStarSoul += mins_unsafe * nBaseStarSoul;
				bool bRet = true;
				if (nExp > 0L || nStarSoul > 0)
				{
					double[] nModulus = GameManager.systemParamsList.GetParamValueDoubleArrayByName("MingXiangLingQu", ',');
					if (nStep == 1)
					{
						int nNeedVip = (int)GameManager.systemParamsList.GetParamValueDoubleByName("VIPMingXiang2Times", 0.0);
						if (client.ClientData.VipLevel < nNeedVip)
						{
							strcmd = string.Format("{0}:{1}", -10, 0);
							bRet = false;
						}
						else
						{
							int nNeedMoney = (int)Math.Ceiling((double)(mins + mins_unsafe) * nModulus[0]);
							if (nNeedMoney > 0)
							{
								if (!Global.SubBindTongQianAndTongQian(client, nNeedMoney, "获取冥想多倍经验"))
								{
									strcmd = string.Format("{0}:{1}", -1, 0);
									bRet = false;
								}
								else
								{
									nExp *= 2L;
									nStarSoul *= 2;
								}
							}
						}
					}
					else if (nStep == 2)
					{
						int nNeedVip = (int)GameManager.systemParamsList.GetParamValueDoubleByName("VIPMingXiang4Times", 0.0);
						if (client.ClientData.VipLevel < nNeedVip)
						{
							strcmd = string.Format("{0}:{1}", -11, 0);
							bRet = false;
						}
						else
						{
							int nNeedDiamond = (int)Math.Ceiling((double)(mins + mins_unsafe) * nModulus[1]);
							if (nNeedDiamond > 0)
							{
								if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nNeedDiamond, "领取冥想经验(钻石)", true, true, false, DaiBiSySType.MingXiangDuoBei))
								{
									strcmd = string.Format("{0}:{1}", -2, 0);
									bRet = false;
								}
								else
								{
									nExp *= 4L;
									nStarSoul *= 4;
								}
							}
						}
					}
				}
				if (bRet && (nExp > 0L || nStarSoul > 0))
				{
					Global.ResetMeditateTime(client, nowTime, true);
					strcmd = string.Format("{0}:{1}", 1, nExp);
					GameManager.ClientMgr.ProcessRoleExperience(client, nExp, false, true, false, "none");
					GameManager.ClientMgr.ModifyStarSoulValue(client, nStarSoul, "领取冥想经验", true, true);
				}
				if (bRet && client.ClientData.MeditateGoodsDataList != null && client.ClientData.MeditateGoodsDataList.Count > 0)
				{
					int round = client.ClientData.MeditateGoodsDataList.Count;
					List<GoodsData> list = null;
					lock (client.ClientData.MeditateGoodsDataList)
					{
						list = new List<GoodsData>(client.ClientData.MeditateGoodsDataList);
					}
					int bagInt = 0;
					if (RebornEquip.MoreIsCanIntoRebornOrBaseBag(client, list, out bagInt))
					{
						foreach (GoodsData item in list)
						{
							GoodsData newIitem = new GoodsData(item);
							if (RebornEquip.IsRebornType(newIitem.GoodsID))
							{
								newIitem.Site = 15000;
							}
							else
							{
								newIitem.Site = 0;
							}
							int ret = GoodsUtil.AddGoodsDBCommand(client, newIitem, true, 1, "领取冥想奖励", true);
							if (ret < 0)
							{
								break;
							}
							client.ClientData.AddAwardRecord(RoleAwardMsg.ShenYou, newIitem, false);
							GoodsUtil.DestoryGoodsBySystem(client, item);
						}
					}
					else if (bagInt == 1)
					{
						GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(7000, new object[0]));
					}
					else if (bagInt == 2)
					{
						GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(4009, new object[0]));
					}
				}
				if (client._IconStateMgr.CheckShenYouAwardIcon(client))
				{
					client._IconStateMgr.SendIconStateToClient(client);
				}
				GameManager.ClientMgr.NotifyGetAwardMsg(client, RoleAwardMsg.ShenYou, "");
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F83 RID: 16259 RVA: 0x003ACF28 File Offset: 0x003AB128
		private static TCPProcessCmdResults ProcessSpriteGetMeditateTimeInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int msecs = Global.GetRoleParamsInt32FromDB(client, "MeditateTime");
				int msecs_notsafe = 0;
				int rem_secs;
				int mins = Math.DivRem(msecs, 60000, out rem_secs);
				int remsecs_unsafe;
				int mins_unsafe = Math.DivRem(msecs_notsafe, 60000, out remsecs_unsafe);
				if (rem_secs + remsecs_unsafe >= 60000)
				{
					if (rem_secs > remsecs_unsafe)
					{
						mins++;
					}
					else
					{
						mins_unsafe++;
					}
				}
				string strcmd = string.Format("{0}:{1}:{2}", roleID, mins * 60, mins_unsafe * 60);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F84 RID: 16260 RVA: 0x003AD124 File Offset: 0x003AB324
		private static TCPProcessCmdResults ProcessSpriteQueryTotalLoginInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nFlag = Global.GetRoleParamsInt32FromDB(client, "TotalLoginAwardFlag");
				int nLoginNum = (int)ChengJiuManager.GetChengJiuExtraDataByField(client, ChengJiuExtraDataField.TotalDayLogin);
				string strcmd = string.Format("{0}:{1}:{2}", client.ClientData.RoleID, nLoginNum, nFlag);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F85 RID: 16261 RVA: 0x003AD2DC File Offset: 0x003AB4DC
		private static TCPProcessCmdResults ProcessSpriteGetTotalLoginAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nIndex = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nRet = 0;
				int nMax = Data.GetTotalLoginInfoNum();
				if (nIndex < 0 || nIndex > nMax)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("数据错误, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int nLoginNum = (int)ChengJiuManager.GetChengJiuExtraDataByField(client, ChengJiuExtraDataField.TotalDayLogin);
				TotalLoginDataInfo totalLoginInfo = Data.GetTotalLoginDataInfo(nIndex);
				if (null == totalLoginInfo)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("得到累计登陆奖励信息数据失败,请检查配置文件, CMD={0}, Client={1}, Index={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), nIndex), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nIndexLogin = totalLoginInfo.TotalLoginDays;
				string strcmd;
				if (nIndexLogin > nLoginNum)
				{
					strcmd = string.Format("{0}:{1}:{2}", client.ClientData.RoleID, nIndex, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nFlag = 0;
				nFlag = Global.GetRoleParamsInt32FromDB(client, "TotalLoginAwardFlag");
				int nValue = nFlag & Global.GetBitValue(nIndex + 1);
				if (nValue == 0)
				{
					List<GoodsData> gooddata = null;
					gooddata = totalLoginInfo.NormalAward;
					if (gooddata != null)
					{
						client.ClientData.AddAwardRecord(RoleAwardMsg.LeiJiDengLu, gooddata, false);
						foreach (GoodsData key in gooddata)
						{
							Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, key.GoodsID, key.GCount, 0, "", key.Forge_level, key.Binding, 0, "", true, 1, "累计登陆普通奖励", "1900-01-01 12:00:00", 0, 0, key.Lucky, 0, key.ExcellenceInfo, key.AppendPropLev, 0, null, null, 0, true);
						}
					}
					int nOccupation = Global.CalcOriginalOccupationID(client);
					if (nOccupation == 0)
					{
						gooddata = totalLoginInfo.Award0;
					}
					else if (nOccupation == 1)
					{
						gooddata = totalLoginInfo.Award1;
					}
					else if (nOccupation == 2)
					{
						gooddata = totalLoginInfo.Award2;
					}
					else if (nOccupation == 3)
					{
						gooddata = totalLoginInfo.Award3;
					}
					else if (nOccupation == 5)
					{
						gooddata = totalLoginInfo.Award5;
					}
					if (gooddata != null)
					{
						foreach (GoodsData key in gooddata)
						{
							if (Global.IsCanGiveRewardByOccupation(client, key.GoodsID))
							{
								Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, key.GoodsID, key.GCount, 0, "", key.Forge_level, key.Binding, 0, "", true, 1, "累计登陆职业奖励", "1900-01-01 12:00:00", 0, 0, key.Lucky, 0, key.ExcellenceInfo, key.AppendPropLev, 0, null, null, 0, true);
								client.ClientData.AddAwardRecord(RoleAwardMsg.LeiJiDengLu, key, false);
							}
						}
					}
					GameManager.ClientMgr.NotifyGetAwardMsg(client, RoleAwardMsg.LeiJiDengLu, "");
					nFlag |= Global.GetBitValue(nIndex + 1);
					Global.SaveRoleParamsInt32ValueToDB(client, "TotalLoginAwardFlag", nFlag, true);
					nRet = 1;
					if (client._IconStateMgr.CheckFuLiLeiJiDengLu(client))
					{
						client._IconStateMgr.SendIconStateToClient(client);
					}
				}
				strcmd = string.Format("{0}:{1}:{2}", client.ClientData.RoleID, nIndex, nRet);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F86 RID: 16262 RVA: 0x003AD874 File Offset: 0x003ABA74
		private static TCPProcessCmdResults ProcessChangeLifeForEquipCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int rockID = Convert.ToInt32(fields[2]);
				int luckyID = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-2,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-3,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				if (category == 7 || category == 9 || category == 10)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-9,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (category < 0 || category > 49)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-4,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nChangeLifeLevel = goodsData.ChangeLifeLevForEquip;
				if (nChangeLifeLevel >= Global.EquipChangeLifeMaxLevel)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-5,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] nNeedGoodsIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengNeedGoods", ',');
				if (nNeedGoodsIDs.Length == 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-6,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nNeedRockID = nNeedGoodsIDs[nChangeLifeLevel + 1];
				if (nNeedRockID != rockID)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-6,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nNum = Global.GetTotalGoodsCountByID(client, nNeedRockID);
				if (nNum < 1)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] needMoJingArr = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengNeedMoJing", ',');
				int nNeedMoJing = needMoJingArr[nChangeLifeLevel + 1];
				int nMoJingPoint = GameManager.ClientMgr.GetTianDiJingYuanValue(client);
				if (nMoJingPoint < nNeedMoJing)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-7,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nNeedMoJing > 0)
				{
					GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, -nNeedMoJing, "装备转生", true, true, false);
				}
				bool usedBinding = false;
				bool usedTimeLimited = false;
				if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, rockID, 1, false, out usedBinding, out usedTimeLimited, false))
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-100,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int luckValue = 0;
				if (luckyID >= 0)
				{
					int luckyNum = 1;
					int nNumLuck = Global.GetTotalGoodsCountByID(client, luckyID);
					luckyNum = Global.GMin(nNumLuck, luckyNum);
					if (luckyNum > 0)
					{
						usedBinding = false;
						if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, luckyID, luckyNum, false, out usedBinding, out usedTimeLimited, false))
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
							{
								-102,
								roleID,
								0,
								0
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						luckValue = Global.GetLuckyValue(luckyID);
					}
				}
				if (Global.EquipChangeLifeStart(client, goodsData, luckValue, 1))
				{
					goodsData.ChangeLifeLevForEquip++;
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						1,
						roleID,
						goodsData.ChangeLifeLevForEquip,
						goodsData.Id
					});
					string[] dbFields = null;
					string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
					{
						roleID,
						id,
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						goodsData.ChangeLifeLevForEquip
					});
					TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
					if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-10,
							roleID,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-10,
							roleID,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					Global.ModRoleGoodsEvent(client, goodsData, 0, "装备转生", false);
					EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "装备转生");
					Global.BroadcastForgeOk(client, goodsData);
				}
				else
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-200,
						roleID,
						0,
						0
					});
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F87 RID: 16263 RVA: 0x003AE2DC File Offset: 0x003AC4DC
		private static TCPProcessCmdResults ProcessFlakeOffChangeLifeForEquipCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 4)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int nIndex = Convert.ToInt32(fields[2]);
				int luckyID = Convert.ToInt32(fields[3]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-1,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-2,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-3,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nIndex < 1 || nIndex > 2)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-4,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				if (category == 7 || category == 9 || category == 10)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-9,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (category < 0 || category > 49)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-4,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nChangeLifeLevel = goodsData.ChangeLifeLevForEquip;
				if (nChangeLifeLevel < 1)
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-5,
						roleID,
						0,
						0
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int[] nNeedGoodsIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengNeedGoods", ',');
				int[] nArrayGoods = new int[nNeedGoodsIDs.Count<int>()];
				for (int i = 0; i < nChangeLifeLevel; i++)
				{
					nArrayGoods[i] = nNeedGoodsIDs[i + 1];
					if (!Global.CanAddGoodsNum(client, 1))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-8,
							roleID,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (nIndex == 1)
				{
					int[] nJiBi = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengBoLiJinBi", ',');
					int nNeedMoney = nJiBi[nChangeLifeLevel + 1];
					if (!Global.SubBindTongQianAndTongQian(client, nNeedMoney, "装备转生剥离"))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-6,
							roleID,
							id,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				else if (nIndex == 2)
				{
					int[] nZuanShi = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengBoLiZhuanShi", ',');
					int nNeedMoney = nZuanShi[nChangeLifeLevel + 1];
					if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nNeedMoney, "装备转生剥离", true, true, false, DaiBiSySType.None))
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-7,
							roleID,
							id,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				bool usedBinding = false;
				bool usedTimeLimited = false;
				int luckValue = 0;
				if (luckyID >= 0)
				{
					int luckyNum = 1;
					int nNumLuck = Global.GetTotalGoodsCountByID(client, luckyID);
					luckyNum = Global.GMin(nNumLuck, luckyNum);
					if (luckyNum > 0)
					{
						if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, luckyID, luckyNum, false, out usedBinding, out usedTimeLimited, false))
						{
							strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
							{
								-102,
								roleID,
								0,
								0
							});
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						luckValue = Global.GetLuckyValue(luckyID);
					}
				}
				if (Global.EquipChangeLifeStart(client, goodsData, luckValue, 2))
				{
					goodsData.ChangeLifeLevForEquip = 0;
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						1,
						roleID,
						goodsData.ChangeLifeLevForEquip,
						goodsData.Id
					});
					string[] dbFields = null;
					string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
					{
						roleID,
						id,
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						"*",
						goodsData.ChangeLifeLevForEquip
					});
					TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strDbCmd, out dbFields, client.ServerId);
					if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-10,
							roleID,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
					{
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							-10,
							roleID,
							0,
							0
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					Global.ModRoleGoodsEvent(client, goodsData, 0, "装备转生", false);
					EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "装备转生");
					if (nArrayGoods != null && nArrayGoods.Length > 0)
					{
						for (int j = 0; j < nArrayGoods.Length; j++)
						{
							if (nArrayGoods[j] <= 0)
							{
								break;
							}
							GoodsData goods = new GoodsData
							{
								Id = -1,
								GoodsID = nArrayGoods[j],
								Using = 0,
								Forge_level = 0,
								Starttime = "1900-01-01 12:00:00",
								Endtime = "1900-01-01 12:00:00",
								Site = 0,
								Quality = 0,
								Props = "",
								GCount = 1,
								Binding = 0,
								Jewellist = "",
								BagIndex = 0,
								AddPropIndex = 0,
								BornIndex = 0,
								Lucky = 0,
								Strong = 0,
								ExcellenceInfo = 0,
								AppendPropLev = 0,
								ChangeLifeLevForEquip = 0
							};
							Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goods.GoodsID, 1, goods.Quality, "", goods.Forge_level, goods.Binding, 0, "", true, 1, "装备转生剥离取得物品", goods.Endtime, 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
						}
					}
				}
				else
				{
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						-200,
						roleID,
						0,
						0
					});
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F88 RID: 16264 RVA: 0x003AEE94 File Offset: 0x003AD094
		private static TCPProcessCmdResults ProcessOneKeyFindFriendCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				List<OneKeyFindFriendData> listfrienddata = new List<OneKeyFindFriendData>();
				List<object> objsList = null;
				objsList = GameManager.ClientMgr.GetPlayerByMap(client);
				int nCount = 0;
				List<FriendData> listfriend = client.ClientData.FriendDataList;
				int i = 0;
				while (i < objsList.Count)
				{
					bool bCanAdd = true;
					object player = null;
					try
					{
						player = objsList[i];
					}
					catch (Exception)
					{
						goto IL_270;
					}
					goto IL_166;
					IL_270:
					i++;
					continue;
					IL_166:
					if (player is GameClient)
					{
						GameClient gameclient = player as GameClient;
						if (gameclient == null || gameclient.ClientData.RoleID != client.ClientData.RoleID)
						{
							FriendData friendData = Global.FindFriendData(client, gameclient.ClientData.RoleID);
							if (null != friendData)
							{
								bCanAdd = false;
							}
							if (bCanAdd)
							{
								listfrienddata.Add(new OneKeyFindFriendData
								{
									m_nRoleID = gameclient.ClientData.RoleID,
									m_nRoleName = gameclient.ClientData.RoleName,
									m_nOccupation = gameclient.ClientData.Occupation,
									m_nChangeLifeLev = gameclient.ClientData.ChangeLifeCount,
									m_nLevel = gameclient.ClientData.Level
								});
								nCount++;
							}
							if (nCount == 10)
							{
								break;
							}
						}
					}
					goto IL_270;
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<OneKeyFindFriendData>>(listfrienddata, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F89 RID: 16265 RVA: 0x003AF1AC File Offset: 0x003AD3AC
		private static TCPProcessCmdResults ProcessOneKeyAddFriendCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				string strRoles = fields[1];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string[] idsList = strRoles.Split(new char[]
				{
					','
				});
				for (int i = 0; i < idsList.Length; i++)
				{
					int roleid = Global.SafeConvertToInt32(idsList[i]);
					GameClient gameclient = GameManager.ClientMgr.FindClient(roleid);
					if (gameclient != null)
					{
						string strName = Global.FormatRoleName(gameclient, gameclient.ClientData.RoleName);
						bool bRet = GameManager.ClientMgr.AddFriend(tcpMgr, tcpClientPool, pool, client, -1, roleid, strName, 0);
					}
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F8A RID: 16266 RVA: 0x003AF3A4 File Offset: 0x003AD5A4
		private static TCPProcessCmdResults ProcessGetVIPAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nIndex = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				VIPDataInfo tmpVipData = null;
				if (Data.VIPDataInfoList.ContainsKey(nIndex))
				{
					tmpVipData = Data.VIPDataInfoList[nIndex];
				}
				string strcmd;
				if (tmpVipData == null)
				{
					strcmd = string.Format("{0}:{1}", -100, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nVipLev = client.ClientData.VipLevel;
				if (nVipLev < 1 && tmpVipData.VIPlev > 0)
				{
					strcmd = string.Format("{0}:{1}", -1, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (tmpVipData.VIPlev > nVipLev)
				{
					strcmd = string.Format("{0}:{1}", -2, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int dayID = TimeUtil.NowDateTime().DayOfYear;
				VipDailyData dailyVipData = Global.FindVipDailyDataByPriority(client, nIndex);
				if (null != dailyVipData)
				{
					int nVipdailyData = Global.GetVipPriorityDailyMaxUseTimes(nIndex);
					int nDailyUseTimes = tmpVipData.DailyMaxUseTimes;
					if (nDailyUseTimes >= nVipdailyData)
					{
						strcmd = string.Format("{0}:{1}", -3, roleID);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				if (tmpVipData.AwardGoods != null && tmpVipData.AwardGoods.Count > 0 && !Global.CanAddGoodsNum(client, tmpVipData.AwardGoods.Count))
				{
					strcmd = string.Format("{0}:{1}", -4, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.UpdateVipDailyData(client, dayID, nIndex))
				{
					strcmd = string.Format("{0}:{1}", -5, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nRet = Global.GetVipDailyAward(client, tmpVipData, nIndex);
				if (nRet < 1)
				{
					strcmd = string.Format("{0}:{1}", nRet, roleID);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				strcmd = string.Format("{0}:{1}", 1, roleID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F8B RID: 16267 RVA: 0x003AF79C File Offset: 0x003AD99C
		private static TCPProcessCmdResults ProcessGetVIPInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nVipExp = Global.GetRoleParamsInt32FromDB(client, "VIPExp") + (int)Global.GetUserInputAllYuanBao(client) / Data.DiamondToVipExpValue;
				Global.QueryVipAwardFlagToDB(client);
				string strcmd = string.Format("{0}:{1}", nVipExp, client.ClientData.VipAwardFlag);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F8C RID: 16268 RVA: 0x003AF954 File Offset: 0x003ADB54
		private static TCPProcessCmdResults ProcessGetVIPLevelAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nIndex = Convert.ToInt32(fields[1]);
				string strcmd;
				if (nIndex < 1 && nIndex > VIPEumValue.VIPENUMVALUE_MAXLEVEL)
				{
					strcmd = string.Format("{0}:0", -4);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client.ClientData.VipLevel < 1 && client.ClientData.VipLevel > VIPEumValue.VIPENUMVALUE_MAXLEVEL)
				{
					strcmd = string.Format("{0}:0", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nIndex > client.ClientData.VipLevel)
				{
					strcmd = string.Format("{0}:0", -4);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.QueryVipAwardFlagToDB(client);
				int nFlag = client.ClientData.VipAwardFlag & Global.GetBitValue(nIndex + 1);
				if (nFlag > 0)
				{
					strcmd = string.Format("{0}:0", -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				VIPLevAwardAndExpInfo tmpDic = null;
				if (!Data.VIPLevAwardAndExpInfoList.TryGetValue(nIndex, out tmpDic) || tmpDic == null)
				{
					strcmd = string.Format("{0}:0", -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				List<GoodsData> lGoodsList = tmpDic.AwardList;
				if (lGoodsList == null)
				{
					strcmd = string.Format("{0}:0", -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!Global.CanAddGoodsDataList(client, lGoodsList))
				{
					strcmd = string.Format("{0}:0", -4);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (lGoodsList.Count > 0)
				{
					for (int i = 0; i < lGoodsList.Count; i++)
					{
						Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, lGoodsList[i].GoodsID, lGoodsList[i].GCount, 0, "", lGoodsList[i].Forge_level, lGoodsList[i].Binding, 0, "", true, 1, "VIP奖励", "1900-01-01 12:00:00", 0, 0, lGoodsList[i].Lucky, 0, lGoodsList[i].ExcellenceInfo, lGoodsList[i].AddPropIndex, 0, null, null, 0, true);
					}
					client.ClientData.AddAwardRecord(RoleAwardMsg.VIPAward, lGoodsList, false);
				}
				GameManager.ClientMgr.NotifyGetAwardMsg(client, RoleAwardMsg.VIPAward, "");
				client.ClientData.VipAwardFlag |= Global.SetIntSomeBit(nIndex, nFlag, true);
				Global.UpdateVipAwardFlagToDB(client, client.ClientData.VipAwardFlag);
				if (client._IconStateMgr.CheckVIPLevelAwardState(client))
				{
					client._IconStateMgr.SendIconStateToClient(client);
				}
				if (client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriVIPFanli))
				{
					client._IconStateMgr.AddFlushIconState(14000, client._IconStateMgr.IsAnyJieRiTipActived());
					client._IconStateMgr.SendIconStateToClient(client);
				}
				strcmd = string.Format("{0}:{1}", 1, client.ClientData.VipAwardFlag);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F8D RID: 16269 RVA: 0x003AFE80 File Offset: 0x003AE080
		private static TCPProcessCmdResults ProcessDailyActiveDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				DailyActiveManager.NotifyClientDailyActiveData(client, -1, false);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F8E RID: 16270 RVA: 0x003AFFD0 File Offset: 0x003AE1D0
		private static TCPProcessCmdResults ProcessFetchDailyActiveAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nid = Convert.ToInt32(fields[1]);
				int ret = DailyActiveManager.GiveDailyActiveAward(client, nid);
				string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					ret,
					roleID,
					nid,
					client.ClientData.DailyActiveValues
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				if (client._IconStateMgr.CheckFuLiMeiRiHuoYue(client))
				{
					client._IconStateMgr.SendIconStateToClient(client);
				}
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F8F RID: 16271 RVA: 0x003B01C8 File Offset: 0x003AE3C8
		private static TCPProcessCmdResults ProcessSetAutoAssignPropertyPointCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nFlag = Convert.ToInt32(fields[1]);
				string toDbCmd = string.Format("{0}:{1}", client.ClientData.RoleID, nFlag);
				string[] dbCmds = null;
				Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, nID, toDbCmd, out dbCmds, client.ServerId);
				string strcmd;
				if (dbCmds == null || 2 != dbCmds.Length)
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int ret = int.Parse(dbCmds[1]);
				if (ret == 1)
				{
					strcmd = string.Format("{0}:{1}", roleID, nFlag);
				}
				else
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F90 RID: 16272 RVA: 0x003B0420 File Offset: 0x003AE620
		private static TCPProcessCmdResults ProcessGetCopyMapAwardCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData Goods = client.ClientData.CopyMapAwardTmpGoods;
				string strcmd;
				if (Goods == null && client.ClientData.FuBenPingFenAwardMoJing <= 0)
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (Goods != null)
				{
					if (!Global.CanAddGoodsNum(client, 1) || !RebornEquip.CanAddGoodsNum(client, 1))
					{
						Global.UseMailGivePlayerAward(client, Goods, GLang.GetLang(162, new object[0]), GLang.GetLang(162, new object[0]), 1.0);
					}
					else
					{
						Global.AddGoodsDBCommand_Hook(Global._TCPManager.TcpOutPacketPool, client, Goods.GoodsID, Goods.GCount, Goods.Quality, Goods.Props, Goods.Forge_level, Goods.Binding, 0, Goods.Jewellist, true, 1, "副本通关获取物品", true, Goods.Endtime, Goods.AddPropIndex, Goods.BornIndex, Goods.Lucky, Goods.Strong, Goods.ExcellenceInfo, Goods.AppendPropLev, Goods.ChangeLifeLevForEquip, true, null, null, "1900-01-01 12:00:00", 0, true);
					}
					client.ClientData.CopyMapAwardTmpGoods = null;
				}
				if (client.ClientData.FuBenPingFenAwardMoJing > 0)
				{
					GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, client.ClientData.FuBenPingFenAwardMoJing, "副本通关奖励", true, true, false);
					client.ClientData.FuBenPingFenAwardMoJing = 0;
				}
				strcmd = string.Format("{0}:{1}", roleID, 1);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F91 RID: 16273 RVA: 0x003B074C File Offset: 0x003AE94C
		public static TCPProcessCmdResults ProcessGetBangHuiFuBenCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nGuildCopyMapAwardDay = Global.GetRoleParamsInt32FromDB(client, "GuildCopyMapAwardDay");
				DateTime AwardTime = Global.GetRealDate(nGuildCopyMapAwardDay);
				if (Global.BeginOfWeek(AwardTime) != Global.BeginOfWeek(TimeUtil.NowDateTime()))
				{
					Global.SaveRoleParamsInt32ValueToDB(client, "GuildCopyMapAwardFlag", 0, true);
				}
				GuildCopyMapDB MapData = GameManager.GuildCopyMapDBMgr.FindGuildCopyMapDB(client.ClientData.Faction, client.ServerId);
				string strcmd;
				if (null == MapData)
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int mapid = -1;
				int seqid = -1;
				int mapcode = -1;
				GameManager.GuildCopyMapMgr.CheckCurrGuildCopyMap(client, out mapid, out seqid, mapcode);
				strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
				{
					roleID,
					mapid,
					Global.GetRoleParamsInt32FromDB(client, "GuildCopyMapAwardFlag"),
					MapData.Killers
				});
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "ProcessGetBangHuiFuBenCMD", false, false);
			}
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F92 RID: 16274 RVA: 0x003B09BC File Offset: 0x003AEBBC
		public static TCPProcessCmdResults ProcessGetBangHuiFuBenAwardCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int fubenID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientSocket.IsKuaFuLogin)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				string strcmd;
				if (!GameManager.GuildCopyMapMgr.IsGuildCopyMap(fubenID))
				{
					strcmd = string.Format("{0}:{1}", roleID, -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int index = GameManager.GuildCopyMapMgr.GetGuildCopyMapIndex(fubenID);
				int mapid = -1;
				int seqid = -1;
				int mapcode = -1;
				GameManager.GuildCopyMapMgr.CheckCurrGuildCopyMap(client, out mapid, out seqid, mapcode);
				if (mapid < 0)
				{
					strcmd = string.Format("{0}:{1}", roleID, -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (mapid > 0 && fubenID >= mapid)
				{
					strcmd = string.Format("{0}:{1}", roleID, -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nZhanGong = 0;
				string strParam = GameManager.systemParamsList.GetParamValueByName("ZhanMengCodeAward");
				if (null == strParam)
				{
					strcmd = string.Format("{0}:{1}", roleID, -4);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				string[] temp = strParam.Split(new char[]
				{
					'|'
				});
				for (int i = 0; i < temp.Length; i++)
				{
					string[] str = temp[i].Split(new char[]
					{
						','
					});
					if (2 != str.Length)
					{
						SysConOut.WriteLine("        加载SpecialElementsHeart时出现异常!!!");
					}
					mapid = Convert.ToInt32(str[0]);
					if (mapid == fubenID)
					{
						nZhanGong = Convert.ToInt32(str[1]);
						break;
					}
				}
				if (nZhanGong <= 0)
				{
					strcmd = string.Format("{0}:{1}", roleID, -5);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nGuildCopyMapAwardDay = Global.GetRoleParamsInt32FromDB(client, "GuildCopyMapAwardDay");
				DateTime AwardTime = Global.GetRealDate(nGuildCopyMapAwardDay);
				if (Global.BeginOfWeek(AwardTime) != Global.BeginOfWeek(TimeUtil.NowDateTime()))
				{
					Global.SaveRoleParamsInt32ValueToDB(client, "GuildCopyMapAwardFlag", 0, true);
				}
				int nGuildCopyMapAwardFlag = Global.GetRoleParamsInt32FromDB(client, "GuildCopyMapAwardFlag");
				bool flag = GameManager.GuildCopyMapMgr.GetGuildCopyMapAwardDayFlag(nGuildCopyMapAwardFlag, index, 2);
				if (flag)
				{
					strcmd = string.Format("{0}:{1}", roleID, -6);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				nGuildCopyMapAwardFlag = GameManager.GuildCopyMapMgr.SetGuildCopyMapAwardDayFlag(nGuildCopyMapAwardFlag, index, 2);
				Global.SaveRoleParamsInt32ValueToDB(client, "GuildCopyMapAwardFlag", nGuildCopyMapAwardFlag, true);
				Global.SaveRoleParamsInt32ValueToDB(client, "GuildCopyMapAwardDay", Global.GetOffsetDay(TimeUtil.NowDateTime()), true);
				if (GameManager.ClientMgr.AddBangGong(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, ref nZhanGong, AddBangGongTypes.BGBOSS_UI, 0))
				{
					if (0 != nZhanGong)
					{
						GameManager.logDBCmdMgr.AddDBLogInfo(-1, "战功", "帮会副本奖励", "系统", client.ClientData.RoleName, "增加", nZhanGong, client.ClientData.ZoneID, client.strUserID, client.ClientData.BangGong, client.ServerId, null);
					}
				}
				GameManager.SystemServerEvents.AddEvent(string.Format("角色获取帮贡, roleID={0}({1}), BangGong={2}, newBangGong={3}", new object[]
				{
					client.ClientData.RoleID,
					client.ClientData.RoleName,
					client.ClientData.BangGong,
					nZhanGong
				}), EventLevels.Record);
				strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
				{
					roleID,
					0,
					client.ClientData.BangGong,
					fubenID,
					Global.GetRoleParamsInt32FromDB(client, "GuildCopyMapAwardFlag")
				});
				if (client._IconStateMgr.CheckGuildIcon(client, false))
				{
					client._IconStateMgr.SendIconStateToClient(client);
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "ProcessGetBangHuiFuBenAwardCMD", false, false);
			}
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003F93 RID: 16275 RVA: 0x003B0FB0 File Offset: 0x003AF1B0
		private static TCPProcessCmdResults ProcessGetSkillInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				bool bInsertDefaultSKill = false;
				List<SkillData> skillList = new List<SkillData>();
				for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
				{
					if (client.ClientData.SkillDataList[i].DbID == -1 && !bInsertDefaultSKill)
					{
						client.ClientData.SkillDataList[i].UsedNum = client.ClientData.DefaultSkillUseNum;
						client.ClientData.SkillDataList[i].SkillLevel = client.ClientData.DefaultSkillLev;
						skillList.Add(client.ClientData.SkillDataList[i]);
						bInsertDefaultSKill = true;
					}
					else
					{
						skillList.Add(client.ClientData.SkillDataList[i]);
					}
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<SkillData>>(skillList, pool, 564);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F94 RID: 16276 RVA: 0x003B11FC File Offset: 0x003AF3FC
		private static TCPProcessCmdResults ProcessGetKaiFuActivityInfoInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				KaiFuActivityData ActivityDataTmp = new KaiFuActivityData();
				ActivityDataTmp.LevelUpAwardRemainQuota = new int[5];
				ActivityDataTmp.LevelUpAwardRemainQuota[0] = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ChongJiLingQuShenZhuang1"));
				ActivityDataTmp.LevelUpAwardRemainQuota[1] = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ChongJiLingQuShenZhuang2"));
				ActivityDataTmp.LevelUpAwardRemainQuota[2] = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ChongJiLingQuShenZhuang3"));
				ActivityDataTmp.LevelUpAwardRemainQuota[3] = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ChongJiLingQuShenZhuang4"));
				ActivityDataTmp.LevelUpAwardRemainQuota[4] = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("ChongJiLingQuShenZhuang5"));
				for (int i = 1; i <= 5; i++)
				{
					if (!Global.CanGetChongJiLingQuShenZhuang(client, i))
					{
						ActivityDataTmp.LevelUpGetAwardState |= Global.GetBitValue(i);
					}
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<KaiFuActivityData>(ActivityDataTmp, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F95 RID: 16277 RVA: 0x003B144C File Offset: 0x003AF64C
		private static TCPProcessCmdResults ProcessSpriteQueryTheKingOfPKInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nDate = TimeUtil.NowDateTime().DayOfYear;
				int nSelfValue = client.ClientData.KingOfPkTopPoint;
				int nTotal = GameManager.ArenaBattleMgr.TheKingOfPKTopPoint;
				string sName = GameManager.ArenaBattleMgr.TheKingOfPKTopRoleName;
				string strcmd = string.Format("{0}:{1}:{2}", nSelfValue, nTotal, sName);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F96 RID: 16278 RVA: 0x003B1618 File Offset: 0x003AF818
		private static TCPProcessCmdResults ProcessQueryAdrationPKKingInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nPKKingRole = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("PKKingRole"));
				int nPKKingAdmireCount = Global.GetRoleParamsInt32FromDB(client, "PKKingAdmireCount");
				string strcmd = string.Format("{0}:{1}", nPKKingRole, nPKKingAdmireCount);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F97 RID: 16279 RVA: 0x003B17D0 File Offset: 0x003AF9D0
		private static TCPProcessCmdResults ProcessAdrationPKKingCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (!GlobalNew.IsExtraGongNengOpen(client, ExtraGongNengIds.DiaoXiangMoBai))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("接收到了异常的雕像膜拜指令(CMD_SPR_ADRATIONPKKING),角色:{0}", Global.FormatRoleName4(client)), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int nPKKingRole = Global.SafeConvertToInt32(GameManager.GameConfigMgr.GetGameConifgItem("PKKingRole"));
				string strcmd;
				if (nPKKingRole < 0)
				{
					strcmd = string.Format("{0}", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nRealyNum = Data.PKkingadrationData.AdrationMaxLimit;
				int nPKKingAdmireCount = Global.GetRoleParamsInt32FromDB(client, "PKKingAdmireCount");
				if (nPKKingRole == roleID)
				{
					int nAdded = (int)GameManager.systemParamsList.GetParamValueIntByName("PkKingMoBaiNum", -1);
					nRealyNum += nAdded;
				}
				int nVIPLev = client.ClientData.VipLevel;
				int[] nArrayVIPAdded = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPMoBaiNum", ',');
				if (nVIPLev > VIPEumValue.VIPENUMVALUE_MAXLEVEL || nArrayVIPAdded.Length < 1)
				{
					strcmd = string.Format("{0}", -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				nRealyNum += nArrayVIPAdded[nVIPLev];
				double awardmuti = 0.0;
				JieRiMultAwardActivity activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
				if (null != activity)
				{
					JieRiMultConfig config = activity.GetConfig(12);
					if (null != config)
					{
						awardmuti += config.GetMult();
					}
				}
				SpecPriorityActivity spAct = HuodongCachingMgr.GetSpecPriorityActivity();
				if (null != spAct)
				{
					awardmuti += spAct.GetMult(SpecPActivityBuffType.SPABT_Admire);
				}
				awardmuti = Math.Max(1.0, awardmuti);
				nRealyNum = (int)((double)nRealyNum * awardmuti);
				if (nPKKingAdmireCount >= nRealyNum)
				{
					strcmd = string.Format("{0}", -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nType = Convert.ToInt32(fields[1]);
				double nRate;
				if (client.ClientData.ChangeLifeCount == 0)
				{
					nRate = 1.0;
				}
				else
				{
					nRate = Data.ChangeLifeEverydayExpRate[client.ClientData.ChangeLifeCount];
				}
				if (nType == 1)
				{
					if (!Global.SubBindTongQianAndTongQian(client, Data.PKkingadrationData.GoldAdrationSpend, "崇拜PK之王多倍经验"))
					{
						strcmd = string.Format("{0}", -4);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int nExp = (int)(nRate * (double)Data.PKkingadrationData.GoldAdrationExpModulus);
					if (nExp > 0)
					{
						GameManager.ClientMgr.ProcessRoleExperience(client, (long)nExp, true, true, false, "none");
					}
					GameManager.ClientMgr.ModifyShengWangValue(client, Data.PKkingadrationData.GoldAdrationShengWangModulus, "崇拜PK之王(金币)", true, true);
				}
				else
				{
					if (nType != 2)
					{
						strcmd = string.Format("{0}", -3);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, Data.PKkingadrationData.DiamondAdrationSpend, "崇拜PK之王", true, true, false, DaiBiSySType.None))
					{
						strcmd = string.Format("{0}", -5);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int nExp = (int)(nRate * (double)Data.PKkingadrationData.DiamondAdrationExpModulus);
					if (nExp > 0)
					{
						GameManager.ClientMgr.ProcessRoleExperience(client, (long)nExp, true, true, false, "none");
					}
					GameManager.ClientMgr.ModifyShengWangValue(client, Data.PKkingadrationData.DiamondAdrationShengWangModulus, "崇拜PK之王(钻石)", true, true);
				}
				Global.ProcessIncreasePKKingAdmireCount(client);
				strcmd = string.Format("{0}", 1);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F98 RID: 16280 RVA: 0x003B1D2C File Offset: 0x003AFF2C
		private static TCPProcessCmdResults ProcessSpriteQueryLuoLanChengZhuInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				string strcmd = "";
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F99 RID: 16281 RVA: 0x003B1E8C File Offset: 0x003B008C
		private static TCPProcessCmdResults ProcessQueryAdrationLanChengZhuInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nLLCZAdmireDayID = Global.GetRoleParamsInt32FromDB(client, "LLCZAdmireDayID");
				int nCurrDayID = Global.GetOffsetDayNow();
				if (nCurrDayID != nLLCZAdmireDayID)
				{
					Global.SaveRoleParamsInt32ValueToDB(client, "LLCZAdmireCount", 0, true);
					Global.SaveRoleParamsInt32ValueToDB(client, "LLCZAdmireDayID", nCurrDayID, true);
				}
				int nLLCZAdmireCount = Global.GetRoleParamsInt32FromDB(client, "LLCZAdmireCount");
				string strcmd = string.Format("{0}:{1}", LuoLanChengZhanManager.getInstance().GetLuoLanChengZhuRoleID(), nLLCZAdmireCount);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F9A RID: 16282 RVA: 0x003B2078 File Offset: 0x003B0278
		private static TCPProcessCmdResults ProcessAdrationLanChengZhuCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (!GlobalNew.IsExtraGongNengOpen(client, ExtraGongNengIds.DiaoXiangMoBai))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("接收到了异常的雕像膜拜指令(CMD_SPR_ADRATIONLANCHENGZHU),角色:{0}", Global.FormatRoleName4(client)), null, true);
					return TCPProcessCmdResults.RESULT_OK;
				}
				int nLLCZRoleID = LuoLanChengZhanManager.getInstance().GetLuoLanChengZhuRoleID();
				string strcmd;
				if (nLLCZRoleID < 0)
				{
					strcmd = string.Format("{0}", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nLLCZAdmireDayID = Global.GetRoleParamsInt32FromDB(client, "LLCZAdmireDayID");
				int nCurrDayID = Global.GetOffsetDayNow();
				if (nCurrDayID != nLLCZAdmireDayID)
				{
					Global.SaveRoleParamsInt32ValueToDB(client, "LLCZAdmireCount", 0, true);
					Global.SaveRoleParamsInt32ValueToDB(client, "LLCZAdmireDayID", nCurrDayID, true);
				}
				int nRealyNum = Data.LLCZadrationData.AdrationMaxLimit;
				int nLLCZAdmireCount = Global.GetRoleParamsInt32FromDB(client, "LLCZAdmireCount");
				if (nLLCZRoleID == roleID)
				{
					int nAdded = (int)GameManager.systemParamsList.GetParamValueIntByName("LuoLanKingMoBaiNum", -1);
					nRealyNum += nAdded;
				}
				int nVIPLev = client.ClientData.VipLevel;
				int[] nArrayVIPAdded = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPMoBaiNum", ',');
				if (nVIPLev > VIPEumValue.VIPENUMVALUE_MAXLEVEL || nArrayVIPAdded.Length < 1)
				{
					strcmd = string.Format("{0}", -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				nRealyNum += nArrayVIPAdded[nVIPLev];
				double awardmuti = 0.0;
				JieRiMultAwardActivity activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
				if (null != activity)
				{
					JieRiMultConfig config = activity.GetConfig(12);
					if (null != config)
					{
						awardmuti += config.GetMult();
					}
				}
				SpecPriorityActivity spAct = HuodongCachingMgr.GetSpecPriorityActivity();
				if (null != spAct)
				{
					awardmuti += spAct.GetMult(SpecPActivityBuffType.SPABT_Admire);
				}
				awardmuti = Math.Max(1.0, awardmuti);
				nRealyNum = (int)((double)nRealyNum * awardmuti);
				if (nLLCZAdmireCount >= nRealyNum)
				{
					strcmd = string.Format("{0}", -3);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nType = Convert.ToInt32(fields[1]);
				double nRate;
				if (client.ClientData.ChangeLifeCount == 0)
				{
					nRate = 1.0;
				}
				else
				{
					nRate = Data.ChangeLifeEverydayExpRate[client.ClientData.ChangeLifeCount];
				}
				if (nType == 1)
				{
					if (!Global.SubBindTongQianAndTongQian(client, Data.LLCZadrationData.GoldAdrationSpend, "崇拜罗兰城主多倍经验"))
					{
						strcmd = string.Format("{0}", -4);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int nExp = (int)(nRate * (double)Data.LLCZadrationData.GoldAdrationExpModulus);
					if (nExp > 0)
					{
						GameManager.ClientMgr.ProcessRoleExperience(client, (long)nExp, true, true, false, "none");
					}
					GameManager.ClientMgr.ModifyShengWangValue(client, Data.LLCZadrationData.GoldAdrationShengWangModulus, "崇拜PK之王(金币)", true, true);
				}
				else
				{
					if (nType != 2)
					{
						strcmd = string.Format("{0}", -3);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, Data.LLCZadrationData.DiamondAdrationSpend, "崇拜罗兰城主", true, true, false, DaiBiSySType.None))
					{
						strcmd = string.Format("{0}", -5);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int nExp = (int)(nRate * (double)Data.LLCZadrationData.DiamondAdrationExpModulus);
					if (nExp > 0)
					{
						GameManager.ClientMgr.ProcessRoleExperience(client, (long)nExp, true, true, false, "none");
					}
					GameManager.ClientMgr.ModifyShengWangValue(client, Data.LLCZadrationData.DiamondAdrationShengWangModulus, "崇拜PK之王(钻石)", true, true);
				}
				Global.SaveRoleParamsInt32ValueToDB(client, "LLCZAdmireCount", nLLCZAdmireCount + 1, true);
				strcmd = string.Format("{0}", 1);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F9B RID: 16283 RVA: 0x003B2618 File Offset: 0x003B0818
		private static TCPProcessCmdResults ProcessAngelTempleSparkCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (!Global.IsGuWuMap(client.ClientData.MapCode))
				{
					strcmd = string.Format("{0}", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nType = Convert.ToInt32(fields[1]);
				if (nType == 0)
				{
					string str = GameManager.systemParamsList.GetParamValueByName("AngelTempleGoldBuff");
					if (!string.IsNullOrEmpty(str))
					{
						string[] strFields = str.Split(new char[]
						{
							','
						});
						if (strFields.Length != 3)
						{
							strcmd = string.Format("{0}", -2);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						int nMoney = Global.SafeConvertToInt32(strFields[0]);
						if (!Global.SubBindTongQianAndTongQian(client, nMoney, "鼓舞BUFF"))
						{
							strcmd = string.Format("{0}", -3);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						double[] newParams = new double[]
						{
							(double)Global.SafeConvertToInt32(strFields[2]),
							0.0
						};
						GameManager.AngelTempleMgr.AddBuffer(client, BufferItemTypes.MU_ANGELTEMPLEBUFF1, newParams, true);
						Global.UpdateBufferData(client, BufferItemTypes.MU_ANGELTEMPLEBUFF1, newParams, 0, true);
					}
				}
				else if (nType == 1)
				{
					string str = GameManager.systemParamsList.GetParamValueByName("AngelTempleZuanshiBuff");
					if (!string.IsNullOrEmpty(str))
					{
						string[] strFields = str.Split(new char[]
						{
							','
						});
						if (strFields.Length != 3)
						{
							strcmd = string.Format("{0}", -2);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						int nMoney = Global.SafeConvertToInt32(strFields[0]);
						if (!GameManager.ClientMgr.SubUserMoney(tcpMgr.MySocketListener, tcpClientPool, pool, client, nMoney, "鼓舞", true, true, false, DaiBiSySType.ZuanShiGuWu))
						{
							strcmd = string.Format("{0}", -4);
							tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
							return TCPProcessCmdResults.RESULT_DATA;
						}
						double[] newParams = new double[]
						{
							(double)Global.SafeConvertToInt32(strFields[2]),
							1.0
						};
						GameManager.AngelTempleMgr.AddBuffer(client, BufferItemTypes.MU_ANGELTEMPLEBUFF2, newParams, true);
						Global.UpdateBufferData(client, BufferItemTypes.MU_ANGELTEMPLEBUFF2, newParams, 0, true);
					}
				}
				strcmd = string.Format("{0}", 1);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F9C RID: 16284 RVA: 0x003B2A28 File Offset: 0x003B0C28
		private static TCPProcessCmdResults ProcessGetAngelTempleBaseInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = string.Format("{0}:{1}:{2}", GameManager.AngelTempleMgr.m_sKillBossRoleName, GameManager.AngelTempleMgr.m_sTotalDamageName, GameManager.AngelTempleMgr.m_nTotalDamageValue);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F9D RID: 16285 RVA: 0x003B2BB4 File Offset: 0x003B0DB4
		private static TCPProcessCmdResults ProcessQueryOpenGridCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1 && fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = string.Format("{0}", client.ClientData.OpenGridTime);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F9E RID: 16286 RVA: 0x003B2D38 File Offset: 0x003B0F38
		private static TCPProcessCmdResults ProcessQueryOpenPortableGridCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd = string.Format("{0}", client.ClientData.OpenPortableGridTime);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003F9F RID: 16287 RVA: 0x003B2EB4 File Offset: 0x003B10B4
		private static TCPProcessCmdResults ProcessGetPushMessageInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				string strPushID = fields[1];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (string.Compare(strPushID, client.ClientData.PushMessageID) != 0)
				{
					Global.UpdatePushMessageInfo(client, strPushID);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FA0 RID: 16288 RVA: 0x003B3024 File Offset: 0x003B1224
		private static TCPProcessCmdResults ProcessActivationPictureJudgeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nPictureJudgeID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				LogManager.WriteLog(LogTypes.Error, string.Format("{0}消息已废弃，请不要再使用,roleid={1}, rolename={2}", (TCPGameServerCmds)nID, client.ClientData.RoleID, client.ClientData.RoleName), null, true);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FA1 RID: 16289 RVA: 0x003B31B4 File Offset: 0x003B13B4
		private static TCPProcessCmdResults ProcessGetPictureJudgeInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				LogManager.WriteLog(LogTypes.Error, string.Format("{0}消息已废弃，请不要再使用,roleid={1}, rolename={2}", (TCPGameServerCmds)nID, client.ClientData.RoleID, client.ClientData.RoleName), null, true);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FA2 RID: 16290 RVA: 0x003B3330 File Offset: 0x003B1530
		private static TCPProcessCmdResults PorcessReferPictureJudgeInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				if (string.IsNullOrEmpty(fields[1]))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("信息发送错误, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string[] sAarrayPictureJudgeID = fields[1].Split(new char[]
				{
					','
				});
				if (sAarrayPictureJudgeID == null)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("信息发送错误, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SingletonTemplate<TuJianManager>.Instance().HandleActiveTuJian(client, sAarrayPictureJudgeID);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(client.ClientData.PictureJudgeReferInfo, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FA3 RID: 16291 RVA: 0x003B3550 File Offset: 0x003B1750
		private static TCPProcessCmdResults ProcessMuEquipUpgradeCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 5)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int id = Convert.ToInt32(fields[1]);
				int id2 = Convert.ToInt32(fields[2]);
				int id3 = Convert.ToInt32(fields[3]);
				int choseID = Convert.ToInt32(fields[4]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GoodsData goodsData = Global.GetGoodsByDbID(client, id);
				string strcmd;
				if (null == goodsData)
				{
					strcmd = string.Format("{0}:{1}:{2}", -1, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData goodsData2 = Global.GetGoodsByDbID(client, id2);
				if (null == goodsData2)
				{
					strcmd = string.Format("{0}:{1}:{2}", -1, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GoodsData goodsData3 = Global.GetGoodsByDbID(client, id3);
				if (null == goodsData3)
				{
					strcmd = string.Format("{0}:{1}:{2}", -1, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				List<int> elementhrtsProps = null;
				Dictionary<int, List<int>> FuMoMap = new Dictionary<int, List<int>>();
				if (choseID == 0)
				{
					int RAttrCount = 0;
					if (goodsData.ElementhrtsProps != null)
					{
						FuMoMap.Add(RAttrCount, goodsData.ElementhrtsProps);
						RAttrCount++;
					}
					if (goodsData2.ElementhrtsProps != null)
					{
						FuMoMap.Add(RAttrCount, goodsData2.ElementhrtsProps);
						RAttrCount++;
					}
					if (goodsData3.ElementhrtsProps != null)
					{
						FuMoMap.Add(RAttrCount, goodsData3.ElementhrtsProps);
						RAttrCount++;
					}
					if (FuMoMap.Count != 0)
					{
						int rand = Global.GetRandomNumber(0, RAttrCount);
						if (rand <= 3)
						{
							int temp = 0;
							foreach (KeyValuePair<int, List<int>> it in FuMoMap)
							{
								temp++;
								if (rand == temp)
								{
									elementhrtsProps = new List<int>(it.Value);
								}
							}
						}
					}
				}
				else if (choseID == id || choseID == id2 || choseID == id3)
				{
					GoodsData goodsDataTemp = Global.GetGoodsByDbID(client, choseID);
					if (null == goodsDataTemp)
					{
						strcmd = string.Format("{0}:{1}:{2}", -1, roleID, id);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (null != goodsDataTemp.ElementhrtsProps)
					{
						elementhrtsProps = new List<int>(goodsDataTemp.ElementhrtsProps);
					}
				}
				if (goodsData.GoodsID != goodsData2.GoodsID || goodsData2.GoodsID != goodsData3.GoodsID)
				{
					strcmd = string.Format("{0}:{1}:{2}", -100, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nNum = Global.GetEquipExcellencePropNum(goodsData);
				int nNum2 = Global.GetEquipExcellencePropNum(goodsData2);
				int nNum3 = Global.GetEquipExcellencePropNum(goodsData3);
				int nColor;
				if (nNum == 0)
				{
					nColor = 0;
				}
				else if (nNum >= 1 && nNum <= 2)
				{
					nColor = 1;
				}
				else if (nNum >= 3 && nNum <= 4)
				{
					nColor = 2;
				}
				else if (nNum >= 5 && nNum <= 6)
				{
					nColor = 3;
				}
				else
				{
					nColor = 3;
				}
				int nColor2;
				if (nNum2 == 0)
				{
					nColor2 = 0;
				}
				else if (nNum2 >= 1 && nNum2 <= 2)
				{
					nColor2 = 1;
				}
				else if (nNum2 >= 3 && nNum2 <= 4)
				{
					nColor2 = 2;
				}
				else if (nNum2 >= 5 && nNum2 <= 6)
				{
					nColor2 = 3;
				}
				else
				{
					nColor2 = 3;
				}
				int nColor3;
				if (nNum3 == 0)
				{
					nColor3 = 0;
				}
				else if (nNum3 >= 1 && nNum3 <= 2)
				{
					nColor3 = 1;
				}
				else if (nNum3 >= 3 && nNum3 <= 4)
				{
					nColor3 = 2;
				}
				else if (nNum3 >= 5 && nNum3 <= 6)
				{
					nColor3 = 3;
				}
				else
				{
					nColor3 = 3;
				}
				if (nColor != nColor2 || nColor != nColor3 || nColor2 != nColor3)
				{
					strcmd = string.Format("{0}:{1}:{2}", -30, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -4, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData2.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -4, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData3.Site != 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -4, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -5, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData2.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -5, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (goodsData3.Using > 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -5, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nCategoriy = Global.GetGoodsCatetoriy(goodsData.GoodsID);
				int nCategoriy2 = Global.GetGoodsCatetoriy(goodsData2.GoodsID);
				int nCategoriy3 = Global.GetGoodsCatetoriy(goodsData3.GoodsID);
				if (nCategoriy != nCategoriy2 || nCategoriy2 != nCategoriy3)
				{
					strcmd = string.Format("{0}:{1}:{2}", -6, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				SystemXmlItem systemGoods = null;
				if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
				{
					strcmd = string.Format("{0}:{1}:{2}", -22, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nSuitID = systemGoods.GetIntValue("SuitID", -1);
				if (nSuitID < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -20, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (nSuitID >= 10)
				{
					strcmd = string.Format("{0}:{1}:{2}", -20, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nCategoriy4;
				if (nCategoriy >= 11 && nCategoriy <= 19)
				{
					nCategoriy4 = 10000;
				}
				else if (nCategoriy >= 0 && nCategoriy <= 6)
				{
					nCategoriy4 = nCategoriy;
				}
				else if (nCategoriy >= 20 && nCategoriy <= 21)
				{
					nCategoriy4 = 10000;
				}
				else
				{
					if (!GoodsUtil.CanUpgrade(nCategoriy, 5))
					{
						strcmd = string.Format("{0}:{1}:{2}", -21, roleID, id);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					nCategoriy4 = nCategoriy;
				}
				MuEquipUpgradeData tmpData = Data.EquipUpgradeData[nCategoriy4][nSuitID + 1];
				if (tmpData == null)
				{
					strcmd = string.Format("{0}:{1}:{2}", -21, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nCount = Global.GetEquipExcellencePropNum(goodsData);
				if (goodsData.Lucky <= 0)
				{
				}
				int nBase = tmpData.NeedMoJing;
				int nValue = (int)Math.Ceiling(nCount / 2m);
				int nNeedMoJing = nBase * (1 + nValue);
				if (nNeedMoJing > GameManager.ClientMgr.GetTianDiJingYuanValue(client))
				{
					strcmd = string.Format("{0}:{1}:{2}", -14, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, -nNeedMoJing, "装备进阶", true, true, false);
				bool bUsedBinding = false;
				bool bUsedTimeLimited = false;
				int maxAppendPropLev = Math.Max(Math.Max(goodsData.AppendPropLev, goodsData2.AppendPropLev), goodsData3.AppendPropLev);
				int maxForge_level = Math.Max(Math.Max(goodsData.Forge_level, goodsData2.Forge_level), goodsData3.Forge_level);
				int maxLucky = Math.Max(Math.Max(goodsData.Lucky, goodsData2.Lucky), goodsData3.Lucky);
				GoodsData[] arrGoods = new GoodsData[]
				{
					goodsData,
					goodsData2,
					goodsData3
				};
				bool bBakUsedBinding = false;
				for (int i = 0; i < arrGoods.Length; i++)
				{
					if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, arrGoods[i], 1, false, out bUsedBinding, out bUsedTimeLimited, false))
					{
						strcmd = string.Format("{0}:{1}:{2}", -17, roleID, fields[i]);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (bUsedBinding)
					{
						bBakUsedBinding = bUsedBinding;
					}
					if (bUsedTimeLimited)
					{
					}
				}
				int nNewID = systemGoods.GetIntValue("JinJie", -1);
				systemGoods = null;
				if (nNewID <= 0 || !GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(nNewID, out systemGoods))
				{
					strcmd = string.Format("{0}:{1}:{2}", -22, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				List<int> maxWashProps = WashPropsManager.WashPropsMax(new List<int>[]
				{
					goodsData.WashProps,
					goodsData2.WashProps,
					goodsData3.WashProps
				});
				int nItemDBID = Global.AddGoodsDBCommand(pool, client, nNewID, 1, 0, "", maxForge_level, bBakUsedBinding ? 1 : 0, 0, "", false, 1, "装备进阶", "1900-01-01 12:00:00", 0, goodsData.BornIndex, maxLucky, 0, goodsData.ExcellenceInfo, maxAppendPropLev, goodsData.ChangeLifeLevForEquip, maxWashProps, elementhrtsProps, 0, true);
				if (nItemDBID < 0)
				{
					strcmd = string.Format("{0}:{1}:{2}", -19, roleID, id);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiSuitEquipLevel));
				GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiSuitEquipCount));
				GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.EquipSuitUpTimes));
				strcmd = string.Format("{0}:{1}:{2}", 1, roleID, nItemDBID);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FA4 RID: 16292 RVA: 0x003B4358 File Offset: 0x003B2558
		private static TCPProcessCmdResults PorcessMUCheck(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int processSubTicks = Convert.ToInt32(fields[1]);
				int dateTimeSubTicks = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (!ClientCmdCheck.ClientCheck(client))
				{
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (client.ClientData.LastClientHeartTicks < TimeUtil.NOW() - 60000L)
				{
					int regUserID = Global.RegisterUserIDToDBServer(client.strUserID, 1, socket.ServerId, ref socket.session.LastLogoutServerTicks);
					if (regUserID > 0)
					{
						client.ClientData.LastClientHeartTicks = TimeUtil.NOW();
					}
				}
				int bantimescale = GameManager.PlatConfigMgr.GetGameConfigItemInt("bantimescale", 1500);
				double timescale = (processSubTicks > 0) ? (1000.0 * (double)dateTimeSubTicks / (double)processSubTicks) : 1000.0;
				if (bantimescale > 0 && timescale > (double)bantimescale)
				{
					string log = string.Format("检测到客户端加速，TimeScale={3}, CMD={0}, Client={1}, RoleName={2}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						client.ClientData.RoleName,
						timescale
					});
					LogManager.WriteLog(LogTypes.Error, log, null, true);
					int banSpeedUpMinutes = GameManager.PlatConfigMgr.GetGameConfigItemInt("bantimescalemins", 0);
					if (banSpeedUpMinutes > 0)
					{
						string msg = StringUtil.substitute(GLang.GetLang(663, new object[0]), new object[]
						{
							banSpeedUpMinutes
						});
						DelayExecModule.DelayClose(client, msg, log, banSpeedUpMinutes);
					}
				}
				string strcmd = string.Format("{0}", 1);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FA5 RID: 16293 RVA: 0x003B467C File Offset: 0x003B287C
		private static TCPProcessCmdResults PorcessExperienceCopymapInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				ExperienceCopyScene tmpExSceneInfo = null;
				lock (ExperienceCopySceneManager.m_ExperienceListCopyMapsInfo)
				{
					ExperienceCopySceneManager.m_ExperienceListCopyMapsInfo.TryGetValue(client.ClientData.FuBenSeqID, out tmpExSceneInfo);
				}
				if (tmpExSceneInfo == null)
				{
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nTotalWave = Data.ExperienceCopyMapDataInfoList[client.ClientData.MapCode].MonsterIDList.Count;
				string strcmd = string.Format("{0}:{1}:{2}", tmpExSceneInfo.m_ExperienceCopyMapCreateMonsterWave, nTotalWave, tmpExSceneInfo.m_ExperienceCopyMapRemainMonsterNum);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FA6 RID: 16294 RVA: 0x003B48B4 File Offset: 0x003B2AB4
		private static TCPProcessCmdResults ProcessSpriteQueryActivitySomeInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				int nType = Convert.ToInt32(fields[1]);
				string strcmd = "";
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int nFubenMapID = client.ClientData.FuBenID;
				int nSeqID = client.ClientData.FuBenSeqID;
				if (nType == 1 && GameManager.BloodCastleCopySceneMgr.IsBloodCastleCopyScene(nFubenMapID))
				{
					BloodCastleDataInfo bcDataTmp = null;
					if (!Data.BloodCastleDataInfoList.TryGetValue(nFubenMapID, out bcDataTmp) || bcDataTmp == null)
					{
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(664, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 39);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameManager.BloodCastleCopySceneMgr.SendMegToClient(client, nFubenMapID, nSeqID, 545);
					GameManager.BloodCastleCopySceneMgr.SendMegToClient(client, nFubenMapID, nSeqID, 531);
					GameManager.BloodCastleCopySceneMgr.OnStartPlayGame(client);
				}
				else if (nType == 2 && GameManager.DaimonSquareCopySceneMgr.IsDaimonSquareCopyScene(nFubenMapID))
				{
					DaimonSquareDataInfo dsDataInfo = null;
					if (!Data.DaimonSquareDataInfoList.TryGetValue(nFubenMapID, out dsDataInfo) || dsDataInfo == null)
					{
						GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(665, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 39);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameManager.DaimonSquareCopySceneMgr.OnStartPlayGame(client);
					GameManager.DaimonSquareCopySceneMgr.SendMegToClient(client, nFubenMapID, nSeqID, 536);
					GameManager.DaimonSquareCopySceneMgr.SendMegToClient(client, nFubenMapID, nSeqID, 546);
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FA7 RID: 16295 RVA: 0x003B4BF0 File Offset: 0x003B2DF0
		private static TCPProcessCmdResults PorcessEndBossAnimationCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 9)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int monsterID = Convert.ToInt32(fields[1]);
				int toMapCode = Convert.ToInt32(fields[2]);
				int toX = Convert.ToInt32(fields[3]);
				int toY = Convert.ToInt32(fields[4]);
				int effectX = Convert.ToInt32(fields[5]);
				int effectY = Convert.ToInt32(fields[6]);
				long ticks = Convert.ToInt64(fields[7]);
				int checkCode = Convert.ToInt32(fields[8]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int checkCode2 = Global.GetBossAnimationCheckCode(monsterID, toMapCode, toX, toY, effectX, effectY, ticks);
				string strcmd;
				if (checkCode != checkCode2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据客户端传入的参数执行boss动画结束后刷boss操作，校验和错误, CMD={0}, Client={1}, RoleID={2}, CheckCode={3}, CheckCode2={4}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						checkCode,
						checkCode2
					}), null, true);
					strcmd = string.Format("{0}", -1);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				GameMap gameMap = null;
				if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据客户端传入的参数执行boss动画结束后刷boss操作, 地图不存在, CMD={0}, Client={1}, RoleID={2}, CheckCode={3}, CheckCode2={4}", new object[]
					{
						(TCPGameServerCmds)nID,
						Global.GetSocketRemoteEndPoint(socket, false),
						roleID,
						checkCode,
						checkCode2
					}), null, true);
					strcmd = string.Format("{0}", -2);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				strcmd = string.Format("{0}", 1);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FA8 RID: 16296 RVA: 0x003B4EFC File Offset: 0x003B30FC
		private static TCPProcessCmdResults ProcessQueryImpetrateInfoCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleAID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (client == null || client.ClientData.RoleID != roleAID)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleAID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				DateTime dTime = TimeUtil.NowDateTime();
				DateTime dTime2 = Global.GetRoleParamsDateTimeFromDB(client, "ImpetrateTime");
				string strcmd;
				if (dTime2.Ticks == 0L)
				{
					strcmd = string.Format("{0}", -1);
				}
				else
				{
					double dSecond = (dTime - dTime2).TotalSeconds;
					double dRet = Global.GMax(0.0, (double)Data.FreeImpetrateIntervalTime - dSecond);
					strcmd = string.Format("{0}", (int)dRet);
				}
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FA9 RID: 16297 RVA: 0x003B510C File Offset: 0x003B330C
		private static TCPProcessCmdResults ProcessExcuteImpetrateCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			int[] moneys = GameManager.systemParamsList.GetParamValueIntArrayByName("QiFuMoney", ',');
			int moneyOne = moneys[0];
			int moneyTen = moneys[1];
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nType = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (nType < 1 || nType > 2)
				{
					string strcmd = string.Format("{0}:{1}::", -1, nType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nTime = 0;
				if (nType == 1)
				{
					nTime = 1;
				}
				else if (nType == 2)
				{
					nTime = 10;
				}
				if (null == client.ClientData.JinDanGoodsDataList)
				{
					string strDBcmd = StringUtil.substitute("{0}:{1}", new object[]
					{
						roleID,
						2000
					});
					byte[] bytesCmd = new UTF8Encoding().GetBytes(strDBcmd);
					TCPProcessCmdResults result = Global.TransferRequestToDBServer(tcpMgr, socket, tcpClientPool, tcpRandKey, pool, 204, bytesCmd, 12, out tcpOutPacket, client.ServerId);
					if (TCPProcessCmdResults.RESULT_FAILED != result && null != tcpOutPacket)
					{
						List<GoodsData> goodsDataList = DataHelper.BytesToObject<List<GoodsData>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
						client.ClientData.JinDanGoodsDataList = goodsDataList;
						Global.PushBackTcpOutPacket(tcpOutPacket);
					}
					if (null == client.ClientData.JinDanGoodsDataList)
					{
						client.ClientData.JinDanGoodsDataList = new List<GoodsData>();
					}
				}
				if (client.ClientData.JinDanGoodsDataList != null && Global.GetJinDanBagCapacity(client) - client.ClientData.JinDanGoodsDataList.Count < nTime)
				{
					string strcmd = string.Format("{0}:{1}::", -2, nType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int needGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("JinDan", -1);
				if (needGoodsID <= 0)
				{
					string strcmd = string.Format("{0}:{1}::", -110, nType);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int nBinding = -1;
				DateTime dTime = TimeUtil.NowDateTime();
				int needLuckStar = 0;
				DateTime dTime2 = Global.GetRoleParamsDateTimeFromDB(client, "ImpetrateTime");
				StringBuilder strBuilder = new StringBuilder();
				if (dTime2.Ticks == 0L)
				{
					Global.SaveRoleParamsDateTimeToDB(client, "ImpetrateTime", dTime, true);
					string strGoods = GameManager.systemParamsList.GetParamValueByName("FirstQiFuGoods");
					string strcmd;
					if (string.IsNullOrEmpty(strGoods))
					{
						strcmd = string.Format("{0}:{1}::", -3, nType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					string[] strFields = strGoods.Split(new char[]
					{
						'|'
					});
					if (strFields == null || strFields.Length != 6)
					{
						strcmd = string.Format("{0}:{1}::", -3, nType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					string[] strData = strFields[client.ClientData.Occupation].Split(new char[]
					{
						','
					});
					if (strData == null || strData.Length != 6)
					{
						strcmd = string.Format("{0}:{1}::", -3, nType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					int nGoodID = Global.SafeConvertToInt32(strData[0]);
					nBinding = Global.SafeConvertToInt32(strData[1]);
					int nForgeLevel = Global.SafeConvertToInt32(strData[2]);
					int nAppendProp = Global.SafeConvertToInt32(strData[3]);
					int nLuckyProp = Global.SafeConvertToInt32(strData[4]);
					int nExcellenceProp = Global.SafeConvertToInt32(strData[5]);
					int dbRet = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, nGoodID, 1, 0, "", nForgeLevel, nBinding, 2000, "", true, 1, "祈福获取道具", "1900-01-01 12:00:00", 0, 0, nLuckyProp, 0, nExcellenceProp, nAppendProp, 0, null, null, 0, true);
					string strGetGoods = string.Format("{0},{1},{2},{3},{4},{5},{6}", new object[]
					{
						nGoodID,
						1,
						nBinding,
						nForgeLevel,
						nAppendProp,
						nLuckyProp,
						nExcellenceProp
					});
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						1,
						nType,
						strGetGoods,
						Data.FreeImpetrateIntervalTime
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					client._IconStateMgr.CheckFreeImpetrateState(client);
					client._IconStateMgr.SendIconStateToClient(client);
					SevenDayGoalEventObject evObj = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetEquipCountByQiFu);
					evObj.Arg1 = nGoodID;
					evObj.Arg2 = 1;
					GlobalEventSource.getInstance().fireEvent(evObj);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				else
				{
					TimeSpan dTimeSpan = dTime - dTime2;
					double dSecond = 0.0;
					dSecond = dTimeSpan.TotalSeconds;
					int nImpetrateTypeID = Global.GetImpetrateTypeIDByLevel(client);
					string strcmd;
					if (nImpetrateTypeID < 0)
					{
						strcmd = string.Format("{0}:{1}::", -100, nType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					Dictionary<int, SystemXmlItem> xmlDic = null;
					SpecPriorityActivity spAct;
					if (nType == 1 && (dSecond >= (double)Data.FreeImpetrateIntervalTime || (Global.GetTotalGoodsCountByID(client, needGoodsID) > 0 && 1 == nTime)))
					{
						lock (QianKunManager.m_mutex)
						{
							JieRiFuLiActivity act = HuodongCachingMgr.GetJieriFuLiActivity();
							object o_placeholder = null;
							spAct = HuodongCachingMgr.GetSpecPriorityActivity();
							if (spAct != null && spAct.IsChouJiangOpen(SpecPActivityChouJiangType.SPACJT_Begin))
							{
								if (!QianKunManager.m_ImpetrateDataTeQuanFree.TryGetValue(nImpetrateTypeID, out xmlDic) || xmlDic == null)
								{
									strcmd = string.Format("{0}:{1}::", -101, nType);
									tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
									return TCPProcessCmdResults.RESULT_DATA;
								}
							}
							else if (act != null && act.IsOpened(EJieRiFuLiType.FuFeiQiFu, out o_placeholder))
							{
								if (!QianKunManager.m_ImpetrateDataHuoDongFree.TryGetValue(nImpetrateTypeID, out xmlDic) || xmlDic == null)
								{
									strcmd = string.Format("{0}:{1}::", -101, nType);
									tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
									return TCPProcessCmdResults.RESULT_DATA;
								}
							}
							else if (!QianKunManager.m_ImpetrateDataInfoFree.TryGetValue(nImpetrateTypeID, out xmlDic) || xmlDic == null)
							{
								strcmd = string.Format("{0}:{1}::", -101, nType);
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
						}
					}
					else
					{
						lock (QianKunManager.m_mutex)
						{
							JieRiFuLiActivity act = HuodongCachingMgr.GetJieriFuLiActivity();
							object o_placeholder = null;
							spAct = HuodongCachingMgr.GetSpecPriorityActivity();
							if (spAct != null && spAct.IsChouJiangOpen(SpecPActivityChouJiangType.SPACJT_Begin))
							{
								if (!QianKunManager.m_ImpetrateDataTeQuan.TryGetValue(nImpetrateTypeID, out xmlDic) || xmlDic == null)
								{
									strcmd = string.Format("{0}:{1}::", -101, nType);
									tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
									return TCPProcessCmdResults.RESULT_DATA;
								}
							}
							else if (act != null && act.IsOpened(EJieRiFuLiType.FuFeiQiFu, out o_placeholder))
							{
								if (!QianKunManager.m_ImpetrateDataHuoDong.TryGetValue(nImpetrateTypeID, out xmlDic) || xmlDic == null)
								{
									strcmd = string.Format("{0}:{1}::", -101, nType);
									tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
									return TCPProcessCmdResults.RESULT_DATA;
								}
							}
							else if (!QianKunManager.m_ImpetrateDataInfo.TryGetValue(nImpetrateTypeID, out xmlDic) || xmlDic == null)
							{
								strcmd = string.Format("{0}:{1}::", -101, nType);
								tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
								return TCPProcessCmdResults.RESULT_DATA;
							}
						}
					}
					int nTimer;
					double awardmuti;
					JieRiMultAwardActivity activity;
					double grade;
					StringBuilder strBuilderRecord;
					string preString;
					if (nType == 1)
					{
						if (dSecond >= (double)Data.FreeImpetrateIntervalTime)
						{
							Global.SaveRoleParamsDateTimeToDB(client, "ImpetrateTime", dTime, true);
							nTimer = Data.FreeImpetrateIntervalTime;
							nBinding = 1;
						}
						else
						{
							bool usedBinding = false;
							bool usedTimeLimited = false;
							bool hasSubGoods = false;
							if (Global.GetTotalGoodsCountByID(client, needGoodsID) > 0 && 1 == nTime)
							{
								hasSubGoods = GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, needGoodsID, 1, false, out usedBinding, out usedTimeLimited, false);
								if (hasSubGoods)
								{
									nBinding = 1;
								}
							}
							if (!hasSubGoods)
							{
								nBinding = 0;
								needLuckStar = moneyOne;
								if (!GameManager.ClientMgr.ModifyLuckStarValue(client, -needLuckStar, "祈福2", false, DaiBiSySType.QiFuXiTong))
								{
									GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(605, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
									strcmd = string.Format("{0}:{1}::", -5, nType);
									tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
									return TCPProcessCmdResults.RESULT_DATA;
								}
								awardmuti = 0.0;
								activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
								if (null != activity)
								{
									JieRiMultConfig config = activity.GetConfig(10);
									if (null != config)
									{
										awardmuti += config.GetMult();
									}
								}
								spAct = HuodongCachingMgr.GetSpecPriorityActivity();
								if (null != spAct)
								{
									awardmuti += spAct.GetMult(SpecPActivityBuffType.SPABT_QiFu);
								}
								awardmuti = Math.Max(1.0, awardmuti);
								grade = (double)(nTime * 20) * awardmuti;
								Global.AddZaJinDanJiFen(client, Math.Max(0, (int)grade), "祈福2", false);
							}
							nTimer = (int)Global.GMax(0.0, (double)Data.FreeImpetrateIntervalTime - dSecond);
						}
						strBuilderRecord = new StringBuilder();
						preString = string.Format("{0}_{1}_{2}_{3}_{4}_{5}", new object[]
						{
							roleID,
							0,
							client.ClientData.ZoneID,
							nTime,
							needLuckStar,
							nBinding
						});
						string strRecord;
						string gainString = QianKunManager.ProcessRandomWaBaoByZaDan(client, xmlDic, 1, out strRecord, nBinding, true);
						if (strRecord.Length > 0)
						{
							if (strBuilderRecord.Length > 0)
							{
								strBuilderRecord.Append(";");
							}
							strBuilderRecord.Append(string.Format("{0}_{1}", preString, strRecord));
						}
						if (strBuilderRecord.Length > 0)
						{
							GameManager.DBCmdMgr.AddDBCmd(10108, string.Format("{0}", strBuilderRecord.ToString()), null, client.ServerId);
						}
						strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
						{
							1,
							nType,
							gainString,
							nTimer
						});
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						client._IconStateMgr.CheckFreeImpetrateState(client);
						client._IconStateMgr.SendIconStateToClient(client);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (nType != 2)
					{
						return TCPProcessCmdResults.RESULT_DATA;
					}
					nBinding = 0;
					int spIndex = -1;
					if (10 == nTime)
					{
						spIndex = Global.GetRandomNumber(0, nTime);
						needLuckStar = moneyTen;
					}
					if (!GameManager.ClientMgr.ModifyLuckStarValue(client, -needLuckStar, "祈福2", false, DaiBiSySType.QiFuXiTong))
					{
						GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(605, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
						strcmd = string.Format("{0}:{1}::", -5, nType);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					awardmuti = 0.0;
					activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
					if (null != activity)
					{
						JieRiMultConfig config = activity.GetConfig(10);
						if (null != config)
						{
							awardmuti += config.GetMult();
						}
					}
					spAct = HuodongCachingMgr.GetSpecPriorityActivity();
					if (null != spAct)
					{
						awardmuti += spAct.GetMult(SpecPActivityBuffType.SPABT_QiFu);
					}
					awardmuti = Math.Max(1.0, awardmuti);
					grade = (double)(nTime * 20) * awardmuti;
					Global.AddZaJinDanJiFen(client, Math.Max(0, (int)grade), "祈福自动扣除", false);
					strBuilderRecord = new StringBuilder();
					preString = string.Format("{0}_{1}_{2}_{3}_{4}_{5}", new object[]
					{
						roleID,
						0,
						client.ClientData.ZoneID,
						nTime,
						needLuckStar,
						nBinding
					});
					for (int i = 0; i < nTime; i++)
					{
						string strRecord;
						string gainString;
						if (i == spIndex)
						{
							gainString = QianKunManager.ProcessRandomWaBaoByZaDanSP(client, xmlDic, 1, out strRecord, nBinding, true);
						}
						else
						{
							gainString = QianKunManager.ProcessRandomWaBaoByZaDan(client, xmlDic, 1, out strRecord, nBinding, true);
						}
						if (gainString.Length > 0)
						{
							if (strBuilder.Length > 0)
							{
								strBuilder.Append("|");
							}
							strBuilder.Append(string.Format("{0}", gainString));
						}
						if (strRecord.Length > 0)
						{
							if (strBuilderRecord.Length > 0)
							{
								strBuilderRecord.Append(";");
							}
							strBuilderRecord.Append(string.Format("{0}_{1}", preString, strRecord));
						}
					}
					if (strBuilderRecord.Length > 0)
					{
						GameManager.DBCmdMgr.AddDBCmd(10108, string.Format("{0}", strBuilderRecord.ToString()), null, client.ServerId);
					}
					if (nTime == 10)
					{
						ProcessTask.ProcessAddTaskVal(client, TaskTypes.QiFu_10, -1, 1, new object[0]);
					}
					nTimer = (int)Global.GMax(0.0, (double)Data.FreeImpetrateIntervalTime - dSecond);
					string strGoodsInfo = strBuilder.ToString();
					strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						1,
						nType,
						strGoodsInfo,
						nTimer
					});
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FAA RID: 16298 RVA: 0x003B626C File Offset: 0x003B446C
		private static TCPProcessCmdResults ProcessQueryStarConstellationCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(client.ClientData.RoleStarConstellationInfo, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FAB RID: 16299 RVA: 0x003B63C8 File Offset: 0x003B45C8
		private static TCPProcessCmdResults ProcessExcuteActivationStarConstellationCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int nStarSite = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GameManager.StarConstellationMgr.ActivationStarConstellation(client, nStarSite);
				tcpOutPacket = DataHelper.ObjectToTCPOutPacket<Dictionary<int, int>>(client.ClientData.RoleStarConstellationInfo, pool, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FAC RID: 16300 RVA: 0x003B6540 File Offset: 0x003B4740
		private static TCPProcessCmdResults ProcessQuerySpecialMachineCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				string key = fields[1];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (Global.IsSpecialMachine(key))
				{
					Global.UpdateBufferData(client, BufferItemTypes.MU_SPECMACH_EXP, new double[]
					{
						(double)Global.GetSpecialMachineExp()
					}, 1, true);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FAD RID: 16301 RVA: 0x003B66BC File Offset: 0x003B48BC
		private static TCPProcessCmdResults ProcessExtraDataCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				string key = fields[1];
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (!string.IsNullOrEmpty(key))
				{
					LogManager.WriteLog(LogTypes.Error, "客户端检测到数据不一致,数据:" + key, null, true);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FAE RID: 16302 RVA: 0x003B6828 File Offset: 0x003B4A28
		private static TCPProcessCmdResults ProcessGetSceneTimeStateInfoCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				SceneUIClasses sceneType = Global.GetMapSceneType(client.ClientData.MapCode);
				GlobalEventSource4Scene.getInstance().fireEvent(new EventObjectEx(client, 60), (int)sceneType);
				switch (sceneType)
				{
				case SceneUIClasses.HuanYingSiYuan:
					HuanYingSiYuanManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.TianTi:
					TianTiManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client);
					break;
				case SceneUIClasses.YongZheZhanChang:
					YongZheZhanChangManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true, true);
					break;
				case SceneUIClasses.ElementWar:
					ElementWarManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.MoRiJudge:
					SingletonTemplate<MoRiJudgeManager>.Instance().NotifyTimeStateAndBossEvent(client);
					break;
				case SceneUIClasses.KuaFuBoss:
					KuaFuBossManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.CopyWolf:
					CopyWolfManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.LangHunLingYu:
					LangHunLingYuManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.CoupleArena:
					SingletonTemplate<CoupleArenaManager>.Instance().NotifyTimeStateInfoAndScoreInfo(client);
					break;
				case SceneUIClasses.KingOfBattle:
					KingOfBattleManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true, true);
					break;
				case SceneUIClasses.KarenWest:
					KarenBattleManager_MapWest.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.KarenEast:
					KarenBattleManager_MapEast.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.LingDiCaiJi:
					LingDiCaiJiManager.getInstance().NotifyPlayGame(client);
					break;
				case SceneUIClasses.BangHuiMatch:
					BangHuiMatchManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.KuaFuLueDuo:
					KuaFuLueDuoManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.Comp:
					CompManager.getInstance().NotifyScoreInfo(client, true, true);
					break;
				case SceneUIClasses.WanMoXiaGu:
					WanMoXiaGuManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.CompBattle:
					CompBattleManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.CompMine:
					CompMineManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				case SceneUIClasses.ZorkBattle:
					ZorkBattleManager.getInstance().NotifyTimeStateInfoAndScoreInfo(client, true, true);
					break;
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FAF RID: 16303 RVA: 0x003B6BA0 File Offset: 0x003B4DA0
		private static TCPProcessCmdResults ProcessRegionEventCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int eventType = Convert.ToInt32(fields[1]);
				int flag = Convert.ToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				GlobalEventSource.getInstance().fireEvent(new ClientRegionEventObject(client, eventType, flag, 0));
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FB0 RID: 16304 RVA: 0x003B6D10 File Offset: 0x003B4F10
		private static TCPProcessCmdResults ProcessGetStoreYinLiang(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				long value = Convert.ToInt64(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (0L == value)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int oldYinLiang = client.ClientData.YinLiang;
				long oldStoreYinLiang = client.ClientData.StoreYinLiang;
				string strCmd;
				if (value > 0L)
				{
					if (value > (long)oldYinLiang)
					{
						strCmd = string.Format("{0}:{1}", roleID, -1);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!GameManager.ClientMgr.SubUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, (int)value, "仓库存", false))
					{
						strCmd = string.Format("{0}:{1}", roleID, -1);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameManager.ClientMgr.AddUserStoreYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, value, "仓库存", false);
				}
				else
				{
					if ((long)oldYinLiang - value > 1000000000L)
					{
						strCmd = string.Format("{0}:{1}", roleID, -3);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (Math.Abs(value) > oldStoreYinLiang)
					{
						strCmd = string.Format("{0}:{1}", roleID, -2);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!GameManager.ClientMgr.AddUserStoreYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, value, "仓库取", false))
					{
						strCmd = string.Format("{0}:{1}", roleID, -2);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, (int)(-(int)value), "仓库取", false);
				}
				strCmd = string.Format("{0}:{1}", roleID, 0);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FB1 RID: 16305 RVA: 0x003B70E8 File Offset: 0x003B52E8
		private static TCPProcessCmdResults ProcessGetStoreMoney(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				long value = Convert.ToInt64(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (0L == value)
				{
					return TCPProcessCmdResults.RESULT_OK;
				}
				int oldMoney = client.ClientData.Money1;
				long oldStoreMoney = client.ClientData.StoreMoney;
				string strCmd;
				if (value > 0L)
				{
					if (value > (long)oldMoney)
					{
						strCmd = string.Format("{0}:{1}", roleID, -1);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!GameManager.ClientMgr.SubMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, (int)value, "仓库存"))
					{
						strCmd = string.Format("{0}:{1}", roleID, -1);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameManager.ClientMgr.AddUserStoreMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, value, "仓库存", false);
				}
				else
				{
					if ((long)oldMoney - value > 1000000000L)
					{
						strCmd = string.Format("{0}:{1}", roleID, -3);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (Math.Abs(value) > oldStoreMoney)
					{
						strCmd = string.Format("{0}:{1}", roleID, -2);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					if (!GameManager.ClientMgr.AddUserStoreMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, value, "仓库取", false))
					{
						strCmd = string.Format("{0}:{1}", roleID, -2);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
					GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, (int)(-(int)value), "仓库取", true);
				}
				strCmd = string.Format("{0}:{1}", roleID, 0);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strCmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FB2 RID: 16306 RVA: 0x003B74C0 File Offset: 0x003B56C0
		private static TCPProcessCmdResults ProcessGetJieRiFanBeiInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1 && fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				if (fields.Length < 2 || Convert.ToInt32(fields[1]) != 0)
				{
					Dictionary<int, int> openInfo = new Dictionary<int, int>();
					JieRiMultAwardActivity awardActivity = HuodongCachingMgr.GetJieRiMultAwardActivity();
					if (awardActivity != null && awardActivity.activityDict != null)
					{
						foreach (JieRiMultConfig item in awardActivity.activityDict.Values)
						{
							if (item.InActivityTime() && item.Effective == 1)
							{
								openInfo[item.type] = 1;
							}
						}
					}
					client.sendCmd<Dictionary<int, int>>(nID, openInfo, false);
				}
				else
				{
					Dictionary<int, JieRiFanBeiItemData> openInfo2 = new Dictionary<int, JieRiFanBeiItemData>();
					JieRiMultAwardActivity awardActivity = HuodongCachingMgr.GetJieRiMultAwardActivity();
					if (awardActivity != null && awardActivity.activityDict != null)
					{
						foreach (JieRiMultConfig item in awardActivity.activityDict.Values)
						{
							if (item.InActivityTime() && item.Effective == 1)
							{
								openInfo2[item.type] = new JieRiFanBeiItemData
								{
									Type = item.type,
									IsOpen = 1
								};
							}
						}
					}
					JieRiFuLiActivity fuliActivity = HuodongCachingMgr.GetJieriFuLiActivity();
					if (fuliActivity != null)
					{
						for (int i = 1; i < 7; i++)
						{
							object _holder;
							if (fuliActivity.IsOpened((EJieRiFuLiType)i, out _holder))
							{
								JieRiFanBeiItemData itemData = new JieRiFanBeiItemData();
								itemData.Type = i + 100;
								itemData.IsOpen = 1;
								if (i == 4)
								{
									itemData.ExtArg1 = GameManager.systemParamsList.GetParamValueByName("ForgeMaxOpen");
									itemData.ExtArg2 = GameManager.systemParamsList.GetParamValueByName("ForgeProtectOpen");
								}
								if (i == 6)
								{
									List<double> argList = (List<double>)_holder;
									if (argList.Count != 2)
									{
										itemData.ExtArg1 = "1";
										itemData.ExtArg2 = "1";
									}
									else
									{
										itemData.ExtArg1 = argList[0].ToString();
										itemData.ExtArg2 = argList[1].ToString();
									}
								}
								openInfo2[itemData.Type] = itemData;
							}
						}
					}
					SpecPriorityActivity spActivity = HuodongCachingMgr.GetSpecPriorityActivity();
					if (spActivity != null)
					{
						for (int loop = 1; loop < 4; loop++)
						{
							if (spActivity.IsChouJiangOpen((SpecPActivityChouJiangType)loop))
							{
								JieRiFanBeiItemData itemData = new JieRiFanBeiItemData();
								itemData.Type = loop + 250;
								itemData.IsOpen = 1;
								openInfo2[itemData.Type] = itemData;
							}
						}
						for (int loop = 1; loop < 14; loop++)
						{
							SpecPActivityConfig actProto;
							if (spActivity.IsMultiOpen((SpecPActivityBuffType)loop, out actProto))
							{
								JieRiFanBeiItemData itemData = new JieRiFanBeiItemData();
								itemData.Type = loop + 200;
								itemData.IsOpen = 1;
								itemData.ExtArg1 = string.Format("{0}", spActivity.GetMult((SpecPActivityBuffType)loop));
								openInfo2[itemData.Type] = itemData;
							}
						}
					}
					client.sendCmd<Dictionary<int, JieRiFanBeiItemData>>(nID, openInfo2, false);
				}
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FB3 RID: 16307 RVA: 0x003B7A10 File Offset: 0x003B5C10
		private static TCPProcessCmdResults ProcessGetAchievementRuneInfo(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 1)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				AchievementRuneData runeData = ChengJiuManager.GetAchievementRuneData(client);
				client.sendCmd<AchievementRuneData>(780, runeData, false);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FB4 RID: 16308 RVA: 0x003B7B6C File Offset: 0x003B5D6C
		private static TCPProcessCmdResults ProcessUpAchievementRune(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int runeID = Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				AchievementRuneData runeData = ChengJiuManager.UpAchievementRune(client, runeID);
				client.sendCmd<AchievementRuneData>(781, runeData, false);
				return TCPProcessCmdResults.RESULT_OK;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x06003FB5 RID: 16309 RVA: 0x003B7CD8 File Offset: 0x003B5ED8
		private static TCPProcessCmdResults ProcessQueryJieriFanLiActivityCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				ActivityTypes acttype = (ActivityTypes)Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string sCmd = "";
				JieriFanLiActivity instance = HuodongCachingMgr.GetJieriFanLiActivity(acttype);
				if (null != instance)
				{
					sCmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
					{
						roleID,
						instance.FromDate.Replace(':', '$'),
						instance.ToDate.Replace(':', '$'),
						(int)acttype,
						0
					});
				}
				return Global.RequestToDBServer2(tcpClientPool, pool, nID, sCmd, out tcpOutPacket, client.ServerId);
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003FB6 RID: 16310 RVA: 0x003B7EFC File Offset: 0x003B60FC
		private static TCPProcessCmdResults ProcessQueryDanBiChongZhiActivityCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 2)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				ActivityTypes acttype = (ActivityTypes)Convert.ToInt32(fields[1]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string sCmd = "";
				DanBiChongZhiActivity instance = HuodongCachingMgr.GetDanBiChongZhiActivity();
				if (null != instance)
				{
					sCmd = string.Format("{0}:{1}:{2}:{3}", new object[]
					{
						roleID,
						instance.FromDate.Replace(':', '$'),
						instance.ToDate.Replace(':', '$'),
						instance.DBQueryInfoCmd()
					});
				}
				Dictionary<int, string> danBiDicInfo = new Dictionary<int, string>();
				Dictionary<string, string> danBiDicInfo2 = Global.sendToDB<Dictionary<string, string>, string>(947, sCmd, client.ServerId);
				if (danBiDicInfo2 != null && danBiDicInfo2.Count<KeyValuePair<string, string>>() > 0)
				{
					lock (instance.DanBiChongZhiAwardDic)
					{
						foreach (KeyValuePair<int, DanBiChongZhiAwardDetail> item in instance.DanBiChongZhiAwardDic)
						{
							string key = string.Format("{0}_{1}", item.Value.MinYuanBao, item.Value.MaxYuanBao);
							string value = null;
							if (danBiDicInfo2.TryGetValue(key, out value))
							{
								danBiDicInfo[item.Key] = value;
							}
						}
					}
				}
				byte[] bytes = DataHelper.ObjectToBytes<Dictionary<int, string>>(danBiDicInfo);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, bytes, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003FB7 RID: 16311 RVA: 0x003B824C File Offset: 0x003B644C
		private static TCPProcessCmdResults ProcessGetDanBiChongZhiActivityCmd(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}", (TCPGameServerCmds)nID), null, true);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Recv={1}, CmdData={2}", (TCPGameServerCmds)nID, fields.Length, cmdData), null, true);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int activityType = Global.SafeConvertToInt32(fields[1]);
				int extTag = Global.SafeConvertToInt32(fields[2]);
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				string strcmd;
				if (69 != activityType)
				{
					strcmd = string.Format("{0}:{1}", -1, cmdData);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				DanBiChongZhiActivity instActivity = (DanBiChongZhiActivity)Global.GetActivity((ActivityTypes)activityType);
				if (null == instActivity)
				{
					strcmd = string.Format("{0}:{1}", -1, cmdData);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!instActivity.CanGiveAward())
				{
					strcmd = string.Format("{0}:{1}", -2, cmdData);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!instActivity.CheckCondition(client, extTag))
				{
					strcmd = string.Format("{0}:{1}", -10007, cmdData);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!instActivity.HasEnoughBagSpaceForAwardGoods(client, extTag))
				{
					strcmd = string.Format("{0}:{1}", -3, cmdData);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (69 == activityType)
				{
					if (!instActivity.CheckDanBiChongZhiCountOK(client, extTag))
					{
						strcmd = string.Format("{0}:{1}", -5, cmdData);
						tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
						return TCPProcessCmdResults.RESULT_DATA;
					}
				}
				string[] dbFields = null;
				int nDBExecuteID = Global.GetDBServerExecuteActivityAwardCmdID((ActivityTypes)activityType);
				string dbCmds = Global.GetActivityRequestCmdString((ActivityTypes)activityType, client, extTag);
				if (nDBExecuteID <= 0 || string.IsNullOrEmpty(dbCmds))
				{
					strcmd = string.Format("{0}:{1}", -4, cmdData);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				Global.RequestToDBServer(tcpClientPool, pool, nDBExecuteID, dbCmds, out dbFields, client.ServerId);
				if (dbFields == null || dbFields.Length != 3)
				{
					strcmd = string.Format("{0}:{1}", -5, cmdData);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				int result = Global.SafeConvertToInt32(dbFields[0]);
				if (result <= 0)
				{
					strcmd = string.Format("{0}:{1}", result, cmdData);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (!instActivity.GiveAward(client, Global.SafeConvertToInt32(dbFields[2])))
				{
					strcmd = string.Format("{0}:{1}", -7, cmdData);
					tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
					return TCPProcessCmdResults.RESULT_DATA;
				}
				if (client._IconStateMgr.CheckJieRiActivity(client, false))
				{
					client._IconStateMgr.SendIconStateToClient(client);
				}
				strcmd = string.Format("{0}:{1}", result, cmdData);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, "", false, false);
			}
			tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", 30767);
			return TCPProcessCmdResults.RESULT_DATA;
		}

		// Token: 0x06003FB8 RID: 16312 RVA: 0x003B86EC File Offset: 0x003B68EC
		private static TCPProcessCmdResults ProcessUpArtifact(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
		{
			tcpOutPacket = null;
			string cmdData = null;
			try
			{
				cmdData = new UTF8Encoding().GetString(data, 0, count);
			}
			catch (Exception)
			{
				LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
				return TCPProcessCmdResults.RESULT_FAILED;
			}
			try
			{
				string[] fields = cmdData.Split(new char[]
				{
					':'
				});
				if (fields.Length != 3)
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("指令参数个数错误, CMD={0}, Client={1}, Recv={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), fields.Length), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				int roleID = Convert.ToInt32(fields[0]);
				int equipID = Convert.ToInt32(fields[1]);
				bool isBind = Convert.ToInt32(fields[2]) > 0;
				GameClient client = GameManager.ClientMgr.FindClient(socket);
				if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
				{
					LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
					return TCPProcessCmdResults.RESULT_FAILED;
				}
				ArtifactResultData resultData = ArtifactManager.UpArtifact(client, equipID, isBind);
				string strcmd = string.Format("{0}:{1}:{2}", resultData.State, resultData.EquipDbID, resultData.Bind);
				tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);
				return TCPProcessCmdResults.RESULT_DATA;
			}
			catch (Exception ex)
			{
				DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
			}
			return TCPProcessCmdResults.RESULT_FAILED;
		}

		// Token: 0x04004ED7 RID: 20183
		public static bool isUpdateFuBenData = false;

		// Token: 0x04004ED8 RID: 20184
		public static string KeySHA1 = "abcde";

		// Token: 0x04004ED9 RID: 20185
		public static string KeyData = "12345";

		// Token: 0x04004EDA RID: 20186
		public static string WebKey = "12345";

		// Token: 0x04004EDB RID: 20187
		public static string WebKeyLocal = "12345";

		// Token: 0x04004EDC RID: 20188
		public static long MaxTicks = 864000000000L;

		// Token: 0x04004EDD RID: 20189
		public static long TotalHandledCmdsNum = 0L;

		// Token: 0x04004EDE RID: 20190
		public static int MaxUsedTicksCmdID = 0;

		// Token: 0x04004EDF RID: 20191
		public static long MaxUsedTicksByCmdID = 0L;

		// Token: 0x04004EE0 RID: 20192
		private static Dictionary<TMSKSocket, int> HandlingCmdDict = new Dictionary<TMSKSocket, int>();
	}
}
