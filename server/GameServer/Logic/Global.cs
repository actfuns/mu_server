using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows;
using System.Xml.Linq;
using GameServer.Core.Executor;
using GameServer.Core.GameEvent;
using GameServer.Core.GameEvent.EventOjectImpl;
using GameServer.Interface;
using GameServer.Logic.ActivityNew;
using GameServer.Logic.ActivityNew.SevenDay;
using GameServer.Logic.CheatGuard;
using GameServer.Logic.Copy;
using GameServer.Logic.Damon;
using GameServer.Logic.FluorescentGem;
using GameServer.Logic.Goods;
using GameServer.Logic.JingJiChang;
using GameServer.Logic.LiXianBaiTan;
using GameServer.Logic.MoRi;
using GameServer.Logic.MUWings;
using GameServer.Logic.Olympics;
using GameServer.Logic.OnePiece;
using GameServer.Logic.Ornament;
using GameServer.Logic.Reborn;
using GameServer.Logic.Spread;
using GameServer.Logic.UnionAlly;
using GameServer.Logic.UserMoneyCharge;
using GameServer.Logic.UserReturn;
using GameServer.Server;
using HSGameEngine.Tools.AStarEx;
using Neo.IronLua;
using ProtoBuf;
using ProtoBuf.Meta;
using Server.Data;
using Server.Protocol;
using Server.TCP;
using Server.Tools;
using Server.Tools.Pattern;
using Tmsk.Contract;

namespace GameServer.Logic
{
    
    public class Global
    {
        
        static Global()
        {
            Global.XmlInfo = new Dictionary<string, XElement>();
        }

        
        public static void CheckCodes()
        {
            bool result = true;
            result &= Global.CheckAllProtoBufContract(Assembly.GetExecutingAssembly());
            result &= Global.CheckAllProtoBufContract(Assembly.Load("Tmsk.Contract"));
            result &= Global.CheckDuplicateEnum(typeof(TCPGameServerCmds));
            result &= Global.CheckDuplicateEnum(typeof(SaleGoodsConsts));
            result &= Global.CheckDuplicateEnum(typeof(MagicActionIDs));
            result &= Global.CheckDuplicateEnum(typeof(GongNengIDs));
            result &= Global.CheckDuplicateEnum(typeof(SceneUIClasses));
            result &= Global.CheckDuplicateEnum(typeof(ExtPropIndexes));
            result &= Global.CheckDuplicateEnum(typeof(ItemCategories));
            result &= Global.CheckDuplicateEnum(typeof(ActivityTypes));
            result &= Global.CheckDuplicateFieldValue(typeof(RoleParamName));
            result &= Global.PrepareProtoBufMetadata(Assembly.GetExecutingAssembly());
            if (!(result & Global.PrepareProtoBufMetadata(Assembly.Load("Tmsk.Contract"))))
            {
                Console.WriteLine("代码检查发现问题,请尽快反馈给研发部\n\n");
            }
        }

        
        public static bool CheckDuplicateEnum(Type type)
        {
            bool result = true;
            HashSet<int> hashSet = new HashSet<int>();
            Array array = type.GetEnumValues();
            foreach (object v0 in array)
            {
                int v = (int)v0;
                if (!hashSet.Add(v) && !Global.DontCheckEnumNames.Contains(v0.ToString()))
                {
                    LogManager.WriteLog(LogTypes.Fatal, string.Format("枚举类型[{0}]定义常量值[{1}]重复", type.ToString(), v), null, true);
                    result = false;
                }
            }
            return result;
        }

        
        public static bool CheckDuplicateFieldValue(Type type)
        {
            bool result = true;
            HashSet<string> hashSet = new HashSet<string>();
            FieldInfo[] fields = type.GetFields();
            foreach (FieldInfo field in fields)
            {
                string v = field.GetValue(null).ToString();
                if (!hashSet.Add(v))
                {
                    LogManager.WriteLog(LogTypes.Fatal, string.Format("类型[{0}]定义常量值[{1}]重复", type.ToString(), v), null, true);
                    result = false;
                }
            }
            return result;
        }

        
        public static bool CheckAllProtoBufContract(Assembly assembly)
        {
            bool result = true;
            foreach (Type type in assembly.GetTypes())
            {
                bool hasDefaultConstructor = false;
                Dictionary<int, string> dict = new Dictionary<int, string>();
                object[] attributes = type.GetCustomAttributes(typeof(ProtoContractAttribute), false);
                if (attributes.Length > 0)
                {
                    foreach (MemberInfo member in type.GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public))
                    {
                        if (member.MemberType == MemberTypes.Constructor)
                        {
                            ConstructorInfo ci = member as ConstructorInfo;
                            if (null != ci)
                            {
                                if (ci.GetParameters().Length == 0)
                                {
                                    hasDefaultConstructor = true;
                                }
                            }
                        }
                        else if (member.MemberType == MemberTypes.Field || member.MemberType == MemberTypes.Property)
                        {
                            object[] memberAttributes = member.GetCustomAttributes(typeof(ProtoMemberAttribute), false);
                            foreach (object obj in memberAttributes)
                            {
                                ProtoMemberAttribute a = obj as ProtoMemberAttribute;
                                if (null != a)
                                {
                                    string name;
                                    if (dict.TryGetValue(a.Tag, out name) && name != member.Name)
                                    {
                                        result = false;
                                        Console.WriteLine("Protobuf定义{2}的Tag值{0}有重复:{1}", a.Tag, member.Name, type.ToString());
                                        break;
                                    }
                                    dict.Add(a.Tag, member.Name);
                                }
                            }
                        }
                    }
                    if (!hasDefaultConstructor)
                    {
                        result = false;
                        Console.WriteLine("Protobuf要求{0}结构必须有默认构造函数", type.ToString());
                    }
                }
            }
            return result;
        }

        
        public static bool PrepareProtoBufMetadata(Assembly assembly)
        {
            bool result = true;
            foreach (Type type in assembly.GetTypes())
            {
                ProtoContractAttribute attribute = Attribute.GetCustomAttribute(type, typeof(ProtoContractAttribute)) as ProtoContractAttribute;
                if (attribute != null)
                {
                    try
                    {
                        result &= RuntimeTypeModel.Default.CanSerialize(type);
                    }
                    catch (Exception ex)
                    {
                        result = false;
                        LogManager.WriteLog(LogTypes.Fatal, string.Format("{0}\r\n{1}", type.ToString(), ex.ToString()), null, true);
                    }
                }
            }
            return result;
        }

        
        public static void CheckConfigPathType()
        {
            Global.ConfigPathStructType = 2;
            if (!Directory.Exists(Global.GameResPath("Config")) || !Directory.Exists(Global.ResPath("Map")) || !Directory.Exists(Global.MapConfigResPath("MapConfig")) || !Directory.Exists(Global.IsolateResPath("Config")))
            {
                Global.ConfigPathStructType = 1;
                if (!Directory.Exists(Global.GameResPath("Config")) || !Directory.Exists(Global.ResPath("Map")) || !Directory.Exists(Global.MapConfigResPath("MapConfig")) || !Directory.Exists(Global.IsolateResPath("Config")))
                {
                    Global.ConfigPathStructType = 0;
                    if (!Directory.Exists(Global.GameResPath("Config")) || !Directory.Exists(Global.ResPath("Map")) || !Directory.Exists(Global.MapConfigResPath("MapConfig")) || !Directory.Exists(Global.IsolateResPath("Config")))
                    {
                        LogManager.WriteLog(LogTypes.Fatal, "配置文件目录结构不正确", null, true);
                    }
                }
            }
        }

        
        public static string GameResPath(string uri)
        {
            string result;
            if (Global.ConfigPathStructType == 1)
            {
                result = string.Format("{0}/GameRes/{1}", Global.AbsoluteGameResPath, uri);
            }
            else if (Global.ConfigPathStructType == 2)
            {
                result = string.Format("{0}/GameRes/{1}", Global.AbsoluteGameResPath, uri);
            }
            else
            {
                result = string.Format("{0}/GameRes/GameRes/{1}", Global.AbsoluteGameResPath, uri);
            }
            return result;
        }

        
        public static string ResPath(string uri)
        {
            string result;
            if (Global.ConfigPathStructType == 1)
            {
                result = string.Format("{0}/{1}", Global.AbsoluteGameResPath, uri);
            }
            else if (Global.ConfigPathStructType == 2)
            {
                result = string.Format("{0}/{1}", Global.AbsoluteGameResPath, uri);
            }
            else
            {
                result = string.Format("{0}/GameRes/GameRes/{1}", Global.AbsoluteGameResPath, uri);
            }
            return result;
        }

        
        public static string MapConfigResPath(string uri)
        {
            string result;
            if (Global.ConfigPathStructType == 1)
            {
                result = string.Format("{0}/{1}", Global.AbsoluteGameResPath, uri);
            }
            else if (Global.ConfigPathStructType == 2)
            {
                result = string.Format("{0}/../{1}", Global.AbsoluteGameResPath, uri);
            }
            else
            {
                result = string.Format("{0}/GameRes/GameRes/{1}", Global.AbsoluteGameResPath, uri);
            }
            return result;
        }

        
        public static string IsolateResPath(string uri)
        {
            string result;
            if (Global.ConfigPathStructType == 1)
            {
                result = string.Format("{0}/ServerRes/{1}/IsolateRes/{2}", Global.AbsoluteGameResPath, 1, uri);
            }
            else if (Global.ConfigPathStructType == 2)
            {
                result = string.Format("{0}/ServerRes/{1}/IsolateRes/{2}", Global.AbsoluteGameResPath, 1, uri);
            }
            else
            {
                result = string.Format("{0}/GameRes/IsolateRes/{1}", Global.AbsoluteGameResPath, uri);
            }
            return result;
        }

        
        public static XElement GetGameResXml(string uri)
        {
            return XElement.Load(Global.GameResPath(uri));
        }

        
        public static XElement GetResXml(string uri)
        {
            return XElement.Load(Global.ResPath(uri));
        }

        
        public static XElement GetMapConfigResXml(string uri)
        {
            return XElement.Load(Global.MapConfigResPath(uri));
        }

        
        public static void AddXElement(string key, XElement element)
        {
            if (!Global.XmlInfo.ContainsKey(key))
            {
                Global.XmlInfo.Add(key, element);
            }
        }

        
        public static string GetXElementNodePath(XElement element)
        {
            string result;
            try
            {
                string path = element.Name.ToString();
                element = element.Parent;
                while (null != element)
                {
                    path = element.Name.ToString() + "/" + path;
                    element = element.Parent;
                }
                result = path;
            }
            catch (Exception)
            {
                result = "";
            }
            return result;
        }

        
        public static XElement GetXElement(XElement XML, string newroot)
        {
            return XML.DescendantsAndSelf(newroot).Single<XElement>();
        }

        
        public static XElement GetSafeXElement(XElement XML, string newroot)
        {
            XElement result;
            try
            {
                result = XML.DescendantsAndSelf(newroot).Single<XElement>();
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取: {0} 失败, xml节点名: {1}", newroot, Global.GetXElementNodePath(XML)));
            }
            return result;
        }

        
        public static XElement GetXElement(XElement XML, string newroot, string attribute, string value)
        {
            return XML.DescendantsAndSelf(newroot).Single((XElement X) => X.Attribute(attribute).Value == value);
        }

        
        public static XElement GetSafeXElement(XElement XML, string newroot, string attribute, string value)
        {
            XElement result;
            try
            {
                result = XML.DescendantsAndSelf(newroot).Single((XElement X) => X.Attribute(attribute).Value == value);
            }
            catch (Exception ex)
            {
                throw new Exception(string.Format("读取: {0}/{1}={2} 失败, xml节点名: {3} ", new object[]
                {
                    newroot,
                    attribute,
                    value,
                    Global.GetXElementNodePath(XML)
                }) + ex.Message);
            }
            return result;
        }

        
        public static XAttribute GetSafeAttribute(XElement XML, string attribute)
        {
            XAttribute result;
            try
            {
                XAttribute attrib = XML.Attribute(attribute);
                if (null == attrib)
                {
                    throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, Global.GetXElementNodePath(XML)));
                }
                result = attrib;
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, Global.GetXElementNodePath(XML)));
            }
            return result;
        }

        
        public static string GetSafeAttributeStr(XElement XML, string attribute)
        {
            XAttribute attrib = Global.GetSafeAttribute(XML, attribute);
            return (string)attrib;
        }

        
        public static string GetDefAttributeStr(XElement XML, string attribute, string strdef)
        {
            XAttribute attrib = XML.Attribute(attribute);
            string result;
            if (null == attrib)
            {
                result = strdef;
            }
            else
            {
                result = (string)attrib;
            }
            return result;
        }

        
        public static long GetSafeAttributeLong(XElement XML, string attribute)
        {
            XAttribute attrib = Global.GetSafeAttribute(XML, attribute);
            string str = (string)attrib;
            long result;
            if (str == null || str == "")
            {
                result = -1L;
            }
            else
            {
                try
                {
                    result = (long)Convert.ToDouble(str);
                }
                catch (Exception)
                {
                    throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, Global.GetXElementNodePath(XML)));
                }
            }
            return result;
        }

        
        public static int[] GetSafeAttributeIntArray(XElement XML, string attribute, int length = -1, char separator = ',')
        {
            XAttribute attrib = Global.GetSafeAttribute(XML, attribute);
            string str = (string)attrib;
            int[] result;
            if (str == null || str == "")
            {
                result = null;
            }
            else
            {
                try
                {
                    string[] args = str.Split(new char[]
                    {
                        separator
                    });
                    if (length > args.Length && length != args.Length)
                    {
                        result = null;
                    }
                    else
                    {
                        result = Global.StringArray2IntArray(args);
                    }
                }
                catch (Exception)
                {
                    throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, Global.GetXElementNodePath(XML)));
                }
            }
            return result;
        }

        
        public static long[] GetSafeAttributeLongArray(XElement XML, string attribute, int length = -1)
        {
            XAttribute attrib = Global.GetSafeAttribute(XML, attribute);
            string str = (string)attrib;
            long[] result2;
            if (str == null || str == "")
            {
                result2 = null;
            }
            else
            {
                try
                {
                    string[] args = str.Split(new char[]
                    {
                        ','
                    });
                    if (length > args.Length && length != args.Length)
                    {
                        result2 = null;
                    }
                    else
                    {
                        long[] result = new long[args.Length];
                        for (int i = 0; i < args.Length; i++)
                        {
                            result[i] = Global.SafeConvertToInt64(args[i]);
                        }
                        result2 = result;
                    }
                }
                catch (Exception)
                {
                    throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, Global.GetXElementNodePath(XML)));
                }
            }
            return result2;
        }

        
        public static double[] GetSafeAttributeDoubleArray(XElement XML, string attribute, int length = -1, char separator = ',')
        {
            XAttribute attrib = Global.GetSafeAttribute(XML, attribute);
            string str = (string)attrib;
            double[] result2;
            if (str == null || str == "")
            {
                result2 = null;
            }
            else
            {
                try
                {
                    string[] args = str.Split(new char[]
                    {
                        separator
                    });
                    if (length > args.Length && length != args.Length)
                    {
                        result2 = null;
                    }
                    else
                    {
                        double[] result = new double[args.Length];
                        for (int i = 0; i < args.Length; i++)
                        {
                            result[i] = Global.SafeConvertToDouble(args[i]);
                        }
                        result2 = result;
                    }
                }
                catch (Exception)
                {
                    throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, Global.GetXElementNodePath(XML)));
                }
            }
            return result2;
        }

        
        public static double GetSafeAttributeDouble(XElement XML, string attribute)
        {
            XAttribute attrib = Global.GetSafeAttribute(XML, attribute);
            string str = (string)attrib;
            double result;
            if (str == null || str == "")
            {
                result = 0.0;
            }
            else
            {
                try
                {
                    result = Convert.ToDouble(str);
                }
                catch (Exception)
                {
                    throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, Global.GetXElementNodePath(XML)));
                }
            }
            return result;
        }

        
        public static XAttribute GetSafeAttribute(XElement XML, string root, string attribute)
        {
            XAttribute result;
            try
            {
                XAttribute attrib = XML.Element(root).Attribute(attribute);
                if (null == attrib)
                {
                    throw new Exception(string.Format("读取属性: {0}/{1} 失败, xml节点名: {2}", root, attribute, Global.GetXElementNodePath(XML)));
                }
                result = attrib;
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0}/{1} 失败, xml节点名: {2}", root, attribute, Global.GetXElementNodePath(XML)));
            }
            return result;
        }

        
        public static string GetSafeAttributeStr(XElement XML, string root, string attribute)
        {
            XAttribute attrib = Global.GetSafeAttribute(XML, root, attribute);
            return (string)attrib;
        }

        
        public static long GetSafeAttributeLong(XElement XML, string root, string attribute)
        {
            XAttribute attrib = Global.GetSafeAttribute(XML, root, attribute);
            string str = (string)attrib;
            long result;
            if (str == null || str == "")
            {
                result = -1L;
            }
            else
            {
                try
                {
                    result = (long)Convert.ToDouble(str);
                }
                catch (Exception)
                {
                    throw new Exception(string.Format("读取属性: {0}/{1} 失败, xml节点名: {2}", root, attribute, Global.GetXElementNodePath(XML)));
                }
            }
            return result;
        }

        
        public static double GetSafeAttributeDouble(XElement XML, string root, string attribute)
        {
            XAttribute attrib = Global.GetSafeAttribute(XML, root, attribute);
            string str = (string)attrib;
            double result;
            if (str == null || str == "")
            {
                result = -1.0;
            }
            else
            {
                try
                {
                    result = Convert.ToDouble(str);
                }
                catch (Exception)
                {
                    throw new Exception(string.Format("读取属性: {0}/{1} 失败, xml节点名: {2}", root, attribute, Global.GetXElementNodePath(XML)));
                }
            }
            return result;
        }

        
        public static double GetDirectionByTan(double targetX, double targetY, double currentX, double currentY)
        {
            return Global.GetDirectionByAspect((int)targetX, (int)targetY, (int)currentX, (int)currentY);
        }

        
        public static double GetDirectionByAspect(int targetX, int targetY, int currentX, int currentY)
        {
            int direction = 0;
            if (targetX < currentX)
            {
                if (targetY < currentY)
                {
                    direction = 5;
                }
                else if (targetY == currentY)
                {
                    direction = 6;
                }
                else if (targetY > currentY)
                {
                    direction = 7;
                }
            }
            else if (targetX == currentX)
            {
                if (targetY < currentY)
                {
                    direction = 4;
                }
                else if (targetY > currentY)
                {
                    direction = 0;
                }
            }
            else if (targetX > currentX)
            {
                if (targetY < currentY)
                {
                    direction = 3;
                }
                else if (targetY == currentY)
                {
                    direction = 2;
                }
                else if (targetY > currentY)
                {
                    direction = 1;
                }
            }
            return (double)direction;
        }

        
        public static double GetAngle(double y, double x)
        {
            return Math.Atan2(y, x) / 3.1415926535897931 * 180.0;
        }

        
        public static void GetAngleRangeAngle(double centerAngle, double angleLimit, out double loAngle, out double hiAngle)
        {
            loAngle = 0.0;
            hiAngle = 0.0;
            if (angleLimit <= 0.0 || angleLimit >= 360.0)
            {
                loAngle = 0.0;
                hiAngle = 360.0;
            }
            else
            {
                hiAngle = centerAngle + angleLimit / 2.0;
                if (hiAngle >= 360.0)
                {
                    hiAngle -= 360.0;
                }
                loAngle = centerAngle - angleLimit / 2.0;
                if (loAngle < 0.0)
                {
                    loAngle = 360.0 + loAngle;
                }
            }
        }

        
        public static void GetAngleRangeByDirection(int direction, double angleLimit, out double loAngle, out double hiAngle)
        {
            loAngle = 0.0;
            hiAngle = 0.0;
            if (angleLimit <= 0.0 || angleLimit >= 360.0)
            {
                loAngle = 0.0;
                hiAngle = 360.0;
            }
            else
            {
                double centerAngle = 45.0 * (double)direction;
                hiAngle = centerAngle + angleLimit / 2.0;
                if (hiAngle >= 360.0)
                {
                    hiAngle -= 360.0;
                }
                loAngle = centerAngle - angleLimit / 2.0;
                if (loAngle < 0.0)
                {
                    loAngle = 360.0 + loAngle;
                }
            }
        }

        
        public static double GetCircleAngle(Point p0, Point p1)
        {
            double result;
            if (p0 == p1)
            {
                result = 0.0;
            }
            else
            {
                double rotateDegree = Math.Atan2(Math.Abs(p1.Y - p0.Y), Math.Abs(p1.X - p0.X)) * 180.0 / 3.1415926535897931;
                if (p1.X >= p0.X && p0.Y < p1.Y)
                {
                    rotateDegree = 90.0 - rotateDegree;
                }
                else if (p1.X >= p0.X && p0.Y >= p1.Y)
                {
                    rotateDegree = 90.0 + rotateDegree;
                }
                else if (p1.X < p0.X && p0.Y >= p1.Y)
                {
                    rotateDegree = 270.0 - rotateDegree;
                }
                else if (p1.X < p0.X && p0.Y < p1.Y)
                {
                    rotateDegree = 270.0 + rotateDegree;
                }
                result = rotateDegree;
            }
            return result;
        }

        
        public static bool InAngleRange(double angle, double loAngle, double hiAngle)
        {
            bool result;
            if (hiAngle > loAngle)
            {
                result = (angle >= loAngle && angle <= hiAngle);
            }
            else
            {
                result = ((angle >= loAngle && angle < 360.0) || (angle >= 0.0 && angle <= hiAngle));
            }
            return result;
        }

        
        public static bool InCircleByAngle(Point target, Point center, double radius, double loAngle, double hiAngle)
        {
            bool result;
            if (target.X == center.X && target.Y == center.Y)
            {
                result = true;
            }
            else
            {
                double angle = Global.GetCircleAngle(center, target);
                result = (Global.InAngleRange(angle, loAngle, hiAngle) && Math.Pow(target.X - center.X, 2.0) + Math.Pow(target.Y - center.Y, 2.0) <= Math.Pow(radius, 2.0));
            }
            return result;
        }

        
        public static bool InCircle(Point target, Point center, double radius)
        {
            double lenght = Math.Pow(target.X - center.X, 2.0) + Math.Pow(target.Y - center.Y, 2.0);
            double lenght2 = Math.Pow(radius, 2.0);
            return lenght <= lenght2;
        }

        
        public static bool InCircleByGridNum(int mapCode, Point target, Point center, double radiusGridNum)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            int gridX = (int)(center.X / (double)gameMap.MapGridWidth);
            int gridY = (int)(center.Y / (double)gameMap.MapGridHeight);
            int gridX2 = (int)(target.X / (double)gameMap.MapGridWidth);
            int gridY2 = (int)(target.Y / (double)gameMap.MapGridHeight);
            if (gridX2 >= gridX && (double)gridX2 <= (double)gridX + radiusGridNum)
            {
                if (gridY2 >= gridY && (double)gridY2 <= (double)gridY + radiusGridNum)
                {
                    return true;
                }
            }
            return false;
        }

        
        public static bool InPolygon(Point target, Point[] range)
        {
            int i = 0;
            int count = 0;
            for (int j = 0; j < range.Length; j++)
            {
                i = ((j == range.Length - 1) ? 0 : (i + 1));
                if (range[j].Y != range[i].Y && ((target.Y >= range[j].Y && target.Y < range[i].Y) || (target.Y >= range[i].Y && target.Y < range[j].Y)) && target.X < (range[i].X - range[j].X) * (target.Y - range[j].Y) / (range[i].Y - range[j].Y) + range[j].X)
                {
                    count++;
                }
            }
            return count % 2 > 0;
        }

        
        public static Point GetExtensionPoint(Point start, Point end, int Lenght)
        {
            double scale = Math.Sqrt(Math.Pow(end.Y - start.Y, 2.0) + Math.Pow(end.X - start.X, 2.0)) / (double)Lenght;
            return new Point(start.X + (end.X - start.X) / scale, start.Y + (end.Y - start.Y) / scale);
        }

        
        public static double GetTwoPointDistance(Point start, Point end)
        {
            return Math.Sqrt(Math.Pow(end.X - start.X, 2.0) + Math.Pow(end.Y - start.Y, 2.0));
        }

        
        public static double GetTwoPointDistanceSquare(Point start, Point end)
        {
            return Math.Pow(end.X - start.X, 2.0) + Math.Pow(end.Y - start.Y, 2.0);
        }

        
        public static Point[] GetRectRange(double angle, Point start, Point end, int radius)
        {
            Point[] result;
            if ((angle >= 45.0 && angle <= 135.0) || (angle >= -135.0 && angle <= -45.0))
            {
                result = new Point[]
                {
                    new Point(start.X - (double)radius, start.Y),
                    new Point(start.X + (double)radius, start.Y),
                    new Point(end.X + (double)radius, end.Y),
                    new Point(end.X - (double)radius, end.Y)
                };
            }
            else
            {
                result = new Point[]
                {
                    new Point(start.X, start.Y - (double)radius),
                    new Point(start.X, start.Y + (double)radius),
                    new Point(end.X, end.Y + (double)radius),
                    new Point(end.X, end.Y - (double)radius)
                };
            }
            return result;
        }

        
        public static double GetAnimationTimeConsuming(Point start, Point end, int zoomX, int zoomY, double unitCost)
        {
            return Math.Sqrt(Math.Pow((end.X - start.X) / (double)zoomX, 2.0) + Math.Pow((end.Y - start.Y) / (double)zoomY, 2.0)) * unitCost;
        }

        
        public static bool Bresenham(List<ANode> s, int x1, int y1, int x2, int y2, NodeGrid nodeGrid)
        {
            bool flag = Math.Abs(y2 - y1) > Math.Abs(x2 - x1);
            if (flag)
            {
                int t = x1;
                x1 = y1;
                y1 = t;
                t = x2;
                x2 = y2;
                y2 = t;
            }
            bool reverse = false;
            if (x1 > x2)
            {
                int t = x1;
                x1 = x2;
                x2 = t;
                t = y1;
                y1 = y2;
                y2 = t;
                reverse = true;
            }
            int dx = x2 - x1;
            int dy = Math.Abs(y2 - y1);
            int error = dx / 2;
            int x3 = x1;
            int y3 = y1;
            while (x3 <= x2)
            {
                if (flag)
                {
                    if (null != s)
                    {
                        s.Add(new ANode(y3, x3));
                    }
                }
                else if (null != s)
                {
                    s.Add(new ANode(x3, y3));
                }
                error -= dy;
                if (error < 0)
                {
                    if (y1 < y2)
                    {
                        y3++;
                    }
                    else
                    {
                        y3--;
                    }
                    error += dx;
                }
                x3++;
            }
            if (reverse)
            {
                s.Reverse();
            }
            List<ANode> s2 = Global.GetLinearPath(s, nodeGrid);
            bool res = s2.Count == s.Count;
            s.Clear();
            for (int i = 0; i < s2.Count; i++)
            {
                s.Add(s2[i]);
            }
            return res;
        }

        
        private static List<ANode> GetLinearPath(List<ANode> s, NodeGrid nodeGrid)
        {
            List<ANode> s2 = new List<ANode>();
            for (int i = 0; i < s.Count; i++)
            {
                if (!nodeGrid.isWalkable(s[i].x, s[i].y))
                {
                    break;
                }
                s2.Add(s[i]);
            }
            return s2;
        }

        
        public static Point GetExtensionPointByObs(GameClient client, Point start, Point end, int Lenght)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];
            Point result;
            if (start.X >= (double)gameMap.MapWidth || start.X < 0.0 || start.Y >= (double)gameMap.MapHeight || start.Y < 0.0)
            {
                result = new Point(-1.0, -1.0);
            }
            else
            {
                Point targetPos = Global.GetExtensionPoint(start, end, Lenght);
                List<ANode> s = new List<ANode>();
                Global.Bresenham(s, (int)(end.X / (double)gameMap.MapGridWidth), (int)(end.Y / (double)gameMap.MapGridHeight), (int)(targetPos.X / (double)gameMap.MapGridWidth), (int)(targetPos.Y / (double)gameMap.MapGridHeight), gameMap.MyNodeGrid);
                if (s.Count <= 0)
                {
                    result = new Point(-1.0, -1.0);
                }
                else
                {
                    targetPos = new Point((double)(s[s.Count - 1].x * gameMap.MapGridWidth), (double)(s[s.Count - 1].y * gameMap.MapGridHeight));
                    result = targetPos;
                }
            }
            return result;
        }

        
        public static Point GetAPointIn4Direction(Point p, int offset, NodeGrid nodeGrd, int mapWidth, int mapHeight, int gridWidth, int gridHeight)
        {
            int x = (int)p.X;
            int y = (int)p.Y;
            x = Global.GMax(0, x);
            y = Global.GMax(0, y);
            x = Global.GMin(mapWidth, x);
            y = Global.GMin(mapHeight, y);
            Point result;
            if (nodeGrd.isWalkable(x / gridWidth, y / gridHeight))
            {
                result = new Point((double)x, (double)y);
            }
            else
            {
                x = (int)p.X - offset;
                y = (int)p.Y;
                x = Global.GMax(0, x);
                y = Global.GMax(0, y);
                x = Global.GMin(mapWidth, x);
                y = Global.GMin(mapHeight, y);
                if (nodeGrd.isWalkable(x / gridWidth, y / gridHeight))
                {
                    result = new Point((double)x, (double)y);
                }
                else
                {
                    x = (int)p.X + offset;
                    y = (int)p.Y;
                    x = Global.GMax(0, x);
                    y = Global.GMax(0, y);
                    x = Global.GMin(mapWidth, x);
                    y = Global.GMin(mapHeight, y);
                    if (nodeGrd.isWalkable(x / gridWidth, y / gridHeight))
                    {
                        result = new Point((double)x, (double)y);
                    }
                    else
                    {
                        x = (int)p.X;
                        y = (int)p.Y - offset;
                        x = Global.GMax(0, x);
                        y = Global.GMax(0, y);
                        x = Global.GMin(mapWidth, x);
                        y = Global.GMin(mapHeight, y);
                        if (nodeGrd.isWalkable(x / gridWidth, y / gridHeight))
                        {
                            result = new Point((double)x, (double)y);
                        }
                        else
                        {
                            x = (int)p.X;
                            y = (int)p.Y + offset;
                            x = Global.GMax(0, x);
                            y = Global.GMax(0, y);
                            x = Global.GMin(mapWidth, x);
                            y = Global.GMin(mapHeight, y);
                            if (nodeGrd.isWalkable(x / gridWidth, y / gridHeight))
                            {
                                result = new Point((double)x, (double)y);
                            }
                            else
                            {
                                result = p;
                            }
                        }
                    }
                }
            }
            return result;
        }

        
        public static bool InSquare(Point center, Point target, int radius, int Width, int DirectionX, int DirectionY)
        {
            double tarDirX = target.X - center.X;
            double tarDirY = target.Y - center.Y;
            int disLength = (int)Global.GetTwoPointDistance(center, target);
            int DirectionLength = (int)Math.Sqrt((double)(DirectionX * DirectionX + DirectionY * DirectionY));
            bool result;
            if (DirectionLength <= 0)
            {
                result = false;
            }
            else
            {
                int nDisObjLength = (int)(tarDirX * (double)DirectionX + tarDirY * (double)DirectionY) / DirectionLength;
                int nValue = (int)((double)(disLength * disLength) - (double)(nDisObjLength * nDisObjLength));
                if (nValue < 0)
                {
                    nValue = 0;
                }
                int nDisObjWidth = (int)Math.Sqrt((double)nValue) - 30;
                result = (-radius / 2 <= nDisObjLength && nDisObjLength <= radius / 2 && -Width / 2 <= nDisObjWidth && nDisObjWidth <= Width / 2);
            }
            return result;
        }

        
        public static Point GetAPointInCircle(Point center, int r, int ao)
        {
            if (ao > 180)
            {
                ao -= 360;
            }
            double x0 = center.X;
            double y0 = center.Y;
            double x = x0 + (double)r * Math.Sin((double)ao * 3.1415926535897931 / 180.0);
            double y = y0 + (double)r * Math.Cos((double)ao * 3.1415926535897931 / 180.0);
            return new Point(x, y);
        }

        
        public static int FindEquipCode(List<GoodsData> goodsList, int category)
        {
            int result;
            if (goodsList == null)
            {
                result = -1;
            }
            else
            {
                lock (goodsList)
                {
                    for (int i = 0; i < goodsList.Count; i++)
                    {
                        if (goodsList[i].Using > 0)
                        {
                            SystemXmlItem systemGoods = null;
                            if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsList[i].GoodsID, out systemGoods))
                            {
                                if ((category >= 0 && category <= 4) || (category >= 7 && category <= 21))
                                {
                                    return systemGoods.GetIntValue("EquipCode", -1);
                                }
                            }
                        }
                    }
                }
                result = -1;
            }
            return result;
        }

        
        public static SafeClientData GetSafeClientDataFromLocalOrDB(int otherRoleID)
        {
            SafeClientData clientData = null;
            GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
            if (null == otherClient)
            {
                byte[] bytesData = null;
                if (TCPProcessCmdResults.RESULT_FAILED != Global.RequestToDBServer3(TCPClientPool.getInstance(), TCPOutPacketPool.getInstance(), 275, string.Format("{0}:{1}", -1, otherRoleID), out bytesData, 0))
                {
                    int length = BitConverter.ToInt32(bytesData, 0);
                    RoleDataEx roleDataEx = DataHelper.BytesToObject<RoleDataEx>(bytesData, 6, length - 2);
                    if (roleDataEx.RoleID < 0)
                    {
                        return null;
                    }
                    clientData = new SafeClientData();
                    clientData.RoleData = roleDataEx;
                }
            }
            else
            {
                clientData = otherClient.ClientData;
            }
            return clientData;
        }

        
        public static RoleData ClientToRoleData1(GameClient client)
        {
            RoleData roleData = Global.ClientDataToRoleData1(client.ClientData);
            roleData.GMAuth = Global.GetAuth(client);
            roleData.FluorescentGemData.GemBagDict = GameManager.FluorescentGemMgr.GetBagDict(client);
            roleData.FluorescentGemData.GemEquipDict = GameManager.FluorescentGemMgr.GetEquipDict(client);
            roleData.SettingBitFlags = Global.GetRoleParamsInt64FromDB(client, "SettingBitFlags");
            roleData.OpenData = (Data.OpenData.Clone() as SystemOpenData);
            return roleData;
        }

        
        public static RoleData ClientDataToRoleData1(SafeClientData clientData)
        {
            RoleData roleData = new RoleData
            {
                RoleID = clientData.RoleID,
                RoleName = clientData.RoleName,
                RoleSex = clientData.RoleSex,
                Occupation = clientData.Occupation,
                SubOccupation = clientData.SubOccupation,
                OccupationList = clientData.OccupationList,
                Level = clientData.Level,
                Faction = clientData.Faction,
                Money1 = clientData.Money1,
                Money2 = clientData.Money2,
                Experience = clientData.Experience,
                PKMode = clientData.PKMode,
                PKValue = clientData.PKValue,
                MapCode = clientData.MapCode,
                RoleDirection = clientData.RoleDirection,
                PosX = clientData.PosX,
                PosY = clientData.PosY,
                MaxLifeV = clientData.LifeV,
                LifeV = clientData.CurrentLifeV,
                MaxMagicV = clientData.MagicV,
                MagicV = clientData.CurrentMagicV,
                TaskDataList = clientData.TaskDataList,
                RolePic = clientData.RolePic,
                BagNum = clientData.BagNum,
                GoodsDataList = clientData.GoodsDataList,
                BodyCode = Global.FindEquipCode(clientData.GoodsDataList, 1),
                WeaponCode = Global.FindEquipCode(clientData.GoodsDataList, 0),
                OtherName = clientData.OtherName,
                MainQuickBarKeys = clientData.MainQuickBarKeys,
                OtherQuickBarKeys = clientData.OtherQuickBarKeys,
                LoginNum = clientData.LoginNum,
                UserMoney = clientData.UserMoney,
                StallName = clientData.MarketName,
                TeamID = clientData.TeamID,
                LeftFightSeconds = clientData.LeftFightSeconds,
                TotalHorseCount = ((clientData.HorsesDataList == null) ? 0 : clientData.HorsesDataList.Count),
                HorseDbID = -1,
                TotalPetCount = ((clientData.PetsDataList == null) ? 0 : clientData.PetsDataList.Count),
                PetDbID = clientData.PetDbID,
                InterPower = clientData.InterPower,
                TeamLeaderRoleID = Global.GetGameClientTeamLeaderID(clientData),
                YinLiang = clientData.YinLiang,
                SkillDataList = clientData.SkillDataList,
                JingMaiBodyLevel = clientData.JingMaiBodyLevel,
                JingMaiXueWeiNum = clientData.RoleXueWeiNum,
                LastHorseID = clientData.LastHorseID,
                DefaultSkillID = clientData.DefaultSkillID,
                AutoLifeV = clientData.AutoLifeV,
                AutoMagicV = clientData.AutoMagicV,
                BufferDataList = clientData.BufferDataList,
                MyDailyTaskDataList = clientData.MyDailyTaskDataList,
                JingMaiOkNum = Global.CalcJingMaiOkNum(clientData),
                MyDailyJingMaiData = clientData.MyDailyJingMaiData,
                NumSkillID = clientData.NumSkillID,
                MyPortableBagData = clientData.MyPortableBagData,
                NewStep = clientData.MyHuodongData.NewStep,
                StepTime = clientData.MyHuodongData.StepTime,
                BigAwardID = GameManager.GameConfigMgr.GetGameConfigItemInt("big_award_id", 0),
                SongLiID = GameManager.GameConfigMgr.GetGameConfigItemInt("songli_id", 0),
                FuBenDataList = clientData.FuBenDataList,
                TotalLearnedSkillLevelCount = clientData.TotalLearnedSkillLevelCount,
                CompletedMainTaskID = clientData.MainTaskID,
                PKPoint = clientData.PKPoint,
                LianZhan = clientData.LianZhan,
                StartPurpleNameTicks = clientData.StartPurpleNameTicks,
                MyYaBiaoData = clientData.MyYaBiaoData,
                BattleNameStart = clientData.BattleNameStart,
                BattleNameIndex = clientData.BattleNameIndex,
                CZTaskID = clientData.CZTaskID,
                HeroIndex = clientData.HeroIndex,
                AllQualityIndex = clientData.AllQualityIndex,
                AllForgeLevelIndex = clientData.AllForgeLevelIndex,
                AllJewelLevelIndex = clientData.AllJewelLevelIndex,
                AllZhuoYueNum = clientData.AllZhuoYueNum,
                HalfYinLiangPeriod = GameManager.GameConfigMgr.GetGameConfigItemInt("half_yinliang_period", 0),
                ZoneID = clientData.ZoneID,
                BHName = clientData.BHName,
                BHVerify = clientData.BHVerify,
                BHZhiWu = clientData.BHZhiWu,
                BangGong = clientData.BangGong,
                BangHuiLingDiItemsDict = JunQiManager.GetBangHuiLingDiItemsDict(),
                HuangDiRoleID = HuangChengManager.GetHuangDiRoleID(),
                HuangHou = clientData.HuangHou,
                PaiHangPosDict = clientData.PaiHangPosDict,
                AutoFightingProtect = clientData.AutoFightingProctect,
                FSHuDunStart = clientData.FSHuDunStart,
                BattleWhichSide = clientData.BattleWhichSide,
                LastMailID = clientData.LastMailID,
                OnceAwardFlag = clientData.OnceAwardFlag,
                Gold = clientData.Gold,
                GoodsLimitDataList = clientData.GoodsLimitDataList,
                DSHideStart = clientData.DSHideStart,
                FSHuDunSeconds = clientData.FSHuDunSeconds,
                ZhongDuStart = clientData.ZhongDuStart,
                ZhongDuSeconds = clientData.ZhongDuSeconds,
                KaiFuStartDay = Global.GetKaiFuTime().ToString("yyyy-MM-dd HH:mm:ss"),
                RegTime = Global.GetRegTime(clientData).ToString("yyyy-MM-dd HH:mm:ss"),
                JieriStartDay = Global.GetJieriStartDay().ToString("yyyy-MM-dd HH:mm:ss"),
                JieriDaysNum = Global.GetJieriDaysNum(),
                HefuStartDay = Global.GetHefuStartDay().ToString("yyyy-MM-dd HH:mm:ss"),
                JieriChengHao = clientData.JieriChengHao,
                BuChangStartDay = Global.GetBuChangStartDay().ToString("yyyy-MM-dd HH:mm:ss"),
                DongJieStart = clientData.DongJieStart,
                DongJieSeconds = clientData.DongJieSeconds,
                YueduDazhunpanStartDay = Global.GetYueDuChouJiangStartDay().ToString("yyyy-MM-dd HH:mm:ss"),
                YueduDazhunpanStartDayNum = Global.GetYueDuChouJiangDaysNum(),
                ChangeLifeCount = clientData.ChangeLifeCount,
                TotalPropPoint = clientData.TotalPropPoint,
                IsFlashPlayer = clientData.IsFlashPlayer,
                AdmiredCount = clientData.AdmiredCount,
                CombatForce = clientData.CombatForce,
                AdorationCount = clientData.AdorationCount,
                DayOnlineSecond = clientData.DayOnlineSecond,
                SeriesLoginNum = Global.GMin(clientData.SeriesLoginNum, 7),
                AutoAssignPropertyPoint = clientData.AutoAssignPropertyPoint,
                OnLineTotalTime = clientData.TotalOnlineSecs,
                VIPLevel = clientData.VipLevel,
                OpenGridTime = clientData.OpenGridTime,
                OpenPortableGridTime = clientData.OpenPortableGridTime,
                MyWingData = clientData.MyWingData,
                PictureJudgeReferInfo = clientData.PictureJudgeReferInfo,
                StarSoulValue = clientData.StarSoul,
                StoreYinLiang = clientData.StoreYinLiang,
                StoreMoney = clientData.StoreMoney,
                UserReturnTimeBegin = UserReturnManager.getInstance()._returnActivityInfo.TimeBeginStr,
                UserReturnTimeEnd = UserReturnManager.getInstance()._returnActivityInfo.TimeEndStr,
                MyTalentData = clientData.MyTalentData,
                TianTiRongYao = clientData.TianTiData.RongYao,
                FluorescentGemData = new FluorescentGemData(),
                SoulStoneData = new SoulStoneData
                {
                    StonesInBag = clientData.SoulStoneInBag,
                    StonesInUsing = clientData.SoulStoneInUsing
                },
                SpouseId = ((clientData.MyMarriageData != null) ? clientData.MyMarriageData.nSpouseID : -1),
                ActivityList = SingletonTemplate<ActivityManager>.Instance().GetActivityList(),
                JunTuanId = clientData.JunTuanId,
                JunTuanName = clientData.JunTuanName,
                JunTuanZhiWu = clientData.JunTuanZhiWu,
                LingDi = clientData.LingDi,
                ShenJiDict = clientData.ShenJiDataDict,
                HuiJiData = clientData.HuiJiData,
                FuWenTabList = clientData.FuWenTabList,
                HideGM = clientData.GuanZhanGM,
                JueXingData = clientData.JueXingData,
                MoneyData = clientData.MoneyData,
                CompType = clientData.CompType,
                CompZhiWu = clientData.CompZhiWu,
                MountStoreList = clientData.MountStoreList,
                MountEquipList = clientData.MountEquipList,
                ThemeState = HuodongCachingMgr.GetThemeActivityState(),
                ArmorData = clientData.ArmorData,
                CurrentArmorV = clientData.CurrentArmorV,
                MaxArmorV = clientData.ArmorV,
                JingLingYuanSuJueXingData = clientData.JingLingYuanSuJueXingData,
                BianShenData = clientData.BianShenData,
                RebornBagNum = clientData.RebornBagNum,
                RebornGirdData = clientData.RebornGirdData,
                RebornGoodsDataList = clientData.RebornGoodsDataList,
                RebornGoodsStoreList = clientData.RebornGoodsStoreList,
                RebornCombatForce = clientData.RebornCombatForce,
                RebornCount = clientData.RebornCount,
                RebornLevel = clientData.RebornLevel,
                RebornExperience = clientData.RebornExperience,
                RebornShowEquip = clientData.RebornShowEquip,
                RebornYinJi = clientData.RebornYinJi,
                RebornShowModel = clientData.RebornShowModel,
                ZhanDuiID = clientData.ZhanDuiID,
                ZhanDuiZhiWu = clientData.ZhanDuiZhiWu,
                UserPTID = clientData.UserPTID,
                WorldRoleID = clientData.WorldRoleID,
                Channel = clientData.Channel,
                HolyGoodsDataList = clientData.HolyGoodsDataList,
                RebornEquipHoleData = clientData.RebornEquipHoleInfo,
                MazingerStoreDataInfo = clientData.MazingerStoreDataInfo
            };
            roleData.IsVIP = Global.GetVipType(clientData.BufferDataList);
            roleData.BodyCode = Global.GMax(roleData.RoleSex, roleData.BodyCode);
            roleData.WeaponCode = Global.GMax(0, roleData.WeaponCode);
            roleData.RoleCommonUseIntPamams = Global.GetRoleCommonUseIntPamamValueList(clientData.RoleID);
            return roleData;
        }

        
        public static bool IsGM(string userName, TMSKSocket socket)
        {
            return socket.session.IsGM = (Global.GetAuth(userName, socket) > 1);
        }

        
        public static int GetAuth(GameClient client)
        {
            return client.ClientSocket.session.gmPriority;
        }

        
        public static int GetAuth(string userName, TMSKSocket socket)
        {
            int priority;
            if (!GameManager.systemGMCommands.IsSuperGMUser(userName))
            {
                if (!GameManager.systemGMCommands.IsGMUser(userName))
                {
                    priority = GameManager.systemGMCommands.IsPriorityUser(userName);
                    if (priority < 0)
                    {
                        return priority;
                    }
                }
                else
                {
                    priority = 1;
                }
                if (!GameManager.systemGMCommands.IsValidIP(socket))
                {
                    return -1;
                }
            }
            else
            {
                priority = 1000;
            }
            socket.session.gmPriority = priority;
            return priority;
        }

        
        public static List<int> GetRoleCommonUseIntPamamValueList(int roleId)
        {
            GameClient client = GameManager.ClientMgr.FindClient(roleId);
            List<int> result;
            if (null == client)
            {
                result = null;
            }
            else
            {
                List<int> listInts = Global.GetRoleCommonUseIntPamamValueList(client);
                result = listInts;
            }
            return result;
        }

        
        public static List<int> GetRoleCommonUseIntPamamValueList(GameClient client)
        {
            int tickCount = Environment.TickCount;
            List<int> result;
            if (Math.Abs(tickCount - client.ClientData.LastRoleCommonUseIntParamValueListTickCount) < 500)
            {
                result = client.ClientData.RoleCommonUseIntPamams;
            }
            else
            {
                client.ClientData.LastRoleCommonUseIntParamValueListTickCount = tickCount;
                List<int> lsValues = new List<int>();
                lsValues.Add(GameManager.ClientMgr.GetChengJiuPointsValue(client));
                lsValues.Add(GameManager.ClientMgr.GetZhuangBeiJiFenValue(client));
                lsValues.Add(GameManager.ClientMgr.GetLieShaValue(client));
                lsValues.Add(GameManager.ClientMgr.GetWuXingValue(client));
                lsValues.Add(GameManager.ClientMgr.GetZhenQiValue(client));
                lsValues.Add(GameManager.ClientMgr.GetTianDiJingYuanValue(client));
                lsValues.Add(GameManager.ClientMgr.GetShiLianLingValue(client));
                lsValues.Add(GameManager.ClientMgr.GetJingMaiLevelValue(client));
                lsValues.Add(GameManager.ClientMgr.GetWuXueLevelValue(client));
                lsValues.Add(GameManager.ClientMgr.GetZuanHuangLevelValue(client));
                lsValues.Add(GameManager.ClientMgr.GetSystemOpenValue(client));
                lsValues.Add(GameManager.ClientMgr.GetJunGongValue(client));
                lsValues.Add(GameManager.ClientMgr.GetKaiFuOnlineDayID(client));
                lsValues.Add(GameManager.ClientMgr.GetTo60or100ID(client));
                lsValues.Add(GameManager.ClientMgr.GetZhanHunValue(client));
                lsValues.Add(GameManager.ClientMgr.GetRongYuValue(client));
                lsValues.Add(GameManager.ClientMgr.GetZhanHunLevelValue(client));
                lsValues.Add(GameManager.ClientMgr.GetRongYuLevelValue(client));
                lsValues.Add(GameManager.ClientMgr.GetShengWangValue(client));
                lsValues.Add(GameManager.ClientMgr.GetShengWangLevelValue(client));
                lsValues.Add(GameManager.ClientMgr.GetWanMoTaPassLayerValue(client));
                lsValues.Add(client.ClientData.StarSoul);
                lsValues.Add(client.ClientData.ChengJiuLevel);
                int nElementPowder = Global.GetRoleParamsInt32FromDB(client, "ElementPowder");
                lsValues.Add(nElementPowder);
                int nPetJiFen = Convert.ToInt32(Global.GetRoleParamByName(client, "PetJiFen"));
                lsValues.Add(nPetJiFen);
                lsValues.Add(GameManager.ClientMgr.GetMUMoHeValue(client));
                lsValues.Add(FashionManager.getInstance().GetFashionWingsID(client));
                lsValues.Add(GameManager.ClientMgr.GetZaiZaoValue(client));
                lsValues.Add(client.ClientData.YKDetail.RemainDayOfYueKa());
                int totalGuardPoint = 0;
                if (client.ClientData.MyGuardStatueDetail != null && client.ClientData.MyGuardStatueDetail.GuardStatue != null)
                {
                    totalGuardPoint = client.ClientData.MyGuardStatueDetail.GuardStatue.HasGuardPoint;
                }
                lsValues.Add(totalGuardPoint);
                lsValues.Add(FashionManager.getInstance().GetFashionTitleID(client));
                lsValues.Add(client.ClientData.FluorescentPoint);
                lsValues.Add(GameManager.ClientMgr.GetTreasureJiFen(client));
                lsValues.Add(GameManager.ClientMgr.GetTreasureXueZuan(client));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "LangHunFenMo"));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "ZhengBaPoint"));
                lsValues.Add(VideoLogic.getInstance().GetOrSendPlayerVideoStatus(client, new List<int>()));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "10150"));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "10153"));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "10157"));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "10163"));
                lsValues.Add(GameManager.ClientMgr.GetScoreBoxState(client));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "10168"));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "10169"));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "10170"));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "10171"));
                lsValues.Add(GameManager.ClientMgr.GetShenJiPointValue(client));
                lsValues.Add(GameManager.ClientMgr.GetShenJiJiFenValue(client));
                lsValues.Add(GameManager.ClientMgr.GetShenJiJiFenAddValue(client));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "10187"));
                lsValues.Add(Global.GetRoleParamsInt32FromDB(client, "10190"));
                lsValues.Add(GameManager.ClientMgr.GetEraDonateValue(client));
                lsValues.Add(client.ClientData.IsRide);
                client.ClientData.RoleCommonUseIntPamams = lsValues;
                result = lsValues;
            }
            return result;
        }

        
        public static RoleData ClientToRoleData2(GameClient client)
        {
            RoleData roleData = Global.ClientDataToRoleData2(client.ClientData);
            roleData.GMAuth = Global.GetAuth(client);
            roleData.SettingBitFlags = Global.GetRoleParamsInt64FromDB(client, "SettingBitFlags");
            return roleData;
        }

        
        public static RoleData ClientDataToRoleData2(SafeClientData clientData)
        {
            List<GoodsData> goodsDataList = null;
            if (clientData.GoodsDataList != null)
            {
                goodsDataList = new List<GoodsData>();
                lock (clientData.GoodsDataList)
                {
                    for (int i = 0; i < clientData.GoodsDataList.Count; i++)
                    {
                        if (clientData.GoodsDataList[i].GCount > 0 && 0 != clientData.GoodsDataList[i].Using)
                        {
                            goodsDataList.Add(clientData.GoodsDataList[i]);
                        }
                    }
                }
                if (null != clientData.DamonGoodsDataList)
                {
                    lock (clientData.DamonGoodsDataList)
                    {
                        for (int i = 0; i < clientData.DamonGoodsDataList.Count; i++)
                        {
                            if (clientData.DamonGoodsDataList[i].GCount > 0 && 0 != clientData.DamonGoodsDataList[i].Using)
                            {
                                goodsDataList.Add(clientData.DamonGoodsDataList[i]);
                            }
                        }
                    }
                }
                if (null != clientData.FashionGoodsDataList)
                {
                    lock (clientData.FashionGoodsDataList)
                    {
                        for (int i = 0; i < clientData.FashionGoodsDataList.Count; i++)
                        {
                            if (clientData.FashionGoodsDataList[i].GCount > 0 && clientData.FashionGoodsDataList[i].Using != 0 && clientData.FashionGoodsDataList[i].Site == 6000)
                            {
                                goodsDataList.Add(clientData.FashionGoodsDataList[i]);
                            }
                        }
                    }
                }
            }
            RoleData roleData = new RoleData
            {
                RoleID = clientData.RoleID,
                RoleName = clientData.RoleName,
                RoleSex = clientData.RoleSex,
                Occupation = clientData.Occupation,
                SubOccupation = clientData.SubOccupation,
                OccupationList = clientData.OccupationList,
                Level = clientData.Level,
                Faction = clientData.Faction,
                Money1 = clientData.Money1,
                Money2 = clientData.Money2,
                Experience = clientData.Experience,
                PKMode = clientData.PKMode,
                PKValue = clientData.PKValue,
                MapCode = clientData.MapCode,
                RoleDirection = clientData.RoleDirection,
                PosX = clientData.PosX,
                PosY = clientData.PosY,
                MaxLifeV = clientData.LifeV,
                LifeV = clientData.CurrentLifeV,
                MaxMagicV = clientData.MagicV,
                MagicV = clientData.CurrentMagicV,
                TaskDataList = null,
                RolePic = clientData.RolePic,
                BagNum = clientData.BagNum,
                GoodsDataList = goodsDataList,
                BodyCode = Global.FindEquipCode(clientData.GoodsDataList, 1),
                WeaponCode = Global.FindEquipCode(clientData.GoodsDataList, 0),
                OtherName = clientData.OtherName,
                MainQuickBarKeys = null,
                OtherQuickBarKeys = null,
                LoginNum = 0,
                UserMoney = 0,
                StallName = clientData.MarketName,
                TeamID = clientData.TeamID,
                LeftFightSeconds = 0,
                TotalHorseCount = 0,
                HorseDbID = -1,
                TotalPetCount = 0,
                PetDbID = -1,
                InterPower = clientData.InterPower,
                TeamLeaderRoleID = Global.GetGameClientTeamLeaderID(clientData),
                YinLiang = 0,
                SkillDataList = null,
                JingMaiBodyLevel = clientData.JingMaiBodyLevel,
                JingMaiXueWeiNum = clientData.RoleXueWeiNum,
                LastHorseID = -1,
                DefaultSkillID = -1,
                AutoLifeV = 0,
                AutoMagicV = 0,
                BufferDataList = null,
                MyDailyTaskDataList = null,
                JingMaiOkNum = Global.CalcJingMaiOkNum(clientData),
                MyDailyJingMaiData = clientData.MyDailyJingMaiData,
                NumSkillID = 0,
                MyPortableBagData = null,
                NewStep = 0,
                StepTime = 0L,
                BigAwardID = 0,
                SongLiID = 0,
                FuBenDataList = null,
                TotalLearnedSkillLevelCount = clientData.TotalLearnedSkillLevelCount,
                CompletedMainTaskID = 0,
                PKPoint = clientData.PKPoint,
                LianZhan = 0,
                StartPurpleNameTicks = clientData.StartPurpleNameTicks,
                MyYaBiaoData = null,
                BattleNameStart = clientData.BattleNameStart,
                BattleNameIndex = clientData.BattleNameIndex,
                CZTaskID = 0,
                HeroIndex = clientData.HeroIndex,
                AllQualityIndex = clientData.AllQualityIndex,
                AllForgeLevelIndex = clientData.AllForgeLevelIndex,
                AllJewelLevelIndex = clientData.AllJewelLevelIndex,
                AllZhuoYueNum = clientData.AllZhuoYueNum,
                HalfYinLiangPeriod = 0,
                ZoneID = clientData.ZoneID,
                BHName = clientData.BHName,
                BHVerify = clientData.BHVerify,
                BHZhiWu = clientData.BHZhiWu,
                BangGong = 0,
                BangHuiLingDiItemsDict = null,
                HuangDiRoleID = 0,
                HuangHou = clientData.HuangHou,
                PaiHangPosDict = clientData.PaiHangPosDict,
                AutoFightingProtect = clientData.AutoFightingProctect,
                FSHuDunStart = clientData.FSHuDunStart,
                BattleWhichSide = clientData.BattleWhichSide,
                LastMailID = clientData.LastMailID,
                OnceAwardFlag = clientData.OnceAwardFlag,
                Gold = 0,
                DSHideStart = clientData.DSHideStart,
                FSHuDunSeconds = clientData.FSHuDunSeconds,
                ZhongDuStart = clientData.ZhongDuStart,
                ZhongDuSeconds = clientData.ZhongDuSeconds,
                KaiFuStartDay = "",
                RegTime = "",
                JieriStartDay = "",
                JieriDaysNum = 0,
                HefuStartDay = "",
                JieriChengHao = clientData.JieriChengHao,
                BuChangStartDay = "",
                DongJieStart = clientData.DongJieStart,
                DongJieSeconds = clientData.DongJieSeconds,
                YueduDazhunpanStartDay = "",
                YueduDazhunpanStartDayNum = 0,
                MyWingData = clientData.MyWingData,
                VIPLevel = clientData.VipLevel,
                UserReturnTimeBegin = "",
                UserReturnTimeEnd = "",
                SpouseId = ((clientData.MyMarriageData != null) ? clientData.MyMarriageData.nSpouseID : -1),
                ActivityList = null,
                JunTuanId = clientData.JunTuanId,
                JunTuanName = clientData.JunTuanName,
                JunTuanZhiWu = clientData.JunTuanZhiWu,
                LingDi = clientData.LingDi,
                HuiJiData = clientData.HuiJiData,
                JueXingData = clientData.JueXingData,
                CompType = clientData.CompType,
                CompZhiWu = clientData.CompZhiWu,
                MountStoreList = clientData.MountStoreList,
                MountEquipList = clientData.MountEquipList,
                ThemeState = 0,
                CurrentArmorV = clientData.CurrentArmorV,
                MaxArmorV = clientData.ArmorV,
                RebornCombatForce = clientData.RebornCombatForce,
                RebornCount = clientData.RebornCount,
                RebornLevel = clientData.RebornLevel,
                RebornExperience = clientData.RebornExperience,
                RebornBagNum = clientData.RebornBagNum,
                RebornGoodsDataList = clientData.RebornGoodsDataList,
                RebornShowEquip = clientData.RebornShowEquip,
                RebornShowModel = clientData.RebornShowModel,
                RebornYinJi = clientData.RebornYinJi,
                UserPTID = clientData.UserPTID,
                WorldRoleID = clientData.WorldRoleID,
                Channel = clientData.Channel,
                HolyGoodsDataList = clientData.HolyGoodsDataList
            };
            roleData.IsVIP = Global.GetVipType(clientData.BufferDataList);
            roleData.BodyCode = Global.GMax(roleData.RoleSex, roleData.BodyCode);
            roleData.WeaponCode = Global.GMax(0, roleData.WeaponCode);
            roleData.RoleCommonUseIntPamams = Global.GetRoleCommonUseIntPamamValueList(clientData.RoleID);
            return roleData;
        }

        
        public static RoleDataMini ClientToRoleDataMini(GameClient client)
        {
            RoleDataMini roleData = Global.ClientDataToRoleDataMini(client.ClientData);
            roleData.GMAuth = Global.GetAuth(client);
            roleData.SettingBitFlags = Global.GetRoleParamsInt64FromDB(client, "SettingBitFlags");
            roleData.JueXingData = client.ClientData.JueXingData;
            return roleData;
        }

        
        public static RoleDataMini ClientDataToRoleDataMini(SafeClientData clientData)
        {
            RoleDataMini roleData = new RoleDataMini
            {
                RoleID = clientData.RoleID,
                RoleName = clientData.RoleName,
                RoleSex = clientData.RoleSex,
                Occupation = clientData.Occupation,
                SubOccupation = clientData.SubOccupation,
                OccupationList = clientData.OccupationList,
                Level = clientData.Level,
                Faction = clientData.Faction,
                PKMode = clientData.PKMode,
                PKValue = clientData.PKValue,
                MapCode = clientData.MapCode,
                RoleDirection = clientData.RoleDirection,
                PosX = clientData.PosX,
                PosY = clientData.PosY,
                MaxLifeV = clientData.LifeV,
                LifeV = clientData.CurrentLifeV,
                MaxMagicV = clientData.MagicV,
                MagicV = clientData.CurrentMagicV,
                BodyCode = Global.FindEquipCode(clientData.GoodsDataList, 1),
                WeaponCode = Global.FindEquipCode(clientData.GoodsDataList, 0),
                OtherName = clientData.OtherName,
                TeamID = clientData.TeamID,
                TeamLeaderRoleID = Global.GetGameClientTeamLeaderID(clientData),
                PKPoint = clientData.PKPoint,
                StartPurpleNameTicks = clientData.StartPurpleNameTicks,
                BattleNameStart = clientData.BattleNameStart,
                BattleNameIndex = clientData.BattleNameIndex,
                ZoneID = clientData.ZoneID,
                BHName = clientData.BHName,
                BHVerify = clientData.BHVerify,
                BHZhiWu = clientData.BHZhiWu,
                FSHuDunStart = clientData.FSHuDunStart,
                BattleWhichSide = clientData.BattleWhichSide,
                DSHideStart = clientData.DSHideStart,
                FSHuDunSeconds = clientData.FSHuDunSeconds,
                ZhongDuStart = clientData.ZhongDuStart,
                ZhongDuSeconds = clientData.ZhongDuSeconds,
                JieriChengHao = clientData.JieriChengHao,
                DongJieStart = clientData.DongJieStart,
                DongJieSeconds = clientData.DongJieSeconds,
                GoodsDataList = Global.GetUsingGoodsList(clientData),
                ChangeLifeLev = clientData.ChangeLifeCount,
                ChangeLifeCount = clientData.ChangeLifeCount,
                StallName = clientData.MarketName,
                MyWingData = clientData.MyWingData,
                VIPLevel = clientData.VipLevel,
                SpouseId = ((clientData.MyMarriageData != null) ? clientData.MyMarriageData.nSpouseID : 0),
                JunTuanId = clientData.JunTuanId,
                JunTuanName = clientData.JunTuanName,
                JunTuanZhiWu = clientData.JunTuanZhiWu,
                LingDi = clientData.LingDi,
                HuiJiData = clientData.HuiJiData,
                JueXingData = clientData.JueXingData,
                CompType = clientData.CompType,
                CompZhiWu = clientData.CompZhiWu,
                CurrentArmorV = clientData.CurrentArmorV,
                MaxArmorV = clientData.ArmorV,
                JingLingYuanSuJueXingData = clientData.JingLingYuanSuJueXingData,
                RebornCount = clientData.RebornCount,
                RebornLevel = clientData.RebornLevel,
                RebornEquipShow = clientData.RebornShowEquip,
                RebornModelShow = clientData.RebornShowModel,
                RebornGoodsDataList = RebornEquip.GetUsingGoodsList(clientData),
                RebornYinJi = clientData.RebornYinJi,
                UserPTID = clientData.UserPTID,
                WorldRoleID = clientData.WorldRoleID,
                Channel = clientData.Channel
            };
            if (null == roleData.GoodsDataList)
            {
                roleData.GoodsDataList = new List<GoodsData>();
            }
            if (clientData.DamonGoodsDataList != null && null != roleData.GoodsDataList)
            {
                lock (clientData.DamonGoodsDataList)
                {
                    for (int i = 0; i < clientData.DamonGoodsDataList.Count; i++)
                    {
                        if (clientData.DamonGoodsDataList[i].GCount > 0 && 0 != clientData.DamonGoodsDataList[i].Using)
                        {
                            roleData.GoodsDataList.Add(clientData.DamonGoodsDataList[i]);
                        }
                    }
                }
            }
            if (clientData.FashionGoodsDataList != null && null != roleData.GoodsDataList)
            {
                lock (clientData.FashionGoodsDataList)
                {
                    for (int i = 0; i < clientData.FashionGoodsDataList.Count; i++)
                    {
                        if (clientData.FashionGoodsDataList[i].GCount > 0 && clientData.FashionGoodsDataList[i].Using != 0 && clientData.FashionGoodsDataList[i].Site == 6000)
                        {
                            roleData.GoodsDataList.Add(clientData.FashionGoodsDataList[i]);
                        }
                    }
                }
            }
            if (null != clientData.MountEquipList)
            {
                foreach (GoodsData goods in clientData.MountEquipList)
                {
                    if (goods.Using > 0)
                    {
                        roleData.ZuoQiMainData = clientData.ZuoQiMainData;
                        roleData.EquipMount = goods;
                        break;
                    }
                }
            }
            roleData.IsVIP = Global.GetVipType(clientData.BufferDataList);
            roleData.BodyCode = Global.GMax(roleData.RoleSex, roleData.BodyCode);
            roleData.WeaponCode = Global.GMax(0, roleData.WeaponCode);
            roleData.RoleCommonUseIntPamams = Global.GetRoleCommonUseIntPamamValueList(clientData.RoleID);
            if (clientData.RoleParamsDict != null)
            {
                lock (clientData.RoleParamsDict)
                {
                    RoleParamsData pd = null;
                    if (clientData.RoleParamsDict.TryGetValue("SettingBitFlags", out pd) && pd != null && !string.IsNullOrEmpty(pd.ParamValue))
                    {
                        long.TryParse(pd.ParamValue, out roleData.SettingBitFlags);
                    }
                }
            }
            return roleData;
        }

        
        public static RoleData RoleDataExToRoleData(RoleDataEx roleDataEx)
        {
            List<GoodsData> goodsDataList = null;
            if (roleDataEx.GoodsDataList != null)
            {
                goodsDataList = new List<GoodsData>();
                for (int i = 0; i < roleDataEx.GoodsDataList.Count; i++)
                {
                    if (roleDataEx.GoodsDataList[i].GCount > 0 && 0 != roleDataEx.GoodsDataList[i].Using)
                    {
                        goodsDataList.Add(roleDataEx.GoodsDataList[i]);
                    }
                }
            }
            AllThingsCalcItem allThingsCalcItem = Global.CalcGoodsDataListAllThingsItem(goodsDataList);
            int allQualityIndex = 0;
            int allForgeLevelIndex = 0;
            int allJewelLevelIndex = 0;
            int allZhuoYueNum = 0;
            Global.CalcAllThingsCalcItem(allThingsCalcItem, out allQualityIndex, out allForgeLevelIndex, out allJewelLevelIndex, out allZhuoYueNum);
            RoleData roleData = new RoleData
            {
                RoleID = roleDataEx.RoleID,
                RoleName = roleDataEx.RoleName,
                RoleSex = roleDataEx.RoleSex,
                Occupation = roleDataEx.Occupation,
                OccupationList = roleDataEx.OccupationList,
                Level = roleDataEx.Level,
                Faction = roleDataEx.Faction,
                Money1 = roleDataEx.Money1,
                Money2 = roleDataEx.Money2,
                Experience = roleDataEx.Experience,
                PKMode = roleDataEx.PKMode,
                PKValue = roleDataEx.PKValue,
                MapCode = roleDataEx.MapCode,
                RoleDirection = roleDataEx.RoleDirection,
                PosX = roleDataEx.PosX,
                PosY = roleDataEx.PosY,
                MaxLifeV = roleDataEx.LifeV,
                LifeV = roleDataEx.LifeV,
                MaxMagicV = roleDataEx.MagicV,
                MagicV = roleDataEx.MagicV,
                TaskDataList = null,
                RolePic = roleDataEx.RolePic,
                BagNum = roleDataEx.BagNum,
                GoodsDataList = goodsDataList,
                BodyCode = Global.FindEquipCode(roleDataEx.GoodsDataList, 1),
                WeaponCode = Global.FindEquipCode(roleDataEx.GoodsDataList, 0),
                OtherName = roleDataEx.OtherName,
                MainQuickBarKeys = null,
                OtherQuickBarKeys = null,
                LoginNum = 0,
                UserMoney = 0,
                StallName = "",
                TeamID = 0,
                LeftFightSeconds = 0,
                TotalHorseCount = 0,
                HorseDbID = -1,
                TotalPetCount = 0,
                PetDbID = -1,
                InterPower = roleDataEx.InterPower,
                TeamLeaderRoleID = 0,
                YinLiang = 0,
                SkillDataList = null,
                JingMaiBodyLevel = 0,
                JingMaiXueWeiNum = 0,
                LastHorseID = -1,
                DefaultSkillID = -1,
                AutoLifeV = 0,
                AutoMagicV = 0,
                BufferDataList = null,
                MyDailyTaskDataList = null,
                JingMaiOkNum = 0,
                MyDailyJingMaiData = null,
                NumSkillID = 0,
                MyPortableBagData = null,
                NewStep = 0,
                StepTime = 0L,
                BigAwardID = 0,
                SongLiID = 0,
                FuBenDataList = null,
                TotalLearnedSkillLevelCount = 0,
                CompletedMainTaskID = 0,
                PKPoint = roleDataEx.PKPoint,
                LianZhan = 0,
                StartPurpleNameTicks = 0L,
                MyYaBiaoData = null,
                BattleNameStart = 0L,
                BattleNameIndex = 0,
                CZTaskID = 0,
                HeroIndex = 0,
                AllQualityIndex = allQualityIndex,
                AllForgeLevelIndex = allForgeLevelIndex,
                AllJewelLevelIndex = allJewelLevelIndex,
                AllZhuoYueNum = allZhuoYueNum,
                HalfYinLiangPeriod = 0,
                ZoneID = roleDataEx.ZoneID,
                BHName = roleDataEx.BHName,
                BHVerify = roleDataEx.BHVerify,
                BHZhiWu = roleDataEx.BHZhiWu,
                BangGong = 0,
                BangHuiLingDiItemsDict = null,
                HuangDiRoleID = 0,
                HuangHou = roleDataEx.HuangHou,
                PaiHangPosDict = roleDataEx.PaiHangPosDict,
                AutoFightingProtect = 0,
                FSHuDunStart = 0L,
                BattleWhichSide = 0,
                LastMailID = roleDataEx.LastMailID,
                OnceAwardFlag = roleDataEx.OnceAwardFlag,
                Gold = 0,
                DSHideStart = 0L,
                FSHuDunSeconds = 0,
                ZhongDuStart = 0L,
                ZhongDuSeconds = 0,
                KaiFuStartDay = "",
                RegTime = "",
                JieriStartDay = "",
                JieriDaysNum = 0,
                HefuStartDay = "",
                JieriChengHao = 0,
                BuChangStartDay = "",
                DongJieStart = 0L,
                DongJieSeconds = 0,
                YueduDazhunpanStartDay = "",
                YueduDazhunpanStartDayNum = 0,
                CombatForce = roleDataEx.CombatForce,
                ChangeLifeCount = roleDataEx.ChangeLifeCount,
                VIPLevel = roleDataEx.VIPLevel,
                UserReturnTimeBegin = "",
                UserReturnTimeEnd = "",
                ActivityList = null,
                JunTuanId = roleDataEx.JunTuanId,
                JunTuanName = roleDataEx.JunTuanName,
                JunTuanZhiWu = roleDataEx.JunTuanZhiWu,
                HuiJiData = roleDataEx.HuiJiData,
                JueXingData = roleDataEx.JueXingData,
                CompType = roleDataEx.CompType,
                CompZhiWu = roleDataEx.CompZhiWu,
                ThemeState = 0,
                RebornCombatForce = roleDataEx.RebornCombatForce,
                RebornCount = roleDataEx.RebornCount,
                RebornLevel = roleDataEx.RebornLevel,
                RebornExperience = roleDataEx.RebornExperience,
                RebornBagNum = roleDataEx.RebornBagNum,
                RebornShowEquip = roleDataEx.RebornShowEquip,
                RebornShowModel = roleDataEx.RebornShowModel,
                RebornYinJi = roleDataEx.RebornYinJi
            };
            roleData.IsVIP = Global.GetVipType(roleDataEx.BufferDataList);
            roleData.BodyCode = Global.GMax(roleData.RoleSex, roleData.BodyCode);
            roleData.WeaponCode = Global.GMax(0, roleData.WeaponCode);
            roleData.RoleCommonUseIntPamams = Global.GetRoleCommonUseIntPamamValueList(roleDataEx.RoleID);
            return roleData;
        }

        
        public static int GetSpriteBodyCode(GSpriteTypes spriteType)
        {
            int i = -1;
            switch (spriteType)
            {
                case GSpriteTypes.Leader:
                case GSpriteTypes.Other:
                    i = 0;
                    break;
                case GSpriteTypes.Monster:
                    i = 1;
                    break;
                case GSpriteTypes.NPC:
                    i = 2;
                    break;
                case GSpriteTypes.Pet:
                    i = 3;
                    break;
                case GSpriteTypes.BiaoChe:
                    i = 4;
                    break;
                case GSpriteTypes.JunQi:
                    i = 5;
                    break;
            }
            return i;
        }

        
        public static StoryBoardEx NewStoryboard(string key)
        {
            StoryBoardEx.RemoveStoryBoard(key);
            StoryBoardEx sb = new StoryBoardEx(key);
            sb.Binding();
            return sb;
        }

        
        public static void RemoveStoryboard(string key)
        {
            if (StoryBoardEx.ContainStoryBoard(key))
            {
                StoryBoardEx.RemoveStoryBoard(key);
            }
        }

        
        public static bool ExistStoryboard(string key)
        {
            return StoryBoardEx.ContainStoryBoard(key);
        }

        
        public static IObject GetTargetObject(int mapCode, int enemy)
        {
            GSpriteTypes st = Global.GetSpriteType((uint)enemy);
            IObject obj;
            if (st == GSpriteTypes.Monster)
            {
                obj = GameManager.MonsterMgr.FindMonster(mapCode, enemy);
            }
            else if (st == GSpriteTypes.BiaoChe)
            {
                obj = BiaoCheManager.FindBiaoCheByID(enemy);
            }
            else if (st == GSpriteTypes.JunQi)
            {
                obj = JunQiManager.FindJunQiByID(enemy);
            }
            else if (st == GSpriteTypes.FakeRole)
            {
                obj = JunQiManager.FindJunQiByID(enemy);
            }
            else
            {
                obj = GameManager.ClientMgr.FindClient(enemy);
            }
            return obj;
        }

        
        public static Point CalcTargetObjectRealPos(int mapCode, int enemy, Point targetPos)
        {
            Point realPos = targetPos;
            IObject obj = Global.GetTargetObject(mapCode, enemy);
            if (null != obj)
            {
                realPos = obj.CurrentPos;
            }
            return realPos;
        }

        
        public static void DoInjure(Monster attacker, int enemy, Point targetPos)
        {
            if (!attacker.IsMonsterDongJie())
            {
                if (GameManager.GridMagicHelperMgrEx.GetObjectAddMapBuffer(attacker.RoleID) <= 0)
                {
                    Point realPos = Global.CalcTargetObjectRealPos(attacker.MonsterZoneNode.MapCode, enemy, targetPos);
                    if (attacker.CurrentMagic <= 0 || attacker.MagicFinish != 1)
                    {
                        SpriteAttack.ProcessAttackByMonster(attacker, enemy, (int)targetPos.X, (int)targetPos.Y, (int)realPos.X, (int)realPos.Y, attacker.CurrentMagic, -1, 1.0);
                    }
                    if (-1 != attacker.LockObject)
                    {
                        int autoUseSkillID = attacker.GetAutoUseSkillID();
                        if (autoUseSkillID != attacker.CurrentMagic)
                        {
                            if (autoUseSkillID > 0)
                            {
                                GameManager.MonsterMgr.DoMagicAttack(attacker, autoUseSkillID, attacker.LockObject, false);
                            }
                        }
                    }
                }
            }
        }

        
        public static int GetActionIndex(GActions action)
        {
            int i = -1;
            switch (action)
            {
                case GActions.Stand:
                    i = 0;
                    break;
                case GActions.Walk:
                    i = 1;
                    break;
                case GActions.Run:
                    i = 2;
                    break;
                case GActions.Attack:
                    i = 3;
                    break;
                case GActions.Injured:
                    i = 12;
                    break;
                case GActions.Magic:
                    i = 4;
                    break;
                case GActions.Bow:
                    i = 5;
                    break;
                case GActions.Death:
                    i = 6;
                    break;
                case GActions.HorseStand:
                    i = 7;
                    break;
                case GActions.HorseRun:
                    i = 8;
                    break;
                case GActions.HorseDead:
                    i = 9;
                    break;
                case GActions.Sit:
                    i = 10;
                    break;
                case GActions.PreAttack:
                    i = 11;
                    break;
            }
            return i;
        }

        
        public static int GetActionTick(GActions action, int[] speedTickList)
        {
            int i = Global.GetActionIndex(action);
            int result;
            if (i >= speedTickList.Length)
            {
                result = 300;
            }
            else
            {
                result = (int)((double)speedTickList[i] * 0.74);
            }
            return result;
        }

        
        public static int GetMonsterTypeIndex(MonsterTypes monsterType)
        {
            int i = 0;
            if (monsterType <= MonsterTypes.QiBao)
            {
                if (monsterType <= MonsterTypes.Task)
                {
                    if (monsterType != MonsterTypes.None)
                    {
                        if (monsterType != MonsterTypes.Noraml)
                        {
                            if (monsterType == MonsterTypes.Task)
                            {
                                i = 2;
                            }
                        }
                        else
                        {
                            i = 1;
                        }
                    }
                    else
                    {
                        i = 0;
                    }
                }
                else if (monsterType <= MonsterTypes.Boss)
                {
                    if (monsterType != MonsterTypes.Rarity)
                    {
                        if (monsterType == MonsterTypes.Boss)
                        {
                            i = 4;
                        }
                    }
                    else
                    {
                        i = 3;
                    }
                }
                else if (monsterType != MonsterTypes.DaDao)
                {
                    if (monsterType == MonsterTypes.QiBao)
                    {
                        i = 6;
                    }
                }
                else
                {
                    i = 5;
                }
            }
            else if (monsterType <= MonsterTypes.DSPetMonster)
            {
                if (monsterType <= MonsterTypes.BiaoChe)
                {
                    if (monsterType != MonsterTypes.NoAttack)
                    {
                        if (monsterType == MonsterTypes.BiaoChe)
                        {
                            i = 8;
                        }
                    }
                    else
                    {
                        i = 7;
                    }
                }
                else if (monsterType != MonsterTypes.ShengXiaoYunCheng)
                {
                    if (monsterType == MonsterTypes.DSPetMonster)
                    {
                        i = 10;
                    }
                }
                else
                {
                    i = 9;
                }
            }
            else if (monsterType <= MonsterTypes.MoFactionGuard)
            {
                if (monsterType != MonsterTypes.CityGuard)
                {
                    switch (monsterType)
                    {
                        case MonsterTypes.XianFactionGuard:
                            i = 13;
                            break;
                        case MonsterTypes.MoFactionGuard:
                            i = 14;
                            break;
                    }
                }
                else
                {
                    i = 12;
                }
            }
            else if (monsterType != MonsterTypes.CivilianMonster)
            {
                if (monsterType == MonsterTypes.CaiJi)
                {
                    i = 11;
                }
            }
            else
            {
                i = 15;
            }
            return i;
        }

        
        public static int GetPreAttackTicksByMonsterType(MonsterTypes monsterType)
        {
            if (null == Global.MonsterPreAttackTicks)
            {
                Global.MonsterPreAttackTicks = GameManager.systemParamsList.GetParamValueIntArrayByName("MonsterPreAttackTicks", ',');
            }
            int i = Global.GetMonsterTypeIndex(monsterType);
            int result;
            if (i >= 0 && i < Global.MonsterPreAttackTicks.Length)
            {
                result = Global.MonsterPreAttackTicks[i];
            }
            else
            {
                result = 2000;
            }
            return result;
        }

        
        public static bool IsOpposition(Monster monster, IObject targetObj)
        {
            bool result;
            if (1601 == monster.MonsterType)
            {
                result = false;
            }
            else if (targetObj is GameClient)
            {
                result = Global.IsOpposition(monster, targetObj as GameClient);
            }
            else if (targetObj is Monster)
            {
                Monster targetMonster = targetObj as Monster;
                result = Global.IsOpposition(monster, targetMonster);
            }
            else if (targetObj is BiaoCheItem)
            {
                BiaoCheItem biaoCheItem = targetObj as BiaoCheItem;
                result = Global.IsOpposition(monster, biaoCheItem);
            }
            else if (targetObj is JunQiItem)
            {
                JunQiItem junQiItem = targetObj as JunQiItem;
                result = Global.IsOpposition(monster, junQiItem);
            }
            else
            {
                result = false;
            }
            return result;
        }

        
        public static bool IsOpposition(Monster monster, GameClient client)
        {
            bool result;
            if (client.ClientData.HideGM > 0)
            {
                result = false;
            }
            else if (monster.OwnerClient == client)
            {
                result = false;
            }
            else if (!monster.IsAttackRole)
            {
                result = false;
            }
            else if (monster.OwnerClient != null)
            {
                result = Global.IsOpposition(monster.OwnerClient, client);
            }
            else if (monster.OwnerMonster != null)
            {
                result = Global.IsOpposition(monster.OwnerMonster, client);
            }
            else
            {
                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap))
                {
                    result = false;
                }
                else if (null == gameMap)
                {
                    result = false;
                }
                else
                {
                    bool safeRegion = gameMap.InSafeRegionList(client.CurrentGrid);
                    if (safeRegion)
                    {
                        result = false;
                    }
                    else if (1302 == monster.MonsterType && 2 == client.ClientData.BattleWhichSide)
                    {
                        result = false;
                    }
                    else if (1301 == monster.MonsterType && 1 == client.ClientData.BattleWhichSide)
                    {
                        result = false;
                    }
                    else if (1303 == monster.MonsterType && 3 == client.ClientData.BattleWhichSide)
                    {
                        result = false;
                    }
                    else if (2101 == monster.MonsterType || 2102 == monster.MonsterType)
                    {
                        result = LingDiCaiJiManager.getInstance().IsOpposition(client, monster.MonsterType);
                    }
                    else
                    {
                        result = (1601 != monster.MonsterType && 1401 != monster.MonsterType);
                    }
                }
            }
            return result;
        }

        
        public static bool IsOpposition(Monster monster, Monster targetMonster)
        {
            bool result;
            if (1601 == targetMonster.MonsterType)
            {
                result = false;
            }
            else if (monster.OwnerClient != null)
            {
                result = Global.IsOpposition(monster.OwnerClient, targetMonster);
            }
            else if (monster.OwnerMonster == targetMonster)
            {
                result = false;
            }
            else if (monster == targetMonster.OwnerMonster)
            {
                result = false;
            }
            else if (monster.OwnerMonster != null)
            {
                result = false;
            }
            else if (targetMonster.OwnerClient != null)
            {
                result = Global.IsOpposition(monster, targetMonster.OwnerClient);
            }
            else if (targetMonster.OwnerMonster != null)
            {
                result = Global.IsOpposition(monster, targetMonster.OwnerMonster);
            }
            else
            {
                result = (monster.Camp != targetMonster.Camp);
            }
            return result;
        }

        
        public static bool IsOpposition(Monster monster, BiaoCheItem biaoCheItem)
        {
            return null == monster.OwnerClient || Global.IsOpposition(monster.OwnerClient, biaoCheItem);
        }

        
        public static bool IsOpposition(Monster monster, JunQiItem junQiItem)
        {
            return null == monster.OwnerClient || Global.IsOpposition(monster.OwnerClient, junQiItem);
        }

        
        public static bool IsOpposition(GameClient me, Monster obj)
        {
            bool result;
            if (GameManager.CheckMismatchMapCode && me.CheckCheatData.MismatchingMapCode)
            {
                result = false;
            }
            else if (obj.VLife <= 0.0)
            {
                result = false;
            }
            else if (me == obj.OwnerClient)
            {
                result = false;
            }
            else if (obj.OwnerClient != null)
            {
                result = Global.IsOpposition(me, obj.OwnerClient);
            }
            else if (obj.OwnerMonster != null)
            {
                result = Global.IsOpposition(me, obj.OwnerMonster);
            }
            else if (1601 == obj.MonsterType || 1401 == obj.MonsterType)
            {
                result = false;
            }
            else if (2000 == obj.MonsterType || 2001 == obj.MonsterType)
            {
                result = (obj.Camp != me.ClientData.BattleWhichSide);
            }
            else if (1302 == obj.MonsterType && 2 == me.ClientData.BattleWhichSide)
            {
                result = false;
            }
            else if (1301 == obj.MonsterType && 1 == me.ClientData.BattleWhichSide)
            {
                result = false;
            }
            else if (1303 == obj.MonsterType && 3 == me.ClientData.BattleWhichSide)
            {
                result = false;
            }
            else if (2101 == obj.MonsterType || 2102 == obj.MonsterType)
            {
                result = LingDiCaiJiManager.getInstance().IsOpposition(me, obj.MonsterType);
            }
            else
            {
                result = (1502 != obj.MonsterType || !(obj.Tag is CompMineTruckConfig) || obj.Camp != me.ClientData.BattleWhichSide);
            }
            return result;
        }

        
        public static bool IsOpposition(GameClient me, BiaoCheItem obj)
        {
            bool result;
            if (GameManager.CheckMismatchMapCode && me.CheckCheatData.MismatchingMapCode)
            {
                result = false;
            }
            else if (obj.CurrentLifeV <= 0)
            {
                result = false;
            }
            else if (!BiaoCheManager.CanAttack(me, obj))
            {
                result = false;
            }
            else if (me.ClientData.Level <= 20)
            {
                result = false;
            }
            else if (obj.OwnerRoleID == me.ClientData.RoleID)
            {
                result = false;
            }
            else
            {
                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(me.ClientData.MapCode, out gameMap))
                {
                    result = false;
                }
                else
                {
                    switch (gameMap.PKMode)
                    {
                        case 2:
                            return false;
                        case 3:
                            {
                                GameClient owner = GameManager.ClientMgr.FindClient(obj.OwnerRoleID);
                                return null != owner && me.ClientData.Faction != owner.ClientData.Faction;
                            }
                        case 4:
                            {
                                GameClient owner = GameManager.ClientMgr.FindClient(obj.OwnerRoleID);
                                return null != owner && me.ClientData.TeamID != owner.ClientData.TeamID;
                            }
                        case 5:
                            return true;
                        case 6:
                            {
                                GameClient owner = GameManager.ClientMgr.FindClient(obj.OwnerRoleID);
                                return null != owner && me.ClientData.BattleWhichSide != owner.ClientData.BattleWhichSide;
                            }
                        case 8:
                            {
                                GameClient owner = GameManager.ClientMgr.FindClient(obj.OwnerRoleID);
                                return null != owner && me.ClientData.UserPTID != owner.ClientData.UserPTID;
                            }
                    }
                    result = (me.ClientData.PKMode != 0);
                }
            }
            return result;
        }

        
        public static bool IsOpposition(GameClient me, JunQiItem obj)
        {
            bool result;
            if (GameManager.CheckMismatchMapCode && me.CheckCheatData.MismatchingMapCode)
            {
                result = false;
            }
            else if (obj.CurrentLifeV <= 0)
            {
                result = false;
            }
            else
            {
                if (obj.ManagerType == SceneUIClasses.LuoLanChengZhan)
                {
                    if (!LuoLanChengZhanManager.getInstance().IsInBattling())
                    {
                        return false;
                    }
                }
                else
                {
                    if (!JunQiManager.CanAttack(obj))
                    {
                        return false;
                    }
                    if (me.ClientData.Level <= 40)
                    {
                        return false;
                    }
                }
                result = (obj.BHID != me.ClientData.Faction);
            }
            return result;
        }

        
        public static bool IsOpposition(GameClient me, FakeRoleItem obj)
        {
            bool result;
            if (obj.CurrentLifeV <= 0)
            {
                result = false;
            }
            else if (!FakeRoleManager.CanAttack(obj))
            {
                result = false;
            }
            else if (me.ClientData.Level <= 20)
            {
                result = false;
            }
            else if (obj.MyRoleDataMini.RoleID == me.ClientData.RoleID)
            {
                result = false;
            }
            else
            {
                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(me.ClientData.MapCode, out gameMap))
                {
                    result = false;
                }
                else
                {
                    int mapPKMode = gameMap.PKMode;
                    switch (mapPKMode)
                    {
                        case 2:
                            return false;
                        case 3:
                            return me.ClientData.Faction != obj.MyRoleDataMini.Faction;
                        case 4:
                            return me.ClientData.TeamID != obj.MyRoleDataMini.TeamID;
                        case 5:
                            return true;
                        case 6:
                            return me.ClientData.BattleWhichSide != obj.MyRoleDataMini.BattleWhichSide;
                        case 8:
                            return me.ClientData.UserPTID != obj.MyRoleDataMini.UserPTID;
                    }
                    switch (me.ClientData.PKMode)
                    {
                        case 0:
                            result = (mapPKMode > 1);
                            break;
                        case 1:
                            result = true;
                            break;
                        case 2:
                            result = false;
                            break;
                        case 3:
                            result = false;
                            break;
                        case 4:
                            result = (Global.GetNameColorIndexByPKPoints(obj.MyRoleDataMini.PKPoint) >= 2);
                            break;
                        default:
                            result = false;
                            break;
                    }
                }
            }
            return result;
        }

        
        public static bool IsOpposition(GameClient me, GameClient obj)
        {
            bool result;
            if (obj.ClientData.HideGM > 0)
            {
                result = false;
            }
            else if (GameManager.CheckMismatchMapCode && me.CheckCheatData.MismatchingMapCode)
            {
                result = false;
            }
            else if (me.ClientData.ChangeLifeCount == 0 && me.ClientData.Level < 60)
            {
                result = false;
            }
            else if (obj.ClientData.ChangeLifeCount == 0 && obj.ClientData.Level < 60)
            {
                result = false;
            }
            else if (me.ClientData.MapCode == GameManager.BattleMgr.BattleMapCode)
            {
                result = (me.ClientData.BattleWhichSide != obj.ClientData.BattleWhichSide && GameManager.BattleMgr.AllowAttack);
            }
            else if (me.ClientData.MapCode == GameManager.ArenaBattleMgr.BattleMapCode)
            {
                result = GameManager.ArenaBattleMgr.AllowAttack;
            }
            else if (Global.IsAutoFightingProtectState(me))
            {
                result = false;
            }
            else if (Global.IsAutoFightingProtectState(obj))
            {
                result = false;
            }
            else
            {
                if (me.ClientData.DJRoomID > 0 && obj.ClientData.DJRoomID == me.ClientData.DJRoomID)
                {
                    if (0 >= me.ClientData.DJRoomTeamID)
                    {
                        return false;
                    }
                    if (0 >= obj.ClientData.DJRoomTeamID)
                    {
                        return false;
                    }
                    if (me.ClientData.DJRoomTeamID == obj.ClientData.DJRoomTeamID)
                    {
                        return false;
                    }
                    DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(me.ClientData.DJRoomID);
                    if (null != djRoomData)
                    {
                        lock (djRoomData)
                        {
                            if (djRoomData.PKState <= 1 || djRoomData.PKState >= 3)
                            {
                                return false;
                            }
                        }
                    }
                }
                result = Global._IsOpposition(me, obj);
            }
            return result;
        }

        
        public static bool _IsOpposition(GameClient me, GameClient obj)
        {
            bool result;
            if (obj.ClientData.HideGM > 0)
            {
                result = false;
            }
            else if (me == obj)
            {
                result = false;
            }
            else if (me.CurrentMapCode != obj.CurrentMapCode)
            {
                result = false;
            }
            else if (obj.ClientData.CurrentLifeV <= 0)
            {
                result = false;
            }
            else
            {
                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(me.ClientData.MapCode, out gameMap))
                {
                    result = false;
                }
                else
                {
                    bool safeRegion = gameMap.InSafeRegionList(me.CurrentGrid);
                    if (safeRegion)
                    {
                        result = false;
                    }
                    else
                    {
                        safeRegion = gameMap.InSafeRegionList(obj.CurrentGrid);
                        if (safeRegion)
                        {
                            result = false;
                        }
                        else
                        {
                            int mapPKMode = gameMap.PKMode;
                            switch (mapPKMode)
                            {
                                case 2:
                                    return false;
                                case 3:
                                    return me.ClientData.Faction != obj.ClientData.Faction || me.ClientData.Faction == 0 || me.ClientData.ServerPTID != obj.ClientData.ServerPTID;
                                case 4:
                                    return me.ClientData.TeamID != obj.ClientData.TeamID || me.ClientData.TeamID == 0;
                                case 5:
                                    return true;
                                case 6:
                                    return me.ClientData.BattleWhichSide != obj.ClientData.BattleWhichSide;
                                case 7:
                                    return me.ClientData.JunTuanId != obj.ClientData.JunTuanId || me.ClientData.JunTuanId == 0 || me.ClientData.ServerPTID != obj.ClientData.ServerPTID;
                                case 8:
                                    return me.ClientData.UserPTID != obj.ClientData.UserPTID;
                            }
                            if (obj.ClientData.ChangeLifeCount == 0 && obj.ClientData.Level < 60 && 1 == obj.ClientData.MapCode)
                            {
                                if (1 != mapPKMode)
                                {
                                    return false;
                                }
                            }
                            if (Global.IsBattleMap(me))
                            {
                                result = (me.ClientData.BattleWhichSide != obj.ClientData.BattleWhichSide);
                            }
                            else if (ZhuanShengShiLian.IsZhuanShengShiLianCopyScene(me.ClientData.MapCode))
                            {
                                result = (ZhuanShengShiLian.CanFight(me) && (me.ClientData.TeamID <= 0 || me.ClientData.TeamID != obj.ClientData.TeamID));
                            }
                            else if (GameManager.ArenaBattleMgr.IsInArenaBattle(me))
                            {
                                result = true;
                            }
                            else
                            {
                                switch (me.ClientData.PKMode)
                                {
                                    case 0:
                                        return mapPKMode > 1;
                                    case 1:
                                        return true;
                                    case 2:
                                        return me.ClientData.Faction == 0 || obj.ClientData.Faction == 0 || me.ClientData.ServerPTID != obj.ClientData.ServerPTID || (me.ClientData.Faction != obj.ClientData.Faction && !AllyManager.getInstance().UnionIsAlly(me, obj.ClientData.Faction));
                                    case 3:
                                        return me.ClientData.TeamID == 0 || me.ClientData.TeamID != obj.ClientData.TeamID;
                                    case 4:
                                        return Global.GetNameColorIndexByPKPoints(obj.ClientData.PKPoint) >= 2 || Global.IsPurpleName(obj);
                                    case 7:
                                        return me.ClientData.JunTuanId != obj.ClientData.JunTuanId || me.ClientData.JunTuanId == 0 || me.ClientData.ServerPTID != obj.ClientData.ServerPTID;
                                    case 8:
                                        return me.ClientData.UserPTID != obj.ClientData.UserPTID;
                                }
                                result = false;
                            }
                        }
                    }
                }
            }
            return result;
        }

        
        public static bool IsInBattle(GameClient client, IObject obj)
        {
            int targetRoleID = -1;
            if (obj is GameClient)
            {
                targetRoleID = (obj as GameClient).ClientData.RoleID;
                if ((obj as GameClient).ClientData.HideGM > 0)
                {
                    return false;
                }
            }
            else if (obj is Monster)
            {
                targetRoleID = (obj as Monster).RoleID;
            }
            bool result;
            if (targetRoleID > 0 && (client.ClientData.RoleIDAttackebByMyself == targetRoleID || client.ClientData.RoleIDAttackMe == targetRoleID))
            {
                result = true;
            }
            else
            {
                if (obj is GameClient)
                {
                    GameClient targetClient = obj as GameClient;
                    int roleID = client.ClientData.RoleID;
                    if (roleID > 0 && (targetClient.ClientData.RoleIDAttackebByMyself == roleID || targetClient.ClientData.RoleIDAttackMe == roleID))
                    {
                        return true;
                    }
                }
                if (obj is Monster)
                {
                    if ((obj as Monster).IsAttackedBy(client.ClientData.RoleID))
                    {
                        return true;
                    }
                }
                result = false;
            }
            return result;
        }

        
        public static string GetOccupationStr(int occupation)
        {
            string result;
            if (0 == occupation)
            {
                result = "战士";
            }
            else if (1 == occupation)
            {
                result = "法师";
            }
            else if (2 == occupation)
            {
                result = "弓箭手";
            }
            else if (3 == occupation)
            {
                result = "魔剑士";
            }
            else if (5 == occupation)
            {
                result = "召唤师";
            }
            else
            {
                result = "未知职业";
            }
            return result;
        }

        
        public static bool RoleIsVisible(GameClient client)
        {
            bool result;
            if (client.ClientData.MoveAndActionNum <= 0)
            {
                result = false;
            }
            else if (client.ClientData.DSHideStart <= 0L)
            {
                result = true;
            }
            else
            {
                long nowTicks = TimeUtil.NOW();
                result = (nowTicks >= client.ClientData.DSHideStart);
            }
            return result;
        }

        
        public static Point ForceCorrectPoint(int mapCode, Point p)
        {
            GameMap gameMap = null;
            Point result;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                result = p;
            }
            else
            {
                result = new Point((double)((int)(p.X / (double)gameMap.MapGridWidth) * gameMap.MapGridWidth + gameMap.MapGridWidth / 2), (double)((int)(p.Y / (double)gameMap.MapGridHeight) * gameMap.MapGridHeight + gameMap.MapGridHeight / 2));
            }
            return result;
        }

        
        public static Point GetMapPoint(ObjectTypes objType, int mapCode, int toX, int toY, int radius)
        {
            Point p = new Point((double)toX, (double)toY);
            GameMap gameMap = null;
            Point result;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                result = p;
            }
            else
            {
                int minX = Math.Max(0, toX - radius);
                int maxX = Math.Min(gameMap.MapWidth - 1, toX + radius);
                int minY = Math.Max(0, toY - radius);
                int maxY = Math.Min(gameMap.MapHeight - 1, toY + radius);
                Point randPoint = new Point((double)Global.GetRandomNumber(minX, maxX), (double)Global.GetRandomNumber(minY, maxY));
                if (!Global.InObs(objType, mapCode, (int)randPoint.X, (int)randPoint.Y, 0, 0))
                {
                    result = Global.ForceCorrectPoint(mapCode, randPoint);
                }
                else
                {
                    Point gridPoint = new Point((double)((int)(randPoint.X / (double)gameMap.MapGridWidth)), (double)((int)(randPoint.Y / (double)gameMap.MapGridHeight)));
                    gridPoint = Global.GetAGridPointIn4Direction(objType, gridPoint, mapCode, 0, false);
                    if (Global.InObsByGridXY(objType, mapCode, (int)gridPoint.X, (int)gridPoint.Y, 0, 0))
                    {
                        result = p;
                    }
                    else
                    {
                        result = new Point(gridPoint.X * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2), gridPoint.Y * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
                    }
                }
            }
            return result;
        }

        
        public static Point GetMapPointByGridXY(ObjectTypes objType, int mapCode, int gridX, int gridY, int radiusNum, int holdGridNum = 0, bool bCanNotInSafeArea = false)
        {
            Point p = new Point((double)gridX, (double)gridY);
            GameMap gameMap = null;
            Point result;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                result = new Point(p.X * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2), p.Y * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
            }
            else
            {
                int minX = Math.Max(0, gridX - radiusNum);
                int maxX = Math.Min(gameMap.MapGridColsNum - 1, gridX + radiusNum);
                int minY = Math.Max(0, gridY - radiusNum);
                int maxY = Math.Min(gameMap.MapGridRowsNum - 1, gridY + radiusNum);
                Point randPoint = new Point((double)Global.GetRandomNumber(minX, maxX), (double)Global.GetRandomNumber(minY, maxY));
                if (!Global.InObsByGridXY(objType, mapCode, (int)randPoint.X, (int)randPoint.Y, holdGridNum, 0))
                {
                    result = new Point(randPoint.X * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2), randPoint.Y * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
                }
                else
                {
                    Point gridPoint = new Point((double)((int)randPoint.X), (double)((int)randPoint.Y));
                    gridPoint = Global.GetAGridPointIn4Direction(objType, gridPoint, mapCode, holdGridNum, false);
                    if (Global.InObsByGridXY(objType, mapCode, (int)gridPoint.X, (int)gridPoint.Y, holdGridNum, 0))
                    {
                        result = new Point((double)(gridX * gameMap.MapGridWidth + gameMap.MapGridWidth / 2), (double)(gridY * gameMap.MapGridHeight + gameMap.MapGridHeight / 2));
                    }
                    else
                    {
                        result = new Point(gridPoint.X * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2), gridPoint.Y * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
                    }
                }
            }
            return result;
        }

        
        public static Point GetRandomPoint(ObjectTypes objType, int mapCode)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            Point randPoint = new Point((double)Global.GetRandomNumber(0, gameMap.MapWidth), (double)Global.GetRandomNumber(0, gameMap.MapHeight));
            Point result;
            if (!Global.InObs(objType, mapCode, (int)randPoint.X, (int)randPoint.Y, 0, 0))
            {
                result = Global.ForceCorrectPoint(mapCode, randPoint);
            }
            else
            {
                Point gridPoint = new Point((double)((int)(randPoint.X / (double)gameMap.MapGridWidth)), (double)((int)(randPoint.Y / (double)gameMap.MapGridHeight)));
                gridPoint = Global.GetAGridPointIn4Direction(objType, gridPoint, mapCode, 0, false);
                result = new Point(gridPoint.X * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2), gridPoint.Y * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
            }
            return result;
        }

        
        public static Point GetAGridPointIn4Direction(ObjectTypes objType, Point gridPoint, int mapCode, int holdGridNum = 0, bool bCanNotInSafeArea = false)
        {
            GameMap gameMap = null;
            Point result;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                result = gridPoint;
            }
            else
            {
                MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];
                int gridX = (int)gridPoint.X;
                int gridY = (int)gridPoint.Y;
                if (gameMap.MyNodeGrid.isWalkable(gridX, gridY) && mapGrid.CanMove(objType, gridX, gridY, holdGridNum, 0))
                {
                    result = gridPoint;
                }
                else
                {
                    Point p = gridPoint;
                    int maxGridX = gameMap.MapGridColsNum - 1;
                    int maxGridY = gameMap.MapGridRowsNum - 1;
                    int added = 1;
                    int newX;
                    int newY;
                    for (; ; )
                    {
                        newX = gridX + added;
                        newY = gridY + added;
                        int newX2 = gridX - added;
                        int newY2 = gridY - added;
                        int total = 8;
                        if (0 <= newX && newX < maxGridX && 0 <= newY && newY < maxGridY)
                        {
                            total--;
                            if (gameMap.MyNodeGrid.isWalkable(newX, newY) && mapGrid.CanMove(objType, newX, newY, holdGridNum, 0))
                            {
                                if (!bCanNotInSafeArea)
                                {
                                    goto IL_14B;
                                }
                                if (!gameMap.InSafeRegionList(newX, newY))
                                {
                                    break;
                                }
                            }
                        }
                        if (0 <= newX && newX < maxGridX && 0 <= newY2 && newY2 < maxGridY)
                        {
                            total--;
                            if (gameMap.MyNodeGrid.isWalkable(newX, newY2) && mapGrid.CanMove(objType, newX, newY2, holdGridNum, 0))
                            {
                                if (!bCanNotInSafeArea)
                                {
                                    goto IL_1EE;
                                }
                                if (!gameMap.InSafeRegionList(newX, newY))
                                {
                                    goto Block_19;
                                }
                            }
                        }
                        if (0 <= newX2 && newX2 < maxGridX && 0 <= newY && newY < maxGridY)
                        {
                            total--;
                            if (gameMap.MyNodeGrid.isWalkable(newX2, newY) && mapGrid.CanMove(objType, newX2, newY, holdGridNum, 0))
                            {
                                if (!bCanNotInSafeArea)
                                {
                                    goto IL_291;
                                }
                                if (!gameMap.InSafeRegionList(newX, newY))
                                {
                                    goto Block_27;
                                }
                            }
                        }
                        if (0 <= newX2 && newX2 < maxGridX && 0 <= newY2 && newY2 < maxGridY)
                        {
                            total--;
                            if (gameMap.MyNodeGrid.isWalkable(newX2, newY2) && mapGrid.CanMove(objType, newX2, newY2, holdGridNum, 0))
                            {
                                if (!bCanNotInSafeArea)
                                {
                                    goto IL_334;
                                }
                                if (!gameMap.InSafeRegionList(newX, newY))
                                {
                                    goto Block_35;
                                }
                            }
                        }
                        if (0 <= newX && newX < maxGridX)
                        {
                            total--;
                            if (gameMap.MyNodeGrid.isWalkable(newX, gridY) && mapGrid.CanMove(objType, newX, gridY, holdGridNum, 0))
                            {
                                if (!bCanNotInSafeArea)
                                {
                                    goto IL_3C6;
                                }
                                if (!gameMap.InSafeRegionList(newX, newY))
                                {
                                    goto Block_41;
                                }
                            }
                        }
                        if (0 <= newY && newY < maxGridY)
                        {
                            total--;
                            if (gameMap.MyNodeGrid.isWalkable(gridX, newY) && mapGrid.CanMove(objType, gridX, newY, holdGridNum, 0))
                            {
                                if (!bCanNotInSafeArea)
                                {
                                    goto IL_458;
                                }
                                if (!gameMap.InSafeRegionList(newX, newY))
                                {
                                    goto Block_47;
                                }
                            }
                        }
                        if (0 <= newX2 && newX2 < maxGridX)
                        {
                            total--;
                            if (gameMap.MyNodeGrid.isWalkable(newX2, gridY) && mapGrid.CanMove(objType, newX2, gridY, holdGridNum, 0))
                            {
                                if (!bCanNotInSafeArea)
                                {
                                    goto IL_4EA;
                                }
                                if (!gameMap.InSafeRegionList(newX, newY))
                                {
                                    goto Block_53;
                                }
                            }
                        }
                        if (0 <= newY2 && newY2 < maxGridY)
                        {
                            total--;
                            if (gameMap.MyNodeGrid.isWalkable(gridX, newY2) && mapGrid.CanMove(objType, gridX, newY2, holdGridNum, 0))
                            {
                                if (!bCanNotInSafeArea)
                                {
                                    goto IL_579;
                                }
                                if (!gameMap.InSafeRegionList(newX, newY))
                                {
                                    goto Block_59;
                                }
                            }
                        }
                        if (total >= 8)
                        {
                            goto Block_60;
                        }
                        added++;
                    }
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    IL_14B:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    Block_19:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    IL_1EE:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    Block_27:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    IL_291:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    Block_35:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    IL_334:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    Block_41:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    IL_3C6:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    Block_47:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    IL_458:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    Block_53:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    IL_4EA:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    Block_59:
                    p = new Point((double)newX, (double)newY);
                    goto IL_5A9;
                    IL_579:
                    p = new Point((double)newX, (double)newY);
                    Block_60:
                    IL_5A9:
                    result = p;
                }
            }
            return result;
        }

        
        public static bool InOnlyObs(ObjectTypes objType, int mapCode, int gridX, int gridY)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            return gridX >= gameMap.MapGridColsNum || gridX < 0 || gridY >= gameMap.MapGridRowsNum || gridY < 0 || !gameMap.MyNodeGrid.isWalkable(gridX, gridY);
        }

        
        public static bool InOnlyObsByXY(ObjectTypes objType, int mapCode, int toX, int toY)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            bool result;
            if (toX >= gameMap.MapWidth || toX < 0 || toY >= gameMap.MapHeight || toY < 0)
            {
                result = true;
            }
            else
            {
                int gridX = toX / gameMap.MapGridWidth;
                int gridY = toY / gameMap.MapGridHeight;
                result = (gridX >= gameMap.MapGridColsNum || gridX < 0 || gridY >= gameMap.MapGridRowsNum || gridY < 0 || !gameMap.MyNodeGrid.isWalkable(gridX, gridY));
            }
            return result;
        }

        
        public static bool InObs(ObjectTypes objType, int mapCode, int toX, int toY, int holdGridNum = 0, byte holdBitSet = 0)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            return toX >= gameMap.MapWidth || toX < 0 || toY >= gameMap.MapHeight || toY < 0 || Global.InObsByGridXY(objType, mapCode, toX / gameMap.MapGridWidth, toY / gameMap.MapGridHeight, holdGridNum, holdBitSet);
        }

        
        public static bool InObsByGridXY(ObjectTypes objType, int mapCode, int gridX, int gridY, int holdGridNum = 0, byte holdBitSet = 0)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            bool result;
            if (gridX >= gameMap.MapGridColsNum || gridX < 0 || gridY >= gameMap.MapGridRowsNum || gridY < 0)
            {
                result = true;
            }
            else if (!gameMap.MyNodeGrid.isWalkable(gridX, gridY))
            {
                result = true;
            }
            else
            {
                MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];
                result = !mapGrid.CanMove(objType, gridX, gridY, holdGridNum, holdBitSet);
            }
            return result;
        }

        
        public static bool IsPosReachable(int mapCode, int toX, int toY)
        {
            bool nCanMove = false;
            GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);
            int gridX = toX / gameMap.MapGridWidth;
            int gridY = toY / gameMap.MapGridHeight;
            if (null != gameMap)
            {
                nCanMove = gameMap.CanMove(gridX, gridY);
            }
            return nCanMove;
        }

        
        public static bool IsGridReachable(int mapCode, int gridX, int gridY)
        {
            bool nCanMove = false;
            GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);
            if (null != gameMap)
            {
                nCanMove = gameMap.CanMove(gridX, gridY);
            }
            return nCanMove;
        }

        
        public static bool InArea(int centerGridX, int centerGridY, int radius, Point grid)
        {
            int absGridX = (int)Math.Abs(grid.X - (double)centerGridX);
            int absGridY = (int)Math.Abs(grid.Y - (double)centerGridY);
            bool result;
            if (absGridX > radius || absGridY > radius)
            {
                result = false;
            }
            else
            {
                absGridY = radius - absGridX;
                int gridY = centerGridY - absGridY;
                int gridY2 = centerGridY + absGridY;
                result = (grid.Y >= (double)gridY && grid.Y <= (double)gridY2);
            }
            return result;
        }

        
        public static bool CompareTwoPointGridXY(int mapCode, Point p1, Point p2)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            return (int)(p1.X / (double)gameMap.MapGridWidth) == (int)(p2.X / (double)gameMap.MapGridWidth) && (int)(p1.Y / (double)gameMap.MapGridHeight) == (int)(p2.Y / (double)gameMap.MapGridHeight);
        }

        
        public static Point GetGridPointByDirection(int direction, int gridX, int gridY)
        {
            int nX = gridX;
            int nY = gridY;
            switch (direction)
            {
                case 0:
                    nX = gridX;
                    nY = gridY + 1;
                    break;
                case 1:
                    nX = gridX + 1;
                    nY = gridY + 1;
                    break;
                case 2:
                    nX = gridX + 1;
                    nY = gridY;
                    break;
                case 3:
                    nX = gridX + 1;
                    nY = gridY - 1;
                    break;
                case 4:
                    nX = gridX;
                    nY = gridY - 1;
                    break;
                case 5:
                    nX = gridX - 1;
                    nY = gridY - 1;
                    break;
                case 6:
                    nX = gridX - 1;
                    nY = gridY;
                    break;
                case 7:
                    nX = gridX - 1;
                    nY = gridY + 1;
                    break;
            }
            return new Point((double)nX, (double)nY);
        }

        
        public static List<Point> GetGridPointByDirection(int direction, int gridX, int gridY, int nNum)
        {
            List<Point> list = new List<Point>();
            int nX = gridX;
            int nY = gridY;
            for (int i = 0; i < nNum; i++)
            {
                switch (direction)
                {
                    case 0:
                        nY++;
                        break;
                    case 1:
                        nX++;
                        nY++;
                        break;
                    case 2:
                        nX++;
                        break;
                    case 3:
                        nX++;
                        nY--;
                        break;
                    case 4:
                        nY--;
                        break;
                    case 5:
                        nX--;
                        nY--;
                        break;
                    case 6:
                        nX--;
                        break;
                    case 7:
                        nX--;
                        nY++;
                        break;
                }
                list.Add(new Point((double)nX, (double)nY));
            }
            return list;
        }

        
        public static bool JugeOnObsOrOverMap(GameClient client, int gridX, int gridY)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];
            return gridX >= gameMap.MapGridColsNum || gridX < 0 || gridY >= gameMap.MapGridRowsNum || gridY < 0 || !gameMap.MyNodeGrid.isWalkable(gridX, gridY);
        }

        
        public static List<Point> SearchIdleGridPointByDirection(GameClient client, int direction, int gridX, int gridY, int maxSearchNum, int moveNum, byte holdBitSet)
        {
            List<Point> list = new List<Point>();
            int nX = gridX;
            int nY = gridY;
            int idleNum = 0;
            for (int i = 0; i < maxSearchNum; i++)
            {
                switch (direction)
                {
                    case 0:
                        nY++;
                        break;
                    case 1:
                        nX++;
                        nY++;
                        break;
                    case 2:
                        nX++;
                        break;
                    case 3:
                        nX++;
                        nY--;
                        break;
                    case 4:
                        nY--;
                        break;
                    case 5:
                        nX--;
                        nY--;
                        break;
                    case 6:
                        nX--;
                        break;
                    case 7:
                        nX--;
                        nY++;
                        break;
                }
                if (Global.JugeOnObsOrOverMap(client, nX, nY))
                {
                    list = null;
                    break;
                }
                list.Add(new Point((double)nX, (double)nY));
                if (!Global.InObsByGridXY(client.ObjectType, client.ClientData.MapCode, nX, nY, 0, holdBitSet))
                {
                    idleNum++;
                }
                else
                {
                    idleNum = 0;
                }
                if (idleNum >= moveNum)
                {
                    break;
                }
            }
            List<Point> result;
            if (null == list)
            {
                result = null;
            }
            else
            {
                result = ((list.Count >= maxSearchNum) ? null : list);
            }
            return result;
        }

        
        public static List<Point> GetGridPointByDirection(int direction, int gridX, int gridY, string rangeMode, bool includeCenter = true)
        {
            rangeMode = rangeMode.ToLower();
            List<Point> result;
            if ("front2" == rangeMode)
            {
                result = Global.GetGridPointByDirection(direction, gridX, gridY, 2);
            }
            else
            {
                List<Point> list;
                if ("front3" == rangeMode)
                {
                    list = new List<Point>();
                    Point p = Global.GetGridPointByDirection(direction, gridX, gridY);
                    list.Add(p);
                    int direction2 = (direction + 1) % 8;
                    p = Global.GetGridPointByDirection(direction2, gridX, gridY);
                    list.Add(p);
                    int direction3 = direction - 1;
                    if (direction3 < 0)
                    {
                        direction3 = 7;
                    }
                    p = Global.GetGridPointByDirection(direction3, gridX, gridY);
                    list.Add(p);
                }
                else
                {
                    if ("front5" == rangeMode)
                    {
                        return Global.GetGridPointByDirection(direction, gridX, gridY, 5);
                    }
                    if ("1x1" == rangeMode)
                    {
                        list = new List<Point>();
                        list.Add(new Point((double)gridX, (double)gridY));
                    }
                    else if ("3x3" == rangeMode)
                    {
                        list = new List<Point>();
                        for (int nX = gridX - 1; nX <= gridX + 1; nX++)
                        {
                            int nY = gridY - 1;
                            while (nY <= gridY + 1)
                            {
                                if (includeCenter)
                                {
                                    goto IL_147;
                                }
                                if (nX != gridX || nY != gridY)
                                {
                                    goto IL_147;
                                }
                                IL_15A:
                                nY++;
                                continue;
                                IL_147:
                                list.Add(new Point((double)nX, (double)nY));
                                goto IL_15A;
                            }
                        }
                    }
                    else if ("5x5" == rangeMode)
                    {
                        list = new List<Point>();
                        for (int nX = gridX - 2; nX <= gridX + 2; nX++)
                        {
                            int nY = gridY - 2;
                            while (nY <= gridY + 2)
                            {
                                if (includeCenter)
                                {
                                    goto IL_1DF;
                                }
                                if (nX != gridX || nY != gridY)
                                {
                                    goto IL_1DF;
                                }
                                IL_1F2:
                                nY++;
                                continue;
                                IL_1DF:
                                list.Add(new Point((double)nX, (double)nY));
                                goto IL_1F2;
                            }
                        }
                    }
                    else
                    {
                        list = new List<Point>();
                        int radius;
                        if (int.TryParse(rangeMode, out radius) && radius >= 0)
                        {
                            radius = (radius - 1) / 100 + 1;
                            for (int nX = gridX - radius; nX <= gridX + radius; nX++)
                            {
                                for (int nY = gridY - radius; nY <= gridY + radius; nY++)
                                {
                                    list.Add(new Point((double)nX, (double)nY));
                                }
                            }
                        }
                    }
                }
                result = list;
            }
            return result;
        }

        
        public static List<Point> GetGridPointByRadius(int gridX, int gridY, int gridWidthNum, int gridHeightNum)
        {
            List<Point> list = new List<Point>();
            for (int nX = gridX - gridWidthNum; nX < gridX + gridWidthNum; nX++)
            {
                for (int nY = gridY - gridHeightNum; nY < gridY + gridHeightNum; nY++)
                {
                    list.Add(new Point((double)nX, (double)nY));
                }
            }
            return list;
        }

        
        public static List<GameClient> GetMapAliveClientsEx(IEnumerable<object> lsObjects, int mapCode, bool writeLog = true, long logMarkInfo = 0L)
        {
            List<GameClient> lsAliveClient = new List<GameClient>();
            List<GameClient> result;
            if (null == lsObjects)
            {
                result = lsAliveClient;
            }
            else
            {
                for (int i = 0; i < lsObjects.Count<object>(); i++)
                {
                    GameClient client = lsObjects.ElementAt(i) as GameClient;
                    bool valid = false;
                    if (client != null && client.ClientData.CurrentLifeV > 0)
                    {
                        if (!client.ClientData.WaitingNotifyChangeMap && !client.ClientData.WaitingForChangeMap)
                        {
                            if (client.ClientData.MapCode == mapCode && Global.IsPosReachable(mapCode, client.ClientData.PosX, client.ClientData.PosY))
                            {
                                valid = true;
                                lsAliveClient.Add(client);
                            }
                        }
                    }
                    if (writeLog)
                    {
                        if (!valid)
                        {
                            EventLogManager.AddGameEvent(LogRecordType.RoleGameMapPosOrStateInvalid, new object[]
                            {
                                logMarkInfo,
                                mapCode,
                                client.ClientData.MapCode,
                                client.ClientData.CopyMapID,
                                client.ClientData.WaitingNotifyChangeMap,
                                client.ClientData.WaitingForChangeMap,
                                client.ClientData.PosX,
                                client.ClientData.PosY,
                                client.ClientData.RoleID,
                                client.ClientData.CurrentLifeV,
                                "存活玩家判定不通过"
                            });
                        }
                        else
                        {
                            EventLogManager.AddGameEvent(LogRecordType.RoleGameMapPosOrStateInvalid, new object[]
                            {
                                logMarkInfo,
                                mapCode,
                                client.ClientData.MapCode,
                                client.ClientData.CopyMapID,
                                client.ClientData.WaitingNotifyChangeMap,
                                client.ClientData.WaitingForChangeMap,
                                client.ClientData.PosX,
                                client.ClientData.PosY,
                                client.ClientData.RoleID,
                                client.ClientData.CurrentLifeV,
                                "存活玩家判定通过"
                            });
                        }
                    }
                }
                result = lsAliveClient;
            }
            return result;
        }

        
        public static bool CanPushObject(GameClient client, object obj)
        {
            if (obj is GameClient)
            {
                if (!Global.IsOpposition(client, obj as GameClient))
                {
                    return true;
                }
                if ((obj as GameClient).ClientData.RoleID != client.ClientData.RoleID)
                {
                    if ((obj as GameClient).ClientData.Level >= client.ClientData.Level)
                    {
                        return false;
                    }
                }
            }
            else
            {
                if (!Global.IsOpposition(client, obj as Monster))
                {
                    return true;
                }
                if ((obj as Monster).MonsterInfo.VLevel >= client.ClientData.Level)
                {
                    return false;
                }
            }
            return true;
        }

        
        public static bool CanQueueMoveObject(GameClient client, int direction, int gridX, int gridY, int maxSearchNum, int moveNum, byte holdBitSet, out Point gridPoint, bool addSelf = false)
        {
            gridPoint = new Point((double)gridX, (double)gridY);
            List<Point> gridList = Global.SearchIdleGridPointByDirection(client, direction, gridX, gridY, maxSearchNum, moveNum, holdBitSet);
            bool result;
            if (null == gridList)
            {
                result = false;
            }
            else
            {
                if (addSelf)
                {
                    gridList.Insert(0, new Point((double)gridX, (double)gridY));
                }
                for (int i = 0; i < gridList.Count; i++)
                {
                    List<object> enemiesList = new List<object>();
                    GameManager.ClientMgr.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList);
                    GameManager.MonsterMgr.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList);
                    for (int j = 0; j < enemiesList.Count; j++)
                    {
                        if (!Global.CanPushObject(client, enemiesList[j]))
                        {
                            if (i > 0)
                            {
                                gridPoint = new Point(gridList[i - 1].X, gridList[i - 1].Y);
                            }
                            return false;
                        }
                    }
                    List<object> enemiesList2 = new List<object>();
                    BiaoCheManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                    JunQiManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                    FakeRoleManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                    if (enemiesList2.Count > 0)
                    {
                        return false;
                    }
                }
                result = true;
            }
            return result;
        }

        
        public static bool QueueMoveObject(GameClient client, int direction, int gridX, int gridY, int maxSearchNum, int moveNum, int addInjured, byte holdBitSet, bool addSelf = false)
        {
            List<Point> gridList = Global.SearchIdleGridPointByDirection(client, direction, gridX, gridY, maxSearchNum, moveNum, holdBitSet);
            bool result;
            if (null == gridList)
            {
                result = false;
            }
            else
            {
                if (addSelf)
                {
                    gridList.Insert(0, new Point((double)gridX, (double)gridY));
                }
                Dictionary<int, List<object>> dict = new Dictionary<int, List<object>>();
                for (int i = 0; i < gridList.Count; i++)
                {
                    List<object> enemiesList = new List<object>();
                    GameManager.ClientMgr.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList);
                    GameManager.MonsterMgr.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList);
                    for (int j = 0; j < enemiesList.Count; j++)
                    {
                        if (!Global.CanPushObject(client, enemiesList[j]))
                        {
                            return false;
                        }
                    }
                    List<object> enemiesList2 = new List<object>();
                    BiaoCheManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                    JunQiManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                    FakeRoleManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                    if (enemiesList2.Count > 0)
                    {
                        return false;
                    }
                    dict[i] = enemiesList;
                }
                GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];
                int nOcc = Global.CalcOriginalOccupationID(client);
                int attackType = nOcc;
                for (int i = 0; i < gridList.Count - moveNum; i++)
                {
                    List<object> enemiesList = null;
                    if (!dict.TryGetValue(i, out enemiesList))
                    {
                        return false;
                    }
                    addInjured = (int)((double)addInjured * (1.0 - (double)i * 0.1));
                    addInjured = Global.GMax(0, addInjured);
                    int j = 0;
                    while (j < enemiesList.Count)
                    {
                        object obj = enemiesList[j] as IObject;
                        Point objGrid = (obj as IObject).CurrentGrid;
                        Point objMoveTo = new Point(gridList[i + moveNum].X * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2), gridList[i + moveNum].Y * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
                        if (obj is GameClient)
                        {
                            if ((obj as GameClient).ClientData.RoleID != client.ClientData.RoleID)
                            {
                                if (Global.IsOpposition(client, obj as GameClient))
                                {
                                    GameManager.ClientMgr.ChangePosition(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, obj as GameClient, (int)objMoveTo.X, (int)objMoveTo.Y, (obj as GameClient).ClientData.RoleDirection, 159, 1);
                                    GameManager.ClientMgr.NotifyOtherInjured(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, obj as GameClient, 0, addInjured, 1.0, attackType, false, 0, 1.0, 0, 0, 0, 0.0, 0.0, false, false, 1.0, 0, 0, 0, 0.0);
                                }
                            }
                        }
                        else if (obj is Monster)
                        {
                            if (Global.IsOpposition(client, obj as Monster))
                            {
                                GameManager.MonsterMgr.ChangePosition(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, obj as Monster, (int)objMoveTo.X, (int)objMoveTo.Y, (int)(obj as Monster).Direction, 159, 1);
                                GameManager.MonsterMgr.NotifyInjured(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, obj as Monster, 0, addInjured, 1.0, attackType, false, 0, 1.0, 0, 0, 0, 0.0, 0.0, false, 1.0, 0, 0, 0, 0.0);
                            }
                        }
                        IL_4A4:
                        j++;
                        continue;
                        goto IL_4A4;
                    }
                }
                result = true;
            }
            return result;
        }

        
        public static long GMin(long l, long r)
        {
            return Math.Min(l, r);
        }

        
        public static long GMax(long l, long r)
        {
            return Math.Max(l, r);
        }

        
        public static int GMin(int l, int r)
        {
            return Math.Min(l, r);
        }

        
        public static int GMax(int l, int r)
        {
            return Math.Max(l, r);
        }

        
        public static double GMin(double l, double r)
        {
            return Math.Min(l, r);
        }

        
        public static int Clamp(int v, int l, int r)
        {
            if (v < l)
            {
                v = l;
            }
            else if (v > r)
            {
                v = r;
            }
            return v;
        }

        
        public static long Clamp(long v, long l, long r)
        {
            if (v < l)
            {
                v = l;
            }
            else if (v > r)
            {
                v = r;
            }
            return v;
        }

        
        public static double Clamp(double v, double l, double r)
        {
            if (v < l)
            {
                v = l;
            }
            else if (v > r)
            {
                v = r;
            }
            return v;
        }

        
        public static double GMax(double l, double r)
        {
            return Math.Max(l, r);
        }

        
        public static bool CheckAnyForMultipleCondition(params bool?[] args)
        {
            bool result;
            if (args.Length == 0 || args[0] == null)
            {
                result = true;
            }
            else if (args.All((bool? x) => x == null))
            {
                result = true;
            }
            else
            {
                result = args.Any((bool? x) => x == true);
            }
            return result;
        }

        
        public static long SafeConvertToTicks(string str)
        {
            try
            {
                if (string.IsNullOrEmpty(str))
                {
                    return 0L;
                }
                DateTime dt;
                if (!DateTime.TryParse(str, out dt))
                {
                    return 0L;
                }
                return dt.Ticks / 10000L;
            }
            catch (Exception)
            {
            }
            return 0L;
        }

        
        public static int SafeConvertToInt32(string str)
        {
            int result;
            if (string.IsNullOrEmpty(str))
            {
                result = 0;
            }
            else
            {
                str = str.Trim();
                if (string.IsNullOrEmpty(str))
                {
                    result = 0;
                }
                else
                {
                    try
                    {
                        return Convert.ToInt32(str);
                    }
                    catch (Exception)
                    {
                    }
                    result = 0;
                }
            }
            return result;
        }

        
        public static long SafeConvertToInt64(string str)
        {
            long result;
            if (string.IsNullOrEmpty(str))
            {
                result = 0L;
            }
            else
            {
                str = str.Trim();
                if (string.IsNullOrEmpty(str))
                {
                    result = 0L;
                }
                else
                {
                    try
                    {
                        return Convert.ToInt64(str);
                    }
                    catch (Exception)
                    {
                    }
                    result = 0L;
                }
            }
            return result;
        }

        
        public static double SafeConvertToDouble(string str)
        {
            double result;
            if (string.IsNullOrEmpty(str))
            {
                result = 0.0;
            }
            else
            {
                str = str.Trim();
                if (string.IsNullOrEmpty(str))
                {
                    result = 0.0;
                }
                else
                {
                    try
                    {
                        return Convert.ToDouble(str);
                    }
                    catch (Exception)
                    {
                    }
                    result = 0.0;
                }
            }
            return result;
        }

        
        public static double[] String2DoubleArray(string str, char separator = ',')
        {
            double[] result;
            if (string.IsNullOrEmpty(str))
            {
                result = null;
            }
            else
            {
                string[] sa = str.Split(new char[]
                {
                    separator
                });
                result = Global.StringArray2DoubleArray(sa);
            }
            return result;
        }

        
        public static double[] StringArray2DoubleArray(string[] sa)
        {
            double[] da = new double[sa.Length];
            try
            {
                for (int i = 0; i < sa.Length; i++)
                {
                    string str = sa[i].Trim();
                    str = (string.IsNullOrEmpty(str) ? "0.0" : str);
                    da[i] = Convert.ToDouble(str);
                }
            }
            catch (Exception ex)
            {
                string msg = ex.ToString();
            }
            return da;
        }

        
        public static int[] String2IntArray(string str, char spliter = ',')
        {
            int[] result;
            if (string.IsNullOrEmpty(str))
            {
                result = null;
            }
            else
            {
                string[] sa = str.Split(new char[]
                {
                    spliter
                });
                result = Global.StringArray2IntArray(sa);
            }
            return result;
        }

        
        public static string[] String2StringArray(string str, char spliter = '|')
        {
            string[] result;
            if (string.IsNullOrEmpty(str))
            {
                result = null;
            }
            else
            {
                result = str.Split(new char[]
                {
                    spliter
                });
            }
            return result;
        }

        
        public static int[] StringArray2IntArray(string[] sa)
        {
            int[] result;
            if (sa == null)
            {
                result = null;
            }
            else
            {
                result = Global.StringArray2IntArray(sa, 0, sa.Length);
            }
            return result;
        }

        
        public static int[] StringArray2IntArray(string[] sa, int start, int count)
        {
            int[] result2;
            if (sa == null)
            {
                result2 = null;
            }
            else if (start < 0 || start >= sa.Length)
            {
                result2 = null;
            }
            else if (count <= 0)
            {
                result2 = null;
            }
            else if (sa.Length - start < count)
            {
                result2 = null;
            }
            else
            {
                int[] result = new int[count];
                for (int i = 0; i < count; i++)
                {
                    string str = sa[start + i].Trim();
                    str = (string.IsNullOrEmpty(str) ? "0" : str);
                    result[i] = Convert.ToInt32(str);
                }
                result2 = result;
            }
            return result2;
        }

        
        public static Point StrToPoint(string str)
        {
            Point result;
            if (string.IsNullOrEmpty(str))
            {
                result = new Point(double.NaN, double.NaN);
            }
            else
            {
                str = str.Trim();
                if (str == "")
                {
                    result = new Point(double.NaN, double.NaN);
                }
                else
                {
                    string[] fields = str.Split(new char[]
                    {
                        ','
                    });
                    if (fields.Length != 2)
                    {
                        result = new Point(double.NaN, double.NaN);
                    }
                    else
                    {
                        try
                        {
                            string str2 = fields[0].Trim();
                            str2 = (string.IsNullOrEmpty(str) ? "0" : str2);
                            string str3 = fields[1].Trim();
                            str3 = (string.IsNullOrEmpty(str) ? "0" : str3);
                            return new Point(Convert.ToDouble(str2), Convert.ToDouble(str3));
                        }
                        catch (Exception)
                        {
                        }
                        result = new Point(double.NaN, double.NaN);
                    }
                }
            }
            return result;
        }

        
        public static long GetUniqueID()
        {
            return Interlocked.Increment(ref Global.BaseUniqueID);
        }

        
        public static GSpriteTypes GetSpriteType(uint id)
        {
            int prefix = (int)id >> 16;
            int num = prefix;
            GSpriteTypes result;
            if (num != 32512)
            {
                switch (num)
                {
                    case 32576:
                        result = GSpriteTypes.Pet;
                        break;
                    case 32577:
                        result = GSpriteTypes.BiaoChe;
                        break;
                    case 32578:
                        result = GSpriteTypes.JunQi;
                        break;
                    default:
                        if (id < 2130706432U)
                        {
                            result = GSpriteTypes.Other;
                        }
                        else if (id < 2134900736U)
                        {
                            result = GSpriteTypes.Monster;
                        }
                        else if (id < 2135949312U)
                        {
                            result = GSpriteTypes.FakeRole;
                        }
                        else
                        {
                            result = GSpriteTypes.Other;
                        }
                        break;
                }
            }
            else
            {
                result = GSpriteTypes.NPC;
            }
            return result;
        }

        
        public static IObject FindSpriteByID(int id, int mapCode)
        {
            GSpriteTypes spriteType = Global.GetSpriteType((uint)id);
            IObject result;
            if (spriteType == GSpriteTypes.Other)
            {
                result = GameManager.ClientMgr.FindClient(id);
            }
            else if (spriteType == GSpriteTypes.Monster)
            {
                result = GameManager.MonsterMgr.FindMonster(mapCode, id);
            }
            else
            {
                result = null;
            }
            return result;
        }

        
        public static int GetRandomNumber(int minV, int maxV)
        {
            int result;
            if (minV == maxV)
            {
                result = minV;
            }
            else if (minV > maxV)
            {
                result = maxV;
            }
            else
            {
                int ret = minV;
                lock (Global.GlobalRand)
                {
                    ret = Global.GlobalRand.Next(minV, maxV);
                }
                result = ret;
            }
            return result;
        }

        
        public static double GetRandom()
        {
            double result;
            lock (Global.GlobalRand)
            {
                result = Global.GlobalRand.NextDouble();
            }
            return result;
        }

        
        public static int GetGoodsGridNumByID(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = 1;
            }
            else
            {
                result = systemGoods.GetIntValue("GridNum", -1);
            }
            return result;
        }

        
        public static int GetGoodsYinLiangNumByID(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = 0;
            }
            else
            {
                result = systemGoods.GetIntValue("PriceTwo", -1);
            }
            return result;
        }

        
        public static void RemoveGoodsData(GameClient client, int id)
        {
            if (client.ClientData.GoodsDataList != null)
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Id == id)
                        {
                            client.ClientData.GoodsDataList.RemoveAt(i);
                            break;
                        }
                    }
                }
            }
        }

        
        public static bool RemoveGoodsData(GameClient client, GoodsData gd)
        {
            bool result;
            if (null == gd)
            {
                result = false;
            }
            else if (client.ClientData.GoodsDataList == null)
            {
                result = false;
            }
            else
            {
                bool ret = false;
                lock (client.ClientData.GoodsDataList)
                {
                    ret = client.ClientData.GoodsDataList.Remove(gd);
                }
                result = ret;
            }
            return result;
        }

        
        public static void AddGoodsData(GameClient client, GoodsData gd)
        {
            if (null != gd)
            {
                if (client.ClientData.GoodsDataList == null)
                {
                    client.ClientData.GoodsDataList = new List<GoodsData>();
                }
                lock (client.ClientData.GoodsDataList)
                {
                    client.ClientData.GoodsDataList.Add(gd);
                }
            }
        }

        
        public static void AddRebornGoodsData(GameClient client, GoodsData gd)
        {
            if (null != gd)
            {
                if (client.ClientData.RebornGoodsDataList == null)
                {
                    client.ClientData.RebornGoodsDataList = new List<GoodsData>();
                }
                lock (client.ClientData.RebornGoodsDataList)
                {
                    client.ClientData.RebornGoodsDataList.Add(gd);
                }
            }
        }

        
        public static GoodsData AddGoodsData(GameClient client, int id, int goodsID, int forgeLevel, int quality, int goodsNum, int binding, int site, string jewelList, string startTime, string endTime, int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nEquipChangeLife, int bagIndex = 0, List<int> washProps = null, List<int> ehProps = null, int juHun_level = 0)
        {
            GoodsData gd = new GoodsData
            {
                Id = id,
                GoodsID = goodsID,
                Using = 0,
                Forge_level = forgeLevel,
                Starttime = startTime,
                Endtime = endTime,
                Site = site,
                Quality = quality,
                Props = "",
                GCount = goodsNum,
                Binding = binding,
                Jewellist = jewelList,
                BagIndex = bagIndex,
                AddPropIndex = addPropIndex,
                BornIndex = bornIndex,
                Lucky = lucky,
                Strong = strong,
                ExcellenceInfo = ExcellenceProperty,
                AppendPropLev = nAppendPropLev,
                ChangeLifeLevForEquip = nEquipChangeLife,
                WashProps = washProps,
                ElementhrtsProps = ehProps,
                JuHunID = juHun_level
            };
            Global.AddGoodsData(client, gd);
            return gd;
        }

        
        public static GoodsData GetGoodsByDbID(GameClient client, int dbID)
        {
            GoodsData result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Id == dbID)
                        {
                            return client.ClientData.GoodsDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static GoodsData GetRebornGoodsByDbID(GameClient client, int dbID)
        {
            GoodsData result;
            if (null == client.ClientData.RebornGoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.RebornGoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.RebornGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.RebornGoodsDataList[i].Id == dbID)
                        {
                            return client.ClientData.RebornGoodsDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static List<GoodsData> GetGoodsTimeExpired(GameClient client)
        {
            List<GoodsData> expiredList = null;
            List<GoodsData> result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (Global.IsGoodsTimeOver(client.ClientData.GoodsDataList[i]))
                        {
                            if (null == expiredList)
                            {
                                expiredList = new List<GoodsData>();
                            }
                            expiredList.Add(client.ClientData.GoodsDataList[i]);
                        }
                    }
                }
                result = expiredList;
            }
            return result;
        }

        
        public static List<GoodsData> GetFashionTimeExpired(GameClient client)
        {
            List<GoodsData> expiredList = null;
            lock (client.ClientData.FashionGoodsDataList)
            {
                for (int i = 0; i < client.ClientData.FashionGoodsDataList.Count; i++)
                {
                    if (Global.IsGoodsTimeOver(client.ClientData.FashionGoodsDataList[i]))
                    {
                        if (null == expiredList)
                        {
                            expiredList = new List<GoodsData>();
                        }
                        expiredList.Add(client.ClientData.FashionGoodsDataList[i]);
                    }
                }
            }
            return expiredList;
        }

        
        public static GoodsData GetGoodsByID(GameClient client, int goodsID)
        {
            GoodsData result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID)
                        {
                            return client.ClientData.GoodsDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static GoodsData GetBindGoodsByID(GameClient client, int goodsID)
        {
            GoodsData result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].Binding >= 1)
                        {
                            return client.ClientData.GoodsDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static GoodsData GetNotBindGoodsByID(GameClient client, int goodsID)
        {
            GoodsData result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].Binding <= 0)
                        {
                            return client.ClientData.GoodsDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static GoodsData GetNotUsingGoodsByID(GameClient client, int goodsID, int goodsLevel, int goodsQuality)
        {
            GoodsData result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using <= 0)
                        {
                            if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].Forge_level == goodsLevel && client.ClientData.GoodsDataList[i].Quality == goodsQuality)
                            {
                                return client.ClientData.GoodsDataList[i];
                            }
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static GoodsData GetGoodsByID(GameClient client, int goodsID, int bingding, string endTime, ref int startIndex)
        {
            GoodsData result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.GoodsDataList)
                {
                    if (startIndex >= client.ClientData.GoodsDataList.Count)
                    {
                        return null;
                    }
                    for (int i = startIndex; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].Binding == bingding && Global.DateTimeEqual(client.ClientData.GoodsDataList[i].Endtime, endTime))
                        {
                            startIndex = i + 1;
                            return client.ClientData.GoodsDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static GoodsData GetGoodsByID(GameClient client, int goodsID, int nNum, int bingding, int nforgeLev, int nAppendPro, int nLucky, int nExcellenceInfo, bool bIsusing = false)
        {
            GoodsData result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (bingding != -1)
                        {
                            if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].GCount == nNum && client.ClientData.GoodsDataList[i].Binding == bingding && client.ClientData.GoodsDataList[i].Forge_level == nforgeLev && client.ClientData.GoodsDataList[i].AppendPropLev == nAppendPro && client.ClientData.GoodsDataList[i].Lucky == nLucky && client.ClientData.GoodsDataList[i].ExcellenceInfo == nExcellenceInfo)
                            {
                                GoodsData goods = client.ClientData.GoodsDataList[i];
                                if (goods != null)
                                {
                                    if (bIsusing && goods.Using > 0)
                                    {
                                        return goods;
                                    }
                                    if (goods.Using == 0)
                                    {
                                        return goods;
                                    }
                                }
                            }
                        }
                        else if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].GCount == nNum && client.ClientData.GoodsDataList[i].Forge_level == nforgeLev && client.ClientData.GoodsDataList[i].AppendPropLev == nAppendPro && client.ClientData.GoodsDataList[i].Lucky == nLucky && client.ClientData.GoodsDataList[i].ExcellenceInfo == nExcellenceInfo)
                        {
                            GoodsData goods = client.ClientData.GoodsDataList[i];
                            if (goods != null)
                            {
                                if (bIsusing && goods.Using > 0)
                                {
                                    return goods;
                                }
                                if (goods.Using == 0)
                                {
                                    return goods;
                                }
                            }
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static GoodsData GetGoodsByIndex(GameClient client, int index)
        {
            GoodsData result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                GoodsData goodsData = null;
                lock (client.ClientData.GoodsDataList)
                {
                    if (index >= 0 && index < client.ClientData.GoodsDataList.Count)
                    {
                        goodsData = client.ClientData.GoodsDataList[index];
                    }
                }
                result = goodsData;
            }
            return result;
        }

        
        public static void ModifyGoodsBindPorp(GameClient client, int dbID, int nBindPorp)
        {
            if (null != client.ClientData.GoodsDataList)
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Id == dbID)
                        {
                            client.ClientData.GoodsDataList[i].Binding = nBindPorp;
                            break;
                        }
                    }
                }
            }
        }

        
        public static int GetGoodsUsedGrid(GameClient client)
        {
            int ret = 0;
            int result;
            if (client.ClientData.GoodsDataList == null)
            {
                result = ret;
            }
            else
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using <= 0)
                        {
                            ret++;
                        }
                    }
                }
                result = ret;
            }
            return result;
        }

        
        public static int GetTotalMaxBagGridCount(GameClient client)
        {
            return client.ClientData.BagNum;
        }

        
        public static bool CanAddGoods(GameClient client, int goodsID, int newGoodsNum, int binding, string endTime = "1900-01-01 12:00:00", bool canUseOld = true, bool bLeftGrid = false)
        {
            bool result;
            if (client.ClientData.GoodsDataList == null)
            {
                result = true;
            }
            else
            {
                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);
                bool findOldGrid = false;
                int totalGridNum = 0;
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using <= 0)
                        {
                            totalGridNum++;
                            if (canUseOld && gridNum > 1)
                            {
                                if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].Binding == binding && Global.DateTimeEqual(client.ClientData.GoodsDataList[i].Endtime, endTime))
                                {
                                    if (client.ClientData.GoodsDataList[i].GCount + newGoodsNum <= gridNum)
                                    {
                                        findOldGrid = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (findOldGrid && !bLeftGrid)
                {
                    result = true;
                }
                else
                {
                    int totalMaxGridCount = Global.GetTotalMaxBagGridCount(client);
                    result = (totalGridNum < totalMaxGridCount);
                }
            }
            return result;
        }

        
        public static bool CanAddGoods3(GameClient client, int goodsID, int newGoodsNum, int binding, string endTime = "1900-01-01 12:00:00", bool canUseOld = true)
        {
            bool result2;
            if (client.ClientData.GoodsDataList == null)
            {
                result2 = true;
            }
            else
            {
                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);
                int totalGridNum = 0;
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using <= 0)
                        {
                            totalGridNum++;
                            if (canUseOld && gridNum > 1)
                            {
                                if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].Binding == binding && Global.DateTimeEqual(client.ClientData.GoodsDataList[i].Endtime, endTime))
                                {
                                    newGoodsNum -= gridNum - client.ClientData.GoodsDataList[i].GCount;
                                    if (newGoodsNum < 1)
                                    {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                if (newGoodsNum > 0)
                {
                    int result;
                    totalGridNum += Math.DivRem(newGoodsNum, gridNum, out result);
                    if (result > 0)
                    {
                        totalGridNum++;
                    }
                }
                int totalMaxGridCount = Global.GetTotalMaxBagGridCount(client);
                result2 = (totalGridNum <= totalMaxGridCount);
            }
            return result2;
        }

        
        public static bool CanAddGoodsToReborn(GameClient client, int goodsID, int newGoodsNum, int binding, string endTime = "1900-01-01 12:00:00", bool canUseOld = true, bool bLeftGrid = false)
        {
            bool result;
            if (client.ClientData.RebornGoodsDataList == null)
            {
                result = true;
            }
            else
            {
                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);
                bool findOldGrid = false;
                int totalGridNum = 0;
                lock (client.ClientData.RebornGoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.RebornGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.RebornGoodsDataList[i].Using <= 0)
                        {
                            totalGridNum++;
                            if (canUseOld && gridNum > 1)
                            {
                                if (client.ClientData.RebornGoodsDataList[i].GoodsID == goodsID && client.ClientData.RebornGoodsDataList[i].Binding == binding && Global.DateTimeEqual(client.ClientData.RebornGoodsDataList[i].Endtime, endTime))
                                {
                                    if (client.ClientData.RebornGoodsDataList[i].GCount + newGoodsNum <= gridNum)
                                    {
                                        findOldGrid = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                result = ((findOldGrid && !bLeftGrid) || totalGridNum < client.ClientData.RebornBagNum);
            }
            return result;
        }

        
        public static bool CanAddGoods2(GameClient client, int goodsID, int newGoodsNum, int binding, string endTime = "1900-01-01 12:00:00", bool canUseOld = true)
        {
            bool result;
            if (client.ClientData.GoodsDataList == null)
            {
                result = true;
            }
            else
            {
                int needGrid = Global.CalGoodsGridNum(client, goodsID, newGoodsNum, binding, endTime, canUseOld);
                int haveGoodsCount = Global.GetGoodsUsedGrid(client);
                int totalMaxGridCount = Global.GetTotalMaxBagGridCount(client);
                result = (haveGoodsCount + needGrid <= totalMaxGridCount);
            }
            return result;
        }

        
        private static int CalGoodsGridNum(GameClient client, int goodsID, int newGoodsNum, int binding, string endTime = "1900-01-01 12:00:00", bool canUseOld = true)
        {
            int gridNum = Global.GetGoodsGridNumByID(goodsID);
            gridNum = Global.GMax(gridNum, 1);
            int result;
            if (client.ClientData.GoodsDataList == null)
            {
                result = (newGoodsNum - 1) / gridNum + 1;
            }
            else
            {
                int totalGridNum = 0;
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using <= 0)
                        {
                            totalGridNum++;
                            if (canUseOld && gridNum > 1)
                            {
                                if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].Binding == binding && Global.DateTimeEqual(client.ClientData.GoodsDataList[i].Endtime, endTime))
                                {
                                    if (client.ClientData.GoodsDataList[i].GCount < gridNum)
                                    {
                                        newGoodsNum -= Global.GMin(newGoodsNum, gridNum - client.ClientData.GoodsDataList[i].GCount);
                                    }
                                }
                            }
                        }
                    }
                }
                if (newGoodsNum <= 0)
                {
                    result = 0;
                }
                else
                {
                    result = (newGoodsNum - 1) / gridNum + 1;
                }
            }
            return result;
        }

        
        public static bool CanAddGoodsDataList(GameClient client, List<GoodsData> goodsDataList)
        {
            bool result;
            if (null == goodsDataList)
            {
                result = true;
            }
            else
            {
                int needGridNum = 0;
                foreach (GoodsData item in goodsDataList)
                {
                    needGridNum += Global.CalGoodsGridNum(client, item.GoodsID, item.GCount, item.Binding, item.Endtime, true);
                }
                result = Global.CanAddGoodsNum(client, needGridNum);
            }
            return result;
        }

        
        public static bool CanAddGoodsNum(GameClient client, int newGoodsCount)
        {
            int haveGoodsCount = Global.GetGoodsUsedGrid(client);
            int totalMaxGridCount = Global.GetTotalMaxBagGridCount(client);
            return newGoodsCount + haveGoodsCount <= totalMaxGridCount;
        }

        
        public static bool CanAddGoodsNum(GameClient client, int site, int newGoodsCount)
        {
            if (site <= 8000)
            {
                if (site == 3000)
                {
                    return ElementhrtsManager.CanAddGoodsNum(client, newGoodsCount);
                }
                if (site == 7000)
                {
                    return GameManager.FluorescentGemMgr.CanAddGoodsNum(client, newGoodsCount);
                }
                if (site == 8000)
                {
                    return SingletonTemplate<SoulStoneManager>.Instance().CanAddGoodsNum(client, newGoodsCount);
                }
            }
            else
            {
                if (site == 11000)
                {
                    return ShenShiManager.CanAddGoodsNum(client, newGoodsCount);
                }
                if (site == 15000)
                {
                    return RebornEquip.CanAddGoodsNum(client, newGoodsCount);
                }
                if (site == 16000)
                {
                    return MountHolyStampManager.CanAddGoodsNum(client, newGoodsCount);
                }
            }
            return Global.CanAddGoodsNum(client, newGoodsCount);
        }

        
        public static int GetGoodsByName(string name)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoodsNamgMgr.GoodsItemsDict.TryGetValue(name, out systemGoods))
            {
                result = -1;
            }
            else
            {
                result = systemGoods.GetIntValue("ID", -1);
            }
            return result;
        }

        
        public static string GetGoodsNameByID(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            string result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = "";
            }
            else
            {
                result = systemGoods.GetStringValue("Title");
            }
            return result;
        }

        
        
        
        private static Dictionary<int, int> logItemDict
        {
            get
            {
                Dictionary<int, int> logItemDict_storage;
                lock (Global._logItemLock)
                {
                    logItemDict_storage = Global._logItemDict_storage;
                }
                return logItemDict_storage;
            }
            set
            {
                lock (Global._logItemLock)
                {
                    Global._logItemDict_storage = value;
                }
            }
        }

        
        public static void LoadItemLogMark()
        {
            int[] arrMark = GameManager.systemParamsList.GetParamValueIntArrayByName("LogGoods", ',');
            Dictionary<int, int> tmpDict = new Dictionary<int, int>();
            if (arrMark != null && arrMark.Length > 0)
            {
                for (int i = 0; i < arrMark.Length; i++)
                {
                    tmpDict.Add(arrMark[i], 1);
                }
            }
            Global.logItemDict = tmpDict;
        }

        
        public static void LoadReliveMonsterGongGaoMark()
        {
            int[] arrMark = GameManager.systemParamsList.GetParamValueIntArrayByName("EliteMonster", ',');
            if (arrMark != null && arrMark.Length > 0)
            {
                for (int i = 0; i < arrMark.Length; i++)
                {
                    Global.reliveMonsterGongGaoDict.Add(arrMark[i], 1);
                }
            }
        }

        
        public static bool IsGongGaoReliveMonster(int nMonsterID)
        {
            int nGongGaoMark = 0;
            return Global.reliveMonsterGongGaoDict.TryGetValue(nMonsterID, out nGongGaoMark) && 0 != nGongGaoMark;
        }

        
        public static string GetGoodsName(GoodsData goodsData)
        {
            SystemXmlItem systemGoods = null;
            string result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                result = "";
            }
            else
            {
                string strTitle = systemGoods.GetStringValue("Title");
                int nNum = Global.GetEquipExcellencePropNum(goodsData);
                if (nNum > 0)
                {
                    strTitle = string.Format("卓越{0}", strTitle);
                }
                result = strTitle;
            }
            return result;
        }

        
        public static string GetGoodsLogName(GoodsData goodsData)
        {
            SystemXmlItem systemGoods = null;
            string result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                result = "";
            }
            else
            {
                string strTitle = systemGoods.GetStringValue("Title");
                int nNum = Global.GetEquipExcellencePropNum(goodsData);
                if (nNum > 0)
                {
                    strTitle = string.Format("{0}卓越{1}", nNum, strTitle);
                }
                result = strTitle;
            }
            return result;
        }

        
        public static string ModifyGoodsLogName(GoodsData goodsData)
        {
            SystemXmlItem systemGoods = null;
            string result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                result = "";
            }
            else
            {
                string strTitle = systemGoods.GetStringValue("Title");
                int nNum = Global.GetEquipExcellencePropNum(goodsData);
                if (nNum > 0)
                {
                    strTitle = string.Format("{0}卓越{1}", nNum, strTitle);
                }
                else if (Global.logItemDict.ContainsKey(goodsData.GoodsID))
                {
                    return "";
                }
                result = strTitle;
            }
            return result;
        }

        
        public static string FormatUpdateDBGoodsStr(params object[] args)
        {
            string result;
            if (args.Length != 23)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("FormatUpdateDBGoodsStr, 参数个数不对{0}", args.Length), null, true);
                result = null;
            }
            else
            {
                result = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}:{14}:{15}:{16}:{17}:{18}:{19}:{20}:{21}:{22}", args);
            }
            return result;
        }

        
        public static int UpdateGoodsProp(GameClient client, GoodsData gd, UpdateGoodsArgs args = null, bool onLine = true)
        {
            int serverid = onLine ? client.ServerId : GameCoreInterface.getinstance().GetLocalServerId();
            int ret = Global.sendToDB<int, byte[]>(10165, DataHelper.ObjectToBytes<UpdateGoodsArgs>(args), serverid);
            int result;
            if (ret < 0)
            {
                result = -2;
            }
            else
            {
                if (null != gd)
                {
                    args.CopyPropsTo(gd);
                    if (gd.Using > 0 && onLine)
                    {
                        Global.RefreshEquipPropAndNotify(client);
                    }
                }
                result = ret;
            }
            return result;
        }

        
        public static int ModGoodsJewelDBCommand(TCPOutPacketPool pool, GameClient client, GoodsData gd, string jewellist, int binding)
        {
            string[] dbFields = null;
            string strcmd = Global.FormatUpdateDBGoodsStr(new object[]
            {
                client.ClientData.RoleID,
                gd.Id,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                jewellist,
                "*",
                "*",
                "*",
                "*",
                binding,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, 10006, strcmd, out dbFields, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                result = -2;
            }
            else
            {
                gd.Jewellist = jewellist;
                gd.Binding = binding;
                Global.ModRoleGoodsEvent(client, gd, 0, "镶嵌修改", false);
                EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, gd.GoodsID, (long)gd.Id, 0, gd.GCount, "镶嵌修改");
                result = 0;
            }
            return result;
        }

        
        public static int ModGoodsNumDBCommand(TCPOutPacketPool pool, GameClient client, GoodsData gd, int newGoodsNum, int newHint, string goodsFromWhere, bool bIsFromMap = false, bool onLine = true)
        {
            string[] dbFields = null;
            int serverid = onLine ? client.ServerId : GameCoreInterface.getinstance().GetLocalServerId();
            string strcmd = Global.FormatUpdateDBGoodsStr(new object[]
            {
                client.ClientData.RoleID,
                gd.Id,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                newGoodsNum,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, 10006, strcmd, out dbFields, serverid);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                result = -2;
            }
            else
            {
                int addOrSubGoodsNum = newGoodsNum - gd.GCount;
                gd.GCount = newGoodsNum;
                if (onLine)
                {
                    Global.ModRoleGoodsEvent(client, gd, addOrSubGoodsNum, goodsFromWhere, bIsFromMap);
                    EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, gd.GoodsID, (long)gd.Id, addOrSubGoodsNum, newGoodsNum, goodsFromWhere);
                    GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool, client, 3, gd.Id, gd.Using, gd.Site, newGoodsNum, gd.BagIndex, newHint);
                }
                else
                {
                    Global.ModRoleGoodsEvent(client.ClientData.GetRoleDataEx(), gd, addOrSubGoodsNum, goodsFromWhere, bIsFromMap);
                    EventLogManager.AddGoodsEvent(client.ClientData.GetRoleDataEx(), OpTypes.AddOrSub, OpTags.None, gd.GoodsID, (long)gd.Id, addOrSubGoodsNum, newGoodsNum, goodsFromWhere);
                }
                result = 0;
            }
            return result;
        }

        
        public static int ModGoodsStrongDBCommand(TCPOutPacketPool pool, GameClient client, GoodsData gd)
        {
            string[] dbFields = null;
            string strcmd = Global.FormatUpdateDBGoodsStr(new object[]
            {
                client.ClientData.RoleID,
                gd.Id,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                gd.Strong,
                "*",
                "*",
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, 10006, strcmd, out dbFields, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                result = -2;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        public static int AddGoodsDBCommand(TCPOutPacketPool pool, GameClient client, int goodsID, int goodsNum, int quality, string props, int forgeLevel, int binding, int site, string jewelList, bool useOldGrid, int newHint, string goodsFromWhere, string endTime = "1900-01-01 12:00:00", int addPropIndex = 0, int bornIndex = 0, int lucky = 0, int strong = 0, int ExcellenceProperty = 0, int nAppendPropLev = 0, int nEquipChangeLife = 0, List<int> washProps = null, List<int> elementhrtsProps = null, int juHun_level = 0, bool onLine = true)
        {
            int result;
            if (goodsNum <= 0)
            {
                result = 0;
            }
            else
            {
                int dbRet = 0;
                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);
                int addCount = (goodsNum - 1) / gridNum + 1;
                for (int i = 0; i < addCount; i++)
                {
                    int thisTimeNum = gridNum;
                    if (i >= addCount - 1 && goodsNum % gridNum > 0)
                    {
                        thisTimeNum = goodsNum % gridNum;
                    }
                    dbRet = Global.AddGoodsDBCommand_Hook(pool, client, goodsID, thisTimeNum, quality, props, forgeLevel, binding, site, jewelList, useOldGrid, newHint, goodsFromWhere, false, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, false, washProps, elementhrtsProps, "1900-01-01 12:00:00", juHun_level, onLine);
                    if (dbRet < 0)
                    {
                        return dbRet;
                    }
                }
                result = dbRet;
            }
            return result;
        }

        
        public static int AddEffectiveTimeGoodsDBCommand(TCPOutPacketPool pool, GameClient client, int goodsID, int goodsNum, int quality, string props, int forgeLevel, int binding, int site, string jewelList, bool useOldGrid, int newHint, string goodsFromWhere, string startTime, string endTime = "1900-01-01 12:00:00", int addPropIndex = 0, int bornIndex = 0, int lucky = 0, int strong = 0, int ExcellenceProperty = 0, int nAppendPropLev = 0, int nEquipChangeLife = 0, List<int> washProps = null, List<int> elementhrtsProps = null)
        {
            int result;
            if (goodsNum <= 0)
            {
                result = 0;
            }
            else
            {
                int dbRet = 0;
                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);
                int addCount = (goodsNum - 1) / gridNum + 1;
                for (int i = 0; i < addCount; i++)
                {
                    int thisTimeNum = gridNum;
                    if (i >= addCount - 1 && goodsNum % gridNum > 0)
                    {
                        thisTimeNum = goodsNum % gridNum;
                    }
                    dbRet = Global.AddGoodsDBCommand_Hook(pool, client, goodsID, thisTimeNum, quality, props, forgeLevel, binding, site, jewelList, useOldGrid, newHint, goodsFromWhere, false, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, false, washProps, elementhrtsProps, startTime, 0, true);
                    if (dbRet < 0)
                    {
                        return dbRet;
                    }
                }
                result = dbRet;
            }
            return result;
        }

        
        public static int AddGoodsDBCommand_Hook(TCPOutPacketPool pool, GameClient client, int goodsID, int goodsNum, int quality, string props, int forgeLevel, int binding, int site, string jewelList, bool useOldGrid, int newHint, string goodsFromWhere, bool bIsFromMap, string endTime = "1900-01-01 12:00:00", int addPropIndex = 0, int bornIndex = 0, int lucky = 0, int strong = 0, int ExcellenceProperty = 0, int nAppendPropLev = 0, int nEquipChangeLife = 0, bool disableGoodsDefaultCount = false, List<int> washProps = null, List<int> elementhrtsProps = null, string strStartTime = "1900-01-01 12:00:00", int juHun_level = 0, bool onLine = true)
        {
            Global.ProcessMallGoods(client, goodsID, goodsNum);
            int nBakGoodsNum = goodsNum;
            bool RebornFlag = false;
            bool ZuoQiFlag = false;
            bool MountHolyFlag = false;
            if (Global.GetGoodsRebornEquip(goodsID) == 1)
            {
                if (site != 2000 && site != 1)
                {
                    site = 15000;
                }
                RebornFlag = true;
            }
            if (ZuoQiManager.CheckIsZuoQiByGoodsID(goodsID))
            {
                ZuoQiFlag = true;
            }
            if (MountHolyStampManager.CheckIsMountBagByGoodsID(goodsID))
            {
                MountHolyFlag = true;
            }
            if (useOldGrid && (site == 0 || site == 15000 || site == 7000 || site == 11000))
            {
                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                if (gridNum > 1)
                {
                    GoodsData goodsData = null;
                    int startIndex = 0;
                    if (site == 0)
                    {
                        goodsData = Global.GetGoodsByID(client, goodsID, binding, endTime, ref startIndex);
                    }
                    else if (site == 7000)
                    {
                        goodsData = GameManager.FluorescentGemMgr.GetGoodsByID(client, goodsID, binding, strStartTime, endTime, ref startIndex);
                    }
                    else if (site == 11000)
                    {
                        goodsData = ShenShiManager.GetGoodsByID(client, goodsID, binding, strStartTime, endTime, ref startIndex);
                    }
                    else if (site == 15000)
                    {
                        goodsData = RebornEquip.GetGoodsByID(client, goodsID, binding, endTime, ref startIndex);
                    }
                    while (goodsData != null && goodsNum > 0)
                    {
                        if (goodsData.GCount < gridNum)
                        {
                            int newNum = goodsNum + goodsData.GCount;
                            int newGoodsNum;
                            if (newNum > gridNum)
                            {
                                newGoodsNum = gridNum;
                                goodsNum = newNum - gridNum;
                            }
                            else
                            {
                                newGoodsNum = goodsData.GCount + goodsNum;
                                goodsNum = 0;
                            }
                            Global.ModGoodsNumDBCommand(pool, client, goodsData, newGoodsNum, newHint, goodsFromWhere, bIsFromMap, onLine);
                        }
                        if (site == 0)
                        {
                            goodsData = Global.GetGoodsByID(client, goodsID, binding, endTime, ref startIndex);
                        }
                        else if (site == 7000)
                        {
                            goodsData = GameManager.FluorescentGemMgr.GetGoodsByID(client, goodsID, binding, strStartTime, endTime, ref startIndex);
                        }
                        else if (site == 11000)
                        {
                            goodsData = ShenShiManager.GetGoodsByID(client, goodsID, binding, strStartTime, endTime, ref startIndex);
                        }
                        else if (site == 15000)
                        {
                            goodsData = RebornEquip.GetGoodsByID(client, goodsID, binding, endTime, ref startIndex);
                        }
                    }
                }
                if (goodsNum <= 0)
                {
                    return 0;
                }
            }
            int idelBagIndex = 0;
            if (0 == site)
            {
                idelBagIndex = Global.GetIdleSlotOfBagGoods(client);
            }
            else if (2000 == site)
            {
                idelBagIndex = Global.GetIdleSlotOfJinDanGoods(client);
            }
            else if (-1000 == site)
            {
                idelBagIndex = Global.GetIdleSlotOfPortableGoods(client);
            }
            else if (3000 == site)
            {
                idelBagIndex = ElementhrtsManager.GetIdleSlotOfBag(client);
            }
            else if (3001 == site)
            {
                idelBagIndex = ElementhrtsManager.GetIdleSlotOfUsing(client);
            }
            else if (4000 == site)
            {
                idelBagIndex = CallPetManager.GetIdleSlotOfBag(client);
            }
            else if (7000 == site)
            {
                idelBagIndex = GameManager.FluorescentGemMgr.GetIdleSlotOfFluorescentGemBag(client);
                if (idelBagIndex < 0 && onLine)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(124, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    return 0;
                }
            }
            else if (8000 == site)
            {
                idelBagIndex = SingletonTemplate<SoulStoneManager>.Instance().GetIdleSlotOfBag(client);
                if (idelBagIndex < 0 && onLine)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(125, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    return 0;
                }
            }
            else if (11000 == site)
            {
                idelBagIndex = ShenShiManager.GetIdleSlotOfFuWenBagGoods(client);
                if (idelBagIndex < 0 && onLine)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(2604, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    return 0;
                }
            }
            else if (12000 == site)
            {
                idelBagIndex = ZuoQiManager.GetIdleSlotOfZuoQiStoreGoods(client);
                if (idelBagIndex < 0 && onLine)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(4002, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    return 0;
                }
            }
            else if (15000 == site)
            {
                idelBagIndex = RebornEquip.GetIdleSlotOfRebornGoods(client);
                if (idelBagIndex < 0 && onLine)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(7000, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    return 0;
                }
            }
            else if (16000 == site)
            {
                idelBagIndex = MountHolyStampManager.GetIdleSlotOfGoods(client);
                if (idelBagIndex < 0 && onLine)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(8000, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    return 0;
                }
            }
            int result;
            if (idelBagIndex < 0 && (3000 == site || 3001 == site) && onLine)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(126, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                result = 0;
            }
            else
            {
                if (!disableGoodsDefaultCount)
                {
                    if (goodsNum <= 1)
                    {
                        int goodsDefCount = Global.GetGoodsDefaultCount(goodsID);
                        if (goodsDefCount > 0)
                        {
                            goodsNum = Global.GMax(1, goodsDefCount);
                        }
                    }
                }
                string newEndTime = endTime.Replace(":", "$");
                string newStartTime = strStartTime.Replace(":", "$");
                string[] dbFields = null;
                int serverid = onLine ? client.ServerId : GameCoreInterface.getinstance().GetLocalServerId();
                string strcmd;
                if (RebornFlag || ZuoQiFlag || MountHolyFlag)
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}:{14}:{15}:{16}:{17}:{18}", new object[]
                    {
                        client.ClientData.RoleID,
                        goodsID,
                        goodsNum,
                        quality,
                        props,
                        forgeLevel,
                        binding,
                        site,
                        jewelList,
                        idelBagIndex,
                        newStartTime,
                        newEndTime,
                        addPropIndex,
                        bornIndex,
                        lucky,
                        strong,
                        0,
                        nAppendPropLev,
                        nEquipChangeLife
                    });
                }
                else
                {
                    strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}:{14}:{15}:{16}:{17}:{18}", new object[]
                    {
                        client.ClientData.RoleID,
                        goodsID,
                        goodsNum,
                        quality,
                        props,
                        forgeLevel,
                        binding,
                        site,
                        jewelList,
                        idelBagIndex,
                        newStartTime,
                        newEndTime,
                        addPropIndex,
                        bornIndex,
                        lucky,
                        strong,
                        ExcellenceProperty,
                        nAppendPropLev,
                        nEquipChangeLife
                    });
                }
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, 10005, strcmd, out dbFields, serverid);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    result = -1;
                }
                else if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[0]) < 0)
                {
                    result = Convert.ToInt32(dbFields[0]);
                }
                else
                {
                    if (onLine)
                    {
                        Global.AddRoleGoodsEvent(client, Convert.ToInt32(dbFields[0]), goodsID, goodsNum, binding, quality, forgeLevel, jewelList, site, endTime, goodsNum, goodsFromWhere, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
                    }
                    else
                    {
                        Global.AddRoleGoodsEvent(client.ClientData.GetRoleDataEx(), Convert.ToInt32(dbFields[0]), goodsID, goodsNum, binding, quality, forgeLevel, jewelList, site, endTime, goodsNum, goodsFromWhere, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
                    }
                    GoodsData gd = null;
                    if (site == 0)
                    {
                        int newExcellence = ExcellenceProperty;
                        if (ZuoQiManager.CheckIsZuoQiByGoodsID(goodsID))
                        {
                            newExcellence = 0;
                        }
                        gd = Global.AddGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime, addPropIndex, bornIndex, lucky, strong, newExcellence, nAppendPropLev, nEquipChangeLife, idelBagIndex, washProps, elementhrtsProps, juHun_level);
                        if (ZuoQiManager.CheckIsZuoQiByGoodsID(gd.GoodsID))
                        {
                            if (null == client.ClientData.MountList)
                            {
                                client.ClientData.MountList = new List<MountData>();
                            }
                            bool needAdd = true;
                            foreach (MountData item in client.ClientData.MountList)
                            {
                                if (item.GoodsID == gd.GoodsID)
                                {
                                    needAdd = false;
                                    break;
                                }
                            }
                            if (needAdd)
                            {
                                client.ClientData.MountList.Add(new MountData
                                {
                                    GoodsID = gd.GoodsID,
                                    IsNew = true
                                });
                                Global.sendToDB<int, string>(20320, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, gd.GoodsID, 1), client.ServerId);
                                client.delayExecModule.SetDelayExecProc(new DelayExecProcIds[]
                                {
                                    DelayExecProcIds.RecalcProps,
                                    DelayExecProcIds.NotifyRefreshProps
                                });
                            }
                            List<int> addWashProp = new List<int>();
                            addWashProp.AddRange(ZuoQiManager.getInstance().CalZhuoYueByID(ExcellenceProperty));
                            if (addWashProp.Count > 0)
                            {
                                if (null == washProps)
                                {
                                    washProps = new List<int>();
                                }
                                washProps.AddRange(addWashProp);
                            }
                        }
                        if (null != washProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid
                            };
                            args.WashProps = washProps;
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                        if (null != elementhrtsProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid
                            };
                            args.ElementhrtsProps = elementhrtsProps;
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                        if (0 != juHun_level)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid,
                                JuHunProps = juHun_level
                            };
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                        if (onLine)
                        {
                            GameManager.ClientMgr.NotifyUpdateWeights(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (site == -1000)
                    {
                        gd = Global.AddPortableGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
                    }
                    else if (site == 2000)
                    {
                        if (washProps == null && RebornFlag)
                        {
                            int newExcellence = ExcellenceProperty;
                            List<int> addWashProp = new List<int>();
                            addWashProp.AddRange(RebornEquip.CalZhuoYueAttrByID(newExcellence));
                            if (addWashProp.Count > 0)
                            {
                                if (null == washProps)
                                {
                                    washProps = new List<int>();
                                }
                                washProps.AddRange(addWashProp);
                            }
                            ExcellenceProperty = 0;
                        }
                        if (null != washProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid
                            };
                            args.WashProps = washProps;
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                        gd = Global.AddJinDanGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, washProps);
                    }
                    else if (site == 6000)
                    {
                        gd = FashionManager.getInstance().AddFashionGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
                    }
                    else if (site == 9000)
                    {
                        gd = OrnamentManager.getInstance().AddOrnamentGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
                    }
                    else if (site == 7000)
                    {
                        gd = GameManager.FluorescentGemMgr.AddFluorescentGemData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex, null);
                    }
                    else if (site == 8000)
                    {
                        gd = SingletonTemplate<SoulStoneManager>.Instance().AddSoulStoneGoods(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex, null);
                        if (null == elementhrtsProps)
                        {
                            elementhrtsProps = new List<int>();
                            elementhrtsProps.Add(1);
                            elementhrtsProps.Add(0);
                        }
                        if (null != elementhrtsProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid
                            };
                            args.ElementhrtsProps = elementhrtsProps;
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                    }
                    else if (site == 3000 || site == 3001)
                    {
                        gd = ElementhrtsManager.AddElementhrtsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, idelBagIndex, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
                        if (null == elementhrtsProps)
                        {
                            elementhrtsProps = new List<int>();
                            elementhrtsProps.Add(1);
                            elementhrtsProps.Add(0);
                        }
                        if (null != elementhrtsProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid
                            };
                            args.ElementhrtsProps = elementhrtsProps;
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                    }
                    else if (site == 4000)
                    {
                        gd = CallPetManager.AddPetData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, idelBagIndex, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
                    }
                    else if (site == 11000)
                    {
                        gd = ShenShiManager.AddFuWenGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex, null);
                    }
                    else if (site == 1)
                    {
                        if (washProps == null && RebornFlag)
                        {
                            int newExcellence = ExcellenceProperty;
                            List<int> addWashProp = new List<int>();
                            addWashProp.AddRange(RebornEquip.CalZhuoYueAttrByID(newExcellence));
                            if (addWashProp.Count > 0)
                            {
                                if (null == washProps)
                                {
                                    washProps = new List<int>();
                                }
                                washProps.AddRange(addWashProp);
                            }
                            ExcellenceProperty = 0;
                        }
                        if (null != washProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid
                            };
                            args.WashProps = washProps;
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                        GoodsUtil.AddGoodsDataToBag(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex, washProps);
                    }
                    else if (site == 12000)
                    {
                        gd = ZuoQiManager.AddZuoQiGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex, washProps);
                        if (null != washProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid,
                                WashProps = washProps,
                                ElementhrtsProps = null
                            };
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                    }
                    else if (site == 15000)
                    {
                        gd = RebornEquip.AddRebornGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex, null);
                        if (washProps == null && RebornEquip.IsRebornEquip(goodsID))
                        {
                            int newExcellence = ExcellenceProperty;
                            List<int> addWashProp = new List<int>();
                            addWashProp.AddRange(RebornEquip.CalZhuoYueAttrByID(newExcellence));
                            if (addWashProp.Count > 0)
                            {
                                if (null == washProps)
                                {
                                    washProps = new List<int>();
                                }
                                washProps.AddRange(addWashProp);
                            }
                        }
                        if (null != washProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid
                            };
                            args.WashProps = washProps;
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                        if (null != elementhrtsProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid
                            };
                            args.ElementhrtsProps = elementhrtsProps;
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                        if (0 != juHun_level)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid,
                                JuHunProps = juHun_level
                            };
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                        if (RebornFlag)
                        {
                            gd.ExcellenceInfo = 0;
                        }
                        if (onLine)
                        {
                            GameManager.ClientMgr.NotifyUpdateWeights(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (site == 16000)
                    {
                        gd = MountHolyStampManager.AddGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex, null);
                        if (MountHolyFlag)
                        {
                            gd.ExcellenceInfo = 0;
                        }
                        if (null == elementhrtsProps)
                        {
                            elementhrtsProps = new List<int>();
                            elementhrtsProps.Add(1);
                            elementhrtsProps.Add(0);
                        }
                        if (null != elementhrtsProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid
                            };
                            args.ElementhrtsProps = elementhrtsProps;
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                        if (null == washProps)
                        {
                            washProps = MountHolyStampManager.getInstance().SetHolyStampAttr(gd);
                        }
                        if (null != washProps)
                        {
                            int dbid = Convert.ToInt32(dbFields[0]);
                            UpdateGoodsArgs args = new UpdateGoodsArgs
                            {
                                RoleID = client.ClientData.RoleID,
                                DbID = dbid
                            };
                            args.WashProps = washProps;
                            Global.UpdateGoodsProp(client, gd, args, onLine);
                        }
                    }
                    if (site == 0 && onLine)
                    {
                        ProcessTask.Process(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -1, -1, goodsID, TaskTypes.BuySomething, null, 0, -1L, null);
                    }
                    if (null != gd)
                    {
                        string strCurrEnv = "系统";
                        if (bIsFromMap)
                        {
                            strCurrEnv = Global.GetMapName(client.ClientData.MapCode);
                        }
                        GameManager.logDBCmdMgr.AddDBLogInfo(Convert.ToInt32(dbFields[0]), Global.ModifyGoodsLogName(gd), goodsFromWhere, strCurrEnv, client.ClientData.RoleName, "增加", nBakGoodsNum, client.ClientData.ZoneID, client.strUserID, -1, serverid, null);
                        EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsID, (long)gd.Id, goodsNum, gd.GCount, goodsFromWhere);
                    }
                    if (onLine)
                    {
                        if (RebornFlag || ZuoQiFlag || MountHolyFlag)
                        {
                            GameManager.ClientMgr.NotifySelfAddGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, newHint, newEndTime, addPropIndex, bornIndex, lucky, strong, 0, nAppendPropLev, nEquipChangeLife, idelBagIndex, washProps, elementhrtsProps, juHun_level, props);
                        }
                        else
                        {
                            GameManager.ClientMgr.NotifySelfAddGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, newHint, newEndTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex, washProps, elementhrtsProps, juHun_level, props);
                        }
                    }
                    result = Convert.ToInt32(dbFields[0]);
                }
            }
            return result;
        }

        
        public static void ProcessMallGoods(GameClient client, int goodsID, int goodsNum)
        {
            if (goodsNum > 0)
            {
                MallGoodsCacheItem mallGoodsCacheItem = MallGoodsMgr.GetMallGoodsCacheItem(goodsID);
                if (null != mallGoodsCacheItem)
                {
                    int yuanBaoPrice = mallGoodsCacheItem.Price;
                    if (yuanBaoPrice > 0)
                    {
                        client.ClientData.TotalGoodsMoney += yuanBaoPrice * goodsNum;
                        Global.ProcessWarningMallGoods(client);
                    }
                }
            }
        }

        
        public static void ProcessWarningMallGoods(GameClient client)
        {
            if (client.ClientData.TotalGoodsMoney > 0)
            {
                int warningMoneyMax = GameManager.GameConfigMgr.GetGameConfigItemInt("warning-money-max", 5000);
                if (client.ClientData.TotalGoodsMoney - client.ClientData.ReportWarningGoodsMoney >= warningMoneyMax)
                {
                    int reportGoodsMoney = client.ClientData.TotalGoodsMoney - client.ClientData.ReportWarningGoodsMoney;
                    client.ClientData.ReportWarningGoodsMoney = client.ClientData.TotalGoodsMoney;
                    GameManager.DBCmdMgr.AddDBCmd(10082, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.TotalUsedMoney, reportGoodsMoney), null, client.ServerId);
                }
            }
        }

        
        public static int GetTotalGoodsCountByID(GameClient client, int goodsID)
        {
            int result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = 0;
            }
            else
            {
                int ret = 0;
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID)
                        {
                            if (!Global.IsGoodsTimeOver(client.ClientData.GoodsDataList[i]) && !Global.IsGoodsNotReachStartTime(client.ClientData.GoodsDataList[i]))
                            {
                                ret += client.ClientData.GoodsDataList[i].GCount;
                            }
                        }
                    }
                }
                result = ret;
            }
            return result;
        }

        
        public static int GetTotalGoodsNotUsingCountByID(GameClient client, int goodsID)
        {
            int result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = 0;
            }
            else
            {
                int ret = 0;
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID)
                        {
                            if (client.ClientData.GoodsDataList[i].Using <= 0)
                            {
                                if (!Global.IsGoodsTimeOver(client.ClientData.GoodsDataList[i]) && !Global.IsGoodsNotReachStartTime(client.ClientData.GoodsDataList[i]))
                                {
                                    ret += client.ClientData.GoodsDataList[i].GCount;
                                }
                            }
                        }
                    }
                }
                result = ret;
            }
            return result;
        }

        
        public static int GetTotalNotBindGoodsCountByID(GameClient client, int goodsID)
        {
            int result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = 0;
            }
            else
            {
                int ret = 0;
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID)
                        {
                            if (client.ClientData.GoodsDataList[i].Binding <= 0)
                            {
                                if (!Global.IsGoodsTimeOver(client.ClientData.GoodsDataList[i]) && !Global.IsGoodsNotReachStartTime(client.ClientData.GoodsDataList[i]))
                                {
                                    ret += client.ClientData.GoodsDataList[i].GCount;
                                }
                            }
                        }
                    }
                }
                result = ret;
            }
            return result;
        }

        
        public static int GetTotalBindGoodsCountByID(GameClient client, int goodsID)
        {
            int result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = 0;
            }
            else
            {
                int ret = 0;
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID)
                        {
                            if (client.ClientData.GoodsDataList[i].Binding >= 1)
                            {
                                if (!Global.IsGoodsTimeOver(client.ClientData.GoodsDataList[i]) && !Global.IsGoodsNotReachStartTime(client.ClientData.GoodsDataList[i]))
                                {
                                    ret += client.ClientData.GoodsDataList[i].GCount;
                                }
                            }
                        }
                    }
                }
                result = ret;
            }
            return result;
        }

        
        public static List<GoodsData> GetUsingGoodsList(GameClient client, int binding)
        {
            List<GoodsData> result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                List<GoodsData> goodsDataList = new List<GoodsData>();
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Binding == binding)
                        {
                            if (client.ClientData.GoodsDataList[i].Using > 0)
                            {
                                goodsDataList.Add(client.ClientData.GoodsDataList[i]);
                            }
                        }
                    }
                }
                result = goodsDataList;
            }
            return result;
        }

        
        public static List<GoodsData> GetUsingGoodsList(SafeClientData clientData)
        {
            List<GoodsData> result;
            if (null == clientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                List<GoodsData> goodsDataList = new List<GoodsData>();
                lock (clientData.GoodsDataList)
                {
                    for (int i = 0; i < clientData.GoodsDataList.Count; i++)
                    {
                        if (clientData.GoodsDataList[i].Using > 0 && GoodsUtil.IsVisiableEquip(clientData.GoodsDataList[i].GoodsID))
                        {
                            goodsDataList.Add(clientData.GoodsDataList[i]);
                        }
                    }
                }
                result = goodsDataList;
            }
            return result;
        }

        
        public static List<GoodsData> GetUsingWeaponGoods(GameClient client)
        {
            List<GoodsData> result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                List<GoodsData> lGood = new List<GoodsData>();
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using > 0)
                        {
                            int goodsCatetoriy = Global.GetGoodsCatetoriy(client.ClientData.GoodsDataList[i].GoodsID);
                            if (11 == goodsCatetoriy || 12 == goodsCatetoriy || 13 == goodsCatetoriy || 14 == goodsCatetoriy || 15 == goodsCatetoriy || 16 == goodsCatetoriy || 19 == goodsCatetoriy || 20 == goodsCatetoriy || 17 == goodsCatetoriy || 21 == goodsCatetoriy)
                            {
                                lGood.Add(client.ClientData.GoodsDataList[i]);
                            }
                        }
                    }
                }
                if (lGood.Count<GoodsData>() > 0)
                {
                    result = lGood;
                }
                else
                {
                    result = null;
                }
            }
            return result;
        }

        
        public static List<GoodsData> GetUsingAttackWeaponGoods(GameClient client)
        {
            List<GoodsData> result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                List<GoodsData> lGood = new List<GoodsData>();
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using > 0)
                        {
                            int goodsCatetoriy = Global.GetGoodsCatetoriy(client.ClientData.GoodsDataList[i].GoodsID);
                            if (11 == goodsCatetoriy || 12 == goodsCatetoriy || 13 == goodsCatetoriy || 14 == goodsCatetoriy || 15 == goodsCatetoriy || 16 == goodsCatetoriy || 17 == goodsCatetoriy || 19 == goodsCatetoriy)
                            {
                                lGood.Add(client.ClientData.GoodsDataList[i]);
                            }
                        }
                    }
                }
                if (lGood.Count<GoodsData>() > 0)
                {
                    result = lGood;
                }
                else
                {
                    result = null;
                }
            }
            return result;
        }

        
        public static List<GoodsData> GetNotUsingGoodsList(GameClient client)
        {
            List<GoodsData> result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                List<GoodsData> goodsDataList = new List<GoodsData>();
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using <= 0)
                        {
                            goodsDataList.Add(client.ClientData.GoodsDataList[i]);
                        }
                    }
                }
                result = goodsDataList;
            }
            return result;
        }

        
        public static List<GoodsData> GetFallGoodsList(GameClient client)
        {
            List<GoodsData> result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = null;
            }
            else
            {
                List<GoodsData> goodsDataList = new List<GoodsData>();
                SystemXmlItem systemGoods = null;
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using <= 0)
                        {
                            if (client.ClientData.GoodsDataList[i].Binding <= 0)
                            {
                                systemGoods = null;
                                if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(client.ClientData.GoodsDataList[i].GoodsID, out systemGoods))
                                {
                                    goodsDataList.Add(client.ClientData.GoodsDataList[i]);
                                }
                            }
                        }
                    }
                }
                result = goodsDataList;
            }
            return result;
        }

        
        public static void NotifyChangeEquip(TCPManager tcpMgr, TCPOutPacketPool pool, GameClient client, GoodsData goodsData, int refreshNow)
        {
            SystemXmlItem systemGoods = null;
            if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                int category = systemGoods.GetIntValue("Categoriy", -1);
                if ((category >= 0 && category < 49) || category == 340)
                {
                    GameManager.ClientMgr.NotifyOthersChangeEquip(tcpMgr.MySocketListener, pool, client, goodsData, refreshNow, null);
                    if (client.ClientData.HorseDbID > 0)
                    {
                        HorseData horseData = Global.GetHorseDataByDbID(client, client.ClientData.HorseDbID);
                        if (null != horseData)
                        {
                            List<object> objsList = Global.GetAll9Clients(client);
                            GameManager.ClientMgr.NotifyHorseCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0, 1, horseData.DbID, horseData.HorseID, horseData.BodyID, objsList);
                        }
                    }
                }
            }
        }

        
        public static int GetGoodsDataPrice(GoodsData goodsData)
        {
            int result;
            if (null == goodsData)
            {
                result = 0;
            }
            else if (goodsData.GCount <= 0)
            {
                result = 0;
            }
            else
            {
                SystemXmlItem systemGoods = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                {
                    result = 0;
                }
                else
                {
                    int priceTwo = systemGoods.GetIntValue("PriceTwo", -1);
                    int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                    if (categoriy < 0 || categoriy > 49)
                    {
                        if (Global.GetGoodsUsingNum(goodsData.GoodsID) <= 1)
                        {
                            result = (int)((double)priceTwo / 5.0) * goodsData.GCount;
                        }
                        else
                        {
                            result = (int)((double)priceTwo / 5.0);
                        }
                    }
                    else
                    {
                        double[] equipPropsArray = systemGoods.GetDoubleArrayValue("EquipProps", ',');
                        if (equipPropsArray.Length >= 2)
                        {
                            double fMaxStrong = equipPropsArray[0];
                            if (fMaxStrong <= 0.001)
                            {
                                result = 0;
                            }
                            else
                            {
                                int totalPrice = (int)((double)priceTwo / 5.0 * (fMaxStrong - (double)goodsData.Strong) / fMaxStrong);
                                if (Global.GetGoodsUsingNum(goodsData.GoodsID) <= 1)
                                {
                                    totalPrice *= goodsData.GCount;
                                }
                                result = totalPrice;
                            }
                        }
                        else
                        {
                            result = 0;
                        }
                    }
                }
            }
            return result;
        }

        
        public static int GetGoodsDataZaiZao(GoodsData goodsData)
        {
            int result;
            if (null == goodsData)
            {
                result = 0;
            }
            else if (goodsData.GCount <= 0)
            {
                result = 0;
            }
            else
            {
                SystemXmlItem systemGoods = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                {
                    result = 0;
                }
                else
                {
                    int zaiZao = systemGoods.GetIntValue("ChangeZaiZao", -1);
                    result = zaiZao * goodsData.GCount;
                }
            }
            return result;
        }

        
        public static int GetGoodsDataJingYuan(GoodsData goodsData)
        {
            int result;
            if (null == goodsData)
            {
                result = 0;
            }
            else if (goodsData.GCount <= 0)
            {
                result = 0;
            }
            else
            {
                SystemXmlItem systemGoods = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                {
                    result = 0;
                }
                else
                {
                    int jingYuan = systemGoods.GetIntValue("ChangeJinYuan", -1);
                    result = jingYuan * goodsData.GCount;
                }
            }
            return result;
        }

        
        public static void ResetBagAllGoods(GameClient client, bool notifyClient = true)
        {
            byte[] bytesCmd = null;
            if (client.ClientData.GoodsDataList != null)
            {
                lock (client.ClientData.GoodsDataList)
                {
                    Dictionary<string, GoodsData> oldGoodsDict = new Dictionary<string, GoodsData>();
                    List<GoodsData> toRemovedGoodsDataList = new List<GoodsData>();
                    List<GoodsData> MoveGoodsDataList = new List<GoodsData>();
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using <= 0)
                        {
                            if (RebornEquip.IsRebornType(client.ClientData.GoodsDataList[i].GoodsID))
                            {
                                MoveGoodsDataList.Add(client.ClientData.GoodsDataList[i]);
                            }
                            client.ClientData.GoodsDataList[i].BagIndex = 0;
                            int gridNum = Global.GetGoodsGridNumByID(client.ClientData.GoodsDataList[i].GoodsID);
                            if (gridNum > 1)
                            {
                                GoodsData oldGoodsData = null;
                                string key = string.Format("{0}_{1}_{2}_{3}", new object[]
                                {
                                    client.ClientData.GoodsDataList[i].GoodsID,
                                    client.ClientData.GoodsDataList[i].Binding,
                                    Global.DateTimeTicks(client.ClientData.GoodsDataList[i].Starttime),
                                    Global.DateTimeTicks(client.ClientData.GoodsDataList[i].Endtime)
                                });
                                if (oldGoodsDict.TryGetValue(key, out oldGoodsData))
                                {
                                    int toAddNum = Global.GMin(gridNum - oldGoodsData.GCount, client.ClientData.GoodsDataList[i].GCount);
                                    oldGoodsData.GCount += toAddNum;
                                    client.ClientData.GoodsDataList[i].GCount -= toAddNum;
                                    client.ClientData.GoodsDataList[i].BagIndex = 1;
                                    oldGoodsData.BagIndex = 1;
                                    if (!Global.ResetBagGoodsData(client, client.ClientData.GoodsDataList[i]))
                                    {
                                        break;
                                    }
                                    EventLogManager.AddGoodsEvent(client, OpTypes.Sort, OpTags.None, oldGoodsData.GoodsID, (long)oldGoodsData.Id, toAddNum, oldGoodsData.GCount, "整理背包");
                                    EventLogManager.AddGoodsEvent(client, OpTypes.Sort, OpTags.None, client.ClientData.GoodsDataList[i].GoodsID, (long)client.ClientData.GoodsDataList[i].Id, -toAddNum, client.ClientData.GoodsDataList[i].GCount, "整理背包");
                                    if (oldGoodsData.GCount >= gridNum)
                                    {
                                        if (client.ClientData.GoodsDataList[i].GCount > 0)
                                        {
                                            oldGoodsDict[key] = client.ClientData.GoodsDataList[i];
                                        }
                                        else
                                        {
                                            oldGoodsDict.Remove(key);
                                            toRemovedGoodsDataList.Add(client.ClientData.GoodsDataList[i]);
                                        }
                                    }
                                    else if (client.ClientData.GoodsDataList[i].GCount <= 0)
                                    {
                                        toRemovedGoodsDataList.Add(client.ClientData.GoodsDataList[i]);
                                    }
                                }
                                else
                                {
                                    oldGoodsDict[key] = client.ClientData.GoodsDataList[i];
                                }
                            }
                        }
                    }
                    for (int i = 0; i < toRemovedGoodsDataList.Count; i++)
                    {
                        client.ClientData.GoodsDataList.Remove(toRemovedGoodsDataList[i]);
                    }
                    for (int i = 0; i < MoveGoodsDataList.Count; i++)
                    {
                        client.ClientData.GoodsDataList.Remove(MoveGoodsDataList[i]);
                        int BaseIndex = RebornEquip.GetIdleSlotOfRebornGoods(client);
                        MoveGoodsDataList[i].BagIndex = BaseIndex;
                        MoveGoodsDataList[i].Site = 15000;
                        if (client.ClientData.RebornGoodsDataList == null)
                        {
                            List<GoodsData> RebornGoodsDataList = new List<GoodsData>();
                            RebornGoodsDataList.Add(MoveGoodsDataList[i]);
                            client.ClientData.RebornGoodsDataList = RebornGoodsDataList;
                        }
                        else
                        {
                            client.ClientData.RebornGoodsDataList.Add(MoveGoodsDataList[i]);
                        }
                        string modGoodsCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
                        {
                            client.ClientData.RoleID,
                            3,
                            MoveGoodsDataList[i].Id,
                            MoveGoodsDataList[i].GoodsID,
                            MoveGoodsDataList[i].Using,
                            MoveGoodsDataList[i].Site,
                            MoveGoodsDataList[i].GCount,
                            MoveGoodsDataList[i].BagIndex,
                            ""
                        });
                        if (TCPProcessCmdResults.RESULT_OK != Global.ModifyGoodsByCmdParams(client, modGoodsCmd, "客户端修改", null))
                        {
                        }
                    }
                    client.ClientData.GoodsDataList.Sort((GoodsData x, GoodsData y) => y.GoodsID - x.GoodsID);
                    int index = 0;
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using <= 0)
                        {
                            if (GameManager.Flag_OptimizationBagReset)
                            {
                                bool godosCountChanged = client.ClientData.GoodsDataList[i].BagIndex > 0;
                                client.ClientData.GoodsDataList[i].BagIndex = index++;
                                if (godosCountChanged)
                                {
                                    if (!Global.ResetBagGoodsData(client, client.ClientData.GoodsDataList[i]))
                                    {
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                client.ClientData.GoodsDataList[i].BagIndex = index++;
                                if (!Global.ResetBagGoodsData(client, client.ClientData.GoodsDataList[i]))
                                {
                                    break;
                                }
                            }
                        }
                    }
                    bytesCmd = DataHelper.ObjectToBytes<List<GoodsData>>(client.ClientData.GoodsDataList);
                }
                if (notifyClient)
                {
                    TCPOutPacket tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(Global._TCPManager.TcpOutPacketPool, bytesCmd, 0, bytesCmd.Length, 235);
                    Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true);
                }
            }
        }

        
        public static int GetGoodsCatetoriy(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = 0;
            }
            else
            {
                result = systemGoods.GetIntValue("Categoriy", -1);
            }
            return result;
        }

        
        public static int GetGoodsRebornEquip(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = 0;
            }
            else
            {
                result = systemGoods.GetIntValue("RebornEquip", -1);
            }
            return result;
        }

        
        public static int GetGoodsShouShiSuitID(int goodsID)
        {
            int suit = 0;
            lock (Global.GoodsSuitCacheDict)
            {
                if (!Global.GoodsSuitCacheDict.TryGetValue(goodsID, out suit))
                {
                    SystemXmlItem systemGoods = null;
                    if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
                    {
                        suit = systemGoods.GetIntValue("ShouShiSuitID", -1);
                    }
                    else
                    {
                        suit = -1;
                    }
                    Global.GoodsSuitCacheDict.Add(goodsID, suit);
                }
            }
            return suit;
        }

        
        public static void ClearCachedGoodsShouShiSuitID()
        {
            lock (Global.GoodsSuitCacheDict)
            {
                Global.GoodsSuitCacheDict.Clear();
            }
        }

        
        public static int GetGoodsQualityID(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = -1;
            }
            else
            {
                result = systemGoods.GetIntValue("QualityID", -1);
            }
            return result;
        }

        
        public static bool IsCanEquipOrUseByOccupation(GameClient client, int nGoodsID)
        {
            return Global.IsCanEquipOrUseByOccupation(client.ClientData.Occupation, nGoodsID);
        }

        
        public static bool IsCanEquipOrUseByOccupation(int nRoleOccu, int nGoodsID)
        {
            SystemXmlItem systemGoods = null;
            bool result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(nGoodsID, out systemGoods))
            {
                result = false;
            }
            else
            {
                int nGoodsToOccupation = systemGoods.GetIntValue("ToOccupation", -1);
                result = (nGoodsToOccupation == -1 || 0 != (1 << Global.CalcOriginalOccupationID(nRoleOccu) & nGoodsToOccupation));
            }
            return result;
        }

        
        public static int GetMainOccupationByGoodsID(int nGoodsID)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(nGoodsID, out systemGoods))
            {
                result = 0;
            }
            else
            {
                result = systemGoods.GetIntValue("MainOccupation", -1);
            }
            return result;
        }

        
        public static bool IsRoleOccupationMatchGoods(GameClient client, int goodID)
        {
            return Global.IsRoleOccupationMatchGoods(client.ClientData.Occupation, goodID);
        }

        
        public static bool IsRoleOccupationMatchGoods(int nOccu, int goodID)
        {
            SystemXmlItem sytemGoodsItem = null;
            bool result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodID, out sytemGoodsItem))
            {
                LogManager.WriteLog(LogTypes.Warning, string.Format("此物品不存在，请检查配置文件: GoodsID={0}", goodID), null, true);
                result = false;
            }
            else
            {
                int toOccupation = Global.GetMainOccupationByGoodsID(goodID);
                if (toOccupation == -1)
                {
                    result = true;
                }
                else
                {
                    int nOcc = Global.CalcOriginalOccupationID(nOccu);
                    result = (toOccupation == nOcc);
                }
            }
            return result;
        }

        
        public static bool ResetBagGoodsData(GameClient client, GoodsData goodsData)
        {
            string[] dbFields = null;
            string strcmd = Global.FormatUpdateDBGoodsStr(new object[]
            {
                client.ClientData.RoleID,
                goodsData.Id,
                goodsData.Using,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                goodsData.GCount,
                "*",
                goodsData.BagIndex,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10006, strcmd, out dbFields, client.ServerId);
            bool result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = false;
            }
            else if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                result = false;
            }
            else
            {
                Global.NoDBLogModRoleGoodsEvent(client, goodsData, 0, "重置背包索引", false);
                EventLogManager.AddGoodsEvent(client, OpTypes.Sort, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, "重置背包索引");
                result = true;
            }
            return result;
        }

        
        public static void CheckGoodsDataValid(GameClient client)
        {
            RoleManager.getInstance().RestoreRoleOccGoodsList(client);
            if (client.ClientData.DamonGoodsDataList == null || client.ClientData.DamonGoodsDataList.Count == 0)
            {
                client.ClientData.DamonGoodsDataList = new List<GoodsData>();
                DamonMgr.AddOldDamonGoodsData(client);
            }
            if (client.ClientData.PaiZhuDamonGoodsDataList == null || client.ClientData.PaiZhuDamonGoodsDataList.Count == 0)
            {
                client.ClientData.PaiZhuDamonGoodsDataList = new List<GoodsData>();
                JingLingYaoSaiManager.AddOldPaiZhuDamonGoodsData(client);
            }
            if (client.ClientSocket.IsKuaFuLogin)
            {
            }
            if (client.ClientData.GoodsDataList != null)
            {
                lock (client.ClientData.GoodsDataList)
                {
                    List<GoodsData> toRemovedGoodsDataList = new List<GoodsData>();
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        GoodsData goodsData = client.ClientData.GoodsDataList[i];
                        if (!GameManager.SystemGoods.SystemXmlItemDict.ContainsKey(goodsData.GoodsID))
                        {
                            toRemovedGoodsDataList.Add(goodsData);
                        }
                    }
                    for (int i = 0; i < toRemovedGoodsDataList.Count; i++)
                    {
                        GoodsData goodsData = toRemovedGoodsDataList[i];
                        client.ClientData.GoodsDataList.Remove(goodsData);
                    }
                }
            }
        }

        
        public static bool BatchAddGoods(GameClient client, int goodsID, int goodsNum, int binding, string goodsFromWhere)
        {
            bool result;
            if (goodsNum <= 0)
            {
                result = false;
            }
            else
            {
                bool ret = true;
                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);
                int addCount = (goodsNum - 1) / gridNum + 1;
                for (int i = 0; i < addCount; i++)
                {
                    int thisTimeNum = gridNum;
                    if (i >= addCount - 1 && goodsNum % gridNum > 0)
                    {
                        thisTimeNum = goodsNum % gridNum;
                    }
                    int dbRet = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsID, thisTimeNum, 0, "", 0, binding, 0, "", true, 1, goodsFromWhere, "1900-01-01 12:00:00", 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
                    if (dbRet < 0)
                    {
                        ret = false;
                        break;
                    }
                }
                result = ret;
            }
            return result;
        }

        
        public static GoodsData GetNewGoodsData(int goodsID, int binding)
        {
            int maxStrong = 0;
            int lucky = 0;
            return Global.GetNewGoodsData(goodsID, 1, 0, 0, binding, 0, lucky, maxStrong, 0, 0, 0);
        }

        
        public static GoodsData GetNewGoodsData(int goodsID, int gcount, int quality, int forgeLevel, int binding, int bornIndex, int lucky, int strong, int nExcellenceInfo = 0, int nAppendPropLev = 0, int nChangeLife = 0)
        {
            return new GoodsData
            {
                Id = -1,
                GoodsID = goodsID,
                Using = 0,
                Forge_level = forgeLevel,
                Starttime = "1900-01-01 12:00:00",
                Endtime = "1900-01-01 12:00:00",
                Site = 0,
                Quality = quality,
                Props = "",
                GCount = gcount,
                Binding = binding,
                Jewellist = "",
                BagIndex = 0,
                SaleMoney1 = 0,
                SaleYuanBao = 0,
                SaleYinPiao = 0,
                AddPropIndex = 0,
                BornIndex = bornIndex,
                Lucky = lucky,
                Strong = strong,
                ExcellenceInfo = nExcellenceInfo,
                AppendPropLev = nAppendPropLev,
                ChangeLifeLevForEquip = nChangeLife
            };
        }

        
        public static GoodsData CopyGoodsData(GoodsData oldGoodsData)
        {
            return new GoodsData(oldGoodsData);
        }

        
        public static long DateTimeTicks(string strDateTime)
        {
            try
            {
                DateTime dt;
                if (!DateTime.TryParse(strDateTime, out dt))
                {
                    return 0L;
                }
                return dt.Ticks;
            }
            catch (Exception)
            {
            }
            return 0L;
        }

        
        public static bool DateTimeEqual(string strDateTime1, string strDateTime2)
        {
            try
            {
                return strDateTime1 == strDateTime2;
            }
            catch (Exception)
            {
            }
            return false;
        }

        
        public static bool IsTimeLimitGoods(GoodsData goodsData)
        {
            return !string.IsNullOrEmpty(goodsData.Endtime) && !Global.DateTimeEqual(goodsData.Endtime, "1900-01-01 12:00:00");
        }

        
        public static bool CanExchangeCategoriy(GoodsData goodsData)
        {
            SystemXmlItem systemGoods = null;
            bool result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                result = false;
            }
            else
            {
                int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                result = ((categoriy < 800 || categoriy >= 816) && categoriy != 901 && (categoriy < 910 || categoriy > 928) && categoriy != 940 && categoriy != 702);
            }
            return result;
        }

        
        public static bool IsGoodsTimeOver(GoodsData goodsData)
        {
            bool result;
            if (!Global.IsTimeLimitGoods(goodsData))
            {
                result = false;
            }
            else
            {
                long nowTicks = TimeUtil.NOW() * 10000L;
                long goodsEndTicks = Global.DateTimeTicks(goodsData.Endtime);
                result = (nowTicks >= goodsEndTicks);
            }
            return result;
        }

        
        public static bool IsGoodsNotReachStartTime(GoodsData goodsData)
        {
            bool result;
            if (!Global.IsTimeLimitGoods(goodsData))
            {
                result = false;
            }
            else
            {
                long nowTicks = TimeUtil.NOW() * 10000L;
                long goodsStartTicks = Global.DateTimeTicks(goodsData.Starttime);
                result = (nowTicks < goodsStartTicks);
            }
            return result;
        }

        
        public static int GetGoodsDefaultCount(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = 0;
            }
            else
            {
                result = Global.GMax(1, systemGoods.GetIntValue("UsingNum", -1));
            }
            return result;
        }

        
        public static int GetGoodsUsingNum(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = 0;
            }
            else
            {
                result = systemGoods.GetIntValue("UsingNum", -1);
            }
            return result;
        }

        
        public static int[] GetVipUseBindTongQianGoodsIDNum()
        {
            int[] vipUseBindTongQianGoodsIDNum;
            if (null != Global._VipUseBindTongQianGoodsIDNum)
            {
                vipUseBindTongQianGoodsIDNum = Global._VipUseBindTongQianGoodsIDNum;
            }
            else
            {
                Global._VipUseBindTongQianGoodsIDNum = GameManager.systemParamsList.GetParamValueIntArrayByName("VipUseBindTongQianGoodsIDNum", ',');
                vipUseBindTongQianGoodsIDNum = Global._VipUseBindTongQianGoodsIDNum;
            }
            return vipUseBindTongQianGoodsIDNum;
        }

        
        public static int GetGoodsLimitNum(GameClient client, int goodsID)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = 0;
            }
            else
            {
                if (601 == systemGoods.GetIntValue("Categoriy", -1))
                {
                    int[] VipUseBindTongQianGoodsIDNum = Global.GetVipUseBindTongQianGoodsIDNum();
                    if (VipUseBindTongQianGoodsIDNum != null && VipUseBindTongQianGoodsIDNum.Length == 4)
                    {
                        if (0 == Global.GetVipType(client))
                        {
                            return VipUseBindTongQianGoodsIDNum[0];
                        }
                        if (1 == Global.GetVipType(client))
                        {
                            return VipUseBindTongQianGoodsIDNum[1];
                        }
                        if (3 == Global.GetVipType(client))
                        {
                            return VipUseBindTongQianGoodsIDNum[2];
                        }
                        if (6 == Global.GetVipType(client))
                        {
                            return VipUseBindTongQianGoodsIDNum[3];
                        }
                    }
                }
                int nType = systemGoods.GetIntValue("ID", -1);
                if (5001 == nType || 7037 == nType)
                {
                    int dayID = TimeUtil.NowDateTime().DayOfYear;
                    int nVipLev = client.ClientData.VipLevel;
                    int[] nArry = null;
                    if (5001 == nType)
                    {
                        nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPJiPinGuoShiAdd", ',');
                    }
                    else if (7037 == nType)
                    {
                        nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPJinTiaoAdd", ',');
                    }
                    if (nVipLev > 0 && nArry != null && nArry[nVipLev] > 0)
                    {
                        return systemGoods.GetIntValue("DayLimit", -1) + nArry[nVipLev];
                    }
                }
                result = systemGoods.GetIntValue("DayLimit", -1);
            }
            return result;
        }

        
        public static int GetGoodsPriceByMoneyType(int goodsID, int moneyType)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = 0;
            }
            else
            {
                string sPriceField = "";
                if (moneyType <= 14)
                {
                    if (moneyType != 1)
                    {
                        if (moneyType != 8)
                        {
                            switch (moneyType)
                            {
                                case 13:
                                    sPriceField = "JinYuanPrice";
                                    break;
                                case 14:
                                    sPriceField = "JunGongPrice";
                                    break;
                            }
                        }
                        else
                        {
                            sPriceField = "PriceTwo";
                        }
                    }
                    else
                    {
                        sPriceField = "PriceOne";
                    }
                }
                else if (moneyType != 20)
                {
                    if (moneyType != 30)
                    {
                        if (moneyType == 90)
                        {
                            sPriceField = "ZhanHunPrice";
                        }
                    }
                    else
                    {
                        sPriceField = "JiFenPrice";
                    }
                }
                else
                {
                    sPriceField = "LieShaPrice";
                }
                result = Math.Max(0, systemGoods.GetIntValue(sPriceField, -1));
            }
            return result;
        }

        
        public static bool DestroyGoods(GameClient client, GoodsData goodsData)
        {
            string cmdData;
            if (goodsData.Using > 0)
            {
                cmdData = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
                {
                    client.ClientData.RoleID,
                    2,
                    goodsData.Id,
                    goodsData.GoodsID,
                    0,
                    goodsData.Site,
                    goodsData.GCount,
                    goodsData.BagIndex,
                    ""
                });
                Global.ModifyGoodsByCmdParams(client, cmdData, "客户端修改", null);
            }
            cmdData = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
            {
                client.ClientData.RoleID,
                4,
                goodsData.Id,
                goodsData.GoodsID,
                0,
                goodsData.Site,
                goodsData.GCount,
                goodsData.BagIndex,
                ""
            });
            Global.ModifyGoodsByCmdParams(client, cmdData, "客户端修改", null);
            return true;
        }

        
        public static TCPProcessCmdResults SplitGoodsByCmdParams(GameClient client, TMSKSocket socket, int nID, int roleID, int id, int site, int goodsID, int newNum, bool sendErroMsg = true)
        {
            TCPManager tcpMgr = Global._TCPManager;
            TCPClientPool tcpClientPool = Global._TCPManager.tcpClientPool;
            TCPOutPacketPool pool = Global._TCPManager.TcpOutPacketPool;
            newNum = Global.GMax(newNum, 1);
            GoodsData goodsData = null;
            if (site == 0)
            {
                goodsData = Global.GetGoodsByDbID(client, id);
            }
            else if (site == -1000)
            {
                goodsData = Global.GetPortableGoodsDataByDbID(client, id);
            }
            else if (site == 15000)
            {
                goodsData = RebornEquip.GetRebornGoodsByDbID(client, id);
            }
            else if (site == 15001)
            {
                goodsData = RebornEquip.GetRebornStoreGoodsByDbID(client, id);
            }
            else if (site == 16000)
            {
                goodsData = MountHolyStampManager.GetMountHolyGoodsByDbID(client, id);
            }
            TCPProcessCmdResults result;
            if (null == goodsData)
            {
                if (sendErroMsg)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("定位物品对象1失败, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", new object[]
                    {
                        (TCPGameServerCmds)nID,
                        Global.GetSocketRemoteEndPoint(socket, false),
                        roleID,
                        id
                    }), null, true);
                }
                result = TCPProcessCmdResults.RESULT_OK;
            }
            else if (goodsData.GoodsID != goodsID)
            {
                if (sendErroMsg)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("监测到复制物品的操作立即断开, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", new object[]
                    {
                        (TCPGameServerCmds)nID,
                        Global.GetSocketRemoteEndPoint(socket, false),
                        roleID,
                        id
                    }), null, true);
                }
                result = TCPProcessCmdResults.RESULT_FAILED;
            }
            else if (Global.IsTimeLimitGoods(goodsData))
            {
                result = TCPProcessCmdResults.RESULT_OK;
            }
            else if (newNum >= goodsData.GCount)
            {
                result = TCPProcessCmdResults.RESULT_OK;
            }
            else
            {
                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                if (gridNum <= 1)
                {
                    result = TCPProcessCmdResults.RESULT_OK;
                }
                else
                {
                    int usingNum = Global.GetGoodsUsingNum(goodsID);
                    if (usingNum > 1)
                    {
                        result = TCPProcessCmdResults.RESULT_OK;
                    }
                    else
                    {
                        if (site == 0)
                        {
                            if (!Global.CanAddGoods(client, goodsID, newNum, goodsData.Binding, "1900-01-01 12:00:00", false, false))
                            {
                                if (sendErroMsg)
                                {
                                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, GLang.GetLang(127, new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 1);
                                }
                                return TCPProcessCmdResults.RESULT_OK;
                            }
                        }
                        else if (site == -1000)
                        {
                            if (!Global.CanPortableAddGoods(client, goodsID, newNum, goodsData.Binding))
                            {
                                if (sendErroMsg)
                                {
                                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, GLang.GetLang(128, new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                                }
                                return TCPProcessCmdResults.RESULT_OK;
                            }
                        }
                        else if (site == 15000)
                        {
                            if (!RebornEquip.CanAddGoodsDataList2(client, goodsID, newNum, goodsData.Binding, "1900-01-01 12:00:00", false))
                            {
                                if (sendErroMsg)
                                {
                                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, GLang.GetLang(127, new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 1);
                                }
                                return TCPProcessCmdResults.RESULT_OK;
                            }
                        }
                        else if (site == 15001)
                        {
                            if (!RebornEquip.CanPortableAddGoods(client))
                            {
                                if (sendErroMsg)
                                {
                                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, GLang.GetLang(128, new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                                }
                                return TCPProcessCmdResults.RESULT_OK;
                            }
                        }
                        string[] dbFields = null;
                        string strcmd = Global.FormatUpdateDBGoodsStr(new object[]
                        {
                            roleID,
                            id,
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            goodsData.GCount - newNum,
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            "*",
                            "*"
                        });
                        TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strcmd, out dbFields, client.ServerId);
                        if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                        {
                            result = TCPProcessCmdResults.RESULT_OK;
                        }
                        else if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                        {
                            result = TCPProcessCmdResults.RESULT_OK;
                        }
                        else
                        {
                            goodsData.GCount -= newNum;
                            Global.ModRoleGoodsEvent(client, goodsData, -newNum, "物品拆分", false);
                            EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, -newNum, goodsData.GCount, "物品拆分");
                            GameManager.ClientMgr.NotifyModGoods(tcpMgr.MySocketListener, pool, client, 3, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);
                            int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, newNum, 0, "", 0, goodsData.Binding, goodsData.Site, "", false, 0, "物品拆分", goodsData.Endtime, 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
                            if (dbRet < 0)
                            {
                                if (sendErroMsg)
                                {
                                    LogManager.WriteLog(LogTypes.Error, string.Format("拆分物品时, 拆分生成新物品失败, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", new object[]
                                    {
                                        (TCPGameServerCmds)nID,
                                        Global.GetSocketRemoteEndPoint(socket, false),
                                        roleID,
                                        id
                                    }), null, true);
                                }
                            }
                            result = TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                }
            }
            return result;
        }

        
        public static bool CanOpenPortableBag(GameClient client)
        {
            VIPDataInfo data;
            if (Data.VIPDataInfoList.TryGetValue(5001, out data))
            {
                if (client.ClientData.VipLevel < data.VIPlev && Global.GetTwoPointDistanceSquare(client.CurrentPos, client.ClientData.OpenPortableBagPoint) > 810000.0)
                {
                    return false;
                }
            }
            return true;
        }

        
        public static TCPProcessCmdResults ModifyGoodsByCmdParams(GameClient client, string cmdData, string msg = "客户端修改", GoodsData goodsData = null)
        {
            string[] fields = cmdData.Split(new char[]
            {
                ':'
            });
            TCPProcessCmdResults result;
            if (fields.Length != 9)
            {
                result = TCPProcessCmdResults.RESULT_FAILED;
            }
            else
            {
                int roleID = Convert.ToInt32(fields[0]);
                int modType = Convert.ToInt32(fields[1]);
                int id = Convert.ToInt32(fields[2]);
                int goodsID = Convert.ToInt32(fields[3]);
                int isusing = Convert.ToInt32(fields[4]);
                int site = Convert.ToInt32(fields[5]);
                int gcount = Convert.ToInt32(fields[6]);
                int bagindex = Convert.ToInt32(fields[7]);
                string extraParams = fields[8];
                TCPOutPacketPool pool = Global._TCPManager.TcpOutPacketPool;
                TCPClientPool tcpClientPool = Global._TCPManager.tcpClientPool;
                TCPManager tcpMgr = Global._TCPManager;
                TMSKSocket socket = client.ClientSocket;
                if (null == goodsData)
                {
                    goodsData = GoodsUtil.GetGoodsDataBySite(client, id, site);
                    if (null == goodsData)
                    {
                        goodsData = RebornEquip.GetRebornGoodsByDbID(client, id);
                        if (null == goodsData)
                        {
                            goodsData = RebornEquip.GetRebornStoreGoodsByDbID(client, id);
                            if (null == goodsData)
                            {
                                goodsData = FashionManager.GetFashionGoodsDataByDbID(client, id);
                                if (null == goodsData)
                                {
                                    goodsData = Global.GetGoodsByDbID(client, id);
                                    if (null == goodsData)
                                    {
                                        goodsData = Global.GetPortableGoodsDataByDbID(client, id);
                                        if (null == goodsData)
                                        {
                                            goodsData = Global.GetJinDanGoodsDataByDbID(client, id);
                                            if (null == goodsData)
                                            {
                                                goodsData = DamonMgr.GetDamonGoodsDataByDbID(client, id);
                                                if (null == goodsData)
                                                {
                                                    goodsData = CallPetManager.GetPetByDbID(client, id);
                                                    if (null == goodsData)
                                                    {
                                                        goodsData = OrnamentManager.getInstance().GetOrnamentGoodsDataByDbID(client, id);
                                                        if (null == goodsData)
                                                        {
                                                            goodsData = JingLingYaoSaiManager.GetPaiZhuDamonGoodsDataByDbID(client, id);
                                                            if (null == goodsData)
                                                            {
                                                                goodsData = ZuoQiManager.GetMountStoreGoodsDataByDbID(client, id);
                                                                if (null == goodsData)
                                                                {
                                                                    goodsData = ZuoQiManager.GetMountEquipGoodsDataByDbID(client, id);
                                                                    if (null != goodsData)
                                                                    {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (null == goodsData)
                {
                    result = TCPProcessCmdResults.RESULT_OK;
                }
                else if (goodsData.GoodsID != goodsID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("监测到复制物品的操作立即断开, CMD={0}, Client={1}, RoleID={2}", TCPGameServerCmds.CMD_SPR_MOD_GOODS, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
                    result = TCPProcessCmdResults.RESULT_FAILED;
                }
                else
                {
                    if (isusing != goodsData.Using)
                    {
                        if (isusing > 0 && modType != 1)
                        {
                            LogManager.WriteLog(LogTypes.Fatal, string.Format("非法的道具使用状态修改,当前using={0},修改命令={1}", goodsData.Using, cmdData), null, true);
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                    if (modType == 5 && (goodsData.Site != 0 || goodsData.Using > 0))
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("检测到出售装备物品或者仓库物品, CMD={0}, Client={1}, RoleID={2}", TCPGameServerCmds.CMD_SPR_MOD_GOODS, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
                        result = TCPProcessCmdResults.RESULT_FAILED;
                    }
                    else
                    {
                        int oldGoodsNum = goodsData.GCount;
                        if (gcount != goodsData.GCount)
                        {
                            LogManager.WriteLog(LogTypes.Error, string.Format("不能直接使用命令修改物品对象数量的大小, CMD={0}, Client={1}, RoleID={2}, GoodsID={3}", new object[]
                            {
                                TCPGameServerCmds.CMD_SPR_MOD_GOODS,
                                Global.GetSocketRemoteEndPoint(socket, false),
                                roleID,
                                goodsID
                            }), null, true);
                            result = TCPProcessCmdResults.RESULT_OK;
                        }
                        else
                        {
                            if (modType == 0 || modType == 4 || modType == 5)
                            {
                                if (modType == 0)
                                {
                                    EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, -goodsData.GCount, 0, "丢弃物品");
                                }
                                else if (modType == 4)
                                {
                                    EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, -goodsData.GCount, 0, "回收物品");
                                }
                                else if (modType == 5)
                                {
                                    EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, -goodsData.GCount, 0, "回收物品");
                                }
                                gcount = 0;
                            }
                            else if (modType == 6)
                            {
                                gcount = 0;
                            }
                            if (isusing == goodsData.Using && site == goodsData.Site && gcount == goodsData.GCount && bagindex == goodsData.BagIndex)
                            {
                                GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool, client, 3, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);
                                result = TCPProcessCmdResults.RESULT_OK;
                            }
                            else
                            {
                                if (site != goodsData.Site)
                                {
                                    if (isusing > 0)
                                    {
                                        return TCPProcessCmdResults.RESULT_OK;
                                    }
                                }
                                bool updateEquip = modType >= 1 && modType <= 2;
                                bool isUsingChanged = isusing != goodsData.Using;
                                if (updateEquip)
                                {
                                    if (!isUsingChanged)
                                    {
                                        GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool, client, 3, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);
                                        return TCPProcessCmdResults.RESULT_OK;
                                    }
                                }
                                if (modType == 1 && !RebornEquip.IsRebornEquip(goodsData.GoodsID))
                                {
                                    if (!client.UsingEquipMgr.CanUsingEquip(client, goodsData, bagindex, true))
                                    {
                                        GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool, client, 3, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);
                                        return TCPProcessCmdResults.RESULT_OK;
                                    }
                                    if (!Global.CanUseGoods(client, goodsData.GoodsID, true, true))
                                    {
                                        GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool, client, 3, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);
                                        return TCPProcessCmdResults.RESULT_OK;
                                    }
                                    if (goodsData.Site == 5000)
                                    {
                                        if (SingletonTemplate<CreateRoleLimitManager>.Instance().SpriteFightSlotTicks > 0 && TimeUtil.NOW() - client.ClientData._SpriteFightTicks < (long)SingletonTemplate<CreateRoleLimitManager>.Instance().SpriteFightSlotTicks)
                                        {
                                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(129, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                                            GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool, client, 3, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);
                                            return TCPProcessCmdResults.RESULT_OK;
                                        }
                                        client.ClientData._SpriteFightTicks = TimeUtil.NOW();
                                    }
                                    if (Data.LoadEquipDelay)
                                    {
                                        SystemXmlItem systemGoods = null;
                                        if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                                        {
                                            return TCPProcessCmdResults.RESULT_OK;
                                        }
                                        int nHandType = systemGoods.GetIntValue("HandType", -1);
                                        int Categoriy = systemGoods.GetIntValue("Categoriy", -1);
                                        if (nHandType == 2 && Categoriy >= 11 && Categoriy < 22)
                                        {
                                            client.UsingEquipMgr.RightEquipIndex(ref bagindex);
                                            if (bagindex < 0 || bagindex > 1)
                                            {
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                        }
                                        if (Categoriy == 6)
                                        {
                                            client.UsingEquipMgr.RightAnelIndex(ref bagindex, Categoriy);
                                            if (bagindex < 0 || bagindex > 1)
                                            {
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                        }
                                    }
                                }
                                else if (modType == 1 && RebornEquip.IsRebornEquip(goodsData.GoodsID))
                                {
                                    if (!client.UsingEquipMgr.CanUsingEquip(client, goodsData, bagindex, true))
                                    {
                                        GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool, client, 3, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);
                                        return TCPProcessCmdResults.RESULT_OK;
                                    }
                                    if (Data.LoadEquipDelay)
                                    {
                                        SystemXmlItem systemGoods = null;
                                        if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                                        {
                                            return TCPProcessCmdResults.RESULT_OK;
                                        }
                                        int Categoriy = systemGoods.GetIntValue("Categoriy", -1);
                                        if (Categoriy == 36)
                                        {
                                            client.UsingEquipMgr.RebornRightAnelIndex(ref bagindex, Categoriy);
                                            if (bagindex < 0 || bagindex > 1)
                                            {
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                        }
                                    }
                                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                                }
                                if (gcount > 0)
                                {
                                    if (goodsData.Site == site)
                                    {
                                        if (!updateEquip)
                                        {
                                            if (0 == site)
                                            {
                                                if (goodsData.GCount < oldGoodsNum)
                                                {
                                                }
                                            }
                                        }
                                        else if (updateEquip && isUsingChanged && modType == 2 && !RebornEquip.IsRebornEquip(goodsData.GoodsID))
                                        {
                                            bool is2Dot2Disable = GameFuncControlManager.IsGameFuncDisabled(GameFuncType.System2Dot2);
                                            int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                                            if (nCategories < 9 || nCategories > 10)
                                            {
                                                if (nCategories == 340)
                                                {
                                                    ZuoQiManager.getInstance().RoleDisMount(client, false);
                                                }
                                                else if (!GoodsUtil.GetGoodsTypeInfo(nCategories).FashionGoods && nCategories != 8 && (nCategories != 23 || is2Dot2Disable))
                                                {
                                                    if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                    {
                                                        SCModGoods scData = new SCModGoods(-1000, modType, id, isusing, site, gcount, bagindex, 0);
                                                        client.sendCmd<SCModGoods>(131, scData, false);
                                                        return TCPProcessCmdResults.RESULT_OK;
                                                    }
                                                    bagindex = Global.GetIdleSlotOfBagGoods(client);
                                                }
                                            }
                                        }
                                        else if (updateEquip && isUsingChanged && modType == 2 && RebornEquip.IsRebornEquip(goodsData.GoodsID))
                                        {
                                            bool is2Dot2Disable = GameFuncControlManager.IsGameFuncDisabled(GameFuncType.System2Dot2);
                                            int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                                            if (nCategories < 9 || nCategories > 10)
                                            {
                                                if (nCategories == 340)
                                                {
                                                    ZuoQiManager.getInstance().RoleDisMount(client, false);
                                                }
                                                else if (!GoodsUtil.GetGoodsTypeInfo(nCategories).FashionGoods && nCategories != 8 && (nCategories != 23 || is2Dot2Disable))
                                                {
                                                    if (!RebornEquip.CanAddGoodsDataList2(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true))
                                                    {
                                                        SCModGoods scData = new SCModGoods(-1000, modType, id, isusing, site, gcount, bagindex, 0);
                                                        client.sendCmd<SCModGoods>(131, scData, false);
                                                        return TCPProcessCmdResults.RESULT_OK;
                                                    }
                                                    bagindex = RebornEquip.GetIdleSlotOfRebornGoods(client);
                                                }
                                            }
                                        }
                                        goodsData.Using = isusing;
                                        goodsData.GCount = gcount;
                                        goodsData.BagIndex = bagindex;
                                    }
                                    else
                                    {
                                        if (goodsData.Site == 0 && site == -1000)
                                        {
                                            if (!Global.CanOpenPortableBag(client))
                                            {
                                                GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(130, new object[0]));
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                            bagindex = Global.GetIdleSlotOfPortableGoods(client);
                                            if (bagindex < 0)
                                            {
                                                SCModGoods scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                                                client.sendCmd<SCModGoods>(131, scData, false);
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                            Global.RemoveGoodsData(client, goodsData);
                                            goodsData.Site = site;
                                            Global.AddPortableGoodsData(client, goodsData);
                                        }
                                        else if (goodsData.Site == 15000 && site == 15001)
                                        {
                                            if (!Global.CanOpenPortableBag(client))
                                            {
                                                GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(130, new object[0]));
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                            bagindex = RebornEquip.GetIdleSlotOfPortableGoods(client);
                                            if (bagindex < 0)
                                            {
                                                SCModGoods scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                                                client.sendCmd<SCModGoods>(131, scData, false);
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                            RebornEquip.RemoveGoodsData(client, goodsData);
                                            goodsData.Site = site;
                                            RebornEquip.AddPortableGoodsData(client, goodsData);
                                        }
                                        else if (goodsData.Site == 0 && site == 5000)
                                        {
                                            int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                                            if (nCategories != 9 && nCategories != 10)
                                            {
                                                SCModGoods scData = new SCModGoods(-5, modType, id, isusing, site, gcount, bagindex, 0);
                                                client.sendCmd<SCModGoods>(131, scData, false);
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                            if (!DamonMgr.CanAddGoodsToDamonCangKu(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Starttime, false))
                                            {
                                                SCModGoods scData = new SCModGoods(-4, modType, id, isusing, site, gcount, bagindex, 0);
                                                client.sendCmd<SCModGoods>(131, scData, false);
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                            bagindex = Global.GetIdleSlotOfDamonGoods(client);
                                            Global.RemoveGoodsData(client, goodsData);
                                            DamonMgr.AddDamonGoodsData(client, goodsData, true);
                                            goodsData.Site = site;
                                            goodsData.BagIndex = bagindex;
                                            GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetSpriteCountBuleUp));
                                            GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetSpriteCountPurpleUp));
                                            PetSkillManager.UpdateRolePetSkill(client);
                                        }
                                        else if (goodsData.Site == 0 && site == 10000)
                                        {
                                            int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                                            if (nCategories != 9 && nCategories != 10)
                                            {
                                                SCModGoods scData = new SCModGoods(-5, modType, id, isusing, site, gcount, bagindex, 0);
                                                client.sendCmd<SCModGoods>(131, scData, false);
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                            if (!JingLingYaoSaiManager.CanAddGoodsToPaiZhuDamonCangKu(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Starttime, false))
                                            {
                                                SCModGoods scData = new SCModGoods(-4, modType, id, isusing, site, gcount, bagindex, 0);
                                                client.sendCmd<SCModGoods>(131, scData, false);
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                            bagindex = JingLingYaoSaiManager.GetIdleSlotOfPaiZhuDamonGoods(client);
                                            Global.RemoveGoodsData(client, goodsData);
                                            JingLingYaoSaiManager.AddPaiZhuDamonGoodsData(client, goodsData, true);
                                            goodsData.Site = site;
                                            goodsData.BagIndex = bagindex;
                                        }
                                        else if (goodsData.Site == 10000 && site == 10001)
                                        {
                                            goodsData.Site = site;
                                        }
                                        else if (goodsData.Site == 10001 && site == 10000)
                                        {
                                            goodsData.Site = site;
                                        }
                                        else
                                        {
                                            if (goodsData.Site == 10001 && site != 10000)
                                            {
                                                SCModGoods scData = new SCModGoods(-5, modType, id, isusing, site, gcount, bagindex, 0);
                                                client.sendCmd<SCModGoods>(131, scData, false);
                                                return TCPProcessCmdResults.RESULT_OK;
                                            }
                                            if (goodsData.Site == 10000 && site == 5000)
                                            {
                                                int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                                                if (nCategories != 9 && nCategories != 10)
                                                {
                                                    SCModGoods scData = new SCModGoods(-5, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                if (!DamonMgr.CanAddGoodsToDamonCangKu(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Starttime, false))
                                                {
                                                    SCModGoods scData = new SCModGoods(-4, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                bagindex = Global.GetIdleSlotOfDamonGoods(client);
                                                JingLingYaoSaiManager.RemovePaiZhuDamonGoodsData(client, goodsData);
                                                DamonMgr.AddDamonGoodsData(client, goodsData, true);
                                                goodsData.Site = site;
                                                goodsData.BagIndex = bagindex;
                                                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetSpriteCountBuleUp));
                                                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetSpriteCountPurpleUp));
                                                PetSkillManager.UpdateRolePetSkill(client);
                                            }
                                            else if (goodsData.Site == 2000 && site == 0)
                                            {
                                                if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                {
                                                    SCModGoods scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                bagindex = Global.GetIdleSlotOfBagGoods(client);
                                                Global.RemoveJinDanGoodsData(client, goodsData);
                                                goodsData.Site = site;
                                                Global.AddGoodsData(client, goodsData);
                                            }
                                            else if (goodsData.Site == 2000 && site == 15000)
                                            {
                                                if (!RebornEquip.CanAddGoodsToReborn(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                {
                                                    SCModGoods scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                bagindex = RebornEquip.GetIdleSlotOfRebornGoods(client);
                                                Global.RemoveJinDanGoodsData(client, goodsData);
                                                goodsData.Site = site;
                                                RebornEquip.AddGoodsData(client, goodsData);
                                            }
                                            else if (goodsData.Site == 5000 && site == 0)
                                            {
                                                if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                {
                                                    SCModGoods scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                bagindex = Global.GetIdleSlotOfBagGoods(client);
                                                DamonMgr.RemoveDamonGoodsData(client, goodsData);
                                                goodsData.Site = site;
                                                Global.AddGoodsData(client, goodsData);
                                                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetSpriteCountBuleUp));
                                                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetSpriteCountPurpleUp));
                                                PetSkillManager.UpdateRolePetSkill(client);
                                            }
                                            else if (goodsData.Site == 10000 && site == 0)
                                            {
                                                if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                {
                                                    SCModGoods scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                bagindex = Global.GetIdleSlotOfBagGoods(client);
                                                JingLingYaoSaiManager.RemovePaiZhuDamonGoodsData(client, goodsData);
                                                goodsData.Site = site;
                                                Global.AddGoodsData(client, goodsData);
                                            }
                                            else if (goodsData.Site == 12000 && site == 13000)
                                            {
                                                int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                                                if (nCategories != 340)
                                                {
                                                    SCModGoods scData = new SCModGoods(-5, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                if (!ZuoQiManager.CanAddGoodsToMountEquip(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Starttime, false))
                                                {
                                                    SCModGoods scData = new SCModGoods(-6, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                bagindex = ZuoQiManager.GetIdleSlotOfZuoQiEquipGoods(client);
                                                ZuoQiManager.RemoveStoreGoodsData(client, goodsData);
                                                ZuoQiManager.AddMountEquipGoodsData(client, goodsData);
                                                goodsData.Site = site;
                                                goodsData.BagIndex = bagindex;
                                            }
                                            else if (goodsData.Site == 12000 && site == 0)
                                            {
                                                if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                {
                                                    SCModGoods scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                bagindex = Global.GetIdleSlotOfBagGoods(client);
                                                ZuoQiManager.RemoveStoreGoodsData(client, goodsData);
                                                goodsData.Site = site;
                                                Global.AddGoodsData(client, goodsData);
                                            }
                                            else if (goodsData.Site == 0 && site == 13000)
                                            {
                                                int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                                                if (nCategories != 340)
                                                {
                                                    SCModGoods scData = new SCModGoods(-5, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                if (!ZuoQiManager.CanAddGoodsToMountEquip(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Starttime, false))
                                                {
                                                    SCModGoods scData = new SCModGoods(-6, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                bagindex = ZuoQiManager.GetIdleSlotOfZuoQiEquipGoods(client);
                                                Global.RemoveGoodsData(client, goodsData);
                                                ZuoQiManager.AddMountEquipGoodsData(client, goodsData);
                                                goodsData.Site = site;
                                                goodsData.BagIndex = bagindex;
                                            }
                                            else if (goodsData.Site == 13000 && site == 0)
                                            {
                                                if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                {
                                                    SCModGoods scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                                                    client.sendCmd<SCModGoods>(131, scData, false);
                                                    return TCPProcessCmdResults.RESULT_OK;
                                                }
                                                bagindex = Global.GetIdleSlotOfBagGoods(client);
                                                ZuoQiManager.RemoveEquipGoodsData(client, goodsData);
                                                goodsData.Site = site;
                                                Global.AddGoodsData(client, goodsData);
                                            }
                                            else if (goodsData.Site == 2000 || site != 2000)
                                            {
                                                if (goodsData.Site != 0 || site >= 0)
                                                {
                                                    if (goodsData.Site == -1000 && site == 0)
                                                    {
                                                        if (!Global.CanOpenPortableBag(client))
                                                        {
                                                            GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(130, new object[0]));
                                                            return TCPProcessCmdResults.RESULT_OK;
                                                        }
                                                        if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                        {
                                                            SCModGoods scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                                                            client.sendCmd<SCModGoods>(131, scData, false);
                                                            return TCPProcessCmdResults.RESULT_OK;
                                                        }
                                                        bagindex = Global.GetIdleSlotOfBagGoods(client);
                                                        Global.RemovePortableGoodsData(client, goodsData);
                                                        goodsData.Site = site;
                                                        Global.AddGoodsData(client, goodsData);
                                                    }
                                                    else if (goodsData.Site == 15001 && site == 15000)
                                                    {
                                                        if (!Global.CanOpenPortableBag(client))
                                                        {
                                                            GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(130, new object[0]));
                                                            return TCPProcessCmdResults.RESULT_OK;
                                                        }
                                                        if (!Global.CanAddGoodsToReborn(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                        {
                                                            SCModGoods scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                                                            client.sendCmd<SCModGoods>(131, scData, false);
                                                            return TCPProcessCmdResults.RESULT_OK;
                                                        }
                                                        bagindex = RebornEquip.GetIdleSlotOfRebornGoods(client);
                                                        RebornEquip.RemovePortableGoodsData(client, goodsData);
                                                        goodsData.Site = site;
                                                        RebornEquip.AddGoodsData(client, goodsData);
                                                    }
                                                    else if (goodsData.Site == 4000 && site == 0)
                                                    {
                                                        if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                        {
                                                            return TCPProcessCmdResults.RESULT_OK;
                                                        }
                                                        bagindex = Global.GetIdleSlotOfBagGoods(client);
                                                        CallPetManager.RemovePetGoodsData(client, goodsData);
                                                        goodsData.Site = site;
                                                        Global.AddGoodsData(client, goodsData);
                                                    }
                                                    else if (goodsData.Site == 1 && site == 0)
                                                    {
                                                        if (!Global.CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, "1900-01-01 12:00:00", true, false))
                                                        {
                                                            return TCPProcessCmdResults.RESULT_OK;
                                                        }
                                                        bagindex = Global.GetIdleSlotOfBagGoods(client);
                                                        client.ClientData.MeditateGoodsDataList.Remove(goodsData);
                                                        goodsData.Site = site;
                                                        Global.AddGoodsData(client, goodsData);
                                                    }
                                                    else if (goodsData.Site == 0 && site == 6000)
                                                    {
                                                        if (goodsData.GCount != 1)
                                                        {
                                                            return TCPProcessCmdResults.RESULT_OK;
                                                        }
                                                        if (!FashionManager.getInstance().FashionBagCanActive(client, goodsData))
                                                        {
                                                            return TCPProcessCmdResults.RESULT_OK;
                                                        }
                                                        Global.RemoveGoodsData(client, goodsData);
                                                        goodsData.Site = site;
                                                        FashionManager.getInstance().AddFashionGoodsData(client, goodsData);
                                                    }
                                                    else if (goodsData.Site == 0 && site == 9000)
                                                    {
                                                        if (goodsData.GCount != 1)
                                                        {
                                                            return TCPProcessCmdResults.RESULT_OK;
                                                        }
                                                        if (!OrnamentManager.getInstance().OrnamentCanAdd(client, goodsData.GoodsID))
                                                        {
                                                            return TCPProcessCmdResults.RESULT_OK;
                                                        }
                                                        Global.RemoveGoodsData(client, goodsData);
                                                        goodsData.Site = site;
                                                        OrnamentManager.getInstance().AddOrnamentGoodsData(client, goodsData);
                                                    }
                                                    else if (goodsData.Site < 0 && site == 0)
                                                    {
                                                    }
                                                }
                                            }
                                        }
                                        goodsData.Using = isusing;
                                        goodsData.GCount = gcount;
                                        goodsData.BagIndex = bagindex;
                                    }
                                }
                                else
                                {
                                    int totalPrice = Global.GetGoodsDataPrice(goodsData);
                                    if (totalPrice > 0 && modType == 5)
                                    {
                                        if (goodsData.Binding > 0)
                                        {
                                            GameManager.ClientMgr.AddMoney1(tcpMgr.MySocketListener, tcpClientPool, pool, client, totalPrice, "回收物品", true);
                                        }
                                        else
                                        {
                                            GameManager.ClientMgr.AddUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, totalPrice, "回收物品", false);
                                        }
                                    }
                                    if (goodsData.Site == 0)
                                    {
                                    }
                                    if (goodsData.Site == 4000)
                                    {
                                        CallPetManager.RemovePetGoodsData(client, goodsData);
                                    }
                                    else if (goodsData.Site == 6000)
                                    {
                                        FashionManager.getInstance().RemoveFashionGoodsData(client, goodsData);
                                    }
                                    else if (goodsData.Site == 9000)
                                    {
                                        OrnamentManager.getInstance().RemoveOrnamentGoodsData(client, goodsData);
                                    }
                                    else if (GoodsUtil.RemoveGoodsDataBySite(client, goodsData, goodsData.Site))
                                    {
                                        goodsData.GCount = 0;
                                    }
                                    else if (goodsData.Site == 15000)
                                    {
                                        RebornEquip.RemoveGoodsData(client, goodsData);
                                    }
                                    else
                                    {
                                        goodsData.GCount = 0;
                                        if (!Global.RemoveGoodsData(client, goodsData))
                                        {
                                            Global.RemovePortableGoodsData(client, goodsData);
                                        }
                                    }
                                }
                                string[] dbFields = null;
                                string strcmd = Global.FormatUpdateDBGoodsStr(new object[]
                                {
                                    roleID,
                                    id,
                                    isusing,
                                    "*",
                                    "*",
                                    "*",
                                    site,
                                    "*",
                                    "*",
                                    gcount,
                                    "*",
                                    bagindex,
                                    "*",
                                    "*",
                                    "*",
                                    "*",
                                    "*",
                                    "*",
                                    "*",
                                    "*",
                                    "*",
                                    "*",
                                    "*"
                                });
                                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, 10006, strcmd, out dbFields, client.ServerId);
                                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                                {
                                    SCModGoods scData = new SCModGoods(-1, modType, id, isusing, site, gcount, bagindex, 0);
                                    client.sendCmd<SCModGoods>(131, scData, false);
                                    result = TCPProcessCmdResults.RESULT_OK;
                                }
                                else if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
                                {
                                    SCModGoods scData = new SCModGoods(-2, modType, id, isusing, site, gcount, bagindex, 0);
                                    client.sendCmd<SCModGoods>(131, scData, false);
                                    result = TCPProcessCmdResults.RESULT_OK;
                                }
                                else
                                {
                                    if (modType != 6)
                                    {
                                        if (modType == 2)
                                        {
                                            Global.ResetBaseBattleAttributesOfLastTime(client);
                                        }
                                        Global.ModRoleGoodsEvent(client, goodsData, goodsData.GCount - oldGoodsNum, msg, false);
                                        EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, (long)goodsData.Id, 0, goodsData.GCount, msg);
                                        if (updateEquip)
                                        {
                                        }
                                        if (updateEquip && isUsingChanged)
                                        {
                                            client.UsingEquipMgr.RefreshEquip(goodsData);
                                            Global.RefreshEquipProp(client);
                                            GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);
                                            GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client, true, false, 7);
                                            Global.NotifyChangeEquip(tcpMgr, pool, client, goodsData, 1);
                                            if (ZuoQiManager.CheckIsZuoQiByGoodsID(goodsData.GoodsID))
                                            {
                                                ZuoQiManager.getInstance().RoleRideMount(client);
                                            }
                                            bool bFlush = false;
                                            bFlush |= client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriStrengthen);
                                            bFlush |= client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriAddon);
                                            bFlush |= client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriArchangel);
                                            bFlush |= client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriAmulet);
                                            if (bFlush)
                                            {
                                                client._IconStateMgr.AddFlushIconState(14000, client._IconStateMgr.IsAnyJieRiTipActived());
                                                client._IconStateMgr.SendIconStateToClient(client);
                                            }
                                            GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiBlueUp));
                                            GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiPurpleUp));
                                            GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiAppendEquip));
                                            GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiForgeEquip));
                                            GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiSuitEquipLevel));
                                            GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiSuitEquipCount));
                                            PetSkillManager.UpdateRolePetSkill(client);
                                            OrnamentManager.getInstance().RefreshOrnamentProps(client);
                                        }
                                        else
                                        {
                                            GameManager.ClientMgr.NotifyUpdateWeights(tcpMgr.MySocketListener, pool, client);
                                        }
                                        if (modType == 1)
                                        {
                                            Global.ResetBaseBattleAttributesOfLastTime(client);
                                            ProcessTask.ProcessRoleTaskVal(client, TaskTypes.HuFuForgeLevel, -1);
                                        }
                                        if (modType == 0)
                                        {
                                            string[] xyArr = extraParams.Split(new char[]
                                            {
                                                '_'
                                            });
                                            int toGridX = (int)client.CurrentGrid.X;
                                            int toGridY = (int)client.CurrentGrid.Y;
                                            if (2 == xyArr.Length)
                                            {
                                                toGridX = Global.SafeConvertToInt32(xyArr[0]);
                                                toGridY = Global.SafeConvertToInt32(xyArr[1]);
                                            }
                                            goodsData.GCount = oldGoodsNum;
                                            Global.AbandonGoods(client, goodsData, toGridX, toGridY);
                                        }
                                    }
                                    SCModGoods scData = new SCModGoods(0, modType, id, isusing, site, gcount, bagindex, 0);
                                    client.sendCmd<SCModGoods>(131, scData, false);
                                    result = TCPProcessCmdResults.RESULT_OK;
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        
        public static int GetIdleSlotOfBagGoods(GameClient client)
        {
            int idelPos = 0;
            int result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = idelPos;
            }
            else
            {
                List<int> usedBagIndex = new List<int>();
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Site == 0 && client.ClientData.GoodsDataList[i].Using <= 0)
                    {
                        if (usedBagIndex.IndexOf(client.ClientData.GoodsDataList[i].BagIndex) < 0)
                        {
                            usedBagIndex.Add(client.ClientData.GoodsDataList[i].BagIndex);
                        }
                    }
                }
                for (int j = 0; j < client.ClientData.BagNum; j++)
                {
                    if (usedBagIndex.IndexOf(j) < 0)
                    {
                        idelPos = j;
                        break;
                    }
                }
                result = idelPos;
            }
            return result;
        }

        
        public static int GetIdleSlotOfJinDanGoods(GameClient client)
        {
            int idelPos = 0;
            int result;
            if (null == client.ClientData.JinDanGoodsDataList)
            {
                result = idelPos;
            }
            else
            {
                List<int> usedBagIndex = new List<int>();
                for (int i = 0; i < client.ClientData.JinDanGoodsDataList.Count; i++)
                {
                    if (client.ClientData.JinDanGoodsDataList[i].Site == 0 && client.ClientData.JinDanGoodsDataList[i].Using <= 0)
                    {
                        if (usedBagIndex.IndexOf(client.ClientData.JinDanGoodsDataList[i].BagIndex) < 0)
                        {
                            usedBagIndex.Add(client.ClientData.JinDanGoodsDataList[i].BagIndex);
                        }
                    }
                }
                for (int j = 0; j < Global.GetJinDanBagCapacity(client); j++)
                {
                    if (usedBagIndex.IndexOf(j) < 0)
                    {
                        idelPos = j;
                        break;
                    }
                }
                result = idelPos;
            }
            return result;
        }

        
        public static int GetIdleSlotOfDamonGoods(GameClient client)
        {
            int idelPos = 0;
            int result;
            if (null == client.ClientData.DamonGoodsDataList)
            {
                result = idelPos;
            }
            else
            {
                List<int> usedBagIndex = new List<int>();
                for (int i = 0; i < client.ClientData.DamonGoodsDataList.Count; i++)
                {
                    if (client.ClientData.DamonGoodsDataList[i].Site == 5000)
                    {
                        if (usedBagIndex.IndexOf(client.ClientData.DamonGoodsDataList[i].BagIndex) < 0)
                        {
                            usedBagIndex.Add(client.ClientData.DamonGoodsDataList[i].BagIndex);
                        }
                    }
                }
                int nCapacity = DamonMgr.GetDamonBagCapacity(client);
                for (int j = 0; j < nCapacity; j++)
                {
                    if (usedBagIndex.IndexOf(j) < 0)
                    {
                        idelPos = j;
                        break;
                    }
                }
                result = idelPos;
            }
            return result;
        }

        
        public static int GetIdleSlotOfPortableGoods(GameClient client)
        {
            int idelPos = -1;
            int result;
            if (null == client.ClientData.PortableGoodsDataList)
            {
                result = 0;
            }
            else
            {
                List<int> usedBagIndex = new List<int>();
                for (int i = 0; i < client.ClientData.PortableGoodsDataList.Count; i++)
                {
                    if (client.ClientData.PortableGoodsDataList[i].Site == -1000 && client.ClientData.PortableGoodsDataList[i].Using <= 0)
                    {
                        if (usedBagIndex.IndexOf(client.ClientData.PortableGoodsDataList[i].BagIndex) < 0)
                        {
                            usedBagIndex.Add(client.ClientData.PortableGoodsDataList[i].BagIndex);
                        }
                    }
                }
                for (int j = 0; j < Global.GetPortableBagCapacity(client); j++)
                {
                    if (usedBagIndex.IndexOf(j) < 0)
                    {
                        idelPos = j;
                        break;
                    }
                }
                result = idelPos;
            }
            return result;
        }

        
        public static GoodsLimitData GetGoodsLimitByID(GameClient client, int goodsID)
        {
            GoodsLimitData result;
            if (null == client.ClientData.GoodsLimitDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.GoodsLimitDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsLimitDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsLimitDataList[i].GoodsID == goodsID)
                        {
                            return client.ClientData.GoodsLimitDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static int GetTodayGoodsLimitByID(GameClient client, int goodsID)
        {
            int result;
            if (null == client.ClientData.GoodsLimitDataList)
            {
                result = 0;
            }
            else
            {
                int usedNum = 0;
                lock (client.ClientData.GoodsLimitDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsLimitDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsLimitDataList[i].GoodsID == goodsID)
                        {
                            int dayID = TimeUtil.NowDateTime().DayOfYear;
                            if (dayID == client.ClientData.GoodsLimitDataList[i].DayID)
                            {
                                usedNum = client.ClientData.GoodsLimitDataList[i].UsedNum;
                            }
                            break;
                        }
                    }
                }
                result = usedNum;
            }
            return result;
        }

        
        public static void UpdateGoodsLimitByID(GameClient client, GoodsLimitData goodsLimitData)
        {
            if (client.ClientData.GoodsLimitDataList == null)
            {
                client.ClientData.GoodsLimitDataList = new List<GoodsLimitData>();
            }
            lock (client.ClientData.GoodsLimitDataList)
            {
                int findIndex = -1;
                for (int i = 0; i < client.ClientData.GoodsLimitDataList.Count; i++)
                {
                    if (client.ClientData.GoodsLimitDataList[i].GoodsID == goodsLimitData.GoodsID)
                    {
                        findIndex = i;
                        client.ClientData.GoodsLimitDataList[i].DayID = goodsLimitData.DayID;
                        client.ClientData.GoodsLimitDataList[i].UsedNum = goodsLimitData.UsedNum;
                        break;
                    }
                }
                if (-1 == findIndex)
                {
                    client.ClientData.GoodsLimitDataList.Add(goodsLimitData);
                }
            }
        }

        
        public static List<int> GetErGuoTouGoodsIDList()
        {
            List<int> erGuoTouGoodsIDList;
            if (Global.ErGuoTouGoodsIDList != null)
            {
                erGuoTouGoodsIDList = Global.ErGuoTouGoodsIDList;
            }
            else
            {
                int[] erGuoTouArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ErGuoTouList", ',');
                Global.ErGuoTouGoodsIDList = erGuoTouArr.ToList<int>();
                erGuoTouGoodsIDList = Global.ErGuoTouGoodsIDList;
            }
            return erGuoTouGoodsIDList;
        }

        
        public static bool HasEnoughGoodsDayUseNum(GameClient client, int goodsID, int willUseNum = 1)
        {
            int dayLimitNum = Global.GetGoodsLimitNum(client, goodsID);
            if (dayLimitNum > 0)
            {
                int todayUsedNum = Global.GetTodayGoodsLimitByID(client, goodsID);
                if (todayUsedNum + willUseNum > dayLimitNum)
                {
                    string goodsName = Global.GetGoodsNameByID(goodsID);
                    List<int> erGuoTouList = Global.GetErGuoTouGoodsIDList();
                    if (erGuoTouList.IndexOf(goodsID) >= 0)
                    {
                        GameManager.LuaMgr.Error(client, StringUtil.substitute(GLang.GetLang(131, new object[0]), new object[]
                        {
                            dayLimitNum,
                            goodsName
                        }), 0);
                        return false;
                    }
                    GameManager.LuaMgr.Error(client, StringUtil.substitute(GLang.GetLang(132, new object[0]), new object[]
                    {
                        goodsName,
                        dayLimitNum
                    }), 0);
                    return false;
                }
                else
                {
                    List<int> erGuoTouList = Global.GetErGuoTouGoodsIDList();
                    if (erGuoTouList.IndexOf(goodsID) >= 0)
                    {
                        int erGuoTouNum = Global.GetErGuoTouTodayNum(client);
                        if (erGuoTouNum + willUseNum > dayLimitNum)
                        {
                            string goodsName = Global.GetGoodsNameByID(erGuoTouList[0]);
                            GameManager.LuaMgr.Error(client, StringUtil.substitute(GLang.GetLang(133, new object[0]), new object[]
                            {
                                dayLimitNum,
                                goodsName
                            }), 0);
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        
        public static void AddGoodsLimitNum(GameClient client, int goodsID, int usedNum)
        {
            if (Global.GetGoodsLimitNum(client, goodsID) > 0)
            {
                GoodsLimitData goodsLimitData = Global.GetGoodsLimitByID(client, goodsID);
                if (null == goodsLimitData)
                {
                    goodsLimitData = new GoodsLimitData
                    {
                        GoodsID = goodsID,
                        DayID = TimeUtil.NowDateTime().DayOfYear,
                        UsedNum = usedNum
                    };
                    Global.UpdateGoodsLimitByID(client, goodsLimitData);
                }
                else
                {
                    int dayID = TimeUtil.NowDateTime().DayOfYear;
                    if (dayID != goodsLimitData.DayID)
                    {
                        goodsLimitData.DayID = dayID;
                        goodsLimitData.UsedNum = usedNum;
                    }
                    else
                    {
                        goodsLimitData.UsedNum += usedNum;
                    }
                }
                string strCmds = string.Format("{0}:{1}:{2}:{3}", new object[]
                {
                    client.ClientData.RoleID,
                    goodsLimitData.GoodsID,
                    goodsLimitData.DayID,
                    goodsLimitData.UsedNum
                });
                GameManager.DBCmdMgr.AddDBCmd(10099, strCmds, null, client.ServerId);
                client.sendCmd(3003, strCmds, false);
            }
        }

        
        public static bool CanUseGoods(GameClient client, int goodsID, bool errHint = true, bool isForEquipLoad = false)
        {
            SystemXmlItem systemGoodsItem = null;
            bool result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoodsItem))
            {
                result = false;
            }
            else if (!Global.IsCanEquipOrUseByOccupation(client, goodsID))
            {
                result = false;
            }
            else
            {
                string failedMsg = string.Empty;
                if (!SingletonTemplate<GoodsCanUseManager>.Instance().CheckCanUse_ByToType(client, goodsID, out failedMsg))
                {
                    if (errHint && !string.IsNullOrEmpty(failedMsg))
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, failedMsg, GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    }
                    result = false;
                }
                else
                {
                    string toType = systemGoodsItem.GetStringValue("ToType");
                    string toTypeProperty = systemGoodsItem.GetStringValue("ToTypeProperty");
                    int toSex = systemGoodsItem.GetIntValue("ToSex", -1);
                    if (toSex >= 0)
                    {
                        if (client.ClientData.RoleSex != toSex)
                        {
                            string goodsName = systemGoodsItem.GetStringValue("Title");
                            string sexName = (toSex == 0) ? GLang.GetLang(134, new object[0]) : GLang.GetLang(135, new object[0]);
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(136, new object[0]), new object[]
                            {
                                goodsName,
                                sexName
                            }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                            return false;
                        }
                    }
                    int toChangeLifeLev = systemGoodsItem.GetIntValue("ToZhuanSheng", -1);
                    int toLevel = systemGoodsItem.GetIntValue("ToLevel", -1);
                    if (client.ClientData.ChangeLifeCount < toChangeLifeLev)
                    {
                        string goodsName = systemGoodsItem.GetStringValue("Title");
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(137, new object[0]), new object[]
                        {
                            toLevel,
                            goodsName
                        }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 39);
                        result = false;
                    }
                    else
                    {
                        if (client.ClientData.ChangeLifeCount == toChangeLifeLev)
                        {
                            if (toLevel > 0)
                            {
                                if (client.ClientData.Level < toLevel)
                                {
                                    string goodsName = systemGoodsItem.GetStringValue("Title");
                                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(138, new object[0]), new object[]
                                    {
                                        toLevel,
                                        goodsName
                                    }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 39);
                                    return false;
                                }
                            }
                        }
                        result = true;
                    }
                }
            }
            return result;
        }

        
        public static bool CanUseGoodsByExtraTypeProperty(GameClient client, string toType, string toTypeProperty, bool errHint = true, bool isForEquipLoad = false)
        {
            bool result;
            if ("-1" == toType || toType.Length <= 0)
            {
                result = true;
            }
            else
            {
                string[] typeArr = toType.Split(new char[]
                {
                    ','
                });
                string[] propertyArr = toTypeProperty.Split(new char[]
                {
                    ','
                });
                if (typeArr.Length != propertyArr.Length)
                {
                    result = true;
                }
                else
                {
                    for (int index = 0; index < typeArr.Length; index++)
                    {
                        string type = typeArr[index];
                        string gateValue = propertyArr[index];
                        if (!Global.IsRoleReachLimit(client, type, gateValue, isForEquipLoad))
                        {
                            if (errHint)
                            {
                                if (StringUtil.IsEqualIgnoreCase(type, "CanNotBeyondLevel"))
                                {
                                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(139, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                                }
                                else
                                {
                                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(140, new object[0]), new object[]
                                    {
                                        Global.GetEquipLimitString(type, gateValue)
                                    }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                                }
                            }
                            return false;
                        }
                    }
                    result = true;
                }
            }
            return result;
        }

        
        public static bool UseGoodsByExtraTypePropertyBeforeUseGoods(GameClient client, string toType, string toTypeProperty)
        {
            bool result;
            if ("-1" == toType || toType.Length <= 0)
            {
                result = true;
            }
            else
            {
                string[] typeArr = toType.Split(new char[]
                {
                    ','
                });
                string[] propertyArr = toTypeProperty.Split(new char[]
                {
                    ','
                });
                if (typeArr.Length != propertyArr.Length)
                {
                    result = true;
                }
                else
                {
                    for (int index = 0; index < typeArr.Length; index++)
                    {
                        string type = typeArr[index];
                        string gateValue = propertyArr[index];
                        if (!Global.DoRoleReachLimitAction(client, type, gateValue))
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(140, new object[0]), new object[]
                            {
                                Global.GetEquipLimitString(type, gateValue)
                            }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                            return false;
                        }
                    }
                    result = true;
                }
            }
            return result;
        }

        
        public static bool IsRoleReachLimit(GameClient client, string type, string gateValue, bool isForEquipLoad = false)
        {
            bool result;
            if (StringUtil.IsEqualIgnoreCase(type, "VIP"))
            {
                result = Global.IsVip(client);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, "FEIANQUANQU"))
            {
                GameMap gameMap = null;
                result = (GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap) && null != gameMap && !gameMap.InSafeRegionList(client.CurrentGrid));
            }
            else if (StringUtil.IsEqualIgnoreCase(type, "CanNotBeyondLevel"))
            {
                string[] strAarray = gateValue.Split(new char[]
                {
                    '|'
                });
                if (strAarray.Length != 2)
                {
                    result = false;
                }
                else
                {
                    int nLimitChangeLife = Global.SafeConvertToInt32(strAarray[0]);
                    int nLimitLevel = Global.SafeConvertToInt32(strAarray[1]);
                    result = (client.ClientData.ChangeLifeCount <= nLimitChangeLife && (client.ClientData.ChangeLifeCount != nLimitChangeLife || client.ClientData.Level < nLimitLevel));
                }
            }
            else
            {
                int theGateValue = Global.SafeConvertToInt32(gateValue);
                int curValue = theGateValue - 1;
                if (StringUtil.IsEqualIgnoreCase(type, "JingMai"))
                {
                    curValue = GameManager.ClientMgr.GetJingMaiLevelValue(client);
                }
                else if (StringUtil.IsEqualIgnoreCase(type, "MaxAttack"))
                {
                    if (isForEquipLoad)
                    {
                        curValue = client.ClientData.BaseBattleAttributesOfLastTime[0];
                    }
                    else
                    {
                        curValue = (int)RoleAlgorithm.GetMaxAttackV(client);
                    }
                }
                else if (StringUtil.IsEqualIgnoreCase(type, "MaxMAttack"))
                {
                    if (isForEquipLoad)
                    {
                        curValue = client.ClientData.BaseBattleAttributesOfLastTime[1];
                    }
                    else
                    {
                        curValue = (int)RoleAlgorithm.GetMaxMagicAttackV(client);
                    }
                }
                else if (!StringUtil.IsEqualIgnoreCase(type, "MaxDSAttack"))
                {
                    if (StringUtil.IsEqualIgnoreCase(type, "UseYuanBao"))
                    {
                        curValue = client.ClientData.UserMoney;
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "AddIntoBH"))
                    {
                        curValue = client.ClientData.Faction;
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "WuXue"))
                    {
                        curValue = GameManager.ClientMgr.GetWuXueLevelValue(client);
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "ChengJiu"))
                    {
                        curValue = GameManager.ClientMgr.GetChengJiuPointsValue(client);
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "ZhanHunLevel"))
                    {
                        curValue = GameManager.ClientMgr.GetZhanHunLevelValue(client);
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "RongYuLevel"))
                    {
                        curValue = GameManager.ClientMgr.GetRongYuLevelValue(client);
                    }
                }
                result = (curValue >= theGateValue);
            }
            return result;
        }

        
        public static bool DoRoleReachLimitAction(GameClient client, string type, string gateValue)
        {
            int theGateValue = Global.SafeConvertToInt32(gateValue);
            int curValue = theGateValue;
            return !StringUtil.IsEqualIgnoreCase(type, "UseYuanBao") || GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, Math.Max(0, curValue), "DoRoleReachLimitAction", true, true, false, DaiBiSySType.None);
        }

        
        public static void ResetBaseBattleAttributesOfLastTime(GameClient client)
        {
            client.ClientData.BaseBattleAttributesOfLastTime[0] = (int)RoleAlgorithm.GetMaxAttackV(client);
            client.ClientData.BaseBattleAttributesOfLastTime[1] = (int)RoleAlgorithm.GetMaxMagicAttackV(client);
        }

        
        public static string GetEquipLimitString(string type, string gateValue)
        {
            string result;
            if (StringUtil.IsEqualIgnoreCase(type, "VIP"))
            {
                result = Global.GetLang("VIP");
            }
            else
            {
                string curValue = "";
                if (StringUtil.IsEqualIgnoreCase(type, "CanNotBeyondLevel"))
                {
                    result = Global.GetLang("您已超过物品最大使用等级");
                }
                else
                {
                    int theGateValue = Global.SafeConvertToInt32(gateValue);
                    if (StringUtil.IsEqualIgnoreCase(type, "JingMai"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("经脉等级{0}"), new object[]
                        {
                            theGateValue
                        });
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "MaxAttack"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("最大物理攻击{0}"), new object[]
                        {
                            theGateValue
                        });
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "MaxDSAttack"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("最大道术攻击{0}"), new object[]
                        {
                            theGateValue
                        });
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "MaxMAttack"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("最大魔法攻击{0}"), new object[]
                        {
                            theGateValue
                        });
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "UseYuanBao"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("使用{0}元宝"), new object[]
                        {
                            theGateValue
                        });
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "AddIntoBH"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("加入帮会后"), new object[0]);
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "WuXue"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("武学等级{0}"), new object[]
                        {
                            theGateValue
                        });
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "ChengJiu"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("成就{0}"), new object[]
                        {
                            theGateValue
                        });
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "ZhanHunLevel"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("战魂{0}"), new object[]
                        {
                            theGateValue
                        });
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "RongYuLevel"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("荣誉{0}"), new object[]
                        {
                            theGateValue
                        });
                    }
                    else if (StringUtil.IsEqualIgnoreCase(type, "FEIANQUANQU"))
                    {
                        curValue = StringUtil.substitute(Global.GetLang("非安全区{0}"), new object[]
                        {
                            ""
                        });
                    }
                    result = curValue;
                }
            }
            return result;
        }

        
        public static int GetErGuoTouTodayNum(GameClient client)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            int erGuoTouNum = Global.GetRoleParamsInt32FromDB(client, "ErGuoTouNum");
            int erGuoTouDayID = Global.GetRoleParamsInt32FromDB(client, "ErGuoTouDayID");
            int result;
            if (dayID == erGuoTouDayID)
            {
                result = erGuoTouNum;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        public static void AddErGuoTouTodayNum(GameClient client, int addNum)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            int erGuoTouNum = Global.GetRoleParamsInt32FromDB(client, "ErGuoTouNum");
            int erGuoTouDayID = Global.GetRoleParamsInt32FromDB(client, "ErGuoTouDayID");
            if (dayID == erGuoTouDayID)
            {
                erGuoTouNum += addNum;
            }
            else
            {
                erGuoTouNum = addNum;
                erGuoTouDayID = dayID;
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "ErGuoTouNum", erGuoTouNum, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "ErGuoTouDayID", erGuoTouDayID, true);
        }

        
        public static DateTimeRange[] GetNPCScriptTimeLimits(int npcScriptID, SystemXmlItem systemScriptItem)
        {
            DateTimeRange[] dateTimeRangeArray = null;
            lock (Global._NPCScriptTimeLimitsDict)
            {
                if (Global._NPCScriptTimeLimitsDict.TryGetValue(npcScriptID, out dateTimeRangeArray))
                {
                    return dateTimeRangeArray;
                }
            }
            string timeLimits = systemScriptItem.GetStringValue("TimeLimits");
            DateTimeRange[] result;
            if (string.IsNullOrEmpty(timeLimits))
            {
                result = null;
            }
            else
            {
                dateTimeRangeArray = Global.ParseDateTimeRangeStr(timeLimits);
                lock (Global._NPCScriptTimeLimitsDict)
                {
                    Global._NPCScriptTimeLimitsDict[npcScriptID] = dateTimeRangeArray;
                }
                result = dateTimeRangeArray;
            }
            return result;
        }

        
        public static void ClearNPCScriptTimeLimits()
        {
            lock (Global._NPCScriptTimeLimitsDict)
            {
                Global._NPCScriptTimeLimitsDict.Clear();
            }
        }

        
        public static bool FilterNPCScriptByID(GameClient client, int npcScriptID, out int errorCode)
        {
            errorCode = 0;
            bool result;
            if (npcScriptID <= 0)
            {
                errorCode = -11001;
                result = true;
            }
            else
            {
                SystemXmlItem systemScriptItem = null;
                if (!GameManager.systemNPCScripts.SystemXmlItemDict.TryGetValue(npcScriptID, out systemScriptItem))
                {
                    errorCode = -11002;
                    result = true;
                }
                else
                {
                    int minLevel = systemScriptItem.GetIntValue("MinLevel", -1);
                    int maxLevel = systemScriptItem.GetIntValue("MaxLevel", -1);
                    if (client.ClientData.Level < minLevel || client.ClientData.Level > maxLevel)
                    {
                        errorCode = -11003;
                        result = true;
                    }
                    else
                    {
                        int sexCondition = systemScriptItem.GetIntValue("SexCondition", -1);
                        if (-1 != sexCondition && client.ClientData.RoleSex != sexCondition)
                        {
                            errorCode = -11004;
                            result = true;
                        }
                        else
                        {
                            int occupCondition = systemScriptItem.GetIntValue("OccupCondition", -1);
                            int nOcc = Global.CalcOriginalOccupationID(client);
                            if (-1 != occupCondition && nOcc != occupCondition)
                            {
                                errorCode = -11005;
                                result = true;
                            }
                            else
                            {
                                DateTimeRange[] dateTimeRangeArray = Global.GetNPCScriptTimeLimits(npcScriptID, systemScriptItem);
                                if (null != dateTimeRangeArray)
                                {
                                    int endMinute = 0;
                                    if (!Global.JugeDateTimeInTimeRange(TimeUtil.NowDateTime(), dateTimeRangeArray, out endMinute, true))
                                    {
                                        errorCode = -11006;
                                        return true;
                                    }
                                }
                                int filterID = systemScriptItem.GetIntValue("FilterID", -1);
                                if (filterID <= 0)
                                {
                                    result = false;
                                }
                                else
                                {
                                    if (1 == filterID)
                                    {
                                        if (Global.GetLeftMonsterByCopyMapID(client.ClientData.CopyMapID) > 0)
                                        {
                                            errorCode = -11007;
                                            return true;
                                        }
                                        int toNextMapCode = FuBenManager.FindNextMapCodeByFuBenID(client.ClientData.MapCode);
                                        if (-1 == toNextMapCode)
                                        {
                                            errorCode = -11008;
                                            return true;
                                        }
                                    }
                                    else if (2 == filterID)
                                    {
                                        if (Global.GetLeftMonsterByCopyMapID(client.ClientData.CopyMapID) > 0)
                                        {
                                            errorCode = -11009;
                                            return true;
                                        }
                                        if (!FuBenManager.CanGetFuBenMapAwards(client))
                                        {
                                            errorCode = -11010;
                                            return true;
                                        }
                                        int awardState = GameManager.CopyMapMgr.FindAwardState(client.ClientData.RoleID, client.ClientData.FuBenSeqID, client.ClientData.MapCode);
                                        if (awardState > 0)
                                        {
                                            errorCode = -11011;
                                            return true;
                                        }
                                    }
                                    else if (3 == filterID)
                                    {
                                        if (!WuXingMapMgr.CanGetWuXingAward(client))
                                        {
                                            errorCode = -11012;
                                            return true;
                                        }
                                    }
                                    else if (4 != filterID)
                                    {
                                        if (5 == filterID)
                                        {
                                            if (client.ClientData.Faction <= 0 || client.ClientData.BHZhiWu != 1)
                                            {
                                                errorCode = -11013;
                                                return true;
                                            }
                                        }
                                    }
                                    result = false;
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        
        public static DateTimeRange[] GetNPCOperationTimeLimits(int npcOperationID, SystemXmlItem systemOperationItem)
        {
            DateTimeRange[] dateTimeRangeArray = null;
            lock (Global._NPCOpterationTimeLimitsDict)
            {
                if (Global._NPCOpterationTimeLimitsDict.TryGetValue(npcOperationID, out dateTimeRangeArray))
                {
                    return dateTimeRangeArray;
                }
            }
            string timeLimits = systemOperationItem.GetStringValue("TimeLimits");
            DateTimeRange[] result;
            if (string.IsNullOrEmpty(timeLimits))
            {
                result = null;
            }
            else
            {
                dateTimeRangeArray = Global.ParseDateTimeRangeStr(timeLimits);
                lock (Global._NPCOpterationTimeLimitsDict)
                {
                    Global._NPCOpterationTimeLimitsDict[npcOperationID] = dateTimeRangeArray;
                }
                result = dateTimeRangeArray;
            }
            return result;
        }

        
        public static void ClearNPCOperationTimeLimits()
        {
            lock (Global._NPCOpterationTimeLimitsDict)
            {
                Global._NPCOpterationTimeLimitsDict.Clear();
            }
        }

        
        public static bool FilterNPCOperationByID(GameClient client, int npcOperationID, int npcID)
        {
            bool result;
            if (npcOperationID <= 0)
            {
                result = true;
            }
            else
            {
                SystemXmlItem systemOperationItem = null;
                if (!GameManager.SystemOperasMgr.SystemXmlItemDict.TryGetValue(npcOperationID, out systemOperationItem))
                {
                    result = true;
                }
                else
                {
                    int minLevel = systemOperationItem.GetIntValue("MinLevel", -1);
                    int maxLevel = systemOperationItem.GetIntValue("MaxLevel", -1);
                    if (client.ClientData.Level < minLevel || client.ClientData.Level > maxLevel)
                    {
                        result = true;
                    }
                    else
                    {
                        int sexCondition = systemOperationItem.GetIntValue("SexCondition", -1);
                        if (-1 != sexCondition && client.ClientData.RoleSex != sexCondition)
                        {
                            result = true;
                        }
                        else
                        {
                            int occupCondition = systemOperationItem.GetIntValue("OccupCondition", -1);
                            int nOcc = Global.CalcOriginalOccupationID(client);
                            if (-1 != occupCondition && nOcc != occupCondition)
                            {
                                result = true;
                            }
                            else
                            {
                                DateTimeRange[] dateTimeRangeArray = Global.GetNPCOperationTimeLimits(npcOperationID, systemOperationItem);
                                if (null != dateTimeRangeArray)
                                {
                                    int endMinute = 0;
                                    if (!Global.JugeDateTimeInTimeRange(TimeUtil.NowDateTime(), dateTimeRangeArray, out endMinute, true))
                                    {
                                        return true;
                                    }
                                }
                                int filterID = systemOperationItem.GetIntValue("FilterID", -1);
                                if (filterID <= 0)
                                {
                                    result = false;
                                }
                                else
                                {
                                    if (10 == filterID)
                                    {
                                        if (null != client.ClientData.MyYaBiaoData)
                                        {
                                            if (client.ClientData.MyYaBiaoData.YaBiaoID > 0)
                                            {
                                                return true;
                                            }
                                        }
                                    }
                                    else if (11 == filterID)
                                    {
                                        if (client.ClientData.MyYaBiaoData == null || client.ClientData.MyYaBiaoData.YaBiaoID <= 0)
                                        {
                                            return true;
                                        }
                                    }
                                    else if (12 == filterID)
                                    {
                                        if (client.ClientData.MyYaBiaoData == null || client.ClientData.MyYaBiaoData.TakeGoods > 0)
                                        {
                                            return true;
                                        }
                                        long nowTicks = TimeUtil.NOW();
                                        if (nowTicks - client.ClientData.MyYaBiaoData.StartTime >= (long)Global.MaxYaBiaoTicks)
                                        {
                                            return true;
                                        }
                                        SystemXmlItem systemYaBiaoItem = null;
                                        if (!GameManager.systemYaBiaoMgr.SystemXmlItemDict.TryGetValue(client.ClientData.MyYaBiaoData.YaBiaoID, out systemYaBiaoItem))
                                        {
                                            return true;
                                        }
                                        if (npcID != systemYaBiaoItem.GetIntValue("DestNPC", -1))
                                        {
                                            return true;
                                        }
                                    }
                                    result = false;
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        
        public static string GetMonsterNameByID(int monsterID)
        {
            return MonsterNameManager.GetMonsterName(monsterID);
        }

        
        public static GoodsData GetSaleGoodsDataByDbID(GameClient client, int id)
        {
            GoodsData result;
            if (null == client.ClientData.SaleGoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.SaleGoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.SaleGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.SaleGoodsDataList[i].Id == id)
                        {
                            return client.ClientData.SaleGoodsDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static int GetSaleGoodsDataCount(GameClient client)
        {
            int result;
            if (null == client.ClientData.SaleGoodsDataList)
            {
                result = 0;
            }
            else
            {
                int count = 0;
                lock (client.ClientData.SaleGoodsDataList)
                {
                    count = client.ClientData.SaleGoodsDataList.Count;
                }
                result = count;
            }
            return result;
        }

        
        public static bool RemoveSaleGoodsData(GameClient client, GoodsData gd)
        {
            bool result;
            if (null == gd)
            {
                result = false;
            }
            else if (client.ClientData.SaleGoodsDataList == null)
            {
                result = false;
            }
            else
            {
                bool ret = false;
                lock (client.ClientData.SaleGoodsDataList)
                {
                    ret = client.ClientData.SaleGoodsDataList.Remove(gd);
                }
                result = ret;
            }
            return result;
        }

        
        public static void AddSaleGoodsData(GameClient client, GoodsData gd)
        {
            if (null != gd)
            {
                if (client.ClientData.SaleGoodsDataList == null)
                {
                    client.ClientData.SaleGoodsDataList = new List<GoodsData>();
                }
                lock (client.ClientData.SaleGoodsDataList)
                {
                    client.ClientData.SaleGoodsDataList.Add(gd);
                }
                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.MallInSaleCount));
            }
        }

        
        public static void ProcessTaskData(GameClient client)
        {
            if (null == client.ClientData.TaskDataList)
            {
                client.ClientData.TaskDataList = new List<TaskData>();
            }
            else
            {
                lock (client.ClientData.TaskDataList)
                {
                    for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                    {
                        Global.ProcessTaskData(client, client.ClientData.TaskDataList[i]);
                        OldTaskData oldTaskData = Global.FindOldTaskByTaskID(client, client.ClientData.TaskDataList[i].DoingTaskID);
                        if (null != oldTaskData)
                        {
                            client.ClientData.TaskDataList[i].DoneCount = oldTaskData.DoCount;
                        }
                    }
                }
            }
        }

        
        public static TaskAwardsData GetTaskAwardsData(GameClient client, int taskID, SystemXmlItem systemTask)
        {
            TaskAwardsData taskAwards = new TaskAwardsData
            {
                TaskawardList = GameManager.TaskAwardsMgr.FindTaskAwards(taskID),
                OtherTaskawardList = GameManager.TaskAwardsMgr.FindOtherAwards(taskID),
                Moneyaward = GameManager.TaskAwardsMgr.FindMoney(taskID),
                Experienceaward = GameManager.TaskAwardsMgr.FindExperience(client, taskID),
                YinLiangaward = GameManager.TaskAwardsMgr.FindYinLiang(taskID),
                LingLiaward = GameManager.TaskAwardsMgr.FindLingLi(taskID),
                BindYuanBaoaward = GameManager.TaskAwardsMgr.FindBindYuanBao(taskID),
                ZhenQiaward = GameManager.TaskAwardsMgr.FindZhenQi(client, taskID),
                LieShaaward = GameManager.TaskAwardsMgr.FindLieSha(client, taskID),
                WuXingaward = GameManager.TaskAwardsMgr.FindWuXing(client, taskID),
                NeedYuanBao = GameManager.TaskAwardsMgr.FindNeedYuanBao(client, taskID),
                JunGongaward = GameManager.TaskAwardsMgr.FindJunGong(client, taskID),
                RongYuaward = GameManager.TaskAwardsMgr.FindRongYu(client, taskID),
                MoJingaward = GameManager.TaskAwardsMgr.FindMoJing(client, taskID),
                XingHunaward = GameManager.TaskAwardsMgr.FindXingHun(client, taskID),
                CompDonate = GameManager.TaskAwardsMgr.FindCompDonate(client, taskID),
                CompJunXian = GameManager.TaskAwardsMgr.FindCompJunXian(client, taskID)
            };
            if (systemTask.GetIntValue("TaskClass", -1) == 8)
            {
                int nIndex = Global.GetDailyCircleTaskAddAward(client);
                if (nIndex >= 0)
                {
                    taskAwards.AddExperienceForDailyCircleTask = Data.DailyCircleTaskAward[nIndex].Experience;
                    taskAwards.AddMoJingForDailyCircleTask = Data.DailyCircleTaskAward[nIndex].XingHun;
                    int nGood = Data.DailyCircleTaskAward[nIndex].GoodsID;
                    int nNum = Data.DailyCircleTaskAward[nIndex].GoodsNum;
                    string sGood = Convert.ToString(nGood);
                    string sNmu = Convert.ToString(nNum);
                    taskAwards.AddGoodsForDailyCircleTask = string.Concat(new object[]
                    {
                        sGood,
                        ",",
                        sNmu,
                        ",",
                        Data.DailyCircleTaskAward[nIndex].Binding
                    });
                }
            }
            return taskAwards;
        }

        
        public static void ProcessTaskData(GameClient client, TaskData taskData)
        {
            int taskID = taskData.DoingTaskID;
            taskData.TaskAwards = new TaskAwardsData
            {
                TaskawardList = GameManager.TaskAwardsMgr.FindTaskAwards(taskID),
                OtherTaskawardList = GameManager.TaskAwardsMgr.FindOtherAwards(taskID),
                Moneyaward = GameManager.TaskAwardsMgr.FindMoney(taskID),
                Experienceaward = GameManager.TaskAwardsMgr.FindExperience(client, taskID),
                YinLiangaward = GameManager.TaskAwardsMgr.FindYinLiang(taskID),
                LingLiaward = GameManager.TaskAwardsMgr.FindLingLi(taskID),
                BindYuanBaoaward = GameManager.TaskAwardsMgr.FindBindYuanBao(taskID),
                ZhenQiaward = GameManager.TaskAwardsMgr.FindZhenQi(client, taskID),
                LieShaaward = GameManager.TaskAwardsMgr.FindLieSha(client, taskID),
                WuXingaward = GameManager.TaskAwardsMgr.FindWuXing(client, taskID),
                NeedYuanBao = GameManager.TaskAwardsMgr.FindNeedYuanBao(client, taskID),
                JunGongaward = GameManager.TaskAwardsMgr.FindJunGong(client, taskID),
                RongYuaward = GameManager.TaskAwardsMgr.FindRongYu(client, taskID),
                MoJingaward = GameManager.TaskAwardsMgr.FindMoJing(client, taskID),
                XingHunaward = GameManager.TaskAwardsMgr.FindXingHun(client, taskID),
                CompDonate = GameManager.TaskAwardsMgr.FindCompDonate(client, taskID),
                CompJunXian = GameManager.TaskAwardsMgr.FindCompJunXian(client, taskID)
            };
            SystemXmlItem systemTask = null;
            if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskData.DoingTaskID, out systemTask))
            {
                ProcessTask.InitRoleTaskVal(client, taskData, systemTask);
                int needCopleteChengJiu = systemTask.GetIntValue("ChenJiuID", -1);
                if (needCopleteChengJiu > 0)
                {
                    SystemXmlItem itemChengJiu = null;
                    if (!GameManager.systemChengJiu.SystemXmlItemDict.TryGetValue(needCopleteChengJiu, out itemChengJiu))
                    {
                        return;
                    }
                    if (taskData.ChengJiuVal < 0L)
                    {
                        return;
                    }
                    if (ChengJiuManager.IsChengJiuCompleted(client, needCopleteChengJiu))
                    {
                        taskData.ChengJiuVal = -1L;
                    }
                    else
                    {
                        taskData.ChengJiuVal = ChengJiuManager.getChengJiuValue(client, (AchievementType)(needCopleteChengJiu / 10));
                    }
                }
                if (systemTask != null && systemTask.GetIntValue("TaskClass", -1) == 8)
                {
                    int nIndex = Global.GetDailyCircleTaskAddAward(client);
                    if (nIndex >= 0)
                    {
                        taskData.TaskAwards.AddExperienceForDailyCircleTask = Data.DailyCircleTaskAward[nIndex].Experience;
                        taskData.TaskAwards.AddMoJingForDailyCircleTask = Data.DailyCircleTaskAward[nIndex].XingHun;
                        int nGood = Data.DailyCircleTaskAward[nIndex].GoodsID;
                        int nNum = Data.DailyCircleTaskAward[nIndex].GoodsNum;
                        string sGood = Convert.ToString(nGood);
                        string sNmu = Convert.ToString(nNum);
                        taskData.TaskAwards.AddGoodsForDailyCircleTask = string.Concat(new object[]
                        {
                            sGood,
                            ",",
                            sNmu,
                            ",",
                            Data.DailyCircleTaskAward[nIndex].Binding
                        });
                    }
                }
            }
        }

        
        public static OldTaskData FindOldTaskByTaskID(GameClient client, int taskID)
        {
            OldTaskData result;
            if (null == client.ClientData.OldTasks)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.OldTasks)
                {
                    for (int i = 0; i < client.ClientData.OldTasks.Count; i++)
                    {
                        if (taskID == client.ClientData.OldTasks[i].TaskID)
                        {
                            return client.ClientData.OldTasks[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static void AddOldTask(GameClient client, int taskID)
        {
            if (null == client.ClientData.OldTasks)
            {
                client.ClientData.OldTasks = new List<OldTaskData>();
            }
            int findIndex = -1;
            lock (client.ClientData.OldTasks)
            {
                for (int i = 0; i < client.ClientData.OldTasks.Count; i++)
                {
                    if (client.ClientData.OldTasks[i].TaskID == taskID)
                    {
                        findIndex = i;
                        break;
                    }
                }
                if (findIndex >= 0)
                {
                    client.ClientData.OldTasks[findIndex].DoCount++;
                }
                else
                {
                    client.ClientData.OldTasks.Add(new OldTaskData
                    {
                        TaskID = taskID,
                        DoCount = 1
                    });
                }
            }
        }

        
        public static TaskData GetTaskData(GameClient client, int taskID)
        {
            TaskData result;
            if (null == client.ClientData.TaskDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.TaskDataList)
                {
                    for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                    {
                        if (client.ClientData.TaskDataList[i].DoingTaskID == taskID)
                        {
                            return client.ClientData.TaskDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static TaskData GetTaskDataByDbID(GameClient client, int taskDbID)
        {
            TaskData result;
            if (null == client.ClientData.TaskDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.TaskDataList)
                {
                    for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                    {
                        if (client.ClientData.TaskDataList[i].DbID == taskDbID)
                        {
                            return client.ClientData.TaskDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static NPCTaskState GetNPCTaskState(List<NPCTaskState> npcTaskStateList, int npcID)
        {
            NPCTaskState result;
            if (null == npcTaskStateList)
            {
                result = null;
            }
            else
            {
                for (int i = 0; i < npcTaskStateList.Count; i++)
                {
                    if (npcTaskStateList[i].NPCID == npcID)
                    {
                        return npcTaskStateList[i];
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static int GetTaskMaxRedoing(int taskID)
        {
            int maxRedoing = -1;
            SystemXmlItem systemTask = null;
            int result;
            if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                result = maxRedoing;
            }
            else
            {
                maxRedoing = systemTask.GetIntValue("MaxRedoing", -1);
                result = maxRedoing;
            }
            return result;
        }

        
        public static bool CanTakeNewTask(GameClient client, int taskID, SystemXmlItem systemTask = null)
        {
            bool result;
            if (null != Global.GetTaskData(client, taskID))
            {
                result = false;
            }
            else
            {
                if (null == systemTask)
                {
                    if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                    {
                        return false;
                    }
                }
                int forceNoPub = systemTask.GetIntValue("ForceNoPub", -1);
                if (1 == forceNoPub)
                {
                    result = false;
                }
                else
                {
                    string pubStartTime = systemTask.GetStringValue("PubStartTime");
                    string pubEndTime = systemTask.GetStringValue("PubEndTime");
                    if (!string.IsNullOrEmpty(pubStartTime) && !string.IsNullOrEmpty(pubEndTime))
                    {
                        long startTime = Global.SafeConvertToTicks(pubStartTime);
                        long endTime = Global.SafeConvertToTicks(pubEndTime);
                        long nowTicks = TimeUtil.NOW();
                        if (nowTicks < startTime || nowTicks > endTime)
                        {
                            return false;
                        }
                    }
                    int taskSex = systemTask.GetIntValue("SexCondition", -1);
                    if (-1 != taskSex)
                    {
                        if (client.ClientData.RoleSex != taskSex)
                        {
                            return false;
                        }
                    }
                    int taskOccupation = systemTask.GetIntValue("OccupCondition", -1);
                    if (-1 != taskOccupation)
                    {
                        int nOcc = Global.CalcOriginalOccupationID(client);
                        if (nOcc != taskOccupation)
                        {
                            return false;
                        }
                    }
                    int taskClass = systemTask.GetIntValue("TaskClass", -1);
                    if (8 == taskClass)
                    {
                        if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.RiChangRenWu, false))
                        {
                            return false;
                        }
                    }
                    if (9 == taskClass)
                    {
                        if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.TaofaRenWu, false))
                        {
                            return false;
                        }
                    }
                    else if (7 == taskClass)
                    {
                        if (client.ClientData.Faction <= 0)
                        {
                            return false;
                        }
                    }
                    else if (taskClass >= 100 && taskClass <= 150)
                    {
                        if (client.ClientData.CompType <= 0)
                        {
                            return false;
                        }
                    }
                    else if (taskClass == 0)
                    {
                        if (client.ClientData.MainTaskID >= taskID)
                        {
                            return false;
                        }
                    }
                    int taskCompType = systemTask.GetIntValue("CompID", -1);
                    if (-1 != taskCompType)
                    {
                        if (client.ClientData.CompType != taskCompType)
                        {
                            return false;
                        }
                    }
                    int nLev = client.ClientData.Level;
                    int nChangeLifeLev = client.ClientData.ChangeLifeCount;
                    int minLevel = systemTask.GetIntValue("MinLevel", -1);
                    int minChangeLifeLev = systemTask.GetIntValue("MinZhuanSheng", -1);
                    int maxLevel = systemTask.GetIntValue("MaxLevel", -1);
                    int maxChangeLifeLev = systemTask.GetIntValue("MaxZhuanSheng", -1);
                    if (nChangeLifeLev < minChangeLifeLev || nChangeLifeLev > maxChangeLifeLev)
                    {
                        result = false;
                    }
                    else if (nChangeLifeLev == minChangeLifeLev && nLev < minLevel)
                    {
                        result = false;
                    }
                    else if (nChangeLifeLev == maxChangeLifeLev && nLev > maxLevel)
                    {
                        result = false;
                    }
                    else
                    {
                        int prevTask = systemTask.GetIntValue("PrevTask", -1);
                        if (taskClass == 0)
                        {
                            result = (client.ClientData.MainTaskID >= prevTask);
                        }
                        else
                        {
                            OldTaskData oldTaskData;
                            int maxRedoing;
                            if (-1 != prevTask)
                            {
                                oldTaskData = Global.FindOldTaskByTaskID(client, prevTask);
                                if (oldTaskData == null)
                                {
                                    return false;
                                }
                                maxRedoing = Global.GetTaskMaxRedoing(prevTask);
                                if (maxRedoing > 0 && oldTaskData.DoCount < maxRedoing)
                                {
                                    return false;
                                }
                            }
                            maxRedoing = systemTask.GetIntValue("MaxRedoing", -1);
                            oldTaskData = Global.FindOldTaskByTaskID(client, taskID);
                            if (null != oldTaskData)
                            {
                                if (maxRedoing > 0 && oldTaskData.DoCount >= maxRedoing)
                                {
                                    return false;
                                }
                            }
                            result = true;
                        }
                    }
                }
            }
            return result;
        }

        
        public static int ComputeNPCTaskState(GameClient client, List<TaskData> TaskDataList, int npcID, int completeTaskId = 0)
        {
            int ret = 0;
            List<int> taskIDList = null;
            if (GameManager.NPCTasksMgr.SourceNPCTasksDict.TryGetValue(npcID, out taskIDList))
            {
                for (int i = 0; i < taskIDList.Count; i++)
                {
                    SystemXmlItem systemTask = null;
                    if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskIDList[i], out systemTask))
                    {
                        int taskClass = systemTask.GetIntValue("TaskClass", -1);
                        if ((taskClass >= 3 && taskClass <= 9) || (taskClass >= 100 && taskClass <= 150))
                        {
                            if (!Global.CanTaskPaoHuanTask(client, taskClass))
                            {
                                goto IL_DF;
                            }
                        }
                        else if (taskClass == 0)
                        {
                            if (taskIDList[i] <= completeTaskId)
                            {
                                goto IL_DF;
                            }
                        }
                        if (Global.CanTakeNewTask(client, taskIDList[i], null))
                        {
                            ret = 1;
                            break;
                        }
                    }
                    IL_DF:;
                }
            }
            int result;
            if (null == TaskDataList)
            {
                result = ret;
            }
            else
            {
                lock (TaskDataList)
                {
                    for (int i = 0; i < TaskDataList.Count; i++)
                    {
                        SystemXmlItem systemTask = null;
                        if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(TaskDataList[i].DoingTaskID, out systemTask))
                        {
                            int destNPC = systemTask.GetIntValue("DestNPC", -1);
                            if (destNPC == npcID)
                            {
                                if (Global.JugeTaskComplete(client, TaskDataList[i].DoingTaskID, TaskDataList[i].DoingTaskVal1, TaskDataList[i].DoingTaskVal2))
                                {
                                    ret = 3;
                                }
                                else
                                {
                                    ret = 2;
                                }
                            }
                        }
                    }
                }
                result = ret;
            }
            return result;
        }

        
        public static void ComputeNPCTaskState(GameClient client)
        {
            string fileName = string.Format("Map/{0}/npcs.xml", client.ClientData.MapCode);
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.ResPath(fileName));
            if (null != xml)
            {
                List<NPCTaskState> npcTaskStateList = new List<NPCTaskState>();
                IEnumerable<XElement> items = xml.Elements("NPCs").Elements<XElement>();
                foreach (XElement item in items)
                {
                    int npcID = -1;
                    if ("" != (string)item.Attribute("Code"))
                    {
                        npcID = Convert.ToInt32((string)item.Attribute("Code"));
                    }
                    if (-1 != npcID)
                    {
                        npcTaskStateList.Add(new NPCTaskState
                        {
                            NPCID = npcID,
                            TaskState = 0
                        });
                    }
                }
                for (int i = 0; i < npcTaskStateList.Count; i++)
                {
                    npcTaskStateList[i].TaskState = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, npcTaskStateList[i].NPCID, 0);
                }
                GameManager.ClientMgr.NotifyNPCTaskStateList(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, npcTaskStateList);
            }
        }

        
        public static bool GetTaskSourceNPCID(SystemXmlItem systemTask, out int mapCode, out int npcType, out int npcID)
        {
            mapCode = -1;
            npcType = 3;
            npcID = -1;
            int sourceNPC = systemTask.GetIntValue("SourceNPC", -1);
            SystemXmlItem xmlNode = null;
            bool result;
            if (!GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(sourceNPC, out xmlNode))
            {
                result = false;
            }
            else
            {
                mapCode = xmlNode.GetIntValue("MapCode", -1);
                npcType = 3;
                npcID = xmlNode.GetIntValue("ID", -1);
                result = true;
            }
            return result;
        }

        
        public static bool GetTaskDestNPCID(SystemXmlItem systemTask, out int mapCode, out int npcType, out int npcID)
        {
            mapCode = -1;
            npcType = 3;
            npcID = -1;
            int destNPC = systemTask.GetIntValue("DestNPC", -1);
            SystemXmlItem xmlNode = null;
            bool result;
            if (!GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(destNPC, out xmlNode))
            {
                result = false;
            }
            else
            {
                mapCode = xmlNode.GetIntValue("MapCode", -1);
                npcType = 3;
                npcID = xmlNode.GetIntValue("ID", -1);
                result = true;
            }
            return result;
        }

        
        public static bool JugeTaskTargetComplete(SystemXmlItem systemTask, int num, int taskVal)
        {
            int[] TargetNPCArray = systemTask.GetIntArrayValue(string.Format("TargetNPC{0}", num), '|');
            bool result;
            if (TargetNPCArray == null || TargetNPCArray.Length == 0)
            {
                result = true;
            }
            else if (TargetNPCArray[0] < 0 && systemTask.GetIntValue(string.Format("TargetType{0}", num), -1) <= 0)
            {
                result = true;
            }
            else
            {
                int targetNum = systemTask.GetIntValue(string.Format("TargetNum{0}", num), -1);
                result = (taskVal >= targetNum);
            }
            return result;
        }

        
        public static bool JugeTaskChengJiuComplete(GameClient client, SystemXmlItem systemTask)
        {
            int needCompleteChengJiu = systemTask.GetIntValue("ChenJiuID", -1);
            return needCompleteChengJiu <= 0 || ChengJiuManager.IsChengJiuCompleted(client, needCompleteChengJiu);
        }

        
        public static bool JugeTaskComplete(GameClient client, int taskID, int taskVal1, int taskVal2)
        {
            SystemXmlItem systemTask = null;
            return GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask) && (Global.JugeTaskTargetComplete(systemTask, 1, taskVal1) && Global.JugeTaskTargetComplete(systemTask, 2, taskVal2)) && Global.JugeTaskChengJiuComplete(client, systemTask);
        }

        
        public static int GetFocusTaskCount(GameClient client)
        {
            int ret = 0;
            int result;
            if (null == client.ClientData.TaskDataList)
            {
                result = ret;
            }
            else
            {
                lock (client.ClientData.TaskDataList)
                {
                    for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                    {
                        if (client.ClientData.TaskDataList[i].DoingTaskFocus > 0)
                        {
                            ret++;
                        }
                    }
                }
                result = ret;
            }
            return result;
        }

        
        public static List<GoodsData> GetTaskAwardsGoodsGridCount(GameClient client, int taskID)
        {
            List<GoodsData> goodsDataList = new List<GoodsData>();
            int nOcc = Global.CalcOriginalOccupationID(client);
            List<AwardsItemData> awardsItemList = GameManager.TaskAwardsMgr.FindTaskAwards(taskID);
            if (null != awardsItemList)
            {
                for (int i = 0; i < awardsItemList.Count; i++)
                {
                    if (Global.IsCanGiveRewardByOccupation(client, awardsItemList[i].GoodsID))
                    {
                        goodsDataList.Add(new GoodsData
                        {
                            GoodsID = awardsItemList[i].GoodsID,
                            GCount = awardsItemList[i].GoodsNum,
                            Binding = awardsItemList[i].Binding,
                            Forge_level = awardsItemList[i].Level,
                            Quality = awardsItemList[i].Quality,
                            Lucky = awardsItemList[i].IsHaveLuckyProp,
                            ExcellenceInfo = awardsItemList[i].ExcellencePorpValue,
                            AppendPropLev = awardsItemList[i].AppendLev,
                            Endtime = awardsItemList[i].EndTime
                        });
                    }
                }
            }
            awardsItemList = GameManager.TaskAwardsMgr.FindOtherAwards(taskID);
            if (null != awardsItemList)
            {
                for (int i = 0; i < awardsItemList.Count; i++)
                {
                    if (Global.IsCanGiveRewardByOccupation(client, awardsItemList[i].GoodsID))
                    {
                        goodsDataList.Add(new GoodsData
                        {
                            GoodsID = awardsItemList[i].GoodsID,
                            GCount = awardsItemList[i].GoodsNum,
                            Binding = awardsItemList[i].Binding,
                            Forge_level = awardsItemList[i].Level,
                            Quality = awardsItemList[i].Quality,
                            Lucky = awardsItemList[i].IsHaveLuckyProp,
                            ExcellenceInfo = awardsItemList[i].ExcellencePorpValue,
                            AppendPropLev = awardsItemList[i].AppendLev,
                            Endtime = awardsItemList[i].EndTime
                        });
                    }
                }
            }
            return goodsDataList;
        }

        
        public static bool CanCompleteTaskByGridNum(SocketListener sl, TCPOutPacketPool pool, GameClient client, int taskID)
        {
            List<GoodsData> goodsDataList = Global.GetTaskAwardsGoodsGridCount(client, taskID);
            return null == goodsDataList || Global.CanAddGoodsDataList(client, goodsDataList);
        }

        
        public static List<GoodsData> ConvertToGoodsDataList(List<AwardsItemData> awardsItemList, int nOccupation = -1)
        {
            List<GoodsData> goodsDataList = new List<GoodsData>();
            if (null != awardsItemList)
            {
                for (int i = 0; i < awardsItemList.Count; i++)
                {
                    if (nOccupation < 0 || awardsItemList[i].Occupation == -1 || awardsItemList[i].Occupation == nOccupation)
                    {
                        goodsDataList.Add(new GoodsData
                        {
                            GoodsID = awardsItemList[i].GoodsID,
                            GCount = awardsItemList[i].GoodsNum,
                            Binding = awardsItemList[i].Binding,
                            Forge_level = awardsItemList[i].Level,
                            Quality = awardsItemList[i].Quality,
                            Lucky = awardsItemList[i].IsHaveLuckyProp,
                            ExcellenceInfo = awardsItemList[i].ExcellencePorpValue,
                            AppendPropLev = awardsItemList[i].AppendLev,
                            Endtime = awardsItemList[i].EndTime
                        });
                    }
                }
            }
            return goodsDataList;
        }

        
        public static int GetSomethingTaskNeedGoodsNum(GameClient client, int taskID, int npcID, int extensionID, out int goodsID)
        {
            goodsID = -1;
            SystemXmlItem systemTask = null;
            int result;
            if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                result = 0;
            }
            else
            {
                int[] TargetNPCArray = systemTask.GetIntArrayValue("TargetNPC1", '|');
                if (TargetNPCArray != null && TargetNPCArray.Contains(extensionID))
                {
                    if (systemTask.GetIntValue("TargetType1", -1) == 6 && "" != systemTask.GetStringValue("PropsName1"))
                    {
                        string goodsName = systemTask.GetStringValue("PropsName1");
                        int transferGoodsID = Global.GetGoodsByName(goodsName);
                        if (transferGoodsID < -1)
                        {
                            result = 0;
                        }
                        else
                        {
                            goodsID = transferGoodsID;
                            result = 1;
                        }
                    }
                    else
                    {
                        result = 0;
                    }
                }
                else if (extensionID == systemTask.GetIntValue("TargetNPC2", -1))
                {
                    if (systemTask.GetIntValue("TargetType2", -1) == 6 && "" != systemTask.GetStringValue("PropsName2"))
                    {
                        string goodsName = systemTask.GetStringValue("PropsName2");
                        int transferGoodsID = Global.GetGoodsByName(goodsName);
                        if (transferGoodsID < -1)
                        {
                            result = 0;
                        }
                        else
                        {
                            goodsID = transferGoodsID;
                            result = 1;
                        }
                    }
                    else
                    {
                        result = 0;
                    }
                }
                else
                {
                    result = 0;
                }
            }
            return result;
        }

        
        public static bool RemoveInvalidTask(GameClient client, TaskData taskData)
        {
            bool result;
            if (GameManager.SystemTasksMgr.SystemXmlItemDict.ContainsKey(taskData.DoingTaskID))
            {
                result = false;
            }
            else
            {
                int dbID = taskData.DbID;
                int taskID = taskData.DoingTaskID;
                GameManager.DBCmdMgr.AddDBCmd(154, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, dbID, taskID), null, client.ServerId);
                result = true;
            }
            return result;
        }

        
        public static bool RemoveAllInvalidTasks(GameClient client)
        {
            bool result;
            if (client.ClientData.TaskDataList == null || client.ClientData.TaskDataList.Count <= 0)
            {
                result = false;
            }
            else
            {
                List<TaskData> abandonTaskList = new List<TaskData>();
                int abandonCount = 0;
                lock (client.ClientData.TaskDataList)
                {
                    for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                    {
                        if (Global.RemoveInvalidTask(client, client.ClientData.TaskDataList[i]))
                        {
                            abandonTaskList.Add(client.ClientData.TaskDataList[i]);
                            abandonCount++;
                        }
                    }
                }
                for (int i = 0; i < abandonTaskList.Count; i++)
                {
                    lock (client.ClientData.TaskDataList)
                    {
                        client.ClientData.TaskDataList.Remove(abandonTaskList[i]);
                    }
                    LogManager.WriteLog(LogTypes.Error, string.Format("删除无效的任务, Client={0}({1}), TaskID={2}", client.ClientData.RoleID, client.ClientData.RoleName, abandonTaskList[i].DoingTaskID), null, true);
                }
                result = (abandonCount > 0);
            }
            return result;
        }

        
        public static bool CanCompleteTaskByBlessPoint(GameClient client, SystemXmlItem systemTask)
        {
            int blessPoint = systemTask.GetIntValue("BlessPoint", -1);
            return blessPoint <= 0 || client.ClientData.HorseDbID > 0;
        }

        
        public static List<AwardsItemData> GetRandomTaskawardItemList(List<AwardsItemData> awardsItemList, int randomTaskaward)
        {
            List<AwardsItemData> result;
            if (randomTaskaward <= 0)
            {
                result = awardsItemList;
            }
            else
            {
                awardsItemList = Global.RandomSortList<AwardsItemData>(awardsItemList);
                randomTaskaward = Global.GetRandomNumber(0, randomTaskaward + 1);
                while (awardsItemList.Count > randomTaskaward)
                {
                    awardsItemList.RemoveAt(0);
                }
                result = awardsItemList;
            }
            return result;
        }

        
        private static void ProcessFuBenNPCOrMonster(SystemXmlItem taskXml, int oldMapCode, int oldNpcType, int oldNpcID, out int mapCode, out int npcType, out int npcID)
        {
            mapCode = oldMapCode;
            npcType = oldNpcType;
            npcID = oldNpcID;
            if (-1 != oldMapCode)
            {
                if (MapTypes.Normal != Global.GetMapType(oldMapCode))
                {
                    Global.GetTaskSourceNPCID(taskXml, out mapCode, out npcType, out npcID);
                }
            }
        }

        
        public static bool GetTaskTargetID(SystemXmlItem taskXml, int num, out int mapCode, out int npcType, out int npcID, bool replaceFuBen = true)
        {
            mapCode = -1;
            npcType = -1;
            npcID = -1;
            int targetType = taskXml.GetIntValue(StringUtil.substitute("TargetType{0}", new object[]
            {
                num
            }), -1);
            int[] TargetNPCArray = taskXml.GetIntArrayValue(string.Format("TargetNPC{0}", num), '|');
            int targetNPC = (TargetNPCArray != null && TargetNPCArray.Length != 0) ? TargetNPCArray[0] : -1;
            if (targetType == 0)
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode", -1);
                        npcType = 3;
                        npcID = xmlNode.GetIntValue("ID", -1);
                    }
                }
            }
            else if (targetType == 1)
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.systemMonsterMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode", -1);
                        npcType = 2;
                        npcID = xmlNode.GetIntValue("ID", -1);
                    }
                }
            }
            else if (targetType == 2)
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.systemMonsterMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode", -1);
                        npcType = 2;
                        npcID = xmlNode.GetIntValue("ID", -1);
                    }
                }
            }
            else if (targetType != 4)
            {
                if (targetType == 5)
                {
                    if (-1 != targetNPC)
                    {
                        SystemXmlItem xmlNode = null;
                        if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                        {
                            mapCode = xmlNode.GetIntValue("MapCode", -1);
                            npcType = 3;
                            npcID = xmlNode.GetIntValue("ID", -1);
                        }
                    }
                }
                else if (targetType == 7)
                {
                    if (-1 != targetNPC)
                    {
                        SystemXmlItem xmlNode = null;
                        if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                        {
                            mapCode = xmlNode.GetIntValue("MapCode", -1);
                            npcType = 3;
                            npcID = xmlNode.GetIntValue("ID", -1);
                        }
                    }
                }
                else if (targetType == 8)
                {
                    if (-1 != targetNPC)
                    {
                        SystemXmlItem xmlNode = null;
                        if (GameManager.systemMonsterMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                        {
                            mapCode = xmlNode.GetIntValue("MapCode", -1);
                            npcType = 2;
                            npcID = xmlNode.GetIntValue("ID", -1);
                        }
                    }
                }
                else if (targetType == 9)
                {
                    if (-1 != targetNPC)
                    {
                        SystemXmlItem xmlNode = null;
                        if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                        {
                            mapCode = xmlNode.GetIntValue("MapCode", -1);
                            npcType = 2;
                            npcID = xmlNode.GetIntValue("ID", -1);
                        }
                    }
                }
                else if (targetType == 10)
                {
                    if (-1 != targetNPC)
                    {
                        SystemXmlItem xmlNode = null;
                        if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                        {
                            mapCode = xmlNode.GetIntValue("MapCode", -1);
                            npcType = 2;
                            npcID = xmlNode.GetIntValue("ID", -1);
                        }
                    }
                }
                else if (targetType != 4)
                {
                    if (-1 != targetNPC)
                    {
                        SystemXmlItem xmlNode = null;
                        if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                        {
                            mapCode = xmlNode.GetIntValue("MapCode", -1);
                            npcType = 3;
                            npcID = xmlNode.GetIntValue("ID", -1);
                        }
                    }
                }
            }
            if (replaceFuBen)
            {
                Global.ProcessFuBenNPCOrMonster(taskXml, mapCode, npcType, npcID, out mapCode, out npcType, out npcID);
            }
            return true;
        }

        
        public static void ProcessAutoTaskFindRoad(GameClient client, int taskID)
        {
            SystemXmlItem taskXmlNode = null;
            if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out taskXmlNode))
            {
                int buttonID = taskXmlNode.GetIntValue("Teleports", -1);
                if (buttonID > 0)
                {
                    TaskData taskData = Global.GetTaskData(client, taskID);
                    if (taskData != null || taskXmlNode.GetIntValue("PrevTask", -1) == client.ClientData.MainTaskID)
                    {
                        int mapCode = -1;
                        int npcType = -1;
                        int npcID = -1;
                        Point toMapPos = new Point(0.0, 0.0);
                        GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];
                        int direction = client.ClientData.RoleDirection;
                        if (null != taskData)
                        {
                            if (!Global.JugeTaskComplete(client, taskData.DoingTaskID, taskData.DoingTaskVal1, taskData.DoingTaskVal2))
                            {
                                if (!Global.JugeTaskTargetComplete(taskXmlNode, 1, taskData.DoingTaskVal1))
                                {
                                    Global.GetTaskTargetID(taskXmlNode, 1, out mapCode, out npcType, out npcID, true);
                                    if (-1 == mapCode)
                                    {
                                        if (taskXmlNode.GetIntValue("TargetMapCode1", -1) >= 0)
                                        {
                                            int targetType = taskXmlNode.GetIntValue("TargetType1", -1);
                                            int targetMapCode = taskXmlNode.GetIntValue("TargetMapCode1", -1);
                                            string targetPos = taskXmlNode.GetStringValue("TargetPos1");
                                            if ("" != targetPos)
                                            {
                                                int[] pts = Global.String2IntArray(targetPos, ',');
                                                if (pts != null && pts.Length == 2)
                                                {
                                                    toMapPos = new Point((double)(pts[0] / gameMap.MapGridWidth * gameMap.MapGridWidth + gameMap.MapGridWidth / 2), (double)(pts[1] / gameMap.MapGridHeight * gameMap.MapGridHeight + gameMap.MapGridHeight / 2));
                                                    mapCode = targetMapCode;
                                                    npcType = -1;
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Global.GetTaskTargetID(taskXmlNode, 2, out mapCode, out npcType, out npcID, true);
                                    if (-1 == mapCode)
                                    {
                                        if (taskXmlNode.GetIntValue("TargetMapCode2", -1) >= 0)
                                        {
                                            int targetType = taskXmlNode.GetIntValue("TargetType2", -1);
                                            int targetMapCode2 = taskXmlNode.GetIntValue("TargetMapCode2", -1);
                                            string targetPos2 = taskXmlNode.GetStringValue("TargetPos2");
                                            if ("" != targetPos2)
                                            {
                                                int[] pts = Global.String2IntArray(targetPos2, ',');
                                                if (pts != null && pts.Length == 2)
                                                {
                                                    toMapPos = new Point((double)(pts[0] / gameMap.MapGridWidth * gameMap.MapGridWidth + gameMap.MapGridWidth / 2), (double)(pts[1] / gameMap.MapGridHeight * gameMap.MapGridHeight + gameMap.MapGridHeight / 2));
                                                    mapCode = targetMapCode2;
                                                    npcType = -1;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                npcID = taskXmlNode.GetIntValue("DestNPC", -1);
                                SystemXmlItem xmlNode = null;
                                if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(npcID, out xmlNode))
                                {
                                    mapCode = xmlNode.GetIntValue("MapCode", -1);
                                    npcType = 3;
                                    npcID = xmlNode.GetIntValue("ID", -1);
                                }
                            }
                        }
                        else
                        {
                            npcID = taskXmlNode.GetIntValue("SourceNPC", -1);
                            SystemXmlItem xmlNode = null;
                            if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(npcID, out xmlNode))
                            {
                                mapCode = xmlNode.GetIntValue("MapCode", -1);
                                npcType = 3;
                                npcID = xmlNode.GetIntValue("ID", -1);
                            }
                        }
                        if (-1 != mapCode)
                        {
                            Point pt = new Point(-1.0, -1.0);
                            if (npcType == 2)
                            {
                                pt = GameManager.MonsterZoneMgr.GetMonsterPointByMapCodeAndMonsterID(mapCode, npcID);
                                pt = Global.GetMapPoint(ObjectTypes.OT_CLIENT, mapCode, (int)pt.X, (int)pt.Y, 256);
                            }
                            else if (npcType == 3)
                            {
                                NPC npc = NPCGeneralManager.FindNPC(mapCode, npcID);
                                if (null != npc)
                                {
                                    pt = new Point(npc.GridPoint.X * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2), npc.GridPoint.Y * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
                                    List<Point> npcFrontPoints = Global.GetGridPointByDirection(4, (int)npc.GridPoint.X, (int)npc.GridPoint.Y, 3);
                                    int c = npcFrontPoints.Count;
                                    for (int i = 0; i < c; i++)
                                    {
                                        int idx = Global.GetRandomNumber(0, npcFrontPoints.Count);
                                        Point p = npcFrontPoints[idx];
                                        if (!Global.InOnlyObs(ObjectTypes.OT_CLIENT, mapCode, (int)p.X, (int)p.Y))
                                        {
                                            pt = new Point(p.X * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2), p.Y * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
                                            direction = 0;
                                            break;
                                        }
                                        npcFrontPoints.RemoveAt(idx);
                                    }
                                }
                            }
                            else
                            {
                                pt = toMapPos;
                            }
                            if (pt.X == -1.0 || pt.Y == -1.0)
                            {
                                LogManager.WriteLog(LogTypes.Error, string.Format("根据任务ID传送失败, RoleID={0}, 路径信息格式错误 ,无法自动寻路", client.ClientData.RoleID), null, true);
                            }
                            else
                            {
                                GameManager.LuaMgr.GotoMap(client, mapCode, (int)pt.X, (int)pt.Y, direction);
                            }
                        }
                    }
                }
            }
        }

        
        public static void EnterTaskTargetFuBen(GameClient client, int toMapCode)
        {
            int fuBenID = FuBenManager.FindFuBenIDByMapCode(toMapCode);
            if (-1 != fuBenID)
            {
                string[] dbFields = Global.ExecuteDBCmd(10049, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
                if (dbFields == null || dbFields.Length < 2)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(141, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else
                {
                    int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);
                    Global.UpdateFuBenData(client, fuBenID, 1, 0);
                    GameMap gameMap = null;
                    if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(142, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    }
                    else
                    {
                        client.ClientData.FuBenSeqID = fuBenSeqID;
                        FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, 0, fuBenID);
                        GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
                    }
                }
            }
        }

        
        public static TCPProcessCmdResults TakeNewTask(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, GameClient client, int roleID, int taskID, int npcID, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            SystemXmlItem systemTask = null;
            TCPProcessCmdResults result;
            if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 任务不存在, CMD={0}, Client={1}, RoleID={2}, TaskID={3}, NPCID={4}", new object[]
                {
                    (TCPGameServerCmds)nID,
                    Global.GetSocketRemoteEndPoint(socket, false),
                    roleID,
                    taskID,
                    npcID
                }), null, true);
                result = TCPProcessCmdResults.RESULT_OK;
            }
            else
            {
                int taskClass = systemTask.GetIntValue("TaskClass", -1);
                if ((taskClass >= 3 && taskClass <= 9) || (taskClass >= 100 && taskClass <= 150))
                {
                    if (!Global.CanTaskPaoHuanTask(client, taskClass))
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 跑环任务超出次数限制, CMD={0}, Client={1}, RoleID={2}, TaskID={3}, NPCID={4}", new object[]
                        {
                            (TCPGameServerCmds)nID,
                            Global.GetSocketRemoteEndPoint(socket, false),
                            roleID,
                            taskID,
                            npcID
                        }), null, true);
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                if (!Global.CanTakeNewTask(client, taskID, systemTask))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 任务不能再接, CMD={0}, Client={1}, RoleID={2}, TaskID={3}, NPCID={4}", new object[]
                    {
                        (TCPGameServerCmds)nID,
                        Global.GetSocketRemoteEndPoint(socket, false),
                        roleID,
                        taskID,
                        npcID - 2130706432
                    }), null, true);
                    result = TCPProcessCmdResults.RESULT_OK;
                }
                else
                {
                    TaskData taskData = new TaskData
                    {
                        DbID = -1,
                        DoingTaskID = taskID
                    };
                    int giveGoodsID = -1;
                    int needGoodsGridNum = Global.GetSomethingTaskNeedGoodsNum(client, taskID, npcID, npcID - 2130706432, out giveGoodsID);
                    if (needGoodsGridNum > 0 && -1 != giveGoodsID)
                    {
                        if (Global.GetGoodsByID(client, giveGoodsID) == null && !Global.CanAddGoods(client, giveGoodsID, 1, 1, "1900-01-01 12:00:00", true, false))
                        {
                            taskData.DbID = -100;
                            tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskData>(taskData, pool, nID);
                            return TCPProcessCmdResults.RESULT_DATA;
                        }
                    }
                    int focus = 1;
                    if (Global.GetFocusTaskCount(client) >= Data.TaskMaxFocusCount)
                    {
                        focus = 0;
                    }
                    int nStarLevel = 1;
                    if (taskClass == 8)
                    {
                        int randPercent = Global.GetRandomNumber(1, 10001);
                        int nNum = 0;
                        int[] nArrPercent = new int[Data.TaskStarInfo.Count];
                        for (int i = 0; i < Data.TaskStarInfo.Count; i++)
                        {
                            nArrPercent[i] = Data.TaskStarInfo[i].Probability + nNum;
                            nNum = nArrPercent[i];
                        }
                        for (int j = 0; j < nArrPercent.Length; j++)
                        {
                            if (randPercent <= nArrPercent[j])
                            {
                                nStarLevel = Data.TaskStarInfo[j].ID;
                                break;
                            }
                        }
                    }
                    string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
                    {
                        roleID,
                        npcID,
                        taskID,
                        focus,
                        nStarLevel
                    });
                    string[] fieldsData = null;
                    if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer(tcpClientPool, pool, nID, strcmd, out fieldsData, client.ServerId))
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
                        taskData.DbID = -999;
                        tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskData>(taskData, pool, nID);
                        result = TCPProcessCmdResults.RESULT_DATA;
                    }
                    else if (Convert.ToInt32(fieldsData[3]) < 0)
                    {
                        taskData.DbID = Convert.ToInt32(fieldsData[3]);
                        tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskData>(taskData, pool, nID);
                        result = TCPProcessCmdResults.RESULT_DATA;
                    }
                    else
                    {
                        if (null == client.ClientData.TaskDataList)
                        {
                            client.ClientData.TaskDataList = new List<TaskData>();
                        }
                        taskData.DbID = Convert.ToInt32(fieldsData[3]);
                        taskData.DoingTaskVal1 = 0;
                        taskData.DoingTaskVal2 = 0;
                        taskData.DoingTaskFocus = focus;
                        taskData.AddDateTime = Convert.ToInt64(fieldsData[2]);
                        taskData.DoneCount = 0;
                        taskData.StarLevel = nStarLevel;
                        int chengJiuID = systemTask.GetIntValue("ChenJiuID", -1);
                        if (chengJiuID <= 0)
                        {
                            taskData.ChengJiuVal = -1L;
                        }
                        else if (ChengJiuManager.IsChengJiuCompleted(client, chengJiuID))
                        {
                            taskData.ChengJiuVal = -1L;
                        }
                        else
                        {
                            taskData.ChengJiuVal = ChengJiuManager.getChengJiuValue(client, (AchievementType)(chengJiuID / 10));
                        }
                        OldTaskData oldTaskData = Global.FindOldTaskByTaskID(client, taskID);
                        if (null != oldTaskData)
                        {
                            taskData.DoneCount = oldTaskData.DoCount;
                        }
                        Global.ProcessTaskData(client, taskData);
                        lock (client.ClientData.TaskDataList)
                        {
                            client.ClientData.TaskDataList.Add(taskData);
                        }
                        tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskData>(taskData, pool, nID);
                        if (!tcpMgr.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                        {
                        }
                        int sourceNPC = systemTask.GetIntValue("SourceNPC", -1);
                        if (sourceNPC >= 0)
                        {
                            int state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, sourceNPC, 0);
                            GameManager.ClientMgr.NotifyUpdateNPCTaskSate(tcpMgr.MySocketListener, pool, client, sourceNPC + 2130706432, state);
                        }
                        ProcessTask.Process(tcpMgr.MySocketListener, pool, client, npcID, npcID - 2130706432, -1, TaskTypes.GetSomething, null, 0, -1L, null);
                        systemTask = null;
                        if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                        {
                            int destNPC = systemTask.GetIntValue("DestNPC", -1);
                            if (-1 != destNPC && destNPC != npcID - 2130706432)
                            {
                                int state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, destNPC, 0);
                                GameManager.ClientMgr.NotifyUpdateNPCTaskSate(tcpMgr.MySocketListener, pool, client, destNPC + 2130706432, state);
                            }
                            string goodsName = systemTask.GetStringValue("PropsName1");
                            string goodsName2 = systemTask.GetStringValue("PropsName2");
                            int goodsID = ("" != goodsName) ? Global.GetGoodsByName(goodsName) : -1;
                            int goodsID2 = ("" != goodsName2) ? Global.GetGoodsByName(goodsName2) : -1;
                            if (goodsID >= 0)
                            {
                                ProcessTask.Process(tcpMgr.MySocketListener, pool, client, -1, -1, goodsID, TaskTypes.BuySomething, null, 0, -1L, null);
                            }
                            if (goodsID2 >= 0)
                            {
                                ProcessTask.Process(tcpMgr.MySocketListener, pool, client, -1, -1, goodsID2, TaskTypes.BuySomething, null, 0, -1L, null);
                            }
                        }
                        if (ChengJiuManager.IsChengJiuCompleted(client, chengJiuID))
                        {
                            ProcessTask.Process(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -1, -1, -1, TaskTypes.ChengJiuUpdate, null, chengJiuID, -1L, null);
                        }
                        result = TCPProcessCmdResults.RESULT_OK;
                    }
                }
            }
            return result;
        }

        
        public static void FixMainTaskID(RoleDataEx roleDataEx)
        {
            if (null != roleDataEx.OldTasks)
            {
                int toUpdateMainTaskID = 0;
                for (int i = 0; i < roleDataEx.OldTasks.Count; i++)
                {
                    int taskID = roleDataEx.OldTasks[i].TaskID;
                    SystemXmlItem systemTask = null;
                    if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                    {
                        if (0 == systemTask.GetIntValue("TaskClass", -1))
                        {
                            toUpdateMainTaskID = Global.GMax(roleDataEx.OldTasks[i].TaskID, toUpdateMainTaskID);
                        }
                    }
                }
                if (toUpdateMainTaskID > roleDataEx.MainTaskID)
                {
                    roleDataEx.MainTaskID = toUpdateMainTaskID;
                }
            }
        }

        
        public static int GetMaxDailyTaskNum(GameClient client, int taskClass, DailyTaskData dailyTaskData)
        {
            int todayID = TimeUtil.NowDateTime().DayOfYear;
            int extNum = 0;
            if (todayID == dailyTaskData.ExtDayID)
            {
                extNum = dailyTaskData.ExtNum;
            }
            int result;
            if (3 == taskClass)
            {
                if (Global.IsVip(client))
                {
                    result = 15 + extNum;
                }
                else
                {
                    result = 10 + extNum;
                }
            }
            else if (4 == taskClass)
            {
                result = 10 + extNum;
            }
            else if (5 == taskClass)
            {
                result = 6 + extNum;
            }
            else if (6 == taskClass)
            {
                result = 1 + extNum;
            }
            else if (7 == taskClass)
            {
                result = 10 + extNum;
            }
            else if (8 == taskClass)
            {
                result = 10 + extNum;
            }
            else if (9 == taskClass)
            {
                result = Global.MaxTaofaTaskNumForMU + extNum;
            }
            else if (taskClass >= 100 && taskClass <= 150)
            {
                result = CompManager.getInstance().GetMaxDailyTaskNum(taskClass);
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        private static void CheckJunGongDailyTask(GameClient client, DailyTaskData dailyTaskData)
        {
            if (null != dailyTaskData)
            {
                if (!string.IsNullOrEmpty(dailyTaskData.RecTime))
                {
                    DateTime dateTime;
                    if (DateTime.TryParse(dailyTaskData.RecTime, out dateTime))
                    {
                        int lastDayID = dateTime.DayOfYear;
                        int todayID = TimeUtil.NowDateTime().DayOfYear;
                        if (lastDayID != todayID)
                        {
                            if (dailyTaskData.ExtDayID != todayID)
                            {
                                int elapsedDayNum = Math.Min(5, Math.Abs(todayID - lastDayID));
                                elapsedDayNum--;
                                elapsedDayNum = Global.GMax(0, elapsedDayNum);
                                int extNum = elapsedDayNum * 6;
                                extNum += Global.GMax(0, 6 - dailyTaskData.RecNum);
                                dailyTaskData.ExtDayID = todayID;
                                int lastExtNum = dailyTaskData.ExtNum - Global.GMax(0, dailyTaskData.RecNum - 6);
                                dailyTaskData.ExtNum = Global.GMin(30, Global.GMax(0, lastExtNum + extNum));
                                Global.UpdateDBDailyTaskData(client, dailyTaskData, false);
                            }
                        }
                    }
                }
            }
        }

        
        private static void CheckRiChangDailyTask(GameClient client, DailyTaskData dailyTaskData)
        {
            if (null != dailyTaskData)
            {
                if (!string.IsNullOrEmpty(dailyTaskData.RecTime))
                {
                    DateTime dateTime;
                    if (DateTime.TryParse(dailyTaskData.RecTime, out dateTime))
                    {
                        int lastDayID = dateTime.DayOfYear;
                        int todayID = TimeUtil.NowDateTime().DayOfYear;
                        if (lastDayID != todayID)
                        {
                            client.ClientData.YesterdayDailyTaskData = new DailyTaskData
                            {
                                RecNum = dailyTaskData.RecNum,
                                RecTime = dailyTaskData.RecTime
                            };
                            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
                            dailyTaskData.RecTime = today;
                            dailyTaskData.RecNum = 0;
                            Global.UpdateDBDailyTaskData(client, dailyTaskData, true);
                        }
                    }
                }
            }
        }

        
        private static void CheckTaofaDailyTask(GameClient client, DailyTaskData dailyTaskData)
        {
            if (null != dailyTaskData)
            {
                if (!string.IsNullOrEmpty(dailyTaskData.RecTime))
                {
                    DateTime dateTime;
                    if (DateTime.TryParse(dailyTaskData.RecTime, out dateTime))
                    {
                        int lastDayID = dateTime.DayOfYear;
                        int todayID = TimeUtil.NowDateTime().DayOfYear;
                        if (lastDayID != todayID)
                        {
                            client.ClientData.YesterdayTaofaTaskData = new DailyTaskData
                            {
                                RecNum = dailyTaskData.RecNum,
                                RecTime = dailyTaskData.RecTime
                            };
                            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
                            dailyTaskData.RecTime = today;
                            dailyTaskData.RecNum = 0;
                            Global.UpdateDBDailyTaskData(client, dailyTaskData, true);
                        }
                    }
                }
            }
        }

        
        private static void CheckCompDailyTask(GameClient client, DailyTaskData dailyTaskData)
        {
            if (null != dailyTaskData)
            {
                if (!string.IsNullOrEmpty(dailyTaskData.RecTime))
                {
                    DateTime dateTime;
                    if (DateTime.TryParse(dailyTaskData.RecTime, out dateTime))
                    {
                        int spanday = TimeUtil.NowDateTime().DayOfWeek - DayOfWeek.Monday;
                        spanday = ((spanday >= 0) ? (-spanday) : (-(7 + spanday)));
                        string resetTm = TimeUtil.NowDateTime().AddDays((double)spanday).ToString("yyyy-MM-dd");
                        if (string.Compare(dailyTaskData.RecTime, resetTm) < 0)
                        {
                            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
                            dailyTaskData.RecTime = today;
                            dailyTaskData.RecNum = 0;
                            Global.UpdateDBDailyTaskData(client, dailyTaskData, true);
                        }
                    }
                }
            }
        }

        
        public static DailyTaskData FindDailyTaskDataByTaskClass(GameClient client, int taskClass)
        {
            DailyTaskData result;
            if (null == client.ClientData.MyDailyTaskDataList)
            {
                result = null;
            }
            else
            {
                for (int i = 0; i < client.ClientData.MyDailyTaskDataList.Count; i++)
                {
                    if (client.ClientData.MyDailyTaskDataList[i].TaskClass == taskClass)
                    {
                        return client.ClientData.MyDailyTaskDataList[i];
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static void AddDailyTaskData(GameClient client, DailyTaskData dailyTaskData)
        {
            if (null == client.ClientData.MyDailyTaskDataList)
            {
                client.ClientData.MyDailyTaskDataList = new List<DailyTaskData>();
            }
            client.ClientData.MyDailyTaskDataList.Add(dailyTaskData);
        }

        
        public static bool FindPaoHuanTask(GameClient client, int taskClass)
        {
            bool result;
            if (null == client.ClientData.TaskDataList)
            {
                result = false;
            }
            else
            {
                bool ret = false;
                lock (client.ClientData.TaskDataList)
                {
                    for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                    {
                        SystemXmlItem systemTask = null;
                        if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(client.ClientData.TaskDataList[i].DoingTaskID, out systemTask))
                        {
                            if (taskClass == systemTask.GetIntValue("TaskClass", -1))
                            {
                                ret = true;
                                break;
                            }
                        }
                    }
                }
                result = ret;
            }
            return result;
        }

        
        public static bool CanTaskPaoHuanTask(GameClient client, int taskClass)
        {
            bool result;
            if (Global.FindPaoHuanTask(client, taskClass))
            {
                result = false;
            }
            else
            {
                switch (taskClass)
                {
                    case 8:
                        if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.RiChangRenWu, false))
                        {
                            return false;
                        }
                        break;
                    case 9:
                        if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.TaofaRenWu, false))
                        {
                            return false;
                        }
                        break;
                }
                if (taskClass >= 100 && taskClass <= 150)
                {
                    if (client.ClientData.CompType <= 0)
                    {
                        return false;
                    }
                }
                if (null == client.ClientData.MyDailyTaskDataList)
                {
                    result = true;
                }
                else
                {
                    DailyTaskData dailyTaskData = Global.FindDailyTaskDataByTaskClass(client, taskClass);
                    if (null == dailyTaskData)
                    {
                        result = true;
                    }
                    else
                    {
                        int maxNum = Global.GetMaxDailyTaskNum(client, taskClass, dailyTaskData);
                        if (maxNum <= 0)
                        {
                            result = false;
                        }
                        else
                        {
                            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
                            if (taskClass >= 100 && taskClass <= 150)
                            {
                                int spanday = TimeUtil.NowDateTime().DayOfWeek - DayOfWeek.Monday;
                                spanday = ((spanday >= 0) ? (-spanday) : (-(7 + spanday)));
                                string resetTm = TimeUtil.NowDateTime().AddDays((double)spanday).ToString("yyyy-MM-dd");
                                if (string.Compare(dailyTaskData.RecTime, resetTm) >= 0)
                                {
                                    if (dailyTaskData.RecNum >= maxNum)
                                    {
                                        return false;
                                    }
                                }
                            }
                            else if (dailyTaskData.RecTime == today)
                            {
                                if (dailyTaskData.RecNum >= maxNum)
                                {
                                    return false;
                                }
                            }
                            result = true;
                        }
                    }
                }
            }
            return result;
        }

        
        public static bool UpdateDailyTaskData(GameClient client, int taskHuanID, long taskAddDateTime, int taskClass, bool bIsOneClickComlete = false)
        {
            string taskDateTime = new DateTime(taskAddDateTime * 10000L).ToString("yyyy-MM-dd");
            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
            PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.ClientData.RoleID, taskClass, -1);
            DailyTaskData dailyTaskData = null;
            Global.GetDailyTaskData(client, taskClass, out dailyTaskData, false);
            bool result;
            if (null == dailyTaskData)
            {
                result = false;
            }
            else
            {
                int maxNum = Global.GetMaxDailyTaskNum(client, taskClass, dailyTaskData);
                if (taskClass >= 100 && taskClass <= 150)
                {
                    int spanday = TimeUtil.NowDateTime().DayOfWeek - DayOfWeek.Monday;
                    spanday = ((spanday >= 0) ? (-spanday) : (-(7 + spanday)));
                    string resetTm = TimeUtil.NowDateTime().AddDays((double)spanday).ToString("yyyy-MM-dd");
                    if (string.Compare(dailyTaskData.RecTime, resetTm) >= 0)
                    {
                        dailyTaskData.RecNum++;
                        if (dailyTaskData.RecNum >= maxNum)
                        {
                            Global.AddPaoHuanEvent(client, taskClass);
                        }
                    }
                    else
                    {
                        dailyTaskData.RecTime = today;
                        dailyTaskData.RecNum = 0;
                        if (bIsOneClickComlete)
                        {
                            return false;
                        }
                    }
                    Global.UpdateDBDailyTaskData(client, dailyTaskData, true);
                }
                else
                {
                    if (dailyTaskData.RecTime == today)
                    {
                        dailyTaskData.RecNum++;
                        if (dailyTaskData.RecNum >= maxNum)
                        {
                            Global.AddPaoHuanEvent(client, taskClass);
                        }
                    }
                    else
                    {
                        dailyTaskData.RecTime = today;
                        dailyTaskData.RecNum = 0;
                        if (bIsOneClickComlete)
                        {
                            return false;
                        }
                    }
                    Global.UpdateDBDailyTaskData(client, dailyTaskData, true);
                }
                result = true;
            }
            return result;
        }

        
        public static void AddExtNumByGoods(GameClient client, int taskClass, int addNum)
        {
            DailyTaskData dailyTaskData = null;
            Global.GetDailyTaskData(client, taskClass, out dailyTaskData, false);
            if (null != dailyTaskData)
            {
                int dayID = TimeUtil.NowDateTime().DayOfYear;
                int maxNum = Global.GetMaxDailyTaskNum(client, taskClass, dailyTaskData);
                if (dailyTaskData.ExtDayID == dayID)
                {
                    dailyTaskData.ExtNum += addNum;
                }
                else
                {
                    dailyTaskData.ExtDayID = dayID;
                    dailyTaskData.ExtNum = addNum;
                }
                Global.UpdateDBDailyTaskData(client, dailyTaskData, true);
            }
        }

        
        public static void UpdateDBDailyTaskData(GameClient client, DailyTaskData dailyTaskData, bool notifyClient = true)
        {
            GameManager.DBCmdMgr.AddDBCmd(10041, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", new object[]
            {
                client.ClientData.RoleID,
                dailyTaskData.HuanID,
                dailyTaskData.RecTime,
                dailyTaskData.RecNum,
                dailyTaskData.TaskClass,
                dailyTaskData.ExtDayID,
                dailyTaskData.ExtNum
            }), null, client.ServerId);
            if (notifyClient)
            {
                GameManager.ClientMgr.NotifyDailyTaskData(client);
            }
        }

        
        public static void InitRoleDailyTaskData(GameClient client, bool isNewday)
        {
            DailyTaskData dailyTaskData = null;
            Global.GetDailyTaskData(client, 5, out dailyTaskData, true);
            if (GlobalNew.IsGongNengOpened(client, GongNengIDs.RiChangRenWu, false))
            {
                Global.GetDailyTaskData(client, 8, out dailyTaskData, true);
            }
            if (GlobalNew.IsGongNengOpened(client, GongNengIDs.TaofaRenWu, false))
            {
                Global.GetDailyTaskData(client, 9, out dailyTaskData, true);
            }
            if (client.ClientData.CompType > 0)
            {
                int taskClassNum = CompManager.getInstance().GetTaskClassNum();
                for (int loop = 0; loop < taskClassNum; loop++)
                {
                    Global.GetDailyTaskData(client, 100 + loop, out dailyTaskData, true);
                }
            }
            if (isNewday)
            {
                for (int i = 0; i < client.ClientData.MyDailyTaskDataList.Count; i++)
                {
                    if (5 == client.ClientData.MyDailyTaskDataList[i].TaskClass)
                    {
                        Global.CheckJunGongDailyTask(client, client.ClientData.MyDailyTaskDataList[i]);
                    }
                    else if (8 == client.ClientData.MyDailyTaskDataList[i].TaskClass)
                    {
                        Global.CheckRiChangDailyTask(client, client.ClientData.MyDailyTaskDataList[i]);
                    }
                    else if (9 == client.ClientData.MyDailyTaskDataList[i].TaskClass)
                    {
                        Global.CheckTaofaDailyTask(client, client.ClientData.MyDailyTaskDataList[i]);
                    }
                    else if (client.ClientData.MyDailyTaskDataList[i].TaskClass >= 100 && client.ClientData.MyDailyTaskDataList[i].TaskClass <= 150)
                    {
                        Global.CheckCompDailyTask(client, client.ClientData.MyDailyTaskDataList[i]);
                    }
                }
            }
        }

        
        public static void GetDailyTaskData(GameClient client, int taskclass, out DailyTaskData dailyTaskData, bool notifydb)
        {
            dailyTaskData = Global.FindDailyTaskDataByTaskClass(client, taskclass);
            if (null == dailyTaskData)
            {
                dailyTaskData = new DailyTaskData();
                dailyTaskData.HuanID = 1;
                dailyTaskData.RecTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
                dailyTaskData.RecNum = 0;
                dailyTaskData.TaskClass = taskclass;
                dailyTaskData.ExtDayID = 0;
                dailyTaskData.ExtNum = 0;
                Global.AddDailyTaskData(client, dailyTaskData);
                if (notifydb)
                {
                    Global.UpdateDBDailyTaskData(client, dailyTaskData, false);
                }
            }
        }

        
        public static bool IsVipOnceAwardOfRole(int awardID)
        {
            return 100 == awardID || 101 == awardID || 102 == awardID;
        }

        
        public static int GetVipOnceAwardPriorityID(GameClient client)
        {
            int vipType = Global.GetVipType(client);
            int result;
            if (1 == vipType)
            {
                result = 100;
            }
            else if (3 == vipType)
            {
                result = 101;
            }
            else if (6 == vipType)
            {
                result = 102;
            }
            else
            {
                result = -1;
            }
            return result;
        }

        
        public static bool CanFetchOnceVipAward(GameClient client)
        {
            int vipType = Global.GetVipType(client);
            bool result;
            if (1 == vipType)
            {
                result = ((client.ClientData.OnceAwardFlag & 2L) == 0L);
            }
            else if (3 == vipType)
            {
                result = ((client.ClientData.OnceAwardFlag & 4L) == 0L);
            }
            else
            {
                result = (6 == vipType && (client.ClientData.OnceAwardFlag & 8L) == 0L);
            }
            return result;
        }

        
        public static long UpdateOnceVipAwardFlag(GameClient client)
        {
            int vipType = Global.GetVipType(client);
            if (1 == vipType)
            {
                client.ClientData.OnceAwardFlag = (client.ClientData.OnceAwardFlag | 2L);
            }
            else if (3 == vipType)
            {
                client.ClientData.OnceAwardFlag = (client.ClientData.OnceAwardFlag | 4L);
            }
            if (6 == vipType)
            {
                client.ClientData.OnceAwardFlag = (client.ClientData.OnceAwardFlag | 8L);
            }
            return client.ClientData.OnceAwardFlag;
        }

        
        public static void LoadVipLevelAwardList()
        {
            List<string> vipLevelAwardList = new List<string>();
            string fileName = Global.GameResPath("Config/VIP.xml");
            XElement xml = XElement.Load(fileName);
            if (null == xml)
            {
                throw new Exception(string.Format("加载系统xml配置文件:{0}, 失败。没有找到相关XML配置文件!", fileName));
            }
            IEnumerable<XElement> nodes = xml.Elements("Items").Elements<XElement>();
            foreach (XElement node in nodes)
            {
                SystemXmlItem systemXmlItem = new SystemXmlItem();
                systemXmlItem.XMLNode = node;
                int type = (int)Global.GetSafeAttributeLong(node, "Type");
                int getID = (int)Global.GetSafeAttributeLong(node, "GetID");
                if (getID != 0)
                {
                    vipLevelAwardList.Add(string.Format("{0}_{1}", type, getID));
                }
            }
            Global.VipLevelAwardList = vipLevelAwardList;
        }

        
        public static int GetVipType(GameClient client)
        {
            BufferData bufferData = Global.GetBufferDataByID(client, 13);
            int result;
            if (null == bufferData)
            {
                result = 0;
            }
            else if (Global.IsBufferDataOver(bufferData, 0L))
            {
                result = 0;
            }
            else
            {
                result = (int)bufferData.BufferVal;
            }
            return result;
        }

        
        public static int GetVipType(SafeClientData clientData)
        {
            BufferData bufferData = Global.GetBufferDataByID(clientData, 13);
            int result;
            if (null == bufferData)
            {
                result = 0;
            }
            else if (Global.IsBufferDataOver(bufferData, 0L))
            {
                result = 0;
            }
            else
            {
                result = (int)bufferData.BufferVal;
            }
            return result;
        }

        
        public static int GetVipType(List<BufferData> bufferDataList)
        {
            BufferData bufferData = Global.GetBufferDataByClientData(bufferDataList, 13);
            int result;
            if (null == bufferData)
            {
                result = 0;
            }
            else if (Global.IsBufferDataOver(bufferData, 0L))
            {
                result = 0;
            }
            else
            {
                result = (int)bufferData.BufferVal;
            }
            return result;
        }

        
        public static bool IsVip(GameClient client)
        {
            return client.ClientData.VipLevel > 0;
        }

        
        public static bool IsVipOfMonth(GameClient client)
        {
            return Global.GetVipType(client) == 1;
        }

        
        public static bool IsVipOfSeason(GameClient client)
        {
            return Global.GetVipType(client) == 3;
        }

        
        public static bool IsVipOfHalfYear(GameClient client)
        {
            return Global.GetVipType(client) == 6;
        }

        
        public static string GetVipTypeNameString(GameClient client)
        {
            string result;
            if (Global.IsVipOfMonth(client))
            {
                result = GLang.GetLang(143, new object[0]);
            }
            else if (Global.IsVipOfSeason(client))
            {
                result = GLang.GetLang(144, new object[0]);
            }
            else if (Global.IsVipOfHalfYear(client))
            {
                result = GLang.GetLang(145, new object[0]);
            }
            else
            {
                result = "";
            }
            return result;
        }

        
        public static int GetVipTypeGiveYuanBao(GameClient client)
        {
            int result;
            if (Global.IsVipOfMonth(client))
            {
                result = 3000;
            }
            else if (Global.IsVipOfSeason(client))
            {
                result = 13500;
            }
            else if (Global.IsVipOfHalfYear(client))
            {
                result = 36000;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        public static bool CanUseVipPriority(GameClient client)
        {
            BufferData bufferData = Global.GetBufferDataByID(client, 13);
            bool result;
            if (null == bufferData)
            {
                result = false;
            }
            else
            {
                long nowTicks = TimeUtil.NOW();
                result = (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L);
            }
            return result;
        }

        
        public static bool CanUseVipPriority(List<BufferData> bufferDataList)
        {
            BufferData bufferData = Global.GetBufferDataByClientData(bufferDataList, 13);
            bool result;
            if (null == bufferData)
            {
                result = false;
            }
            else
            {
                long nowTicks = TimeUtil.NOW();
                result = (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L);
            }
            return result;
        }

        
        public static VipDailyData FindVipDailyDataByPriority(GameClient client, int priority)
        {
            VipDailyData result;
            if (null == client.ClientData.VipDailyDataList)
            {
                result = null;
            }
            else
            {
                for (int i = 0; i < client.ClientData.VipDailyDataList.Count; i++)
                {
                    VipDailyData daily = client.ClientData.VipDailyDataList.ElementAt(i);
                    if (daily.PriorityType == priority)
                    {
                        return daily;
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static int GetVipPriorityDailyMaxUseTimes(int priority)
        {
            int dailyMaxUseTimes = 0;
            SystemXmlItem xmlItem = null;
            int result;
            if (!GameManager.systemVipDailyAwardsMgr.SystemXmlItemDict.TryGetValue(priority, out xmlItem) || null == xmlItem)
            {
                result = dailyMaxUseTimes;
            }
            else
            {
                dailyMaxUseTimes = xmlItem.GetIntValue("DailyMaxUseTimes", -1);
                if (dailyMaxUseTimes < 0)
                {
                    dailyMaxUseTimes = 0;
                }
                result = dailyMaxUseTimes;
            }
            return result;
        }

        
        public static int CanGiveVipDailyAwardForPriority(GameClient client, int priority, int dayID)
        {
            SystemXmlItem xmlItem = null;
            int result;
            if (!GameManager.systemVipDailyAwardsMgr.SystemXmlItemDict.TryGetValue(priority, out xmlItem) || null == xmlItem)
            {
                result = -10000;
            }
            else
            {
                int needVIPLevel = xmlItem.GetIntValue("VIPlev", -1);
                if (client.ClientData.VipLevel < needVIPLevel)
                {
                    result = -10002;
                }
                else if (Global.IsVipOnceAwardOfRole(priority))
                {
                    result = -10003;
                }
                else
                {
                    VipDailyData dailyVipData = Global.FindVipDailyDataByPriority(client, priority);
                    if (null == dailyVipData)
                    {
                        result = 1;
                    }
                    else
                    {
                        int dailyPriorityMaxUseTimes = Global.GetVipPriorityDailyMaxUseTimes(priority);
                        if (dailyPriorityMaxUseTimes > 0)
                        {
                            if (dailyVipData.DayID == dayID)
                            {
                                if (dailyVipData.UsedTimes >= dailyPriorityMaxUseTimes)
                                {
                                    return -10001;
                                }
                            }
                        }
                        result = 1;
                    }
                }
            }
            return result;
        }

        
        public static void AddDailyVipData(GameClient client, VipDailyData dailyVipData)
        {
            if (null == client.ClientData.VipDailyDataList)
            {
                client.ClientData.VipDailyDataList = new List<VipDailyData>();
            }
            client.ClientData.VipDailyDataList.Add(dailyVipData);
        }

        
        public static bool UpdateVipDailyData(GameClient client, int dayID, int priority)
        {
            bool reset = false;
            VipDailyData dailyVipData = Global.FindVipDailyDataByPriority(client, priority);
            if (null == dailyVipData)
            {
                reset = true;
            }
            else if (dailyVipData.DayID == dayID)
            {
                dailyVipData.UsedTimes++;
            }
            else
            {
                dailyVipData.DayID = dayID;
                dailyVipData.UsedTimes = 1;
            }
            if (reset)
            {
                if (null == dailyVipData)
                {
                    dailyVipData = new VipDailyData();
                }
                dailyVipData.PriorityType = priority;
                dailyVipData.DayID = dayID;
                dailyVipData.UsedTimes = 1;
                Global.AddDailyVipData(client, dailyVipData);
            }
            string[] dbCmds = Global.ExecuteDBCmd(10091, string.Format("{0}:{1}:{2}:{3}", new object[]
            {
                client.ClientData.RoleID,
                dailyVipData.DayID,
                dailyVipData.PriorityType,
                dailyVipData.UsedTimes
            }), client.ServerId);
            bool result;
            if (dbCmds == null || dbCmds.Length != 3 || 0 != dbCmds[0].CompareTo("1"))
            {
                result = false;
            }
            else
            {
                GameManager.ClientMgr.NotifyVipDailyData(client);
                result = true;
            }
            return result;
        }

        
        public static int GetGoodsCountForVipPriority(int priority)
        {
            SystemXmlItem xmlItem = null;
            int result;
            if (!GameManager.systemVipDailyAwardsMgr.SystemXmlItemDict.TryGetValue(priority, out xmlItem) || null == xmlItem)
            {
                result = 0;
            }
            else
            {
                string goodsIDs = xmlItem.GetStringValue("GoodsIDs");
                if (goodsIDs.Trim().Length <= 0)
                {
                    result = 0;
                }
                else
                {
                    result = goodsIDs.Split(new char[]
                    {
                        '|'
                    }).Count<string>();
                }
            }
            return result;
        }

        
        public static bool GiveVipDailyAwardForPriority(GameClient client, int priority)
        {
            return Global.GiveVipAwardForPriority(client, priority);
        }

        
        public static bool GiveVipOnceAwardForPriority(GameClient client)
        {
            int priority = Global.GetVipOnceAwardPriorityID(client);
            return Global.GiveVipAwardForPriority(client, priority);
        }

        
        public static bool GiveVipAwardForPriority(GameClient client, int priority)
        {
            SystemXmlItem xmlItem = null;
            bool result;
            if (!GameManager.systemVipDailyAwardsMgr.SystemXmlItemDict.TryGetValue(priority, out xmlItem) || null == xmlItem)
            {
                result = false;
            }
            else
            {
                string goodsIDs = xmlItem.GetStringValue("GoodsIDs");
                int yuanBao = xmlItem.GetIntValue("YuanBao", -1);
                int yinLiang = xmlItem.GetIntValue("YinLiang", -1);
                int tongQian = xmlItem.GetIntValue("TongQian", -1);
                int lingLi = xmlItem.GetIntValue("LingLi", -1);
                int bindYuanBao = xmlItem.GetIntValue("BindYuanBao", -1);
                int[] bufferGoodsIDs = xmlItem.GetIntArrayValue("BufferGoods", ',');
                int xiHongMing = xmlItem.GetIntValue("XiHongMing", -1);
                int learnSkill = xmlItem.GetIntValue("LearnSkill", -1);
                int xiuLi = xmlItem.GetIntValue("XiuLi", -1);
                List<GoodsData> listGoods = Global.ParseGoodsDataListFromGoodsStr(goodsIDs, "vip每日奖励配置文件");
                if (yuanBao > 0)
                {
                    GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yuanBao, string.Format("{0}特权领取", Global.GetVipTypeNameString(client)), ActivityTypes.None, "");
                    GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取元宝, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", new object[]
                    {
                        Global.GetVipTypeNameString(client),
                        client.ClientData.RoleID,
                        client.ClientData.RoleName,
                        client.ClientData.UserMoney,
                        yuanBao,
                        priority
                    }), EventLevels.Record);
                    Global.BroadcastVipFetchYuanBaoAwardMsg(client, yuanBao);
                }
                if (bindYuanBao > 0)
                {
                    GameManager.ClientMgr.AddUserGold(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, bindYuanBao, "VIP" + priority + "奖励");
                    GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取绑定元宝, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", new object[]
                    {
                        Global.GetVipTypeNameString(client),
                        client.ClientData.RoleID,
                        client.ClientData.RoleName,
                        client.ClientData.UserMoney,
                        bindYuanBao,
                        priority
                    }), EventLevels.Record);
                    Global.BroadcastVipFetchBindYuanBaoAwardMsg(client, bindYuanBao);
                }
                if (yinLiang > 0)
                {
                    GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yinLiang, "VIP" + priority + "奖励", false);
                    GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取银两, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", new object[]
                    {
                        Global.GetVipTypeNameString(client),
                        client.ClientData.RoleID,
                        client.ClientData.RoleName,
                        client.ClientData.YinLiang,
                        yinLiang,
                        priority
                    }), EventLevels.Record);
                }
                if (tongQian > 0)
                {
                    GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, tongQian, "VIP" + priority + "奖励", false);
                    GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取金币, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", new object[]
                    {
                        Global.GetVipTypeNameString(client),
                        client.ClientData.RoleID,
                        client.ClientData.RoleName,
                        client.ClientData.Money1,
                        tongQian,
                        priority
                    }), EventLevels.Record);
                }
                if (lingLi > 0)
                {
                    GameManager.ClientMgr.AddInterPower(client, lingLi, true, false);
                    GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取灵力, roleID={1}({2}), LingLi={3}, newLingLi={4}, priority={5}", new object[]
                    {
                        Global.GetVipTypeNameString(client),
                        client.ClientData.RoleID,
                        client.ClientData.RoleName,
                        client.ClientData.InterPower,
                        lingLi,
                        priority
                    }), EventLevels.Record);
                }
                string awardReason = string.Format("VIP使用特权{0}获取", priority);
                for (int i = 0; i < listGoods.Count; i++)
                {
                    GoodsData goodsData = listGoods[i];
                    if (null != goodsData)
                    {
                        goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, 0, goodsData.Jewellist, true, 1, awardReason, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, 0, 0, 0, null, null, 0, true);
                    }
                }
                if (bufferGoodsIDs != null && bufferGoodsIDs.Length > 0)
                {
                    for (int i = 0; i < bufferGoodsIDs.Length; i++)
                    {
                        Global.AddBufferByGoodsID(client, bufferGoodsIDs[i]);
                    }
                }
                if (1 == xiHongMing)
                {
                    GameManager.ClientMgr.SetRolePKValuePoint(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0, 0, true);
                }
                if (1 == learnSkill)
                {
                    if (!Global.LearnAllManuSkills(client))
                    {
                        return false;
                    }
                }
                if (1 == xiuLi)
                {
                    Global.OneKeyFixAllEquips(client);
                }
                Global.AddRoleFetchVipAwardEvent(client, yuanBao, yinLiang, tongQian, lingLi, priority);
                result = true;
            }
            return result;
        }

        
        private static List<GoodsData> ParseGoodsDataListFromGoodsStr(string batchGoods, string fileName = "")
        {
            string[] fields = batchGoods.Split(new char[]
            {
                '|'
            });
            List<GoodsData> goodsDataList = new List<GoodsData>();
            for (int i = 0; i < fields.Length; i++)
            {
                string[] sa = fields[i].Split(new char[]
                {
                    ','
                });
                if (sa.Length != 6)
                {
                    LogManager.WriteLog(LogTypes.Warning, string.Format("解析{0}中的奖励项时失败, 物品配置项个数错误", fileName), null, true);
                }
                else
                {
                    int[] goodsFields = Global.StringArray2IntArray(sa);
                    GoodsData goodsData = Global.GetNewGoodsData(goodsFields[0], goodsFields[1], goodsFields[2], goodsFields[3], goodsFields[4], goodsFields[5], 0, 0, 0, 0, 0);
                    goodsDataList.Add(goodsData);
                }
            }
            return goodsDataList;
        }

        
        public static double GetEquipBasePropsItemVal(GoodsData gd, EquipPropItem item, int itemIndex)
        {
            return 0.0;
        }

        
        public static double GetJewelBasePropsItemVal(EquipPropItem item, int itemIndex)
        {
            return 0.0;
        }

        
        public static double GetEquipExtPropsItemVal(GameClient client, GoodsData gd, EquipPropItem item, int itemIndex, SystemXmlItem systemGoods)
        {
            double result;
            if (null == item)
            {
                result = 0.0;
            }
            else
            {
                int suitID = systemGoods.GetIntValue("SuitID", -1);
                int level = gd.Forge_level;
                int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                double origExtProp = item.ExtProps[itemIndex];
                if (categoriy == 10 || categoriy == 9)
                {
                    int MaxUpgradeLevel = suitID * 10 + 9;
                    if (level > MaxUpgradeLevel)
                    {
                        level = 0;
                    }
                    double PetValue = origExtProp * (1.0 + (double)level * UpgradeDamon.GetPetQiangPer(itemIndex));
                    result = PetValue;
                }
                else if (categoriy == 340)
                {
                    origExtProp *= 1.0 + ZuoQiManager.getInstance().GetExtpropsAddPercent(client, gd);
                    result = origExtProp;
                }
                else
                {
                    if (categoriy >= 11 && categoriy <= 21 && (itemIndex == 13 || (itemIndex >= 3 && itemIndex <= 10)))
                    {
                        origExtProp *= 1.0 + RoleAlgorithm.GetExtProp(client, 105);
                    }
                    if (level > 20)
                    {
                        level = 0;
                    }
                    int totalLevel = level;
                    int quality = gd.Quality;
                    if (quality >= 5)
                    {
                        quality = 4;
                    }
                    double origValue = origExtProp;
                    if (itemIndex != 8 && itemIndex != 10)
                    {
                    }
                    if (gd.BornIndex > 0)
                    {
                        int attackType = 0;
                        if (itemIndex == 10)
                        {
                            attackType = 1;
                        }
                        origExtProp += (double)Global.GetBornAttackValue(gd.BornIndex, attackType);
                    }
                    double AppendProp = 0.0;
                    double forgeProp = 0.0;
                    double ExcellenceProp = 0.0;
                    double LifeMax = 0.0;
                    double EquipChangeLifeAddAttack = 0.0;
                    double EquipChangeLifeAddDefense = 0.0;
                    double RebornAttrExpend = 0.0;
                    if (item.ExtProps[itemIndex] > 0.0)
                    {
                        if (gd.ExcellenceInfo > 0)
                        {
                            int nNum = Global.GetEquipExcellencePropNum(gd);
                            if (nNum >= 0)
                            {
                                double dValue = 0.0;
                                if (nNum >= 1 && nNum <= 2)
                                {
                                    dValue = Data.ZhuoYueAddAttackRates[0];
                                }
                                else if (nNum >= 3 && nNum <= 4)
                                {
                                    dValue = Data.ZhuoYueAddAttackRates[1];
                                }
                                else if (nNum >= 5 && nNum <= 6)
                                {
                                    dValue = Data.ZhuoYueAddAttackRates[2];
                                }
                                if (itemIndex == 7 || itemIndex == 9 || itemIndex == 8 || itemIndex == 10)
                                {
                                    if (dValue > 0.0)
                                    {
                                        ExcellenceProp = origValue * dValue;
                                    }
                                }
                                else if (itemIndex == 3 || itemIndex == 5 || itemIndex == 4 || itemIndex == 6)
                                {
                                    if (dValue > 0.0)
                                    {
                                        ExcellenceProp = origValue * dValue;
                                    }
                                }
                            }
                        }
                        if (Global.GetGoodsCatetoriy(gd.GoodsID) == 8)
                        {
                            if (itemIndex == 7 || itemIndex == 8 || itemIndex == 9 || itemIndex == 10)
                            {
                                if (totalLevel > 0)
                                {
                                    double[] nAttack = Data.WingForgeLevelAddShangHaiJiaCheng;
                                    double dValue = nAttack[totalLevel];
                                    forgeProp = (origValue + ExcellenceProp) * dValue + 3.0;
                                }
                            }
                            else if (itemIndex == 3 || itemIndex == 4 || itemIndex == 5 || itemIndex == 6)
                            {
                                double[] nDefense = Data.WingForgeLevelAddDefenseRates;
                                if (totalLevel > 0)
                                {
                                    double dValue = nDefense[totalLevel];
                                    forgeProp = (origValue + ExcellenceProp) * dValue + 3.0;
                                }
                                if (gd.AppendPropLev > 0)
                                {
                                    nDefense = Data.WingZhuiJiaLevelAddDefenseRates;
                                    double dValue = nDefense[gd.AppendPropLev];
                                    AppendProp = (origValue + ExcellenceProp) * dValue + 3.0;
                                }
                            }
                            else if (itemIndex == 24)
                            {
                            }
                        }
                        else if (itemIndex == 7 || itemIndex == 8 || itemIndex == 9 || itemIndex == 10)
                        {
                            double[] nAttack = Data.ForgeLevelAddAttackRates;
                            if (totalLevel > 0)
                            {
                                double dValue = nAttack[totalLevel];
                                forgeProp = (origValue + ExcellenceProp) * dValue + 3.0;
                                EquipJuHunXmlData juhunData;
                                if (Data.EquipJuHunDataDict.TryGetValue(gd.JuHunID, out juhunData))
                                {
                                    forgeProp *= 1.0 + juhunData.GrowProportion;
                                }
                            }
                            if (gd.AppendPropLev > 0)
                            {
                                nAttack = Data.ZhuiJiaLevelAddAttackRates;
                                double dValue = nAttack[gd.AppendPropLev];
                                AppendProp = (origValue + ExcellenceProp) * dValue + 3.0;
                                EquipJuHunXmlData juhunData;
                                if (Data.EquipJuHunDataDict.TryGetValue(gd.JuHunID, out juhunData))
                                {
                                    AppendProp *= 1.0 + juhunData.GrowProportion;
                                }
                            }
                        }
                        else if (itemIndex == 3 || itemIndex == 4 || itemIndex == 5 || itemIndex == 6)
                        {
                            double[] nDefense = Data.ForgeLevelAddDefenseRates;
                            if (totalLevel > 0)
                            {
                                double dValue = nDefense[totalLevel];
                                forgeProp = (origValue + ExcellenceProp) * dValue + 3.0;
                                EquipJuHunXmlData juhunData;
                                if (Data.EquipJuHunDataDict.TryGetValue(gd.JuHunID, out juhunData))
                                {
                                    forgeProp *= 1.0 + juhunData.GrowProportion;
                                }
                            }
                        }
                        else if (itemIndex == 13)
                        {
                            if (totalLevel > 0)
                            {
                                double[] nLife = Data.ForgeLevelAddMaxLifeVRates;
                                double dValue = nLife[totalLevel];
                                EquipJuHunXmlData juhunData;
                                if (Data.EquipJuHunDataDict.TryGetValue(gd.JuHunID, out juhunData))
                                {
                                    LifeMax += (origValue * dValue + 3.0) * (1.0 + juhunData.GrowProportion);
                                }
                                else
                                {
                                    LifeMax += origValue * dValue + 3.0;
                                }
                            }
                            if (gd.AppendPropLev > 0)
                            {
                                double[] nLife = Data.ZhuiJiaLevelAddDefenseRates;
                                double dValue = 0.0;
                                if (gd.AppendPropLev >= nLife.Length)
                                {
                                    LogManager.WriteLog(LogTypes.Error, string.Format("GetEquipExtPropsItemVal outside arry, gd.AppendPropLev={0}, nLife.Length={1}", gd.AppendPropLev, nLife.Length), null, true);
                                }
                                else
                                {
                                    dValue = nLife[gd.AppendPropLev];
                                }
                                EquipJuHunXmlData juhunData;
                                if (Data.EquipJuHunDataDict.TryGetValue(gd.JuHunID, out juhunData))
                                {
                                    LifeMax += (origValue * dValue + 3.0) * (1.0 + juhunData.GrowProportion);
                                }
                                else
                                {
                                    LifeMax += origValue * dValue + 3.0;
                                }
                            }
                        }
                    }
                    int nEquipChangeLife = gd.ChangeLifeLevForEquip;
                    if (nEquipChangeLife > 0 && nEquipChangeLife <= 10)
                    {
                        if (itemIndex == 7 || itemIndex == 8 || itemIndex == 9 || itemIndex == 10)
                        {
                            double[] nValue = Data.EquipChangeLifeAddAttackRates;
                            if (nValue != null)
                            {
                                EquipChangeLifeAddAttack = nValue[nEquipChangeLife + 1];
                                EquipChangeLifeAddAttack *= origValue + ExcellenceProp;
                            }
                        }
                        else if (itemIndex == 3 || itemIndex == 4 || itemIndex == 5 || itemIndex == 6)
                        {
                            double[] nValue = Data.EquipChangeLifeAddDefenseRates;
                            if (nValue != null)
                            {
                                EquipChangeLifeAddDefense = nValue[nEquipChangeLife + 1];
                                EquipChangeLifeAddDefense *= origValue + ExcellenceProp;
                            }
                        }
                    }
                    if (RebornEquip.IsRebornEquip(gd.GoodsID))
                    {
                        if (itemIndex == 122 || itemIndex == 123 || itemIndex == 129 || itemIndex == 130 || itemIndex == 136 || itemIndex == 137 || itemIndex == 143 || itemIndex == 144 || itemIndex == 150 || itemIndex == 151 || itemIndex == 157 || itemIndex == 158)
                        {
                            double[] nValue2 = Data.RebornZhuoYueAddRates;
                            if (nValue2 != null)
                            {
                                int RaseInt = RebornEquip.GetCurrGoodsQuality(gd);
                                if (RaseInt == 3)
                                {
                                    RebornAttrExpend = nValue2[0];
                                }
                                else if (RaseInt == 4)
                                {
                                    RebornAttrExpend = nValue2[1];
                                }
                                else if (RaseInt == 5)
                                {
                                    RebornAttrExpend = nValue2[2];
                                }
                                RebornAttrExpend *= origValue;
                            }
                        }
                    }
                    double ElementValue = 0.0;
                    if (gd.ElementhrtsProps != null && gd.ElementhrtsProps.Count >= 2 && !GoodsUtil.IsEquip(gd.GoodsID) && !MountHolyStampManager.IsHolyStamp(gd.GoodsID))
                    {
                        int nLevel = gd.ElementhrtsProps[0] - 1;
                        ElementValue = origExtProp * (double)nLevel;
                    }
                    double value = origExtProp + forgeProp + AppendProp + ExcellenceProp + LifeMax + EquipChangeLifeAddAttack + EquipChangeLifeAddDefense + ElementValue + RebornAttrExpend;
                    int equipVal = (int)Math.Floor(value);
                    if (level <= 20)
                    {
                        result = value;
                    }
                    else
                    {
                        result = value;
                    }
                }
            }
            return result;
        }

        
        public static int GetEquipExcellencePropNum(GoodsData gd)
        {
            return Global.BinaryCount(gd.ExcellenceInfo);
        }

        
        public static int BinaryCount(int num)
        {
            long count = (long)((ulong)((num & 1431655765) + (int)((uint)num >> 1 & 1431655765U)));
            count = (count & 858993459L) + (count >> 2 & 858993459L);
            count = (count & 252645135L) + (count >> 4 & 252645135L);
            count = (count & 16711935L) + (count >> 8 & 16711935L);
            count = (count & 65535L) + (count >> 16 & 65535L);
            return (int)count;
        }

        
        public static void ResetCachedGoodsQuality()
        {
            lock (Global.GoodsItemQualityDictMutex)
            {
                Global.GoodsItemQualityDict = null;
            }
        }

        
        public static Dictionary<int, int> GetGoodsQuality()
        {
            lock (Global.GoodsItemQualityDictMutex)
            {
                if (Global.GoodsItemQualityDict != null)
                {
                    return Global.GoodsItemQualityDict;
                }
            }
            Dictionary<int, int> tmpDict = new Dictionary<int, int>();
            try
            {
                foreach (KeyValuePair<int, SystemXmlItem> kvp in GameManager.SystemGoods.SystemXmlItemDict)
                {
                    int goodsId = kvp.Key;
                    tmpDict[goodsId] = kvp.Value.GetIntValue("ItemQuality", 0);
                }
            }
            catch (Exception ex)
            {
                LogManager.WriteLog(LogTypes.Error, "LoadGoodsQuality failed.", ex, true);
            }
            Dictionary<int, int> goodsItemQualityDict;
            lock (Global.GoodsItemQualityDictMutex)
            {
                Global.GoodsItemQualityDict = tmpDict;
                goodsItemQualityDict = Global.GoodsItemQualityDict;
            }
            return goodsItemQualityDict;
        }

        
        public static int GetGoodsColorEx(GoodsData gd)
        {
            int nRet = 0;
            int categoriy = Global.GetGoodsCatetoriy(gd.GoodsID);
            int result;
            if (categoriy > 49 || categoriy == 9 || categoriy == 10)
            {
                Dictionary<int, int> tmpDict = Global.GetGoodsQuality();
                int color;
                tmpDict.TryGetValue(gd.GoodsID, out color);
                result = color;
            }
            else
            {
                if (gd.ExcellenceInfo > 0)
                {
                    for (int i = 0; i < 32; i++)
                    {
                        int nExcellence = gd.ExcellenceInfo;
                        if (Global.GetIntSomeBit(nExcellence, i) == 1)
                        {
                            nRet++;
                        }
                    }
                }
                result = 1 + (nRet + 1) / 2;
            }
            return result;
        }

        
        public static int GetEquipColor(GoodsData gd)
        {
            int nRet = 0;
            if (gd.ExcellenceInfo > 0)
            {
                for (int i = 0; i < 32; i++)
                {
                    int nExcellence = gd.ExcellenceInfo;
                    if (Global.GetIntSomeBit(nExcellence, i) == 1)
                    {
                        nRet++;
                    }
                }
            }
            return 1 + (nRet + 1) / 2;
        }

        
        public static double GetJewelExtPropsItemVal(EquipPropItem item, int itemIndex)
        {
            double result;
            if (null == item)
            {
                result = 0.0;
            }
            else
            {
                double origExtProp = item.ExtProps[itemIndex];
                double value = origExtProp;
                result = value;
            }
            return result;
        }

        
        private static int CalcEquipPropsJiFen(EquipPropItem EquipProp)
        {
            double totalJiFen = 0.0;
            return (int)totalJiFen;
        }

        
        public static void CalcExcellenceEquipNum(AllThingsCalcItem allThingsCalcItem, GoodsData goodsData, int nRet, bool toAdd)
        {
            int num = (nRet > 0) ? 1 : 0;
            num *= (toAdd ? 1 : -1);
            int nExcellencePropNum = Global.GetEquipExcellencePropNum(goodsData);
            if (nExcellencePropNum >= 5)
            {
                allThingsCalcItem.TotalPurpleZhuoYueNum += num;
            }
            else if (nExcellencePropNum >= 3)
            {
                allThingsCalcItem.TotalBlueZhuoYueNum += num;
            }
            else if (nExcellencePropNum >= 1)
            {
                allThingsCalcItem.TotalGreenZhuoYueNum += num;
            }
        }

        
        public static void PrintSomeProps(Monster monster, ref StringBuilder propTrace)
        {
            try
            {
                StringBuilder sb = propTrace;
                if (null != sb)
                {
                    sb.AppendFormat("怪物属性信息详表#{0},{1}#", monster.MonsterInfo.VSName, monster.RoleID);
                    string strinfo = string.Format("Defense={0},MDefense={1},MinAttack={2},MaxAttack={3},", new object[]
                    {
                        monster.MonsterInfo.Defense,
                        monster.MonsterInfo.MDefense,
                        monster.MonsterInfo.MinAttack,
                        monster.MonsterInfo.MaxAttack
                    });
                    sb.AppendFormat(strinfo, new object[0]);
                    strinfo = string.Format("VLifeMax={0},HitV={1},Dodge={2},SubAttackInjurePercent={3},", new object[]
                    {
                        monster.MonsterInfo.VLifeMax,
                        monster.MonsterInfo.HitV,
                        monster.MonsterInfo.Dodge,
                        monster.MonsterInfo.MonsterSubAttackInjurePercent
                    });
                    sb.AppendFormat(strinfo, new object[0]);
                    for (int i = 0; i < 177; i++)
                    {
                        if (monster.MonsterInfo.ExtProps[i] > 0.0)
                        {
                            sb.AppendFormat("{0}={1:0.00},", (ExtPropIndexes)i, monster.MonsterInfo.ExtProps[i]);
                        }
                    }
                    sb.Append("#");
                    if (null != monster.TempPropsBuffer)
                    {
                        double sum = 0.0;
                        for (int i = 0; i < 177; i++)
                        {
                            sum += monster.TempPropsBuffer.GetExtProp(i);
                        }
                        if (sum > 0.0)
                        {
                            sb.Append("TempPropsBuffer加成#");
                            for (int i = 0; i < 177; i++)
                            {
                                sb.AppendFormat("{0}={1:0.00},", (ExtPropIndexes)i, monster.TempPropsBuffer.GetExtProp(i));
                            }
                            sb.Append("#");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogManager.WriteException(ex.ToString());
            }
        }

        
        public static void PrintSomeProps(GameClient client, ref StringBuilder propTrace)
        {
            StringBuilder sb = propTrace;
            if (null != sb)
            {
                sb.AppendFormat("角色属性信息详表#{0},{1},{2}#", Global.FormatRoleName4(client), client.ClientData.RoleID, client.ClientData.CombatForce);
                if (null != client.ClientData.EquipProp)
                {
                    if (client.ClientData.EquipProp.ExtProps.Any((double x) => Math.Abs(x) > 0.0))
                    {
                        sb.AppendFormat("装备及其他加成#", new object[0]);
                        for (int i = 0; i < 177; i++)
                        {
                            sb.AppendFormat("{0:0.00},", client.ClientData.EquipProp.ExtProps[i]);
                        }
                        sb.Append("#");
                    }
                }
                if (null != client.ClientData.RoleStarConstellationProp)
                {
                    if (client.ClientData.RoleStarConstellationProp.StarConstellationSecondProps.Any((double x) => Math.Abs(x) > 0.0))
                    {
                        sb.AppendFormat("星座系统加成#", new object[0]);
                        for (int i = 0; i < 177; i++)
                        {
                            sb.AppendFormat("{0:0.00},", client.ClientData.RoleStarConstellationProp.StarConstellationSecondProps[i]);
                        }
                        sb.Append("#");
                    }
                }
                if (null != client.ClientData.RoleChangeLifeProp)
                {
                    if (client.ClientData.RoleChangeLifeProp.ChangeLifeSecondProps.Any((double x) => Math.Abs(x) > 0.0))
                    {
                        sb.AppendFormat("转生系统加成#", new object[0]);
                        for (int i = 0; i < 177; i++)
                        {
                            sb.AppendFormat("{0:0.00},", client.ClientData.RoleChangeLifeProp.ChangeLifeSecondProps[i]);
                        }
                        sb.Append("#");
                    }
                }
                double sum;
                if (null != client.AllThingsMultipliedBuffer)
                {
                    sum = 0.0;
                    for (int i = 0; i < 177; i++)
                    {
                        sum += client.AllThingsMultipliedBuffer.GetExtProp(i);
                    }
                    if (sum > 0.0)
                    {
                        sb.AppendFormat("AllThingsMultipliedBuffer加成#", new object[0]);
                        for (int i = 0; i < 177; i++)
                        {
                            sb.AppendFormat("{0:0.00},", client.AllThingsMultipliedBuffer.GetExtProp(i));
                        }
                        sb.Append("#");
                    }
                }
                sum = 0.0;
                for (int i = 0; i < 177; i++)
                {
                    sum += DBRoleBufferManager.ProcessTempBufferProp(client, (ExtPropIndexes)i);
                }
                if (sum > 0.0)
                {
                    sb.AppendFormat("持续时间加属性#", new object[0]);
                    for (int i = 0; i < 177; i++)
                    {
                        sb.AppendFormat("{0:0.00},", DBRoleBufferManager.ProcessTempBufferProp(client, (ExtPropIndexes)i));
                    }
                    sb.Append("#");
                }
                if (null != client.RoleBuffer)
                {
                    sum = 0.0;
                    for (int i = 0; i < 177; i++)
                    {
                        sum += client.RoleBuffer.GetExtProp(i);
                    }
                    if (sum > 0.0)
                    {
                        sb.AppendFormat("RoleBuff加成#", new object[0]);
                        for (int i = 0; i < 177; i++)
                        {
                            sb.AppendFormat("{0:0.00},", client.RoleBuffer.GetExtProp(i));
                        }
                        sb.Append("#");
                    }
                }
                if (null != client.RoleMultipliedBuffer)
                {
                    sum = 0.0;
                    for (int i = 0; i < 177; i++)
                    {
                        sum += client.RoleMultipliedBuffer.GetExtProp(i);
                    }
                    if (sum > 0.0)
                    {
                        sb.AppendFormat("RoleMultipliedBuffer加成#", new object[0]);
                        for (int i = 0; i < 177; i++)
                        {
                            sb.AppendFormat("{0:0.00},", client.RoleMultipliedBuffer.GetExtProp(i));
                        }
                        sb.Append("#");
                    }
                }
                sum = 0.0;
                for (int i = 0; i < 177; i++)
                {
                    sum += DBRoleBufferManager.ProcessTimeAddPkKingAttackProp(client, (ExtPropIndexes)i);
                }
                if (sum > 0.0)
                {
                    sb.AppendFormat("持续时间pk王攻击属性#", new object[0]);
                    for (int i = 0; i < 177; i++)
                    {
                        sb.AppendFormat("{0:0.00},", DBRoleBufferManager.ProcessTimeAddPkKingAttackProp(client, (ExtPropIndexes)i));
                    }
                    sb.Append("#");
                }
                foreach (PropsCacheItem item in client.ClientData.PropsCacheManager.GetAllPropsCacheItems(null))
                {
                    if (item.ExtProps.Any((double x) => Math.Abs(x) > 0.0))
                    {
                        sb.AppendFormat("{0}#", item.GetName());
                        for (int i = 0; i < item.ExtProps.Length; i++)
                        {
                            sb.AppendFormat("{0:0.00},", item.ExtProps[i]);
                        }
                        sb.Append("#");
                    }
                }
                if (null != client.ClientData.ExcellenceProp)
                {
                    if (client.ClientData.ExcellenceProp.Any((double x) => Math.Abs(x) > 0.0))
                    {
                        sb.AppendFormat("ExcellenceProp索引(32)#", new object[0]);
                        int i = 0;
                        while (i < 32 || i < 177)
                        {
                            sb.AppendFormat("{0:0.00},", (i < 32) ? client.ClientData.ExcellenceProp[i] : 0.0);
                            i++;
                        }
                        sb.Append("#");
                    }
                }
            }
        }

        
        public static void RefreshEquipProp(GameClient client)
        {
            client.ClientData.EquipProp.ResetProps();
            client.ClientData.ResetExcellenceProp();
            client.ClientData.ResetLuckyProp();
            if (client.ClientData.MyWingData != null && client.ClientData.MyWingData.Using == 1)
            {
                MUWingsManager.UpdateWingDataProps(client, true);
            }
            Global.UpdateTaskZhangJieProp(client, client.ClientData.MainTaskID, true);
            GameManager.MerlinMagicBookMgr.RefreshMerlinExcellenceAttr(client, client.ClientData.MerlinData._Level, client.ClientData.MerlinData._StarNum, true);
            RebornStamp.getInstance().RefreshProps(client);
            RebornEquip.RefreshProps(client);
            MountHolyStampManager.getInstance().UpdateProps(client);
            MazingerStoreManager.getInstance().UpdateProps(client);
            AllThingsCalcItem allThingsCalcItem = new AllThingsCalcItem();
            bool bHaveDamon = false;
            if (null != client.ClientData.DamonGoodsDataList)
            {
                lock (client.ClientData.DamonGoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.DamonGoodsDataList.Count; i++)
                    {
                        GoodsData goodsData = client.ClientData.DamonGoodsDataList[i];
                        if (goodsData.Using > 0)
                        {
                            AllThingsCalcItem temp = new AllThingsCalcItem();
                            Global.RefreshOneEquipProp(client, goodsData, ref temp);
                            bHaveDamon = true;
                        }
                    }
                }
            }
            if (null != client.ClientData.MountEquipList)
            {
                lock (client.ClientData.MountEquipList)
                {
                    for (int i = 0; i < client.ClientData.MountEquipList.Count; i++)
                    {
                        GoodsData goodsData = client.ClientData.MountEquipList[i];
                        if (goodsData.Using > 0)
                        {
                            AllThingsCalcItem temp = new AllThingsCalcItem();
                            Global.RefreshOneEquipProp(client, goodsData, ref temp);
                        }
                    }
                }
            }
            if (bHaveDamon)
            {
                if (null != client.ClientData.UsingElementhrtsList)
                {
                    lock (client.ClientData.UsingElementhrtsList)
                    {
                        for (int i = 0; i < client.ClientData.UsingElementhrtsList.Count; i++)
                        {
                            GoodsData goodsData = client.ClientData.UsingElementhrtsList[i];
                            AllThingsCalcItem temp = new AllThingsCalcItem();
                            Global.RefreshOneEquipProp(client, goodsData, ref temp);
                        }
                    }
                }
            }
            client.ClientData.PropsCacheManager.SetNodeState(new object[]
            {
                PropsSystemTypes.JingLingYuanSuJueXing,
                bHaveDamon
            });
            JueXingManager.getInstance().UpdataPalyerJueXingAttr(client, false);
            if (null != client.ClientData.GoodsDataList)
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        GoodsData goodsData = client.ClientData.GoodsDataList[i];
                        if (goodsData.Using > 0)
                        {
                            Global.RefreshOneEquipProp(client, goodsData, ref allThingsCalcItem);
                        }
                    }
                }
            }
            if (null != client.ClientData.RebornGoodsDataList)
            {
                lock (client.ClientData.RebornGoodsDataList)
                {
                    Dictionary<int, int> Active = new Dictionary<int, int>();
                    Dictionary<int, double> StoneAllAttr = new Dictionary<int, double>();
                    bool flag = false;
                    GoodsData outGoodsData = null;
                    int XuanCaiStone = 0;
                    for (int i = 0; i < client.ClientData.RebornGoodsDataList.Count; i++)
                    {
                        GoodsData goodsData = client.ClientData.RebornGoodsDataList[i];
                        if (goodsData.Using > 0)
                        {
                            if (!flag)
                            {
                                flag = RebornStone.IsXuanCaiStone(goodsData, out outGoodsData, out XuanCaiStone);
                            }
                            RebornStone.GetRefreshProps(client, goodsData, Active, StoneAllAttr);
                            RebornEquip.RefreshOneEquipProp(client, goodsData, ref allThingsCalcItem);
                        }
                    }
                    RebornStone.RefreshProps(client, StoneAllAttr);
                    if (flag && outGoodsData != null && Active != null && XuanCaiStone != 0)
                    {
                        RebornStone.ActiveXuanCaiAttr(client, outGoodsData, Active, XuanCaiStone);
                    }
                    if (!flag)
                    {
                        RebornStone.VoidXuanCaiProps(client);
                    }
                }
            }
            client.ClientData.MyAllThingsCalcItem = allThingsCalcItem;
            Global.CalcClientAllThingsCalcItem(client);
            Global.CalcClientAllThingsBuffer(client);
            ArtifactManager.SetArtifactProp(client);
            ArtifactManager.SetRebornEquipArtifactProp(client);
            ZuoQiManager.getInstance().RefreshProps(client);
            ArmorManager.getInstance().ResetArmor(client, false);
            client.ClientData.RoleEquipJiFen = Global.CalcEquipPropsJiFen(client.ClientData.EquipProp);
        }

        
        public static void RefreshOneEquipProp(GameClient client, GoodsData goodsData, ref AllThingsCalcItem allThingsCalcItem)
        {
            SystemXmlItem systemGoods = null;
            systemGoods = null;
            if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                bool isElementHrt = ElementhrtsManager.IsElementHrt(categoriy);
                if (categoriy < 49 || isElementHrt || categoriy == 340)
                {
                    int nRet = client.UsingEquipMgr.EquipFirstPropCondition(client, systemGoods);
                    EquipPropItem item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsData.GoodsID);
                    if (null != item)
                    {
                        if (nRet == 1)
                        {
                            if (goodsData.Quality >= 4)
                            {
                                allThingsCalcItem.TotalGoldQualityNum++;
                            }
                            else if (goodsData.Quality >= 3)
                            {
                                allThingsCalcItem.TotalPurpleQualityNum++;
                            }
                        }
                        if (nRet == 1)
                        {
                            allThingsCalcItem.ChangeTotalForgeLevel(goodsData.Forge_level, true);
                        }
                        Global.CalcExcellenceEquipNum(allThingsCalcItem, goodsData, nRet, true);
                        if (!string.IsNullOrEmpty(goodsData.Jewellist) && nRet == 1)
                        {
                            AllThingsCalcItem singleEquipJewelItems = new AllThingsCalcItem();
                            string[] jewelFields = goodsData.Jewellist.Split(new char[]
                            {
                                ','
                            });
                            for (int x = 0; x < jewelFields.Length; x++)
                            {
                                int jewelGoodsID = Convert.ToInt32(jewelFields[x]);
                                EquipPropItem jewelItem = GameManager.EquipPropsMgr.FindEquipPropItem(jewelGoodsID);
                                if (null != jewelItem)
                                {
                                    int jewelLevel = Global.GetJewelLevel(jewelGoodsID);
                                    if (jewelLevel >= 8)
                                    {
                                        allThingsCalcItem.TotalJewel8LevelNum++;
                                        singleEquipJewelItems.TotalJewel8LevelNum++;
                                    }
                                    else if (jewelLevel >= 7)
                                    {
                                        allThingsCalcItem.TotalJewel7LevelNum++;
                                        singleEquipJewelItems.TotalJewel7LevelNum++;
                                    }
                                    else if (jewelLevel >= 6)
                                    {
                                        allThingsCalcItem.TotalJewel6LevelNum++;
                                        singleEquipJewelItems.TotalJewel6LevelNum++;
                                    }
                                    else if (jewelLevel >= 5)
                                    {
                                        allThingsCalcItem.TotalJewel5LevelNum++;
                                        singleEquipJewelItems.TotalJewel5LevelNum++;
                                    }
                                    else if (jewelLevel >= 4)
                                    {
                                        allThingsCalcItem.TotalJewel4LevelNum++;
                                        singleEquipJewelItems.TotalJewel4LevelNum++;
                                    }
                                }
                            }
                        }
                        int maxStrong = (int)item.ExtProps[0];
                        if (isElementHrt || goodsData.Strong < maxStrong)
                        {
                            bool bRet = true;
                            if (nRet != 1)
                            {
                                bRet = false;
                            }
                            if (goodsData.ExcellenceInfo != 0)
                            {
                                Global.ProcessEquipExcellenceProp(client, goodsData, bRet, systemGoods);
                            }
                            if (bRet && goodsData.Lucky > 0)
                            {
                                Global.ProcessEquipLuckProp(client, goodsData, bRet, systemGoods);
                            }
                            if (nRet == 1)
                            {
                                for (int i = 0; i < 5; i++)
                                {
                                    client.ClientData.EquipProp.BaseProps[i] += Global.GetEquipBasePropsItemVal(goodsData, item, i);
                                }
                                for (int i = 0; i < 177; i++)
                                {
                                    client.ClientData.EquipProp.ExtProps[i] += Global.GetEquipExtPropsItemVal(client, goodsData, item, i, systemGoods);
                                }
                            }
                            int nOcc = Global.CalcOriginalOccupationID(client);
                            ChuanQiQianHua.ApplayEquipQianHuaProps(client.ClientData.EquipProp.ExtProps, nOcc, goodsData, systemGoods, true);
                            if (!string.IsNullOrEmpty(goodsData.Jewellist) && nRet == 1)
                            {
                                AllThingsCalcItem singleEquipJewelItems = new AllThingsCalcItem();
                                string[] jewelFields = goodsData.Jewellist.Split(new char[]
                                {
                                    ','
                                });
                                for (int x = 0; x < jewelFields.Length; x++)
                                {
                                    int jewelGoodsID = Convert.ToInt32(jewelFields[x]);
                                    EquipPropItem jewelItem = GameManager.EquipPropsMgr.FindEquipPropItem(jewelGoodsID);
                                    if (null != jewelItem)
                                    {
                                        for (int i = 0; i < 5; i++)
                                        {
                                            client.ClientData.EquipProp.BaseProps[i] += Global.GetJewelBasePropsItemVal(jewelItem, i);
                                        }
                                        for (int i = 0; i < 177; i++)
                                        {
                                            client.ClientData.EquipProp.ExtProps[i] += Global.GetJewelExtPropsItemVal(jewelItem, i);
                                        }
                                    }
                                }
                            }
                            if (nRet > 0)
                            {
                                if (goodsData.WashProps != null && goodsData.WashProps.Count >= 2)
                                {
                                    double juhunPercent = 1.0;
                                    double zuoQiPercent = 1.0;
                                    if (ZuoQiManager.CheckIsZuoQiByGoodsID(goodsData.GoodsID))
                                    {
                                        zuoQiPercent = 0.001;
                                    }
                                    EquipJuHunXmlData juhunData;
                                    if (Data.EquipJuHunDataDict.TryGetValue(goodsData.JuHunID, out juhunData))
                                    {
                                        juhunPercent += juhunData.GrowProportion;
                                    }
                                    for (int i = 0; i < goodsData.WashProps.Count; i += 2)
                                    {
                                        int idx = goodsData.WashProps[i];
                                        if (0 < idx && idx < 177)
                                        {
                                            client.ClientData.EquipProp.ExtProps[idx] += (double)goodsData.WashProps[i + 1] * juhunPercent * zuoQiPercent;
                                        }
                                    }
                                }
                                if (goodsData.ElementhrtsProps != null && goodsData.ElementhrtsProps.Count >= 2 && GoodsUtil.IsEquip(goodsData.GoodsID))
                                {
                                    double zuoQiPercent = 0.001;
                                    for (int i = 0; i <= goodsData.ElementhrtsProps.Count - 2; i += 2)
                                    {
                                        int idx = goodsData.ElementhrtsProps[i];
                                        if (0 < idx && idx < 177)
                                        {
                                            client.ClientData.EquipProp.ExtProps[idx] += (double)goodsData.ElementhrtsProps[i + 1] * zuoQiPercent;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        
        public static int CalcTaskZhangJieID(GameClient client, int taskID, out int goodsID)
        {
            int zhangJieID = client.ClientData.CompleteTaskZhangJie;
            int nextZhangJieID = zhangJieID;
            goodsID = 0;
            int index = GameManager.TaskZhangJieDict.BinarySearch(taskID);
            if (index >= 0)
            {
                SystemXmlItem nextZhangJieXmlItem = (SystemXmlItem)GameManager.TaskZhangJieDict[index].tag;
                nextZhangJieID = nextZhangJieXmlItem.GetIntValue("ID", -1);
                goodsID = nextZhangJieXmlItem.GetIntValue("GlGoodsID", -1);
            }
            return nextZhangJieID;
        }

        
        public static void UpdateTaskZhangJieProp(GameClient client, int taskID, bool bInit = false)
        {
            int nextGoodsID = 0;
            int zhangJieID = client.ClientData.CompleteTaskZhangJie;
            int nextZhangJieID = Global.CalcTaskZhangJieID(client, taskID, out nextGoodsID);
            if (bInit)
            {
                client.ClientData.CompleteTaskZhangJie = nextZhangJieID;
                foreach (KeyValuePair<int, SystemXmlItem> kv in GameManager.TaskZhangJie.SystemXmlItemDict)
                {
                    if (kv.Key <= nextZhangJieID)
                    {
                        int goodsID = kv.Value.GetIntValue("GlGoodsID", -1);
                        if (goodsID > 0)
                        {
                            Global.RefreshGoodsEquipProps(client, goodsID, true);
                        }
                    }
                }
            }
            else if (zhangJieID != nextZhangJieID)
            {
                client.ClientData.CompleteTaskZhangJie = nextZhangJieID;
                Global.RefreshGoodsEquipProps(client, nextGoodsID, true);
            }
        }

        
        public static long CalcExpForRoleScore(int score, int expModule)
        {
            long result;
            if (score <= 0)
            {
                result = 0L;
            }
            else
            {
                result = (long)((double)expModule * (0.5 + Math.Pow((double)Global.Clamp(score, 0, 100000), 0.34) / 100.0));
            }
            return result;
        }

        
        public static void RefreshGoodsEquipProps(GameClient client, int goodsID, bool addOrDel)
        {
            SystemXmlItem systemGoods = null;
            if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                EquipPropItem item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsID);
                if (null != item)
                {
                    if (addOrDel)
                    {
                        for (int i = 0; i < 177; i++)
                        {
                            client.ClientData.EquipProp.ExtProps[i] += item.ExtProps[i];
                        }
                    }
                    else
                    {
                        for (int i = 0; i < 177; i++)
                        {
                            client.ClientData.EquipProp.ExtProps[i] -= item.ExtProps[i];
                            client.ClientData.EquipProp.ExtProps[i] = Global.GMax(0.0, client.ClientData.EquipProp.ExtProps[i]);
                        }
                    }
                }
            }
        }

        
        public static bool RefreshEquipProp(GameClient client, GoodsData goodsData)
        {
            bool result;
            if (null == goodsData)
            {
                result = false;
            }
            else
            {
                SystemXmlItem systemGoods = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                {
                    result = false;
                }
                else
                {
                    int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                    bool isElementHrt = ElementhrtsManager.IsElementHrt(categoriy);
                    if (categoriy == 23)
                    {
                        if (!GameFuncControlManager.IsGameFuncDisabled(GameFuncType.System2Dot2))
                        {
                            return false;
                        }
                    }
                    if ((categoriy >= 49 && !isElementHrt && categoriy != 340) || GoodsUtil.GetGoodsTypeInfo(categoriy).FashionGoods || categoriy == 23 || categoriy == 8)
                    {
                        result = false;
                    }
                    else
                    {
                        bool toAdd = goodsData.Using > 0;
                        if (isElementHrt)
                        {
                            toAdd = (goodsData.Site == 3001);
                        }
                        int nRet = 1;
                        nRet = client.UsingEquipMgr.EquipFirstPropCondition(client, systemGoods);
                        EquipPropItem item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsData.GoodsID);
                        if (null == item)
                        {
                            result = false;
                        }
                        else if (nRet != 1)
                        {
                            result = false;
                        }
                        else
                        {
                            if (categoriy != 8 && categoriy != 9)
                            {
                                if (goodsData.Quality >= 4)
                                {
                                    client.ClientData.MyAllThingsCalcItem.TotalGoldQualityNum += (toAdd ? 1 : -1);
                                }
                                else if (goodsData.Quality >= 3)
                                {
                                    client.ClientData.MyAllThingsCalcItem.TotalPurpleQualityNum += (toAdd ? 1 : -1);
                                }
                            }
                            if (categoriy != 8 && categoriy != 9)
                            {
                                client.ClientData.MyAllThingsCalcItem.ChangeTotalForgeLevel(goodsData.Forge_level, toAdd);
                            }
                            Global.CalcExcellenceEquipNum(client.ClientData.MyAllThingsCalcItem, goodsData, nRet, toAdd);
                            if (!string.IsNullOrEmpty(goodsData.Jewellist))
                            {
                                AllThingsCalcItem singleEquipJewelItems = new AllThingsCalcItem();
                                string[] jewelFields = goodsData.Jewellist.Split(new char[]
                                {
                                    ','
                                });
                                for (int x = 0; x < jewelFields.Length; x++)
                                {
                                    int jewelGoodsID = Convert.ToInt32(jewelFields[x]);
                                    EquipPropItem jewelItem = GameManager.EquipPropsMgr.FindEquipPropItem(jewelGoodsID);
                                    if (null != jewelItem)
                                    {
                                        int jewelLevel = Global.GetJewelLevel(jewelGoodsID);
                                        if (jewelLevel >= 8)
                                        {
                                            client.ClientData.MyAllThingsCalcItem.TotalJewel8LevelNum += (toAdd ? 1 : -1);
                                            singleEquipJewelItems.TotalJewel8LevelNum++;
                                        }
                                        else if (jewelLevel >= 7)
                                        {
                                            client.ClientData.MyAllThingsCalcItem.TotalJewel7LevelNum += (toAdd ? 1 : -1);
                                            singleEquipJewelItems.TotalJewel7LevelNum++;
                                        }
                                        else if (jewelLevel >= 6)
                                        {
                                            client.ClientData.MyAllThingsCalcItem.TotalJewel6LevelNum += (toAdd ? 1 : -1);
                                            singleEquipJewelItems.TotalJewel6LevelNum++;
                                        }
                                        else if (jewelLevel >= 5)
                                        {
                                            client.ClientData.MyAllThingsCalcItem.TotalJewel5LevelNum += (toAdd ? 1 : -1);
                                            singleEquipJewelItems.TotalJewel5LevelNum++;
                                        }
                                        else if (jewelLevel >= 4)
                                        {
                                            client.ClientData.MyAllThingsCalcItem.TotalJewel4LevelNum += (toAdd ? 1 : -1);
                                            singleEquipJewelItems.TotalJewel4LevelNum++;
                                        }
                                    }
                                }
                            }
                            Global.CalcClientAllThingsCalcItem(client);
                            Global.CalcClientAllThingsBuffer(client);
                            int maxStrong = (int)item.ExtProps[0];
                            if (!isElementHrt && goodsData.Strong >= maxStrong)
                            {
                                result = true;
                            }
                            else
                            {
                                Global.ProcessEquipExcellenceProp(client, goodsData, toAdd, systemGoods);
                                Global.ProcessEquipLuckProp(client, goodsData, toAdd, systemGoods);
                                for (int i = 0; i < 5; i++)
                                {
                                    if (toAdd)
                                    {
                                        client.ClientData.EquipProp.BaseProps[i] += Global.GetEquipBasePropsItemVal(goodsData, item, i);
                                    }
                                    else
                                    {
                                        client.ClientData.EquipProp.BaseProps[i] -= Global.GetEquipBasePropsItemVal(goodsData, item, i);
                                    }
                                }
                                for (int i = 0; i < 177; i++)
                                {
                                    double val = Global.GetEquipExtPropsItemVal(client, goodsData, item, i, systemGoods);
                                    if (toAdd)
                                    {
                                        client.ClientData.EquipProp.ExtProps[i] += val;
                                    }
                                    else
                                    {
                                        client.ClientData.EquipProp.ExtProps[i] -= val;
                                    }
                                }
                                if (categoriy == 10 || categoriy == 9)
                                {
                                    if (null != client.ClientData.UsingElementhrtsList)
                                    {
                                        lock (client.ClientData.UsingElementhrtsList)
                                        {
                                            for (int j = 0; j < client.ClientData.UsingElementhrtsList.Count; j++)
                                            {
                                                GoodsData gd = client.ClientData.UsingElementhrtsList[j];
                                                SystemXmlItem systemgd = null;
                                                EquipPropItem gditem = GameManager.EquipPropsMgr.FindEquipPropItem(gd.GoodsID);
                                                if (null != gditem)
                                                {
                                                    if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(gd.GoodsID, out systemgd))
                                                    {
                                                        for (int i = 0; i < 177; i++)
                                                        {
                                                            double val = Global.GetEquipExtPropsItemVal(client, gd, gditem, i, systemgd);
                                                            if (toAdd)
                                                            {
                                                                client.ClientData.EquipProp.ExtProps[i] += val;
                                                            }
                                                            else
                                                            {
                                                                client.ClientData.EquipProp.ExtProps[i] -= val;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                int nOcc = Global.CalcOriginalOccupationID(client);
                                ChuanQiQianHua.ApplayEquipQianHuaProps(client.ClientData.EquipProp.ExtProps, nOcc, goodsData, systemGoods, toAdd);
                                if (!string.IsNullOrEmpty(goodsData.Jewellist))
                                {
                                    AllThingsCalcItem singleEquipJewelItems = new AllThingsCalcItem();
                                    string[] jewelFields = goodsData.Jewellist.Split(new char[]
                                    {
                                        ','
                                    });
                                    for (int x = 0; x < jewelFields.Length; x++)
                                    {
                                        int jewelGoodsID = Convert.ToInt32(jewelFields[x]);
                                        EquipPropItem jewelItem = GameManager.EquipPropsMgr.FindEquipPropItem(jewelGoodsID);
                                        if (null != jewelItem)
                                        {
                                            for (int i = 0; i < 5; i++)
                                            {
                                                if (toAdd && nRet == 1)
                                                {
                                                    client.ClientData.EquipProp.BaseProps[i] += Global.GetJewelBasePropsItemVal(jewelItem, i);
                                                }
                                                else
                                                {
                                                    client.ClientData.EquipProp.BaseProps[i] -= Global.GetJewelBasePropsItemVal(jewelItem, i);
                                                }
                                            }
                                            for (int i = 0; i < 177; i++)
                                            {
                                                if (toAdd)
                                                {
                                                    client.ClientData.EquipProp.ExtProps[i] += Global.GetJewelExtPropsItemVal(jewelItem, i);
                                                }
                                                else
                                                {
                                                    client.ClientData.EquipProp.ExtProps[i] -= Global.GetJewelExtPropsItemVal(jewelItem, i);
                                                }
                                            }
                                        }
                                    }
                                }
                                if (goodsData.WashProps != null && goodsData.WashProps.Count >= 2)
                                {
                                    double juhunPercent = 1.0;
                                    EquipJuHunXmlData juhunData;
                                    if (Data.EquipJuHunDataDict.TryGetValue(goodsData.JuHunID, out juhunData))
                                    {
                                        juhunPercent += juhunData.GrowProportion;
                                    }
                                    for (int j = 0; j < goodsData.WashProps.Count; j += 2)
                                    {
                                        int idx = goodsData.WashProps[j];
                                        if (0 < idx && idx < 177)
                                        {
                                            client.ClientData.EquipProp.ExtProps[idx] += (double)(goodsData.WashProps[j + 1] * (toAdd ? 1 : -1)) * juhunPercent;
                                        }
                                    }
                                }
                                Global.CalcClientAllThingsCalcItem(client);
                                Global.CalcClientAllThingsBuffer(client);
                                ArtifactManager.SetArtifactProp(client);
                                ArtifactManager.SetRebornEquipArtifactProp(client);
                                result = true;
                            }
                        }
                    }
                }
            }
            return result;
        }

        
        public static void ProcessEquipExcellenceProp(GameClient client, GoodsData goods, bool bAdd, SystemXmlItem systemGoods)
        {
            if (bAdd)
            {
                int nRet = client.UsingEquipMgr.EquipFirstPropCondition(client, systemGoods);
                if (nRet < 1)
                {
                    return;
                }
            }
            for (int i = 0; i < 32; i++)
            {
                int nExcellence = goods.ExcellenceInfo;
                if (Global.GetIntSomeBit(nExcellence, i) == 1)
                {
                    int nIndex = i;
                    if (nIndex == 0)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 1)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += (double)((client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20);
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= (double)((client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20);
                        }
                    }
                    else if (nIndex == 2)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += (double)((client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20);
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= (double)((client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20);
                        }
                    }
                    else if (nIndex == 3)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 4)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 5)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 6)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 7)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 8)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 9)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += (double)((client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20);
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= (double)((client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20);
                        }
                    }
                    else if (nIndex == 10)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 11)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 12)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 13)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                        }
                    }
                    else if (nIndex == 14)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.03;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.03;
                        }
                    }
                    else if (nIndex == 15)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 16)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 17)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 18)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 19)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 20)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 21)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 22)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 23)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 24)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 25)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 26)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 27)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 28)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 29)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 30)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    else if (nIndex == 31)
                    {
                        if (bAdd)
                        {
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        }
                        else
                        {
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                        }
                    }
                    if (!bAdd)
                    {
                        client.ClientData.ExcellenceProp[nIndex] = Global.GMax(0.0, client.ClientData.ExcellenceProp[nIndex]);
                    }
                }
            }
        }

        
        public static void ProcessEquipLuckProp(GameClient client, GoodsData goods, bool bAdd, SystemXmlItem systemGoods)
        {
            if (bAdd)
            {
                int nRet = client.UsingEquipMgr.EquipFirstPropCondition(client, systemGoods);
                if (nRet < 1)
                {
                    return;
                }
            }
            if (goods.Lucky > 0)
            {
                if (bAdd)
                {
                    client.ClientData.LuckProp += 5.0;
                }
                else
                {
                    client.ClientData.LuckProp -= 5.0;
                }
            }
        }

        
        public static AllThingsCalcItem CalcGoodsDataListAllThingsItem(List<GoodsData> goodsDataList)
        {
            AllThingsCalcItem allThingsCalcItem = new AllThingsCalcItem();
            AllThingsCalcItem result;
            if (null == goodsDataList)
            {
                result = allThingsCalcItem;
            }
            else
            {
                SystemXmlItem systemGoods = null;
                for (int i = 0; i < goodsDataList.Count; i++)
                {
                    GoodsData goodsData = goodsDataList[i];
                    if (goodsData.Using > 0)
                    {
                        systemGoods = null;
                        if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                        {
                            if (systemGoods.GetIntValue("Categoriy", -1) < 49)
                            {
                                EquipPropItem item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsData.GoodsID);
                                if (null != item)
                                {
                                    if (goodsData.Quality >= 4)
                                    {
                                        allThingsCalcItem.TotalGoldQualityNum++;
                                    }
                                    else if (goodsData.Quality >= 3)
                                    {
                                        allThingsCalcItem.TotalPurpleQualityNum++;
                                    }
                                    allThingsCalcItem.ChangeTotalForgeLevel(goodsData.Forge_level, true);
                                    Global.CalcExcellenceEquipNum(allThingsCalcItem, goodsData, 1, true);
                                    if (!string.IsNullOrEmpty(goodsData.Jewellist))
                                    {
                                        string[] jewelFields = goodsData.Jewellist.Split(new char[]
                                        {
                                            ','
                                        });
                                        for (int x = 0; x < jewelFields.Length; x++)
                                        {
                                            int jewelGoodsID = Convert.ToInt32(jewelFields[x]);
                                            int jewelLevel = Global.GetJewelLevel(jewelGoodsID);
                                            if (jewelLevel >= 8)
                                            {
                                                allThingsCalcItem.TotalJewel8LevelNum++;
                                            }
                                            else if (jewelLevel >= 7)
                                            {
                                                allThingsCalcItem.TotalJewel7LevelNum++;
                                            }
                                            else if (jewelLevel >= 6)
                                            {
                                                allThingsCalcItem.TotalJewel6LevelNum++;
                                            }
                                            else if (jewelLevel >= 5)
                                            {
                                                allThingsCalcItem.TotalJewel5LevelNum++;
                                            }
                                            else if (jewelLevel >= 4)
                                            {
                                                allThingsCalcItem.TotalJewel4LevelNum++;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                result = allThingsCalcItem;
            }
            return result;
        }

        
        public static double[] GetRoleAttribute(GameClient client)
        {
            double[] ret = new double[177];
            double[] result;
            try
            {
                for (int i = 0; i < 177; i++)
                {
                    ret[i] = RoleAlgorithm.GetPureExtProp(client, i);
                }
                result = ret;
            }
            catch
            {
                result = null;
            }
            return result;
        }

        
        public static void RefreshEquipPropAndNotify(GameClient client)
        {
            Global.RefreshEquipProp(client);
            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
        }

        
        public static long GetExpMultiByZhuanShengExpXiShu(GameClient client, long exp)
        {
            double expXiShu = 1.0;
            long result;
            if (Data.ChangeLifeEverydayExpRate.TryGetValue(client.ClientData.ChangeLifeCount, out expXiShu))
            {
                result = (long)((double)exp * expXiShu);
            }
            else
            {
                result = exp;
            }
            return result;
        }

        
        public static long GetCurrentLevelUpNeedExp(GameClient client)
        {
            long nNeedExp;
            if (client.ClientData.ChangeLifeCount > 0)
            {
                nNeedExp = (long)((int)Data.LevelUpExperienceList[client.ClientData.Level]);
                ChangeLifeDataInfo infoTmp = GameManager.ChangeLifeMgr.GetChangeLifeDataInfo(client, 0);
                if (infoTmp != null && infoTmp.ExpProportion > 0L)
                {
                    nNeedExp *= infoTmp.ExpProportion;
                }
            }
            else
            {
                nNeedExp = Data.LevelUpExperienceList[client.ClientData.Level];
            }
            return nNeedExp;
        }

        
        public static void EarnExperience(GameClient sprite, long experience)
        {
            if (sprite.ClientData.ChangeLifeCount <= GameManager.ChangeLifeMgr.m_MaxChangeLifeCount)
            {
                long nNeedExp;
                if (sprite.ClientData.ChangeLifeCount > 0)
                {
                    nNeedExp = (long)((int)Data.LevelUpExperienceList[sprite.ClientData.Level]);
                    ChangeLifeDataInfo infoTmp = GameManager.ChangeLifeMgr.GetChangeLifeDataInfo(sprite, 0);
                    if (infoTmp != null && infoTmp.ExpProportion > 0L)
                    {
                        nNeedExp *= infoTmp.ExpProportion;
                    }
                }
                else
                {
                    nNeedExp = Data.LevelUpExperienceList[sprite.ClientData.Level];
                }
                if (sprite.ClientData.Level < Data.LevelUpExperienceList.Length - 1 && sprite.ClientData.Experience + experience >= nNeedExp)
                {
                    int oldLevel = sprite.ClientData.Level;
                    sprite.ClientData.Level++;
                    Global.TryToActivateSpecialWuXueLevel(sprite);
                    Global.SwitchBossFuBenEnterNum(sprite);
                    HuodongCachingMgr.ProcessGetUpLevelGift(sprite, false);
                    GlobalNew.RefreshGongNeng(sprite);
                    experience = sprite.ClientData.Experience + experience - nNeedExp;
                    sprite.ClientData.Experience = 0L;
                    GlobalEventSource.getInstance().fireEvent(new PlayerLevelupEventObject(sprite));
                    Global.EarnExperience(sprite, experience);
                    VideoLogic.getInstance().GetOrSendPlayerVideoStatus(sprite, sprite.ClientData.RoleCommonUseIntPamams);
                }
                else
                {
                    sprite.ClientData.Experience += experience;
                    sprite.ClientData.Experience = Global.GMax(0L, sprite.ClientData.Experience);
                }
            }
        }

        
        public static double ProcessTeamZhuFuExperience(GameClient client)
        {
            double result;
            if (client.ClientData.TeamID < 0)
            {
                result = 0.0;
            }
            else
            {
                TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
                if (null == td)
                {
                    result = 0.0;
                }
                else
                {
                    int totalTeamMemberNum = 0;
                    lock (td)
                    {
                        for (int i = 0; i < td.TeamRoles.Count; i++)
                        {
                            if (td.TeamRoles[i].RoleID == client.ClientData.RoleID)
                            {
                                totalTeamMemberNum++;
                            }
                            else
                            {
                                GameClient gc = GameManager.ClientMgr.FindClient(td.TeamRoles[i].RoleID);
                                if (null != gc)
                                {
                                    if (gc.ClientData.MapCode == client.ClientData.MapCode)
                                    {
                                        if (gc.ClientData.CopyMapID == client.ClientData.CopyMapID)
                                        {
                                            totalTeamMemberNum++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    result = (double)totalTeamMemberNum * 0.02;
                }
            }
            return result;
        }

        
        public static void RefreshSkillForeverProps(GameClient client)
        {
            if (null != client.ClientData.SkillDataList)
            {
                client.RoleBuffer.ResetForeverProps();
                lock (client.ClientData.SkillDataList)
                {
                    for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                    {
                        int intKey = client.ClientData.SkillDataList[i].SkillID;
                        int skillLevel = client.ClientData.SkillDataList[i].SkillLevel;
                        int skillid = client.ClientData.SkillDataList[i].SkillID;
                        SystemXmlItem systemMagic = null;
                        if (GameManager.SystemMagicQuickMgr.MagicItemsDict.TryGetValue(intKey, out systemMagic))
                        {
                            if (systemMagic.GetIntValue("MagicType", -1) == -1)
                            {
                                List<MagicActionItem> magicActionItemList = null;
                                if (GameManager.SystemMagicActionMgr.MagicActionsDict.TryGetValue(intKey, out magicActionItemList) && null != magicActionItemList)
                                {
                                    for (int j = 0; j < magicActionItemList.Count; j++)
                                    {
                                        MagicAction.ProcessAction(client, client, magicActionItemList[j].MagicActionID, magicActionItemList[j].MagicActionParams, -1, -1, 0, skillLevel, 0, 0, 0, -1, 0, false, false, 1.0, 1, 0.0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        
        public static void AddDefaultSkills(GameClient client)
        {
            if (null == client.ClientData.SkillDataList)
            {
                client.ClientData.SkillDataList = new List<SkillData>();
            }
            List<SkillData> skillDataList = client.ClientData.SkillDataList;
            int nOcc = Global.CalcOriginalOccupationID(client);
            int[] nSkillID = null;
            if (nOcc == 0)
            {
                nSkillID = Global.DefaultSkill1;
            }
            else if (nOcc == 1)
            {
                nSkillID = Global.DefaultSkill2;
            }
            else if (nOcc == 2)
            {
                nSkillID = Global.DefaultSkill3;
            }
            if (null != nSkillID)
            {
                for (int i = 0; i < nSkillID.Length; i++)
                {
                    SkillData skillData = new SkillData
                    {
                        DbID = -1,
                        SkillID = nSkillID[i],
                        SkillLevel = client.ClientData.DefaultSkillLev
                    };
                    lock (skillDataList)
                    {
                        skillDataList.Add(skillData);
                    }
                }
            }
            else
            {
                Global.RefreshFiveCombatSkillList(client);
            }
            lock (skillDataList)
            {
                foreach (SkillData skilldata in skillDataList)
                {
                    Global.RefreshSecondSkillLevel(client, skilldata.SkillID);
                }
            }
        }

        
        protected static void RefreshFiveCombatSkillList(GameClient client, int[] FiveCombatArray)
        {
            int DefaultSkillLev = 0;
            List<SkillData> skillDataList = client.ClientData.SkillDataList;
            lock (skillDataList)
            {
                for (int i = 0; i < FiveCombatArray.Length; i++)
                {
                    int value = FiveCombatArray[i];
                    SkillData skilldata = skillDataList.Find((SkillData x) => x.SkillID == value);
                    if (skilldata != null && skilldata.SkillLevel > DefaultSkillLev)
                    {
                        DefaultSkillLev = skilldata.SkillLevel;
                    }
                }
            }
            List<int> FiveCombatList = FiveCombatArray.ToList<int>();
            lock (skillDataList)
            {
                foreach (SkillData skilldata in skillDataList)
                {
                    if (FiveCombatList.Contains(skilldata.SkillID))
                    {
                        skilldata.SkillLevel = DefaultSkillLev;
                    }
                }
            }
        }

        
        public static void RefreshFiveCombatSkillList(GameClient client)
        {
            int nOcc = Global.CalcOriginalOccupationID(client);
            if (nOcc == 3 || nOcc == 5)
            {
                if (nOcc == 3)
                {
                    int[] FiveCombatArray = JingJiChangConstants.getJingJiChangeFiveCombatSkillList(nOcc, EMagicSwordTowardType.EMST_Strength);
                    if (null != FiveCombatArray)
                    {
                        Global.RefreshFiveCombatSkillList(client, FiveCombatArray);
                    }
                    FiveCombatArray = JingJiChangConstants.getJingJiChangeFiveCombatSkillList(nOcc, EMagicSwordTowardType.EMST_Intelligence);
                    if (null != FiveCombatArray)
                    {
                        Global.RefreshFiveCombatSkillList(client, FiveCombatArray);
                    }
                }
                else
                {
                    int[] FiveCombatArray = JingJiChangConstants.getJingJiChangeFiveCombatSkillList(nOcc, EMagicSwordTowardType.EMST_Not);
                    if (null != FiveCombatArray)
                    {
                        Global.RefreshFiveCombatSkillList(client, FiveCombatArray);
                    }
                }
            }
        }

        
        public static void AddSkillData(GameClient client, int skillDbID, int skillID, int skillLevel)
        {
            if (null == client.ClientData.SkillDataList)
            {
                client.ClientData.SkillDataList = new List<SkillData>();
            }
            lock (client.ClientData.SkillDataList)
            {
                client.ClientData.SkillDataList.Add(new SkillData
                {
                    DbID = skillDbID,
                    SkillID = skillID,
                    SkillLevel = skillLevel
                });
            }
        }

        
        public static void DelSkillData(GameClient client, int skillID)
        {
            if (null != client.ClientData.SkillDataList)
            {
                lock (client.ClientData.SkillDataList)
                {
                    foreach (SkillData item in client.ClientData.SkillDataList)
                    {
                        if (item.SkillID == skillID)
                        {
                            client.ClientData.SkillDataList.Remove(item);
                            break;
                        }
                    }
                }
            }
        }

        
        public static SkillData GetSkillDataByID(GameClient client, int skillID)
        {
            SkillData skillData = client.passiveSkillModule.GetSkillData(skillID);
            SkillData result;
            if (null != skillData)
            {
                result = skillData;
            }
            else if (null == client.ClientData.SkillDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.SkillDataList)
                {
                    for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                    {
                        if (client.ClientData.SkillDataList[i].SkillID == skillID)
                        {
                            return client.ClientData.SkillDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static SkillData GetSkillDataByDbID(GameClient client, int skillDbID)
        {
            SkillData result;
            if (null == client.ClientData.SkillDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.SkillDataList)
                {
                    for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                    {
                        if (client.ClientData.SkillDataList[i].DbID == skillDbID)
                        {
                            return client.ClientData.SkillDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static int AddSkillDBCommand(TCPOutPacketPool pool, GameClient client, int skillID, int skillLevel)
        {
            string[] dbFields = null;
            string strcmd = string.Format("{0}:{1}:{2}", client.ClientData.RoleID, skillID, skillLevel);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, 10036, strcmd, out dbFields, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else
            {
                int skillDbID = Convert.ToInt32(dbFields[0]);
                if (dbFields.Length <= 0 || skillDbID < 0)
                {
                    result = skillDbID;
                }
                else
                {
                    Global.AddSkillData(client, skillDbID, skillID, skillLevel);
                    Global.ProcessNumSkillID(client, false);
                    GameManager.ClientMgr.NotifySelfAddSkill(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, skillDbID, skillID, skillLevel);
                    result = skillDbID;
                }
            }
            return result;
        }

        
        public static void ProcessNumSkillID(GameClient client, bool force = false)
        {
            if (null != client.ClientData.SkillDataList)
            {
                if (!force)
                {
                    if (null != client.ClientData.NumSkillData)
                    {
                        return;
                    }
                }
                client.ClientData.NumSkillData = null;
                bool anySkill = false;
                if (client.ClientData.NumSkillID <= 0)
                {
                    anySkill = true;
                }
                lock (client.ClientData.SkillDataList)
                {
                    for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                    {
                        int intKey = client.ClientData.SkillDataList[i].SkillID;
                        SystemXmlItem systemMagic = null;
                        if (GameManager.SystemMagicQuickMgr.MagicItemsDict.TryGetValue(intKey, out systemMagic))
                        {
                            if (systemMagic.GetIntValue("MagicType", -1) == -1)
                            {
                                if (anySkill || client.ClientData.NumSkillID == intKey)
                                {
                                    client.ClientData.NumSkillData = client.ClientData.SkillDataList[i];
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        
        public static bool GetUpSkillLearnCondition(int skillID, SkillData skillData, out int needRoleLevel, out int needShuLianDu, SystemXmlItem systemMagic = null)
        {
            needRoleLevel = 0;
            needShuLianDu = 0;
            return true;
        }

        
        public static bool MU_GetUpSkillLearnCondition(GameClient Client, int skillID, SystemXmlItem systemMagic = null)
        {
            if (null == systemMagic)
            {
                if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
                {
                    return false;
                }
            }
            int learnTask = systemMagic.GetIntValue("LearnTask", -1);
            bool result;
            if (learnTask > 0)
            {
                result = (learnTask <= Client.ClientData.MainTaskID);
            }
            else
            {
                string condition = systemMagic.GetStringValue("LearnCondition");
                if (string.IsNullOrEmpty(condition))
                {
                    result = false;
                }
                else
                {
                    string[] sConditionFields = condition.Split(new char[]
                    {
                        ','
                    });
                    if (sConditionFields.Length != 2)
                    {
                        result = false;
                    }
                    else
                    {
                        int nNeedChangeCount = Global.SafeConvertToInt32(sConditionFields[0]);
                        int nNeedLevel = Global.SafeConvertToInt32(sConditionFields[1]);
                        int nChangeCount = Client.ClientData.ChangeLifeCount;
                        int nLevel = Client.ClientData.Level;
                        result = (nChangeCount > nNeedChangeCount || (nChangeCount >= nNeedChangeCount && (nChangeCount != nNeedChangeCount || nLevel >= nNeedLevel)));
                    }
                }
            }
            return result;
        }

        
        public static bool MU_GetDefaultSkillLearn(GameClient Client, int skillID, SystemXmlItem systemMagic = null)
        {
            if (null == systemMagic)
            {
                if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
                {
                    return false;
                }
            }
            int nNeedChangeLifeLev = 0;
            int nNeedLev = 1;
            bool result;
            if (Client.ClientData.ChangeLifeCount > nNeedChangeLifeLev)
            {
                result = true;
            }
            else
            {
                if (Client.ClientData.ChangeLifeCount == nNeedChangeLifeLev)
                {
                    if (Client.ClientData.Level > nNeedLev)
                    {
                        return true;
                    }
                }
                result = false;
            }
            return result;
        }

        
        public static void ChangeSkillUsedNumNotifyState(GameClient client, SkillData skillData, int oldUsedNum, int newUsedNum)
        {
            int needRoleLevel = 1;
            int needShuLianDu = 0;
            if (Global.GetUpSkillLearnCondition(skillData.SkillID, skillData, out needRoleLevel, out needShuLianDu, null))
            {
                int percent = oldUsedNum * 100 / needShuLianDu;
                int percent2 = newUsedNum * 100 / needShuLianDu;
                if (percent != percent2)
                {
                    GameManager.ClientMgr.NotifySkillUsedNumFull(client, skillData);
                }
            }
        }

        
        public static int GetNeedMagicV(IObject attacker, int skillID, int skillLevel)
        {
            string key = string.Format("{0}_{1}", skillID, skillLevel);
            int needMagicV = 0;
            int result;
            if (Global._SkillNeedMagicVDict.TryGetValue(key, out needMagicV))
            {
                result = needMagicV;
            }
            else
            {
                SystemXmlItem systemMagic = null;
                if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
                {
                    result = needMagicV;
                }
                else
                {
                    needMagicV = systemMagic.GetIntValue("BaseMagic", -1);
                    result = needMagicV;
                }
            }
            return result;
        }

        
        public static bool LearnSkill(GameClient client, int skillID)
        {
            bool result;
            if (!Global.MU_GetUpSkillLearnCondition(client, skillID, null))
            {
                result = false;
            }
            else
            {
                Global.AddSkillDBCommand(Global._TCPManager.TcpOutPacketPool, client, skillID, 1);
                result = true;
            }
            return result;
        }

        
        public static void AutoLearnSkills(GameClient client)
        {
            if (null == client.ClientData.SkillDataList)
            {
                client.ClientData.SkillDataList = new List<SkillData>();
            }
            Dictionary<int, int> typeIDsDict = new Dictionary<int, int>();
            List<SkillData> skillDataList = client.ClientData.SkillDataList;
            int nOcc = Global.CalcOriginalOccupationID(client);
            foreach (int key in GameManager.SystemMagicsMgr.SystemXmlItemDict.Keys)
            {
                SystemXmlItem systemMagic = GameManager.SystemMagicsMgr.SystemXmlItemDict[key];
                if (systemMagic.GetIntValue("ToOcuupation", -1) == nOcc)
                {
                    int autoStart = systemMagic.GetIntValue("AutoStart", -1);
                    if (1 == autoStart)
                    {
                        string condition = systemMagic.GetStringValue("LearnCondition");
                        if (!string.IsNullOrEmpty(condition))
                        {
                            int skillID = systemMagic.GetIntValue("ID", -1);
                            if (null == Global.GetSkillDataByID(client, skillID))
                            {
                                if (Global.MU_GetUpSkillLearnCondition(client, skillID, systemMagic))
                                {
                                    typeIDsDict[skillID] = 0;
                                }
                            }
                        }
                    }
                }
            }
            foreach (int key in typeIDsDict.Keys)
            {
                Global.LearnSkill(client, key);
            }
        }

        
        public static bool AutoUpLevelSkill(GameClient client, SkillData skillData)
        {
            bool result;
            if (skillData.SkillLevel >= 3)
            {
                result = false;
            }
            else
            {
                int needRoleLevel = 1;
                int needSkilledDegrees = 0;
                Global.GetUpSkillLearnCondition(skillData.SkillID, skillData, out needRoleLevel, out needSkilledDegrees, null);
                int learnLevel = needRoleLevel;
                if (client.ClientData.Level < learnLevel || skillData.UsedNum < needSkilledDegrees)
                {
                    result = false;
                }
                else if (Global.MU_GetUpSkillLearnCondition(client, skillData.SkillID, null))
                {
                    result = false;
                }
                else
                {
                    skillData.UsedNum = 0;
                    skillData.SkillLevel++;
                    GameManager.ClientMgr.UpdateSkillInfo(client, skillData, true);
                    result = true;
                }
            }
            return result;
        }

        
        public static void AutoUpLevelSkills(GameClient client)
        {
            if (null != client.ClientData.SkillDataList)
            {
                lock (client.ClientData.SkillDataList)
                {
                    for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                    {
                        Global.AutoUpLevelSkill(client, client.ClientData.SkillDataList[i]);
                    }
                }
            }
        }

        
        public static string GetSkillNameByID(int skillID)
        {
            SystemXmlItem systemMagic = null;
            string result;
            if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
            {
                result = "";
            }
            else
            {
                result = systemMagic.GetStringValue("Name");
            }
            return result;
        }

        
        public static int GetNextSkillID(int nSkillID)
        {
            SystemXmlItem systemMagic = null;
            int result;
            if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(nSkillID, out systemMagic))
            {
                result = -1;
            }
            else
            {
                result = systemMagic.GetIntValue("NextMagicID", -1);
            }
            return result;
        }

        
        public static int GetPrevSkilID(int nSkillID)
        {
            SystemXmlItem systemMagic = null;
            int result;
            if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(nSkillID, out systemMagic))
            {
                result = -1;
            }
            else
            {
                result = systemMagic.GetIntValue("ParentMagicID", -1);
            }
            return result;
        }

        
        public static string GetSocketRemoteIP(GameClient client, bool bForce = false)
        {
            long canRecordIp = GameManager.systemParamsList.GetParamValueIntByName("RecordIP", 1);
            string result;
            if (0L == canRecordIp && !bForce)
            {
                result = "";
            }
            else
            {
                string ipAndPort = Global.GetSocketRemoteEndPoint(client.ClientSocket, false);
                int idx = ipAndPort.IndexOf(':');
                if (idx > 0)
                {
                    result = ipAndPort.Substring(0, idx);
                }
                else
                {
                    result = ipAndPort;
                }
            }
            return result;
        }

        
        public static void SendGameServerHeart(TCPClient tcpClient)
        {
            if (null != tcpClient)
            {
                string cmd = string.Format("{0}:{1}:{2}", GameManager.ServerLineID, GameManager.ClientMgr.GetClientCount(), Global.SendServerHeartCount);
                Global.SendServerHeartCount++;
                TCPOutPacket tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(TCPOutPacketPool.getInstance(), cmd, 11001);
                if (null != tcpOutPacket)
                {
                    byte[] bytesData = Global.SendAndRecvData(tcpClient, tcpOutPacket);
                }
            }
        }

        
        public static string GetSocketRemoteEndPoint(TMSKSocket s, bool bForce = false)
        {
            try
            {
                long canRecordIp = GameManager.systemParamsList.GetParamValueIntByName("RecordIP", 1);
                if (0L == canRecordIp && !bForce)
                {
                    return "";
                }
                if (null == s)
                {
                    return "";
                }
                return string.Format("{0} ", s.RemoteEndPoint);
            }
            catch (Exception)
            {
            }
            return "";
        }

        
        public static string GetIPAddress(TMSKSocket s)
        {
            try
            {
                if (null == s)
                {
                    return "";
                }
                return ((IPEndPoint)s.RemoteEndPoint).Address.ToString();
            }
            catch (Exception)
            {
            }
            return "";
        }

        
        public static long GetIpAsIntSafe(TMSKSocket s)
        {
            return s.AcceptIpAsInt;
        }

        
        public static string GetDebugHelperInfo(TMSKSocket socket)
        {
            string result;
            if (null == socket)
            {
                result = "socket为null, 无法打印错误信息";
            }
            else
            {
                string ret = "";
                try
                {
                    ret += string.Format("IP={0} ", Global.GetSocketRemoteEndPoint(socket, false));
                }
                catch (Exception)
                {
                }
                try
                {
                    GameClient client = GameManager.ClientMgr.FindClient(socket);
                    if (null != client)
                    {
                        ret += string.Format("RoleID={0}({1})", client.ClientData.RoleID, client.ClientData.RoleName);
                    }
                }
                catch (Exception)
                {
                }
                result = ret;
            }
            return result;
        }

        
        public static int GetChuanChenNeedYinLiang(GoodsData leftGoods)
        {
            int result;
            if (leftGoods.Forge_level <= 0)
            {
                result = 0;
            }
            else
            {
                int[] chuanChengYinLiangArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ChuanchengXiaohaoMoney", ',');
                if (chuanChengYinLiangArr == null || leftGoods.Forge_level > chuanChengYinLiangArr.Length)
                {
                    result = 0;
                }
                else
                {
                    result = chuanChengYinLiangArr[leftGoods.Forge_level - 1];
                }
            }
            return result;
        }

        
        public static bool IsChuanChenSuccess(GoodsData leftGoods)
        {
            bool result;
            if (leftGoods.Forge_level <= 0)
            {
                result = false;
            }
            else
            {
                int[] chuanChengDiaoJiArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ChuanChengGoodsRate", ',');
                if (chuanChengDiaoJiArr == null || leftGoods.Forge_level > chuanChengDiaoJiArr.Length)
                {
                    result = false;
                }
                else
                {
                    int rate = chuanChengDiaoJiArr[leftGoods.Forge_level];
                    result = (Global.GetRandomNumber(0, 101) <= rate);
                }
            }
            return result;
        }

        
        public static bool IsAppendPropChuanChenSuccess(GoodsData leftGoods)
        {
            bool result;
            if (leftGoods.AppendPropLev <= 0)
            {
                result = false;
            }
            else
            {
                int[] chuanChengDiaoJiArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaGoodsRate", ',');
                if (chuanChengDiaoJiArr == null || leftGoods.AppendPropLev > chuanChengDiaoJiArr.Length)
                {
                    result = false;
                }
                else
                {
                    int rate = chuanChengDiaoJiArr[leftGoods.AppendPropLev];
                    result = (Global.GetRandomNumber(0, 101) <= rate);
                }
            }
            return result;
        }

        
        public static bool IsShengYouFuCanBeenUsedForChuanCheng(int shenYouGoodsID, GoodsData leftGoods)
        {
            bool result;
            if (leftGoods.Forge_level <= 0)
            {
                result = false;
            }
            else
            {
                int[] chuanChengForgeLevelArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ShengyoufuQianghuaDengji", ',');
                int[] chuanChengShenYouGoodsArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ShenyoufuGoodsIDs", ',');
                if (chuanChengForgeLevelArr == null || chuanChengShenYouGoodsArr == null || chuanChengShenYouGoodsArr.Length != chuanChengForgeLevelArr.Length)
                {
                    result = false;
                }
                else
                {
                    int goodsIndex = -1;
                    for (int i = 0; i < chuanChengShenYouGoodsArr.Length; i++)
                    {
                        if (shenYouGoodsID == chuanChengShenYouGoodsArr[i])
                        {
                            goodsIndex = i;
                            break;
                        }
                    }
                    if (goodsIndex < 0)
                    {
                        result = false;
                    }
                    else
                    {
                        int forgeLevelIndex = -1;
                        for (int i = 0; i < chuanChengForgeLevelArr.Length; i++)
                        {
                            if (leftGoods.Forge_level <= chuanChengForgeLevelArr[i])
                            {
                                forgeLevelIndex = i;
                                break;
                            }
                        }
                        result = (forgeLevelIndex >= 0 && goodsIndex >= forgeLevelIndex);
                    }
                }
            }
            return result;
        }

        
        public static bool GetEquipInheritParams(out int equipInheritNeedGoodsID, out int needNum, out int needYL)
        {
            equipInheritNeedGoodsID = 0;
            needNum = 0;
            needYL = 0;
            string theParams = GameManager.systemParamsList.GetParamValueByName("EquipInherit");
            string[] arr = theParams.Split(new char[]
            {
                '|'
            });
            bool result;
            if (3 != arr.Length)
            {
                result = false;
            }
            else
            {
                equipInheritNeedGoodsID = Global.SafeConvertToInt32(arr[0]);
                if (equipInheritNeedGoodsID < 0)
                {
                    result = false;
                }
                else
                {
                    needNum = Global.SafeConvertToInt32(arr[1]);
                    if (needNum <= 0)
                    {
                        result = false;
                    }
                    else
                    {
                        needYL = Global.SafeConvertToInt32(arr[2]);
                        result = (needYL >= 0);
                    }
                }
            }
            return result;
        }

        
        public static bool GetEquipBornUpdateParams(int oldBornValue, out int bornUpdateNeedGoodsID, out int needNum, out int needYL, out SystemXmlItem destXmlItem)
        {
            bornUpdateNeedGoodsID = 0;
            needNum = 0;
            needYL = 0;
            destXmlItem = null;
            foreach (SystemXmlItem item in GameManager.systemEquipBornMgr.SystemXmlItemDict.Values)
            {
                if (oldBornValue >= (int)(100.0 * item.GetDoubleValue("MinBorn")) && oldBornValue <= (int)(100.0 * item.GetDoubleValue("MaxBorn")))
                {
                    destXmlItem = item;
                    break;
                }
            }
            bool result;
            if (null == destXmlItem)
            {
                result = false;
            }
            else
            {
                string goodsStr = destXmlItem.GetStringValue("Goods");
                string[] arr = goodsStr.Split(new char[]
                {
                    ','
                });
                if (2 != arr.Length)
                {
                    result = false;
                }
                else
                {
                    bornUpdateNeedGoodsID = Global.SafeConvertToInt32(arr[0]);
                    needNum = Global.SafeConvertToInt32(arr[1]);
                    if (needNum <= 0)
                    {
                        result = false;
                    }
                    else
                    {
                        needYL = destXmlItem.GetIntValue("YinLiang", -1);
                        result = (needYL >= 0);
                    }
                }
            }
            return result;
        }

        
        public static string GetBornIndexName(int bornIndex)
        {
            string sName = "";
            foreach (SystemXmlItem item in GameManager.systemBornNameMgr.SystemXmlItemDict.Values)
            {
                int minProportion = (int)(100.0 * item.GetDoubleValue("MinProportion"));
                int maxProportion = (int)(100.0 * item.GetDoubleValue("MaxProportion"));
                if (bornIndex >= minProportion && bornIndex <= maxProportion)
                {
                    sName = item.GetStringValue("Name");
                    break;
                }
            }
            return sName;
        }

        
        public static bool GenerateNewEquipBornValue(int oldBornValue, SystemXmlItem destXmlItem, out int newBornValue)
        {
            newBornValue = oldBornValue;
            int randomSeed = 10000;
            int minBorn = (int)(100.0 * destXmlItem.GetDoubleValue("MinBorn"));
            int maxBorn = (int)(100.0 * destXmlItem.GetDoubleValue("MaxBorn"));
            int maxLowerProportion = (int)(100.0 * destXmlItem.GetDoubleValue("MaxLowerProportion"));
            double lowerProbability = destXmlItem.GetDoubleValue("LowerProbability");
            int maxImproveProportion = (int)(100.0 * destXmlItem.GetDoubleValue("MaxImproveProportion"));
            double improveProbability = destXmlItem.GetDoubleValue("ImproveProbability");
            int maxRange = (int)((lowerProbability + improveProbability) * (double)randomSeed) + 1;
            int random = Global.GlobalRand.Next(1, maxRange);
            if (random <= (int)(lowerProbability * (double)randomSeed))
            {
                int minusValue = Global.GlobalRand.Next(1, maxLowerProportion + 1);
                newBornValue = oldBornValue - minusValue;
            }
            else
            {
                int addValue = Global.GlobalRand.Next(1, maxImproveProportion + 1);
                newBornValue = oldBornValue + addValue;
            }
            if (newBornValue < 0)
            {
                newBornValue = 0;
            }
            if (newBornValue > 100)
            {
                newBornValue = 100;
            }
            return true;
        }

        
        public static int UpdateNewEquipBornValueByGoodsID(int goodsID, int minBornValue, int maxBornValue, out int newBornIndex)
        {
            newBornIndex = 0;
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods) || null == systemGoods)
            {
                LogManager.WriteLog(LogTypes.Warning, string.Format("洗炼物品时，获取物品xml信息失败: GoodsID={0}", goodsID), null, true);
                result = -1900;
            }
            else
            {
                int[] equipProps = systemGoods.GetIntArrayValue("EquipProps", ',');
                if (equipProps.Length < 177)
                {
                    result = -1901;
                }
                else
                {
                    int bornType = 0;
                    int bornValue = 0;
                    if (equipProps[8] > 0)
                    {
                        int randAttack = Global.GetRandomNumber(minBornValue, maxBornValue + 1);
                        bornValue = Global.SetBornAttackValue(bornValue, randAttack, 0);
                        bornType = 0;
                    }
                    if (equipProps[10] > 0)
                    {
                        int randAttack = Global.GetRandomNumber(minBornValue, maxBornValue + 1);
                        bornValue = Global.SetBornAttackValue(bornValue, randAttack, 1);
                        bornType = 1;
                    }
                    newBornIndex = bornValue;
                    result = bornType;
                }
            }
            return result;
        }

        
        public static int UpdateNewEquipBornValue(GoodsData goodsData, int minBornValue, int maxBornValue)
        {
            int newBornIndex = 0;
            int bornType = Global.UpdateNewEquipBornValueByGoodsID(goodsData.GoodsID, minBornValue, maxBornValue, out newBornIndex);
            int result;
            if (bornType < 0)
            {
                result = bornType;
            }
            else
            {
                goodsData.BornIndex = newBornIndex;
                result = bornType;
            }
            return result;
        }

        
        public static int GetTianShengParamsIndex(int goodsID)
        {
            SystemXmlItem xmlItem = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out xmlItem))
            {
                result = -1;
            }
            else
            {
                string addYinYongString = xmlItem.GetStringValue("ExecMagic");
                if (addYinYongString.ToUpper().IndexOf("DB_ADD_YINYONG(") < 0)
                {
                    result = -1;
                }
                else
                {
                    int index = addYinYongString.IndexOf(",");
                    int index2 = addYinYongString.IndexOf(")");
                    if (index2 <= index + 1)
                    {
                        result = -1;
                    }
                    else
                    {
                        int bornIndexValue = Global.SafeConvertToInt32(addYinYongString.Substring(index + 1, index2 - index - 1));
                        result = bornIndexValue;
                    }
                }
            }
            return result;
        }

        
        public static int GetBornIndexOnFallGoods(int goodsID)
        {
            SystemXmlItem destXmlItem = null;
            int result;
            if (!GameManager.systemEquipBornMgr.SystemXmlItemDict.TryGetValue(Global.GetTianShengParamsIndex(goodsID), out destXmlItem))
            {
                result = 0;
            }
            else
            {
                int minBornValue = destXmlItem.GetIntValue("MinBorn", -1);
                int maxBornValue = destXmlItem.GetIntValue("MaxBorn", -1);
                int goodsThisTimeUpdateBornIndex = 0;
                if (Global.UpdateNewEquipBornValueByGoodsID(goodsID, minBornValue, maxBornValue, out goodsThisTimeUpdateBornIndex) < 0)
                {
                    result = 0;
                }
                else
                {
                    result = goodsThisTimeUpdateBornIndex;
                }
            }
            return result;
        }

        
        public static int GetBornAttackValue(int bornIndex, int attackType)
        {
            bornIndex >>= attackType * 8;
            return bornIndex & 255;
        }

        
        public static int SetBornAttackValue(int bornIndex, int attackValue, int attackType)
        {
            attackType = attackValue << attackType * 8;
            bornIndex |= attackType;
            return bornIndex;
        }

        
        public static void LoadForgeSystemParams()
        {
            bool error = false;
            Global.ForgeProtectOpen = (int)GameManager.systemParamsList.GetParamValueIntByName("ForgeProtectOpen", -1);
            string forgeMaxOpenStr = GameManager.systemParamsList.GetParamValueByName("ForgeMaxOpen");
            if (string.IsNullOrEmpty(forgeMaxOpenStr))
            {
                error = true;
            }
            else
            {
                string[] forgeMaxOpenParams = forgeMaxOpenStr.Split(new char[]
                {
                    ','
                });
                Global.ForgeMaxOpen = Global.SafeConvertToInt32(forgeMaxOpenParams[0]);
                if (Global.ForgeMaxOpen == 2)
                {
                    DateTime startTime;
                    DateTime endTime;
                    if (forgeMaxOpenParams.Length == 3 && DateTime.TryParse(forgeMaxOpenParams[1], out startTime) && DateTime.TryParse(forgeMaxOpenParams[2], out endTime) && endTime > startTime)
                    {
                        Global.ForgeMaxOpenStartTime = startTime;
                        Global.ForgeMaxOpenEndTime = endTime;
                    }
                    else
                    {
                        error = true;
                    }
                }
            }
            if (error)
            {
                Global.ForgeMaxOpen = 0;
            }
        }

        
        public static int GetForgePercent(GameClient client, GoodsData goodsData, int luckyValue)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                result = 0;
            }
            else if (null == systemGoods)
            {
                result = 0;
            }
            else if (goodsData.Forge_level >= 20)
            {
                result = 0;
            }
            else
            {
                if (null == Global.ForgeLevelRocksPercent)
                {
                    Global.ForgeLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeGoodsRate", ',');
                }
                int percent = Math.Abs(Global.ForgeLevelRocksPercent[goodsData.Forge_level + 1]);
                int nVipLev = client.ClientData.VipLevel;
                int[] nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPQiangHuaAdd", ',');
                if (nVipLev > 0 && nArry != null && nArry[nVipLev] > 0)
                {
                    percent += nArry[nVipLev];
                }
                percent += luckyValue;
                result = Global.GMin(100, percent);
            }
            return result;
        }

        
        public static int GetForgeFailedPercent(GoodsData goodsData)
        {
            if (null == Global.ForgeLevelFailedPercent)
            {
                Global.ForgeLevelFailedPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeLevelFailedPercent", ',');
            }
            return Math.Abs(Global.ForgeLevelFailedPercent[goodsData.Forge_level + 1]);
        }

        
        public static bool IsForgeFailed(GoodsData goodsData)
        {
            int percent = Global.GetForgeFailedPercent(goodsData);
            int rndNum = Global.GetRandomNumber(0, 101);
            return rndNum <= percent;
        }

        
        public static bool StartForge(GameClient client, GoodsData goodsData, int luckyValue)
        {
            int percent = Global.GetForgePercent(client, goodsData, luckyValue) * 100;
            int rndNum = Global.GetRandomNumber(0, 10001);
            return rndNum <= percent;
        }

        
        public static int GetForgeNextLevelYinLiang(GoodsData goodsData)
        {
            if (null == Global.ForgeLevelNeedYinLiang)
            {
                Global.ForgeLevelNeedYinLiang = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeLevelNeedYinLiang", ',');
            }
            return Math.Abs(Global.ForgeLevelNeedYinLiang[goodsData.Forge_level + 1]);
        }

        
        public static int GetForgeNextLevelRock(GoodsData goodsData)
        {
            return 1;
        }

        
        public static int GetShenYouGoodsID()
        {
            return (int)GameManager.systemParamsList.GetParamValueIntByName("ShenyouGoodsID", -1);
        }

        
        public static int GetForgeRockGoodsID(GoodsData goodsData)
        {
            if (null == Global.ForgeGoodsIDs)
            {
                Global.ForgeGoodsIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeGoodsIDs", ',');
            }
            return Math.Abs(Global.ForgeGoodsIDs[goodsData.Forge_level + 1]);
        }

        
        public static int GetForgeNextLevelShenYou(GoodsData goodsData)
        {
            return 1;
        }

        
        public static bool GetSubForgeNextLevelParams(GoodsData goodsData, out int subForgeGoodsID, out int needNum, out int needYL)
        {
            subForgeGoodsID = 0;
            needNum = 0;
            needYL = 0;
            string subForgeGoodsIDs = GameManager.systemParamsList.GetParamValueByName("SubForgeGoodsIDs");
            int needIndex = goodsData.AddPropIndex + 1;
            string[] arr = subForgeGoodsIDs.Split(new char[]
            {
                ','
            });
            bool result;
            if (needIndex >= arr.Length)
            {
                result = false;
            }
            else
            {
                string[] destItem = arr[needIndex].Split(new char[]
                {
                    '|'
                });
                if (3 != destItem.Length)
                {
                    result = false;
                }
                else
                {
                    int value = 0;
                    if (!int.TryParse(destItem[0], out value))
                    {
                        result = false;
                    }
                    else
                    {
                        subForgeGoodsID = value;
                        if (!int.TryParse(destItem[1], out value))
                        {
                            result = false;
                        }
                        else
                        {
                            needNum = value;
                            if (!int.TryParse(destItem[2], out value))
                            {
                                result = false;
                            }
                            else
                            {
                                needYL = value;
                                result = true;
                            }
                        }
                    }
                }
            }
            return result;
        }

        
        public static int GetEnchanceGoodsID(int quality)
        {
            if (Global.EnchanceGoodsIDList == null)
            {
                string EnchanceGoodsIDs = GameManager.systemParamsList.GetParamValueByName("EnchanceGoodsIDs");
                Global.EnchanceGoodsIDList = EnchanceGoodsIDs.Split(new char[]
                {
                    ','
                });
            }
            return Convert.ToInt32(Global.EnchanceGoodsIDList[quality]);
        }

        
        public static string GetEnchanceText(GoodsQuality gq)
        {
            string text = "";
            if (gq == GoodsQuality.White)
            {
                text = GLang.GetLang(149, new object[0]);
            }
            else if (gq == GoodsQuality.Green)
            {
                text = GLang.GetLang(150, new object[0]);
            }
            else if (gq == GoodsQuality.Blue)
            {
                text = GLang.GetLang(151, new object[0]);
            }
            else if (gq == GoodsQuality.Purple)
            {
                text = GLang.GetLang(152, new object[0]);
            }
            else if (gq == GoodsQuality.Gold)
            {
                text = GLang.GetLang(153, new object[0]);
            }
            return text;
        }

        
        public static GoodsQuality GetEnchanceQualityByColorName(string colorName)
        {
            GoodsQuality result;
            if (colorName == GLang.GetLang(149, new object[0]))
            {
                result = GoodsQuality.White;
            }
            else if (colorName == GLang.GetLang(150, new object[0]))
            {
                result = GoodsQuality.Green;
            }
            else if (colorName == GLang.GetLang(151, new object[0]))
            {
                result = GoodsQuality.Blue;
            }
            else if (colorName == GLang.GetLang(152, new object[0]))
            {
                result = GoodsQuality.Purple;
            }
            else if (colorName == GLang.GetLang(153, new object[0]))
            {
                result = GoodsQuality.Gold;
            }
            else
            {
                result = GoodsQuality.White;
            }
            return result;
        }

        
        public static int GetAllowEnchanceLuckyNum(GameClient client, GoodsData goodsData, int luckyNum)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                result = luckyNum;
            }
            else if (null == systemGoods)
            {
                result = luckyNum;
            }
            else if (goodsData.Quality >= 4)
            {
                result = luckyNum;
            }
            else
            {
                if (null == Global.EnchanceLevelRocksPercent)
                {
                    Global.EnchanceLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("EnchanceLevelRocksPercent", ',');
                }
                int percent = Math.Abs(Global.EnchanceLevelRocksPercent[goodsData.Quality + 1]);
                if (percent >= 100)
                {
                    result = 0;
                }
                else
                {
                    int singleLuckyGoodsRate = (int)GameManager.systemParamsList.GetParamValueIntByName("EnchanceLuckyGoodsRate", -1);
                    singleLuckyGoodsRate = Global.GMax(singleLuckyGoodsRate, 1);
                    int allowLuckyNum = (100 - percent - 1) / singleLuckyGoodsRate + 1;
                    result = Global.GMin(luckyNum, allowLuckyNum);
                }
            }
            return result;
        }

        
        private static int GetEnchanceLuckyPercent(GameClient client, int luckyNum)
        {
            int enchanceLuckyGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("EnchanceLuckyGoodsID", -1);
            int result;
            if (enchanceLuckyGoodsID < 0)
            {
                result = 0;
            }
            else if (luckyNum <= 0)
            {
                result = 0;
            }
            else
            {
                int singleLuckyGoodsRate = (int)GameManager.systemParamsList.GetParamValueIntByName("EnchanceLuckyGoodsRate", -1);
                result = luckyNum * singleLuckyGoodsRate;
            }
            return result;
        }

        
        public static int GetEnchancePercent(GameClient client, GoodsData goodsData, int luckyNum)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                result = 0;
            }
            else if (null == systemGoods)
            {
                result = 0;
            }
            else if (goodsData.Quality >= 4)
            {
                result = 0;
            }
            else
            {
                int luckyPercent = Global.GetEnchanceLuckyPercent(client, luckyNum);
                if (null == Global.EnchanceLevelRocksPercent)
                {
                    Global.EnchanceLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("EnchanceLevelRocksPercent", ',');
                }
                int percent = Math.Abs(Global.EnchanceLevelRocksPercent[goodsData.Quality + 1]);
                percent += luckyPercent;
                result = Global.GMin(100, percent);
            }
            return result;
        }

        
        public static bool StartEnchance(GameClient client, GoodsData goodsData, int luckyNum)
        {
            int percent = Global.GetEnchancePercent(client, goodsData, luckyNum);
            int rndNum = Global.GetRandomNumber(0, 101);
            return rndNum <= percent;
        }

        
        public static int GetEnchanceNextLevelYinLiang(GoodsData goodsData)
        {
            if (null == Global.EnchanceLevelNeedYinLiang)
            {
                Global.EnchanceLevelNeedYinLiang = GameManager.systemParamsList.GetParamValueIntArrayByName("EnchanceLevelNeedYinLiang", ',');
            }
            int index = goodsData.Quality + 1;
            return Global.EnchanceLevelNeedYinLiang[index];
        }

        
        public static int GetEnchanceNextLevelRock(GoodsData goodsData)
        {
            return 1;
        }

        
        private static int GetJinjieLuckyPercent(GameClient client, int luckyNum)
        {
            int jinjieLuckyGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("JinjieLuckyGoodsID", -1);
            int result;
            if (jinjieLuckyGoodsID < 0)
            {
                result = 0;
            }
            else
            {
                luckyNum = Global.GMin(Global.GetTotalGoodsCountByID(client, jinjieLuckyGoodsID), luckyNum);
                if (luckyNum <= 0)
                {
                    result = 0;
                }
                else
                {
                    int singleLuckyGoodsRate = (int)GameManager.systemParamsList.GetParamValueIntByName("JinjieLuckyGoodsRate", -1);
                    result = luckyNum * singleLuckyGoodsRate;
                }
            }
            return result;
        }

        
        public static int GetEquipGoodsSuitID(int goodsID)
        {
            int suit = 0;
            lock (Global.EquipGoodsSuitCacheDict)
            {
                if (!Global.EquipGoodsSuitCacheDict.TryGetValue(goodsID, out suit))
                {
                    SystemXmlItem systemGoods = null;
                    if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
                    {
                        suit = systemGoods.GetIntValue("SuitID", -1);
                    }
                    else
                    {
                        suit = -1;
                    }
                    Global.EquipGoodsSuitCacheDict.Add(goodsID, suit);
                }
            }
            int result;
            if (suit < 0)
            {
                result = 0;
            }
            else
            {
                result = suit;
            }
            return result;
        }

        
        public static int GetJinjieNextPercent(GameClient client, int goodsID, int luckyNum)
        {
            int percent = 0;
            SystemXmlItem systemEquipUpgradeItem = EquipUpgradeCacheMgr.GetEquipUpgradeItemByGoodsID(goodsID, Global.MaxSuitID);
            int result;
            if (null == systemEquipUpgradeItem)
            {
                result = percent;
            }
            else
            {
                percent = systemEquipUpgradeItem.GetIntValue("Succeed", -1);
                percent += Global.GetJinjieLuckyPercent(client, luckyNum);
                result = Global.GMin(percent, 100);
            }
            return result;
        }

        
        public static int GetJinjieNextLevelYinLiang(int goodsID)
        {
            int yinLiang = 100000000;
            SystemXmlItem systemEquipUpgradeItem = EquipUpgradeCacheMgr.GetEquipUpgradeItemByGoodsID(goodsID, Global.MaxSuitID);
            int result;
            if (null == systemEquipUpgradeItem)
            {
                result = yinLiang;
            }
            else
            {
                yinLiang = systemEquipUpgradeItem.GetIntValue("YinLiang", -1);
                result = Global.GMax(yinLiang, 0);
            }
            return result;
        }

        
        public static int GetJinjieNextRocks(int goodsID)
        {
            int needGoodsNum = 100000000;
            SystemXmlItem systemEquipUpgradeItem = EquipUpgradeCacheMgr.GetEquipUpgradeItemByGoodsID(goodsID, Global.MaxSuitID);
            int result;
            if (null == systemEquipUpgradeItem)
            {
                result = needGoodsNum;
            }
            else
            {
                needGoodsNum = systemEquipUpgradeItem.GetIntValue("GoodsNum", -1);
                result = Global.GMax(needGoodsNum, 0);
            }
            return result;
        }

        
        public static int GetJinjieNextRocksGoodsID(int goodsID)
        {
            int needGoodsID = 0;
            SystemXmlItem systemEquipUpgradeItem = EquipUpgradeCacheMgr.GetEquipUpgradeItemByGoodsID(goodsID, Global.MaxSuitID);
            int result;
            if (null == systemEquipUpgradeItem)
            {
                result = needGoodsID;
            }
            else
            {
                needGoodsID = systemEquipUpgradeItem.GetIntValue("NeedGoodsID", -1);
                result = Global.GMax(needGoodsID, 0);
            }
            return result;
        }

        
        public static int GetJewelLevel(int jewelGoodsID)
        {
            return jewelGoodsID % 1000;
        }

        
        public static bool CanEnchaseJewel(int jewelGoodsID)
        {
            int xiangqianRockStartID = (int)GameManager.systemParamsList.GetParamValueIntByName("XiangqianRockStartID", -1);
            int xiangqianRockEndID = (int)GameManager.systemParamsList.GetParamValueIntByName("XiangqianRockEndID", -1);
            return jewelGoodsID >= xiangqianRockStartID && jewelGoodsID <= xiangqianRockEndID;
        }

        
        public static bool CanAddJewelIntoEquip(int equipGoodsID, int jewelGoodsID)
        {
            SystemXmlItem systemGoods = null;
            bool result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(equipGoodsID, out systemGoods))
            {
                result = false;
            }
            else
            {
                int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                int jewelCategoriy = jewelGoodsID / 1000 % 100;
                result = false;
            }
            return result;
        }

        
        public static void ClearEquipGoodsMaxStrongDict()
        {
            lock (Global.EquipGoodsMaxStrongDict)
            {
                Global.EquipGoodsMaxStrongDict.Clear();
            }
        }

        
        public static int GetEquipGoodsMaxStrong(int goodsID)
        {
            int maxStrong = 0;
            lock (Global.EquipGoodsMaxStrongDict)
            {
                if (Global.EquipGoodsMaxStrongDict.TryGetValue(goodsID, out maxStrong))
                {
                    return maxStrong;
                }
            }
            EquipPropItem item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsID);
            if (null == item)
            {
                maxStrong = 0;
            }
            else
            {
                maxStrong = (int)item.ExtProps[0];
            }
            lock (Global.EquipGoodsMaxStrongDict)
            {
                Global.EquipGoodsMaxStrongDict[goodsID] = maxStrong;
            }
            return maxStrong;
        }

        
        public static void RestoreExchangeData(GameClient client, ExchangeData ed)
        {
            lock (ed)
            {
                List<GoodsData> goodsDataList = null;
                if (ed.GoodsDict.TryGetValue(client.ClientData.RoleID, out goodsDataList))
                {
                    for (int i = 0; i < goodsDataList.Count; i++)
                    {
                        if (!RebornEquip.IsRebornType(goodsDataList[i].GoodsID))
                        {
                            Global.AddGoodsData(client, goodsDataList[i]);
                        }
                        else
                        {
                            RebornEquip.AddGoodsData(client, goodsDataList[i]);
                        }
                        GameManager.ClientMgr.NotifyMoveGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, goodsDataList[i], 1);
                    }
                    ed.GoodsDict.Remove(client.ClientData.RoleID);
                }
            }
        }

        
        public static void LockExchangeData(int roleID, ExchangeData ed, int locked)
        {
            lock (ed)
            {
                ed.LockDict[roleID] = locked;
            }
        }

        
        public static bool IsLockExchangeData(int roleID, ExchangeData ed)
        {
            int locked = 0;
            lock (ed)
            {
                ed.LockDict.TryGetValue(roleID, out locked);
            }
            return locked > 0;
        }

        
        public static bool DoneExchangeData(int roleID, ExchangeData ed)
        {
            bool ret = false;
            lock (ed)
            {
                if (!ed.DoneDict.ContainsKey(roleID))
                {
                    ed.DoneDict[roleID] = 1;
                    ret = true;
                }
            }
            return ret;
        }

        
        public static bool IsDoneExchangeData(int roleID, ExchangeData ed)
        {
            int done = 0;
            lock (ed)
            {
                ed.DoneDict.TryGetValue(roleID, out done);
            }
            return done > 0;
        }

        
        public static bool AddGoodsDataIntoExchangeData(GameClient client, int goodsDbID, ExchangeData ed)
        {
            bool result;
            if (Global.IsLockExchangeData(client.ClientData.RoleID, ed))
            {
                result = true;
            }
            else
            {
                lock (ed)
                {
                    List<GoodsData> goodsDataList = null;
                    if (!ed.GoodsDict.TryGetValue(client.ClientData.RoleID, out goodsDataList))
                    {
                        goodsDataList = new List<GoodsData>();
                        ed.GoodsDict[client.ClientData.RoleID] = goodsDataList;
                    }
                    if (goodsDataList.Count < 12)
                    {
                        bool flag = false;
                        GoodsData gd = Global.GetGoodsByDbID(client, goodsDbID);
                        if (null == gd)
                        {
                            gd = RebornEquip.GetRebornGoodsByDbID(client, goodsDbID);
                            if (null == gd)
                            {
                                return false;
                            }
                            flag = true;
                        }
                        if (gd.Binding > 0)
                        {
                            return false;
                        }
                        if (Global.IsTimeLimitGoods(gd))
                        {
                            return false;
                        }
                        if (gd.Using > 0)
                        {
                            return false;
                        }
                        if (!Global.CanExchangeCategoriy(gd))
                        {
                            return false;
                        }
                        if (!flag)
                        {
                            Global.RemoveGoodsData(client, gd);
                        }
                        else
                        {
                            RebornEquip.RemoveGoodsData(client, gd);
                        }
                        GameManager.ClientMgr.NotifyMoveGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, gd, 0);
                        if (-1 == goodsDataList.IndexOf(gd))
                        {
                            goodsDataList.Add(gd);
                        }
                    }
                }
                result = true;
            }
            return result;
        }

        
        public static bool RemoveGoodsDataFromExchangeData(GameClient client, int goodsDbID, ExchangeData ed)
        {
            bool result;
            if (Global.IsLockExchangeData(client.ClientData.RoleID, ed))
            {
                result = true;
            }
            else
            {
                GoodsData gd = null;
                lock (ed)
                {
                    List<GoodsData> goodsDataList = null;
                    if (ed.GoodsDict.TryGetValue(client.ClientData.RoleID, out goodsDataList))
                    {
                        for (int i = 0; i < goodsDataList.Count; i++)
                        {
                            if (goodsDataList[i].Id == goodsDbID)
                            {
                                gd = goodsDataList[i];
                                goodsDataList.RemoveAt(i);
                                break;
                            }
                        }
                    }
                }
                if (null == gd)
                {
                    result = false;
                }
                else
                {
                    if (gd.Site == 15000)
                    {
                        gd.BagIndex = RebornEquip.GetIdleSlotOfRebornGoods(client);
                        RebornEquip.AddGoodsData(client, gd);
                    }
                    else
                    {
                        gd.BagIndex = Global.GetIdleSlotOfBagGoods(client);
                        Global.AddGoodsData(client, gd);
                    }
                    GameManager.ClientMgr.NotifyMoveGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, gd, 1);
                    result = true;
                }
            }
            return result;
        }

        
        public static bool UpdateExchangeDataMoney(GameClient client, int money, ExchangeData ed)
        {
            bool result;
            if (Global.IsLockExchangeData(client.ClientData.RoleID, ed))
            {
                result = true;
            }
            else
            {
                lock (ed)
                {
                    ed.MoneyDict[client.ClientData.RoleID] = money;
                }
                result = true;
            }
            return result;
        }

        
        public static bool UpdateExchangeDataYuanBao(GameClient client, int yuanBao, ExchangeData ed)
        {
            bool result;
            if (Global.IsLockExchangeData(client.ClientData.RoleID, ed))
            {
                result = true;
            }
            else
            {
                lock (ed)
                {
                    ed.YuanBaoDict[client.ClientData.RoleID] = yuanBao;
                }
                result = true;
            }
            return result;
        }

        
        private static string BuildTradeAnalysisLog(GameClient from, GameClient to, List<GoodsData> outGoods, List<GoodsData> inGoods, int outMoney, int inMoney, int outJinbi, int inJinbi)
        {
            Dictionary<int, int> outDict = new Dictionary<int, int>();
            Dictionary<int, int> inDict = new Dictionary<int, int>();
            int i = 0;
            while (outGoods != null && i < outGoods.Count)
            {
                if (!outDict.ContainsKey(outGoods[i].GoodsID))
                {
                    outDict.Add(outGoods[i].GoodsID, outGoods[i].GCount);
                }
                else
                {
                    Dictionary<int, int> dictionary;
                    int goodsID;
                    (dictionary = outDict)[goodsID = outGoods[i].GoodsID] = dictionary[goodsID] + outGoods[i].GCount;
                }
                i++;
            }
            i = 0;
            while (inGoods != null && i < inGoods.Count)
            {
                if (!inDict.ContainsKey(inGoods[i].GoodsID))
                {
                    inDict.Add(inGoods[i].GoodsID, inGoods[i].GCount);
                }
                else
                {
                    Dictionary<int, int> dictionary;
                    int goodsID;
                    (dictionary = inDict)[goodsID = inGoods[i].GoodsID] = dictionary[goodsID] + inGoods[i].GCount;
                }
                i++;
            }
            if (outJinbi > 0)
            {
                outDict[-100] = outJinbi;
            }
            if (inJinbi > 0)
            {
                inDict[-100] = inJinbi;
            }
            if (outMoney > 0)
            {
                outDict[-101] = outMoney;
            }
            if (inMoney > 0)
            {
                inDict[-101] = inMoney;
            }
            StringBuilder inSb = new StringBuilder();
            StringBuilder outSb = new StringBuilder();
            foreach (KeyValuePair<int, int> kvp in inDict)
            {
                inSb.Append(kvp.Key).Append(':').Append(kvp.Value).Append(',');
            }
            if (inSb.Length > 0)
            {
                inSb.Remove(inSb.Length - 1, 1);
            }
            foreach (KeyValuePair<int, int> kvp in outDict)
            {
                outSb.Append(kvp.Key).Append(':').Append(kvp.Value).Append(',');
            }
            if (outSb.Length > 0)
            {
                outSb.Remove(outSb.Length - 1, 1);
            }
            FriendData fd = Global.FindFriendData(from, to.ClientData.RoleID);
            int isFriend = 0;
            if (fd != null && fd.FriendType == 0)
            {
                isFriend = 100;
            }
            string sip = RobotTaskValidator.getInstance().GetIp(from);
            string tip = RobotTaskValidator.getInstance().GetIp(to);
            return string.Format("server={0} source={1} srcPlayer={2} target={3} dstPlayer={4} in={5} out={6} map={7} sviplevel={8} tviplevel={9} sexp={10} texp={11} friendDegree={12}", new object[]
            {
                GameManager.ServerId,
                from.strUserID,
                from.ClientData.RoleID,
                to.strUserID,
                to.ClientData.RoleID,
                inSb.ToString(),
                outSb.ToString(),
                from.ClientData.MapCode,
                from.ClientData.VipLevel,
                to.ClientData.VipLevel,
                sip,
                tip,
                isFriend
            });
        }

        
        public static void LoadLogTradeGoods()
        {
            lock (Global._LogTradeFreqGoodsMutex)
            {
                Global._LogTradeFreqGoodsArray = GameManager.systemParamsList.GetParamValueIntArrayByName("LogTradeFreqGoods", ',');
            }
        }

        
        public static int GetTradeLevelLimit(GameClient client)
        {
            int unionLevel = 0;
            string configKey = (client.ClientSocket.session.IsGuest == 0) ? "trade_level_limit" : "GuestTradeLevelLimit";
            string[] szLevelLimit = GameManager.PlatConfigMgr.GetGameConfigItemStr(configKey, "0,0").Split(new char[]
            {
                ','
            });
            if (szLevelLimit.Length == 2)
            {
                int minChangeLife = Convert.ToInt32(szLevelLimit[0]);
                int minLevel = Convert.ToInt32(szLevelLimit[1]);
                unionLevel = Global.GetUnionLevel(minChangeLife, minLevel, false);
            }
            return unionLevel;
        }

        
        public static bool TradeLevelLimit(GameClient client)
        {
            return Global.GetUnionLevel(client, false) < Global.GetTradeLevelLimit(client);
        }

        
        public static bool CanTrade(GameClient client)
        {
            DateTime now = TimeUtil.NowDateTime();
            int realMoney = (int)client.ClientData.VipExp;
            int level = Global.GetUnionLevel(client, false);
            TradeLimitConfig config = GameManager.PlatConfigMgr.GetTradeLimitConfig();
            bool result;
            if (null == config)
            {
                result = true;
            }
            else if (config.ZuanShiOpen != 1)
            {
                GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(config.Message));
                result = false;
            }
            else if (now < config.StartTime || now > config.EndTime)
            {
                result = true;
            }
            else if (realMoney >= config.ZuanShiLimit || level >= config.LevelLimit)
            {
                result = true;
            }
            else
            {
                GameManager.ClientMgr.NotifyHintMsg(client, GLang.GetLang(config.Message));
                result = false;
            }
            return result;
        }

        
        public static int CompleteExchangeData(GameClient client, GameClient otherClient, ExchangeData ed)
        {
            int ret = 0;
            bool flag = false;
            try
            {
                Monitor.Enter(ed, ref flag);
                List<GoodsData> goodsDataList = null;
                if (ed.GoodsDict.TryGetValue(client.ClientData.RoleID, out goodsDataList))
                {
                    int BagInt;
                    if (!RebornEquip.MoreIsCanIntoRebornOrBaseBag(otherClient, goodsDataList, out BagInt))
                    {
                        if (BagInt == 1)
                        {
                            return -1;
                        }
                        return -1;
                    }
                }
                List<GoodsData> goodsDataList2 = null;
                if (ed.GoodsDict.TryGetValue(otherClient.ClientData.RoleID, out goodsDataList2))
                {
                    int BagInt;
                    if (!RebornEquip.MoreIsCanIntoRebornOrBaseBag(client, goodsDataList2, out BagInt))
                    {
                        if (BagInt == 1)
                        {
                            return -11;
                        }
                        return -11;
                    }
                }
                int moveMoney = 0;
                if (ed.MoneyDict.TryGetValue(client.ClientData.RoleID, out moveMoney))
                {
                    moveMoney = Global.GMax(moveMoney, 0);
                    if (moveMoney > client.ClientData.YinLiang)
                    {
                        return -2;
                    }
                }
                int moveMoney2 = 0;
                if (ed.MoneyDict.TryGetValue(otherClient.ClientData.RoleID, out moveMoney2))
                {
                    moveMoney2 = Global.GMax(moveMoney2, 0);
                    if (moveMoney2 > otherClient.ClientData.YinLiang)
                    {
                        return -12;
                    }
                }
                int moveYuanBao = 0;
                if (ed.YuanBaoDict.TryGetValue(client.ClientData.RoleID, out moveYuanBao))
                {
                    moveYuanBao = Global.GMax(moveYuanBao, 0);
                    if (moveYuanBao > client.ClientData.UserMoney)
                    {
                        return -3;
                    }
                }
                int moveYuanBao2 = 0;
                if (ed.YuanBaoDict.TryGetValue(otherClient.ClientData.RoleID, out moveYuanBao2))
                {
                    moveYuanBao2 = Global.GMax(moveYuanBao2, 0);
                    if (moveYuanBao2 > otherClient.ClientData.UserMoney)
                    {
                        return -13;
                    }
                }
                bool bMeetLevelCond = true;
                try
                {
                    if (moveYuanBao > 0 && !Global.CanTrade(client))
                    {
                        bMeetLevelCond = false;
                    }
                    if (moveYuanBao2 > 0 && !Global.CanTrade(otherClient))
                    {
                        bMeetLevelCond = false;
                    }
                    if (Global.TradeLevelLimit(client) || Global.TradeLevelLimit(otherClient))
                    {
                        bMeetLevelCond = false;
                    }
                }
                catch
                {
                }
                try
                {
                    string analysisLog = Global.BuildTradeAnalysisLog(client, otherClient, goodsDataList, goodsDataList2, moveYuanBao, moveYuanBao2, moveMoney, moveMoney2);
                    if (bMeetLevelCond)
                    {
                        analysisLog = "trade " + analysisLog;
                    }
                    else
                    {
                        analysisLog = "tradelevellimit " + analysisLog;
                    }
                    LogManager.WriteLog(LogTypes.Analysis, analysisLog, null, true);
                }
                catch
                {
                }
                if (!bMeetLevelCond)
                {
                    return -14;
                }
                GameManager.logDBCmdMgr.AddMessageLog(-1, "交易日志", "面对面交易", client.ClientData.RoleName, otherClient.ClientData.RoleName, "交易", client.ClientData.RoleID, client.ClientData.ZoneID, client.strUserID, otherClient.ClientData.RoleID, GameManager.ServerId, "");
                int i = 0;
                while (goodsDataList != null && i < goodsDataList.Count)
                {
                    string result = "成功";
                    if (!GameManager.ClientMgr.MoveGoodsDataToOtherRole(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, goodsDataList[i], client, otherClient, true))
                    {
                        GameManager.SystemServerEvents.AddEvent(string.Format("转移物品时失败, 个人交易, FromRole={0}({1}), ToRole={2}({3}), GoodsDbID={4}, GoodsID={5}, GoodsNum={6}", new object[]
                        {
                            client.ClientData.RoleID,
                            client.ClientData.RoleName,
                            otherClient.ClientData.RoleID,
                            otherClient.ClientData.RoleName,
                            goodsDataList[i].Id,
                            goodsDataList[i].GoodsID,
                            goodsDataList[i].GCount
                        }), EventLevels.Important);
                        result = "失败";
                    }
                    Global.AddRoleExchangeEvent1(client, goodsDataList[i].GoodsID, -goodsDataList[i].GCount, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName, result);
                    Global.AddRoleExchangeEvent1(otherClient, goodsDataList[i].GoodsID, goodsDataList[i].GCount, client.ClientData.RoleID, client.ClientData.RoleName, result);
                    i++;
                }
                ed.GoodsDict.Remove(client.ClientData.RoleID);
                i = 0;
                while (goodsDataList2 != null && i < goodsDataList2.Count)
                {
                    string result = "成功";
                    if (!GameManager.ClientMgr.MoveGoodsDataToOtherRole(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, goodsDataList2[i], otherClient, client, true))
                    {
                        GameManager.SystemServerEvents.AddEvent(string.Format("转移物品时失败, 个人交易, FromRole={0}({1}), ToRole={2}({3}), GoodsDbID={4}, GoodsID={5}, GoodsNum={6}", new object[]
                        {
                            otherClient.ClientData.RoleID,
                            otherClient.ClientData.RoleName,
                            client.ClientData.RoleID,
                            client.ClientData.RoleName,
                            goodsDataList2[i].Id,
                            goodsDataList2[i].GoodsID,
                            goodsDataList2[i].GCount
                        }), EventLevels.Important);
                        result = "失败";
                    }
                    Global.AddRoleExchangeEvent1(otherClient, goodsDataList2[i].GoodsID, -goodsDataList2[i].GCount, client.ClientData.RoleID, client.ClientData.RoleName, result);
                    Global.AddRoleExchangeEvent1(client, goodsDataList2[i].GoodsID, goodsDataList2[i].GCount, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName, result);
                    i++;
                }
                ed.GoodsDict.Remove(otherClient.ClientData.RoleID);
                if (moveMoney > 0)
                {
                    if (GameManager.ClientMgr.SubUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, moveMoney, "交易扣除一", false))
                    {
                        GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, otherClient, moveMoney, "交易扣除一", false);
                        Global.AddRoleExchangeEvent2(client, -moveMoney, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName);
                        Global.AddRoleExchangeEvent2(otherClient, moveMoney, client.ClientData.RoleID, client.ClientData.RoleName);
                        ed.MoneyDict.Remove(client.ClientData.RoleID);
                    }
                }
                if (moveMoney2 > 0)
                {
                    if (GameManager.ClientMgr.SubUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, otherClient, moveMoney2, "交易扣除二", false))
                    {
                        GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, moveMoney2, "交易扣除二", false);
                        Global.AddRoleExchangeEvent2(otherClient, -moveMoney2, client.ClientData.RoleID, client.ClientData.RoleName);
                        Global.AddRoleExchangeEvent2(client, moveMoney2, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName);
                        ed.MoneyDict.Remove(otherClient.ClientData.RoleID);
                    }
                }
                if (moveYuanBao > 0)
                {
                    if (GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, moveYuanBao, "交易扣除一", false, true, false, DaiBiSySType.None))
                    {
                        GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, otherClient, moveYuanBao, "交易添加一", ActivityTypes.None, "");
                        Global.AddRoleExchangeEvent3(client, -moveYuanBao, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName);
                        Global.AddRoleExchangeEvent3(otherClient, moveYuanBao, client.ClientData.RoleID, client.ClientData.RoleName);
                        ed.YuanBaoDict.Remove(client.ClientData.RoleID);
                        int tradelog_num_minamount = GameManager.GameConfigMgr.GetGameConfigItemInt("tradelog_num_minamount", 5000);
                        if (moveYuanBao >= tradelog_num_minamount)
                        {
                            GameManager.logDBCmdMgr.AddTradeNumberInfo(1, moveYuanBao, otherClient.ClientData.RoleID, client.ClientData.RoleID, client.ServerId);
                        }
                    }
                }
                if (moveYuanBao2 > 0)
                {
                    if (GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, otherClient, moveYuanBao2, "交易扣除二", false, true, false, DaiBiSySType.None))
                    {
                        GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, moveYuanBao2, "交易添加二", ActivityTypes.None, "");
                        Global.AddRoleExchangeEvent3(otherClient, -moveYuanBao2, client.ClientData.RoleID, client.ClientData.RoleName);
                        Global.AddRoleExchangeEvent3(client, moveYuanBao2, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName);
                        ed.YuanBaoDict.Remove(otherClient.ClientData.RoleID);
                        int tradelog_num_minamount = GameManager.GameConfigMgr.GetGameConfigItemInt("tradelog_num_minamount", 5000);
                        if (moveYuanBao2 >= 5000)
                        {
                            GameManager.logDBCmdMgr.AddTradeNumberInfo(1, moveYuanBao2, client.ClientData.RoleID, otherClient.ClientData.RoleID, client.ServerId);
                        }
                    }
                }
                SingletonTemplate<TradeBlackManager>.Instance().OnExchange(client.ClientData.RoleID, otherClient.ClientData.RoleID, goodsDataList, goodsDataList2, moveYuanBao, moveYuanBao2);
                int addTradeCount = 0;
                int[] logTradeGoodsArr = null;
                lock (Global._LogTradeFreqGoodsMutex)
                {
                    logTradeGoodsArr = Global._LogTradeFreqGoodsArray;
                }
                if (logTradeGoodsArr != null && logTradeGoodsArr.Count<int>() > 0)
                {
                    if (goodsDataList != null)
                    {
                        addTradeCount += goodsDataList.Count((GoodsData _g) => logTradeGoodsArr.Contains(_g.GoodsID));
                    }
                    if (goodsDataList2 != null)
                    {
                        addTradeCount += goodsDataList2.Count((GoodsData _g) => logTradeGoodsArr.Contains(_g.GoodsID));
                    }
                }
                if (moveYuanBao > 0 || moveYuanBao2 > 0)
                {
                    addTradeCount++;
                }
                if (addTradeCount > 0)
                {
                    int freqNumber = Global.IncreaseTradeCount(client, "FTFTradeDayID", "FTFTradeCount", addTradeCount);
                    int tradelog_freq_ftf = GameManager.GameConfigMgr.GetGameConfigItemInt("tradelog_freq_ftf", 10);
                    if (freqNumber >= tradelog_freq_ftf)
                    {
                        GameManager.logDBCmdMgr.AddTradeFreqInfo(1, freqNumber, client.ClientData.RoleID, 0);
                    }
                    freqNumber = Global.IncreaseTradeCount(otherClient, "FTFTradeDayID", "FTFTradeCount", addTradeCount);
                    if (freqNumber >= tradelog_freq_ftf)
                    {
                        GameManager.logDBCmdMgr.AddTradeFreqInfo(1, freqNumber, otherClient.ClientData.RoleID, 0);
                    }
                }
            }
            finally
            {
                if (flag)
                {
                    Monitor.Exit(ed);
                }
            }
            return ret;
        }

        
        public static bool AllowStartStall(GameClient client)
        {
            bool result;
            if (Data.MapStallList == null)
            {
                result = false;
            }
            else
            {
                for (int i = 0; i < Data.MapStallList.Count; i++)
                {
                    if (Data.MapStallList[i].MapID == client.ClientData.MapCode)
                    {
                        Point myPos = new Point((double)client.ClientData.PosX, (double)client.ClientData.PosY);
                        if (Global.InCircle(myPos, Data.MapStallList[i].ToPos, (double)Data.MapStallList[i].Radius))
                        {
                            return true;
                        }
                    }
                }
                result = false;
            }
            return result;
        }

        
        public static void RestoreStallData(GameClient client, StallData sd)
        {
            lock (sd)
            {
                for (int i = 0; i < sd.GoodsList.Count; i++)
                {
                    Global.AddGoodsData(client, sd.GoodsList[i]);
                    GameManager.ClientMgr.NotifyMoveGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, sd.GoodsList[i], 1);
                }
                sd.GoodsList.Clear();
            }
        }

        
        public static bool AddGoodsDataIntoStallData(GameClient client, int goodsDbID, StallData sd, int price)
        {
            lock (sd)
            {
                if (sd.Start > 0)
                {
                    return true;
                }
                if (sd.GoodsList.Count < 18)
                {
                    GoodsData gd = Global.GetGoodsByDbID(client, goodsDbID);
                    if (null == gd)
                    {
                        return false;
                    }
                    if (gd.Binding > 0)
                    {
                        return false;
                    }
                    Global.RemoveGoodsData(client, gd);
                    GameManager.ClientMgr.NotifyMoveGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, gd, 0);
                    if (-1 == sd.GoodsList.IndexOf(gd))
                    {
                        sd.GoodsList.Add(gd);
                    }
                    sd.GoodsPriceDict[gd.Id] = price;
                }
            }
            return true;
        }

        
        public static bool RemoveGoodsDataFromStallData(GameClient client, int goodsDbID, StallData sd)
        {
            GoodsData gd = null;
            lock (sd)
            {
                if (sd.Start > 0)
                {
                    return true;
                }
                for (int i = 0; i < sd.GoodsList.Count; i++)
                {
                    if (sd.GoodsList[i].Id == goodsDbID)
                    {
                        gd = sd.GoodsList[i];
                        sd.GoodsList.RemoveAt(i);
                        sd.GoodsPriceDict.Remove(gd.Id);
                        break;
                    }
                }
            }
            bool result;
            if (null == gd)
            {
                result = false;
            }
            else
            {
                Global.AddGoodsData(client, gd);
                GameManager.ClientMgr.NotifyMoveGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, gd, 1);
                result = true;
            }
            return result;
        }

        
        public static int BuyFromStallData(GameClient client, GameClient otherClient, StallData sd, int goodsDbID)
        {
            int result;
            lock (sd)
            {
                if (sd.GoodsList.Count <= 0)
                {
                    result = -11;
                }
                else
                {
                    int goodsPrice = 0;
                    if (sd.GoodsPriceDict.TryGetValue(goodsDbID, out goodsPrice))
                    {
                        goodsPrice = Global.GMax(goodsPrice, 0);
                    }
                    int ret = -12;
                    bool found = false;
                    for (int i = 0; i < sd.GoodsList.Count; i++)
                    {
                        if (sd.GoodsList[i].Id == goodsDbID)
                        {
                            if (goodsPrice > 0)
                            {
                                if (client.ClientData.Money1 - goodsPrice < 0)
                                {
                                    ret = -13;
                                    break;
                                }
                                GameManager.ClientMgr.SubMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsPrice, "购买摆摊物品");
                                GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, otherClient, (int)((double)goodsPrice * 0.9), "出售摆摊物品", true);
                            }
                            if (!GameManager.ClientMgr.MoveGoodsDataToOtherRole(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, sd.GoodsList[i], otherClient, client, true))
                            {
                                GameManager.SystemServerEvents.AddEvent(string.Format("转移物品时失败, 摊位购买, FromRole={0}({1}), ToRole={2}({3}), GoodsDbID={4}, GoodsID={5}, GoodsNum={6}", new object[]
                                {
                                    otherClient.ClientData.RoleID,
                                    otherClient.ClientData.RoleName,
                                    client.ClientData.RoleID,
                                    client.ClientData.RoleName,
                                    sd.GoodsList[i].Id,
                                    sd.GoodsList[i].GoodsID,
                                    sd.GoodsList[i].GCount
                                }), EventLevels.Important);
                            }
                            found = true;
                            sd.GoodsList.RemoveAt(i);
                            break;
                        }
                    }
                    if (!found)
                    {
                        result = ret;
                    }
                    else
                    {
                        result = 0;
                    }
                }
            }
            return result;
        }

        
        public static TeamMemberData ClientDataToTeamMemberData(SafeClientData clientData)
        {
            return new TeamMemberData
            {
                RoleID = clientData.RoleID,
                RoleName = Global.FormatRoleName2(clientData, clientData.RoleName),
                RoleSex = clientData.RoleSex,
                Level = clientData.Level,
                Occupation = clientData.Occupation,
                RolePic = clientData.RolePic,
                MapCode = clientData.MapCode,
                OnlineState = 1,
                MaxLifeV = clientData.LifeV,
                CurrentLifeV = clientData.CurrentLifeV,
                MaxMagicV = clientData.MagicV,
                CurrentMagicV = clientData.CurrentMagicV,
                PosX = clientData.PosX,
                PosY = clientData.PosY,
                CombatForce = clientData.CombatForce,
                ChangeLifeLev = clientData.ChangeLifeCount
            };
        }

        
        public static void QuitFromTeam(GameClient client)
        {
            if (client.ClientData.TeamID > 0)
            {
                ZhuanShengShiLian.ProcessClearRoleLog(client);
                TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
                if (null == td)
                {
                    client.ClientData.TeamID = 0;
                    GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
                }
                else
                {
                    bool destroy = false;
                    lock (td)
                    {
                        if (td.TeamRoles.Count > 1)
                        {
                            for (int i = 0; i < td.TeamRoles.Count; i++)
                            {
                                if (td.TeamRoles[i].RoleID == client.ClientData.RoleID)
                                {
                                    td.TeamRoles.RemoveAt(i);
                                    break;
                                }
                            }
                            if (td.LeaderRoleID == client.ClientData.RoleID)
                            {
                                td.LeaderRoleID = td.TeamRoles[0].RoleID;
                            }
                        }
                        else
                        {
                            destroy = true;
                            td.LeaderRoleID = -1;
                        }
                    }
                    if (destroy)
                    {
                        GameManager.TeamMgr.RemoveData(client.ClientData.TeamID);
                        GameManager.ClientMgr.NotifyOthersTeamDestroy(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, td);
                    }
                    ZhuanShengShiLian.ProcessChangeTeamName(client, true);
                    client.ClientData.TeamID = 0;
                    GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
                    GameManager.ClientMgr.NotifyTeamData(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, td);
                    GameManager.ClientMgr.NotifyOthersTeamIDChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
        }

        
        public static int GetGameClientTeamLeaderID(SafeClientData clientData)
        {
            int result;
            if (clientData.TeamID <= 0)
            {
                result = -1;
            }
            else
            {
                TeamData td = GameManager.TeamMgr.FindData(clientData.TeamID);
                if (null == td)
                {
                    result = -1;
                }
                else
                {
                    int teamLeaderRoleID = -1;
                    lock (td)
                    {
                        teamLeaderRoleID = td.LeaderRoleID;
                    }
                    result = teamLeaderRoleID;
                }
            }
            return result;
        }

        
        public static FriendData FindFriendData(GameClient client, int otherRoleID)
        {
            FriendData result;
            if (null == client.ClientData.FriendDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.FriendDataList)
                {
                    for (int i = 0; i < client.ClientData.FriendDataList.Count; i++)
                    {
                        if (client.ClientData.FriendDataList[i].OtherRoleID == otherRoleID)
                        {
                            return client.ClientData.FriendDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static FriendData FindFirstFriendDataByType(GameClient client, int friendType)
        {
            FriendData result;
            if (null == client.ClientData.FriendDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.FriendDataList)
                {
                    for (int i = 0; i < client.ClientData.FriendDataList.Count; i++)
                    {
                        if (client.ClientData.FriendDataList[i].FriendType == friendType)
                        {
                            return client.ClientData.FriendDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static bool InFriendsBlackList(GameClient client, int otherRoleID)
        {
            FriendData friendData = Global.FindFriendData(client, otherRoleID);
            return null != friendData && friendData.FriendType == 1;
        }

        
        public static void AddFriendData(GameClient client, FriendData friendData)
        {
            if (null == client.ClientData.FriendDataList)
            {
                client.ClientData.FriendDataList = new List<FriendData>();
            }
            lock (client.ClientData.FriendDataList)
            {
                client.ClientData.FriendDataList.Add(friendData);
            }
        }

        
        public static void RemoveFriendData(GameClient client, int dbID)
        {
            if (null != client.ClientData.FriendDataList)
            {
                lock (client.ClientData.FriendDataList)
                {
                    for (int i = 0; i < client.ClientData.FriendDataList.Count; i++)
                    {
                        if (client.ClientData.FriendDataList[i].DbID == dbID)
                        {
                            client.ClientData.FriendDataList.RemoveAt(i);
                            break;
                        }
                    }
                }
            }
        }

        
        public static int GetFriendCountByType(GameClient client, int friendType)
        {
            int result;
            if (null == client.ClientData.FriendDataList)
            {
                result = 0;
            }
            else
            {
                int totalCount = 0;
                lock (client.ClientData.FriendDataList)
                {
                    for (int i = 0; i < client.ClientData.FriendDataList.Count; i++)
                    {
                        if (client.ClientData.FriendDataList[i].FriendType == friendType)
                        {
                            totalCount++;
                        }
                    }
                }
                result = totalCount;
            }
            return result;
        }

        
        public static bool IsAutoFightingProtectState(GameClient client)
        {
            bool result;
            if (!client.ClientData.AutoFighting)
            {
                result = false;
            }
            else if (!DBRoleBufferManager.ProcessAutoFightingProtect(client))
            {
                result = false;
            }
            else
            {
                long ticks = TimeUtil.NOW();
                result = (ticks - client.ClientData.LastAutoFightTicks >= 300000L);
            }
            return result;
        }

        
        public static bool CanSendSendWorldMessage(GameClient client)
        {
            return null != Global.GetGoodsByID(client, Global.SendWorldMessageGoodsID);
        }

        
        public static bool JugeSendMessgeLevel(GameClient client, int index)
        {
            int minLevel = 0;
            if (index == 1)
            {
                minLevel = GameManager.PlatConfigMgr.GetGameConfigItemInt("chat_near_level", 0);
            }
            if (index == 2)
            {
                minLevel = GameManager.PlatConfigMgr.GetGameConfigItemInt("chat_world_level", 0);
            }
            else if (index == 3)
            {
                minLevel = GameManager.PlatConfigMgr.GetGameConfigItemInt("chat_family_level", 0);
            }
            else if (index == 4)
            {
                minLevel = GameManager.PlatConfigMgr.GetGameConfigItemInt("chat_team_level", 0);
            }
            else if (index == 5)
            {
                minLevel = GameManager.PlatConfigMgr.GetGameConfigItemInt("chat_private_level", 0);
            }
            int nLevel = client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level;
            bool result;
            if (nLevel < minLevel)
            {
                string strinfo = StringUtil.substitute(GLang.GetLang(154, new object[0]), new object[]
                {
                    minLevel / 100,
                    minLevel % 100
                });
                GameManager.ClientMgr.SendSystemChatMessageToClient(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, strinfo);
                result = false;
            }
            else
            {
                result = true;
            }
            return result;
        }

        
        public static int[] HorseExtStr2IntArray(string extStr)
        {
            int[] result;
            if (string.IsNullOrEmpty(extStr))
            {
                result = new int[10];
            }
            else
            {
                string[] fields = extStr.Split(new char[]
                {
                    ','
                });
                int[] intArray = new int[10];
                int i = 0;
                while (i < intArray.Length && i < fields.Length)
                {
                    try
                    {
                        intArray[i] = Convert.ToInt32(fields[i]);
                    }
                    catch (Exception)
                    {
                    }
                    i++;
                }
                result = intArray;
            }
            return result;
        }

        
        public static string HorseExtIntArray2Str(int[] intArray)
        {
            string str = "";
            for (int i = 0; i < intArray.Length; i++)
            {
                str += intArray[i].ToString();
                if (i < intArray.Length - 1)
                {
                    str += ",";
                }
            }
            return str;
        }

        
        public static int GetHorseExtFieldIntVal(int[] horsePropIntArray, HorseExtIndexes extIndex)
        {
            int result;
            if (extIndex >= (HorseExtIndexes)horsePropIntArray.Length)
            {
                result = 0;
            }
            else
            {
                int val = 0;
                try
                {
                    val = horsePropIntArray[(int)extIndex];
                }
                catch (Exception)
                {
                }
                result = val;
            }
            return result;
        }

        
        private static void UpdateHorseDataProp(GameClient client, HorseExtIndexes extIndex, double dblValue)
        {
        }

        
        public static bool UpdateHorseDataProps(GameClient client, bool toAdd = true)
        {
            bool result;
            if (client.ClientData.HorseDbID <= 0)
            {
                result = false;
            }
            else
            {
                HorseData horseData = Global.GetHorseDataByDbID(client, client.ClientData.HorseDbID);
                if (null == horseData)
                {
                    result = false;
                }
                else
                {
                    SystemXmlItem baseXmlNode = Global.GetHorseBasePropXmlNode(horseData.HorseID);
                    if (null == baseXmlNode)
                    {
                        result = false;
                    }
                    else
                    {
                        int[] horseExtIntArray = Global.HorseExtStr2IntArray(horseData.PropsVal);
                        bool ret = false;
                        for (int i = 0; i < 10; i++)
                        {
                            int baseVal = Global.GetHorseBasePropVal(horseData.HorseID, (HorseExtIndexes)i, baseXmlNode);
                            double propVal = (double)Global.GetHorseExtFieldIntVal(horseExtIntArray, (HorseExtIndexes)i);
                            propVal += (double)baseVal;
                            ret = (propVal > 0.0 || ret);
                            Global.UpdateHorseDataProp(client, (HorseExtIndexes)i, toAdd ? propVal : (0.0 - propVal));
                        }
                        result = ret;
                    }
                }
            }
            return result;
        }

        
        public static void AddHorseData(GameClient client, HorseData horseData)
        {
            if (null == client.ClientData.HorsesDataList)
            {
                client.ClientData.HorsesDataList = new List<HorseData>();
            }
            lock (client.ClientData.HorsesDataList)
            {
                client.ClientData.HorsesDataList.Add(horseData);
            }
        }

        
        public static void RemoveHorseDataByDbID(GameClient client, int horseDbID)
        {
            if (null != client.ClientData.HorsesDataList)
            {
                lock (client.ClientData.HorsesDataList)
                {
                    for (int i = 0; i < client.ClientData.HorsesDataList.Count; i++)
                    {
                        if (client.ClientData.HorsesDataList[i].DbID == horseDbID)
                        {
                            client.ClientData.HorsesDataList.RemoveAt(i);
                            break;
                        }
                    }
                }
            }
        }

        
        public static HorseData GetHorseDataByDbID(GameClient client, int dbID)
        {
            HorseData result;
            if (null == client.ClientData.HorsesDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.HorsesDataList)
                {
                    for (int i = 0; i < client.ClientData.HorsesDataList.Count; i++)
                    {
                        if (client.ClientData.HorsesDataList[i].DbID == dbID)
                        {
                            return client.ClientData.HorsesDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static HorseData GetHorseDataByIndex(GameClient client, int index)
        {
            HorseData result;
            if (null == client.ClientData.HorsesDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.HorsesDataList)
                {
                    if (index < client.ClientData.HorsesDataList.Count)
                    {
                        return client.ClientData.HorsesDataList[index];
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static int AddHorseDBCommand(TCPOutPacketPool pool, GameClient client, int horseID, int bodyID)
        {
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}", client.ClientData.RoleID, horseID, bodyID);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 196, strcmd, out tcpOutPacket, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (null == tcpOutPacket)
            {
                result = -2;
            }
            else
            {
                HorseData horseData = DataHelper.BytesToObject<HorseData>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
                if (null != horseData)
                {
                    Global.AddHorseData(client, horseData);
                }
                if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                {
                }
                result = 0;
            }
            return result;
        }

        
        public static int RemoveHorseDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", new object[]
            {
                client.ClientData.RoleID,
                dbID,
                1,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 201, strcmd, out tcpOutPacket, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (null == tcpOutPacket)
            {
                result = -2;
            }
            else
            {
                if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                {
                }
                Global.RemoveHorseDataByDbID(client, dbID);
                result = 0;
            }
            return result;
        }

        
        public static int UpdateHorsePropsDBCommand(TCPOutPacketPool pool, GameClient client, int dbID, HorseExtIndexes extIndex, int extValue, int addNum)
        {
            HorseData horseData = Global.GetHorseDataByDbID(client, dbID);
            int result;
            if (null == horseData)
            {
                result = -1;
            }
            else
            {
                int[] intArray = Global.HorseExtStr2IntArray(horseData.PropsNum);
                intArray[(int)extIndex] += addNum;
                horseData.PropsNum = Global.HorseExtIntArray2Str(intArray);
                intArray = Global.HorseExtStr2IntArray(horseData.PropsVal);
                intArray[(int)extIndex] += extValue;
                horseData.PropsVal = Global.HorseExtIntArray2Str(intArray);
                TCPOutPacket tcpOutPacket = null;
                string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", new object[]
                {
                    client.ClientData.RoleID,
                    dbID,
                    "*",
                    "*",
                    "*",
                    horseData.PropsNum,
                    horseData.PropsVal,
                    "*",
                    "*",
                    "*",
                    "*"
                });
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 201, strcmd, out tcpOutPacket, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    result = -1;
                }
                else if (null == tcpOutPacket)
                {
                    result = -2;
                }
                else
                {
                    if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                    {
                    }
                    result = 0;
                }
            }
            return result;
        }

        
        public static int UpdateHorseIDDBCommand(TCPOutPacketPool pool, GameClient client, int dbID, int horseID, int failedNum, string jinJieTempTime, int jinJieTempNum, int jinJieFailedDayID)
        {
            HorseData horseData = Global.GetHorseDataByDbID(client, dbID);
            int result;
            if (null == horseData)
            {
                result = -1;
            }
            else
            {
                horseData.HorseID = horseID;
                horseData.JinJieFailedNum = failedNum;
                horseData.JinJieTempTime = Global.SafeConvertToTicks(jinJieTempTime);
                horseData.JinJieTempNum = jinJieTempNum;
                horseData.JinJieFailedDayID = jinJieFailedDayID;
                jinJieTempTime = jinJieTempTime.Replace(":", "$");
                TCPOutPacket tcpOutPacket = null;
                string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", new object[]
                {
                    client.ClientData.RoleID,
                    dbID,
                    "*",
                    horseData.HorseID,
                    "*",
                    "*",
                    "*",
                    horseData.JinJieFailedNum,
                    jinJieTempTime,
                    jinJieTempNum,
                    horseData.JinJieFailedDayID
                });
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 201, strcmd, out tcpOutPacket, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    result = -1;
                }
                else if (null == tcpOutPacket)
                {
                    result = -2;
                }
                else
                {
                    if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                    {
                    }
                    result = 0;
                }
            }
            return result;
        }

        
        public static int UpdateHorseBodyIDDBCommand(TCPOutPacketPool pool, GameClient client, int dbID, int horseBodyID)
        {
            HorseData horseData = Global.GetHorseDataByDbID(client, dbID);
            int result;
            if (null == horseData)
            {
                result = -1;
            }
            else
            {
                horseData.BodyID = horseBodyID;
                TCPOutPacket tcpOutPacket = null;
                string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", new object[]
                {
                    client.ClientData.RoleID,
                    dbID,
                    "*",
                    "*",
                    horseData.BodyID,
                    "*",
                    "*",
                    "*",
                    "*",
                    "*",
                    "*"
                });
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 201, strcmd, out tcpOutPacket, client.ServerId);
                if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                {
                    result = -1;
                }
                else if (null == tcpOutPacket)
                {
                    result = -2;
                }
                else
                {
                    if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                    {
                    }
                    result = 0;
                }
            }
            return result;
        }

        
        public static int HorseOnDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            string[] dbFields = null;
            string strcmd = string.Format("{0}:{1}", client.ClientData.RoleID, dbID);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, 10019, strcmd, out dbFields, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[0]) < 0)
            {
                result = -2;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        public static void HorseOffDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            GameManager.DBCmdMgr.AddDBCmd(10020, string.Format("{0}:{1}", client.ClientData.RoleID, dbID), null, client.ServerId);
        }

        
        public static SystemXmlItem GetHorseEnchanceXmlNode(int nextLevel, HorseExtIndexes extIndex)
        {
            return HorseCachingManager.GetHorseEnchanceItem(nextLevel, extIndex);
        }

        
        public static SystemXmlItem GetHorseJiFenXmlNode()
        {
            string name = string.Format("Config/Horses/HorseJiFen.xml", new object[0]);
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(name));
            SystemXmlItem result;
            if (null == xml)
            {
                result = null;
            }
            else
            {
                XElement xmlNode = Global.GetXElement(xml, "Level", "ID", "1");
                result = new SystemXmlItem
                {
                    XMLNode = xmlNode
                };
            }
            return result;
        }

        
        public static SystemXmlItem GetHorseBasePropXmlNode(int horseID)
        {
            string name = string.Format("Config/Horses/HorseBaseProp.xml", new object[0]);
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(name));
            SystemXmlItem result;
            if (null == xml)
            {
                result = null;
            }
            else
            {
                XElement xmlNode = Global.GetXElement(xml, "Level", "ID", horseID.ToString());
                result = new SystemXmlItem
                {
                    XMLNode = xmlNode
                };
            }
            return result;
        }

        
        public static SystemXmlItem GetHorsePropLimitXmlNode(int horseID)
        {
            string name = string.Format("Config/Horses/HorsePropLimit.xml", new object[0]);
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(name));
            SystemXmlItem result;
            if (null == xml)
            {
                result = null;
            }
            else
            {
                XElement xmlNode = Global.GetXElement(xml, "Level", "ID", horseID.ToString());
                result = new SystemXmlItem
                {
                    XMLNode = xmlNode
                };
            }
            return result;
        }

        
        public static SystemXmlItem GetHorseUpXmlNode(int horseID)
        {
            SystemXmlItem result;
            if (horseID <= 0 || horseID > Global.MaxHorseID)
            {
                result = null;
            }
            else
            {
                string name = string.Format("Config/Horses/HorseUp.xml", new object[0]);
                XElement xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(name));
                if (null == xml)
                {
                    result = null;
                }
                else
                {
                    XElement xmlNode = Global.GetXElement(xml, "Level", "ID", horseID.ToString());
                    result = new SystemXmlItem
                    {
                        XMLNode = xmlNode
                    };
                }
            }
            return result;
        }

        
        public static int CalcHorsePropJiFen(HorseExtIndexes extIndex, int extPropValue)
        {
            int horsePropJiFen = 1;
            SystemXmlItem systemXmlItem = Global.GetHorseJiFenXmlNode();
            if (null != systemXmlItem)
            {
                string horsePropName = Global.HorsePropNames[(int)extIndex];
                horsePropJiFen = systemXmlItem.GetIntValue(horsePropName, -1);
            }
            horsePropJiFen = Global.GMax(1, horsePropJiFen);
            return extPropValue / horsePropJiFen;
        }

        
        public static int CalcHorsePropsJiFen(HorseData horseData)
        {
            int result;
            if (string.IsNullOrEmpty(horseData.PropsVal))
            {
                result = 0;
            }
            else
            {
                SystemXmlItem baseXmlNode = Global.GetHorseBasePropXmlNode(horseData.HorseID);
                if (null == baseXmlNode)
                {
                    result = 0;
                }
                else
                {
                    int totalJiFen = 0;
                    string[] fields = horseData.PropsVal.Split(new char[]
                    {
                        ','
                    });
                    int i = 0;
                    while (i < fields.Length && i < 10)
                    {
                        int baseVal = Global.GetHorseBasePropVal(horseData.HorseID, (HorseExtIndexes)i, baseXmlNode);
                        int val = Global.SafeConvertToInt32(fields[i]);
                        val += baseVal;
                        totalJiFen += Global.CalcHorsePropJiFen((HorseExtIndexes)i, val);
                        i++;
                    }
                    result = totalJiFen;
                }
            }
            return result;
        }

        
        public static int GetHorseBasePropVal(int horseID, HorseExtIndexes extIndex, SystemXmlItem baseXmlNode = null)
        {
            int baseValue = 0;
            if (null == baseXmlNode)
            {
                baseXmlNode = Global.GetHorseBasePropXmlNode(horseID);
            }
            if (null != baseXmlNode)
            {
                string horsePropName = Global.HorsePropNames[(int)extIndex];
                baseValue = Global.GMax(0, baseXmlNode.GetIntValue(horsePropName, -1));
            }
            return baseValue;
        }

        
        public static int GetHorsePropLimitVal(int horseID, HorseExtIndexes extIndex)
        {
            int limitValue = 0;
            SystemXmlItem limitXmlNode = Global.GetHorsePropLimitXmlNode(horseID);
            if (null != limitXmlNode)
            {
                string horsePropName = Global.HorsePropNames[(int)extIndex];
                limitValue = Global.GMax(0, limitXmlNode.GetIntValue(horsePropName, -1));
            }
            return limitValue;
        }

        
        public static int GetRandomHorseNewBodyID()
        {
            return Global.GetRandomNumber(1, 5);
        }

        
        public static void ParseHorseJinJieFu(int horseID, out int goodsID, out int goodsNum, SystemXmlItem systemHorse = null)
        {
            goodsID = -1;
            goodsNum = 0;
            if (null == systemHorse)
            {
                systemHorse = Global.GetHorseUpXmlNode(horseID);
            }
            if (null != systemHorse)
            {
                string str = systemHorse.GetStringValue("GoodsNum");
                if (!string.IsNullOrEmpty(str))
                {
                    string[] fields = str.Split(new char[]
                    {
                        ','
                    });
                    if (fields.Length == 2)
                    {
                        goodsID = Global.SafeConvertToInt32(fields[0]);
                        goodsNum = Global.SafeConvertToInt32(fields[1]);
                    }
                }
            }
        }

        
        public static int GetHorseHorseBlessPoint(int horseID)
        {
            int result;
            if (horseID > Global.MaxHorseID)
            {
                result = 0;
            }
            else
            {
                SystemXmlItem horseUpXmlNode = Global.GetHorseUpXmlNode(horseID);
                if (null == horseUpXmlNode)
                {
                    result = 0;
                }
                else
                {
                    result = horseUpXmlNode.GetIntValue("BlessPoint", -1);
                }
            }
            return result;
        }

        
        public static string GetHorseNameByID(int horseID)
        {
            if (null == Global.HorseNamesList)
            {
                string str = GameManager.systemParamsList.GetParamValueByName("HorseNames");
                if (!string.IsNullOrEmpty(str))
                {
                    Global.HorseNamesList = str.Split(new char[]
                    {
                        ','
                    });
                }
            }
            string result;
            if (null == Global.HorseNamesList)
            {
                result = GLang.GetLang(155, new object[0]);
            }
            else if (horseID <= 0)
            {
                result = GLang.GetLang(155, new object[0]);
            }
            else if (horseID > Global.HorseNamesList.Length)
            {
                result = GLang.GetLang(155, new object[0]);
            }
            else
            {
                result = Global.HorseNamesList[horseID - 1];
            }
            return result;
        }

        
        public static bool IsHorsePropsFull(HorseData horseData)
        {
            SystemXmlItem baseXmlNode = Global.GetHorseBasePropXmlNode(horseData.HorseID);
            bool result;
            if (null == baseXmlNode)
            {
                result = false;
            }
            else
            {
                int[] horseExtIntArray = Global.HorseExtStr2IntArray(horseData.PropsVal);
                for (int i = 0; i < 10; i++)
                {
                    int baseVal = Global.GetHorseBasePropVal(horseData.HorseID, (HorseExtIndexes)i, baseXmlNode);
                    double propVal = (double)Global.GetHorseExtFieldIntVal(horseExtIntArray, (HorseExtIndexes)i);
                    propVal += (double)baseVal;
                    int propLimit = Global.GetHorsePropLimitVal(horseData.HorseID, (HorseExtIndexes)i);
                    if (propVal < (double)propLimit)
                    {
                        return false;
                    }
                }
                result = true;
            }
            return result;
        }

        
        public static int GetTempHorseID(GameClient client)
        {
            int result;
            if (client.ClientData.HorseDbID <= 0)
            {
                result = 0;
            }
            else
            {
                HorseData horseData = Global.GetHorseDataByDbID(client, client.ClientData.HorseDbID);
                if (null == horseData)
                {
                    result = 0;
                }
                else
                {
                    int horseID = horseData.HorseID;
                    if (client.ClientData.StartTempHorseIDTicks <= 0L)
                    {
                        result = horseID;
                    }
                    else if (client.ClientData.TempHorseID <= 0)
                    {
                        result = horseID;
                    }
                    else
                    {
                        long ticks = TimeUtil.NOW();
                        if (ticks - client.ClientData.StartTempHorseIDTicks >= 180000L)
                        {
                            result = horseID;
                        }
                        else
                        {
                            horseID = client.ClientData.TempHorseID;
                            result = horseID;
                        }
                    }
                }
            }
            return result;
        }

        
        public static void ChangeTempHorseID(GameClient client, int tempHorseID)
        {
            client.ClientData.TempHorseID = tempHorseID;
            client.ClientData.StartTempHorseIDTicks = TimeUtil.NOW();
            tempHorseID = Global.GetTempHorseID(client);
            if (tempHorseID > 0)
            {
                if (client.ClientData.HorseDbID > 0)
                {
                    HorseData horseData = Global.GetHorseDataByDbID(client, client.ClientData.HorseDbID);
                    if (null != horseData)
                    {
                        List<object> objsList = Global.GetAll9Clients(client);
                        if (null != objsList)
                        {
                            GameManager.ClientMgr.NotifyHorseCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0, 1, horseData.DbID, tempHorseID, horseData.BodyID, objsList);
                        }
                    }
                }
            }
        }

        
        public static int GetHorseTempJiFen(HorseData horseData)
        {
            return 0;
        }

        
        public static void AddHorseTempJiFen(HorseData horseData, int tempNum)
        {
        }

        
        public static string GetHorseStrTempTime(HorseData horseData)
        {
            try
            {
                return new DateTime(horseData.JinJieTempTime * 10000L).ToString("yyyy-MM-dd HH:mm:ss");
            }
            catch (Exception)
            {
            }
            return "1900-01-01 12:00:00";
        }

        
        public static void AddHorseFailedNum(HorseData horseData, int addNum)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (dayID == horseData.JinJieFailedDayID)
            {
                horseData.JinJieFailedNum += addNum;
            }
            else
            {
                horseData.JinJieFailedDayID = dayID;
                horseData.JinJieFailedNum = addNum;
            }
        }

        
        public static int GetHorseFailedNum(HorseData horseData)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            int jinJieFailedNum;
            if (dayID == horseData.JinJieFailedDayID)
            {
                jinJieFailedNum = horseData.JinJieFailedNum;
            }
            else
            {
                jinJieFailedNum = 0;
            }
            return jinJieFailedNum + Global.GetHorseTempJiFen(horseData);
        }

        
        public static int GetHorseEnchanceNum(int horseID)
        {
            int result;
            if (horseID < 0 || horseID >= Global.HorseEnchanceNum.Length)
            {
                result = 0;
            }
            else
            {
                result = Global.HorseEnchanceNum[horseID];
            }
            return result;
        }

        
        public static double GetHorseSpeed(int horseID)
        {
            if (null == Global.HorseSpeedList)
            {
                Global.HorseSpeedList = GameManager.systemParamsList.GetParamValueDoubleArrayByName("HorseSpeedList", ',');
            }
            double result;
            if (null == Global.HorseSpeedList)
            {
                result = 0.0;
            }
            else if (horseID <= 0)
            {
                result = 0.0;
            }
            else if (horseID > Global.HorseSpeedList.Length)
            {
                result = 0.0;
            }
            else
            {
                result = Global.HorseSpeedList[horseID - 1];
            }
            return result;
        }

        
        public static double GetHorseSpeed(GameClient client)
        {
            double result;
            if (client.ClientData.HorseDbID <= 0)
            {
                result = 0.0;
            }
            else
            {
                HorseData horseData = Global.GetHorseDataByDbID(client, client.ClientData.HorseDbID);
                if (null == horseData)
                {
                    result = 0.0;
                }
                else
                {
                    result = Global.GetHorseSpeed(horseData.HorseID);
                }
            }
            return result;
        }

        
        public static void AddPetData(GameClient client, PetData petData)
        {
            if (null == client.ClientData.PetsDataList)
            {
                client.ClientData.PetsDataList = new List<PetData>();
            }
            lock (client.ClientData.PetsDataList)
            {
                client.ClientData.PetsDataList.Add(petData);
            }
        }

        
        public static void RemovePetDataByDbID(GameClient client, int petDbID)
        {
            if (null != client.ClientData.PetsDataList)
            {
                lock (client.ClientData.PetsDataList)
                {
                    for (int i = 0; i < client.ClientData.PetsDataList.Count; i++)
                    {
                        if (client.ClientData.PetsDataList[i].DbID == petDbID)
                        {
                            client.ClientData.PetsDataList.RemoveAt(i);
                            break;
                        }
                    }
                }
            }
        }

        
        public static PetData GetPetDataByDbID(GameClient client, int dbID)
        {
            PetData result;
            if (null == client.ClientData.PetsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.PetsDataList)
                {
                    for (int i = 0; i < client.ClientData.PetsDataList.Count; i++)
                    {
                        if (client.ClientData.PetsDataList[i].DbID == dbID)
                        {
                            return client.ClientData.PetsDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static int AddPetDBCommand(TCPOutPacketPool pool, GameClient client, int petID, string petName, int petType, string props)
        {
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                client.ClientData.RoleID,
                petID,
                petName,
                petType,
                props
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 197, strcmd, out tcpOutPacket, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (null == tcpOutPacket)
            {
                result = -2;
            }
            else
            {
                PetData petData = DataHelper.BytesToObject<PetData>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
                if (null != petData)
                {
                    Global.AddPetData(client, petData);
                }
                if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                {
                }
                result = 0;
            }
            return result;
        }

        
        public static int RemovePetDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", new object[]
            {
                client.ClientData.RoleID,
                dbID,
                "*",
                "*",
                "*",
                "*",
                "*",
                1,
                "*",
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 202, strcmd, out tcpOutPacket, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (null == tcpOutPacket)
            {
                result = -2;
            }
            else
            {
                if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                {
                }
                Global.RemovePetDataByDbID(client, dbID);
                result = 0;
            }
            return result;
        }

        
        public static int UpdatePetNameDBCommand(TCPOutPacketPool pool, GameClient client, PetData petData)
        {
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", new object[]
            {
                client.ClientData.RoleID,
                petData.DbID,
                petData.PetName,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 202, strcmd, out tcpOutPacket, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (null == tcpOutPacket)
            {
                result = -2;
            }
            else
            {
                if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                {
                }
                result = 0;
            }
            return result;
        }

        
        public static int FeedPetDBCommand(TCPOutPacketPool pool, GameClient client, PetData petData, int feedNum)
        {
            petData.FeedNum += feedNum;
            int level = Global.GetPetLevel(petData);
            petData.Level = Global.GMax(petData.Level, level);
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", new object[]
            {
                client.ClientData.RoleID,
                petData.DbID,
                "*",
                "*",
                petData.FeedNum,
                "*",
                "*",
                "*",
                "*",
                petData.Level
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 202, strcmd, out tcpOutPacket, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (null == tcpOutPacket)
            {
                result = -2;
            }
            else
            {
                if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                {
                }
                result = 0;
            }
            return result;
        }

        
        public static int UpLevelPetDBCommand(TCPOutPacketPool pool, GameClient client, PetData petData)
        {
            petData.PetType = 1;
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", new object[]
            {
                client.ClientData.RoleID,
                petData.DbID,
                "*",
                petData.PetType,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 202, strcmd, out tcpOutPacket, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (null == tcpOutPacket)
            {
                result = -2;
            }
            else
            {
                if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                {
                }
                result = 0;
            }
            return result;
        }

        
        public static int RealivePetDBCommand(TCPOutPacketPool pool, GameClient client, PetData petData)
        {
            DateTime now = TimeUtil.NowDateTime();
            string today = now.ToString("yyyy-MM-dd HH$mm$ss");
            long ticks = now.Ticks / 10000L;
            petData.AddDateTime = ticks;
            petData.FeedNum = 0;
            petData.ReAliveNum++;
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", new object[]
            {
                client.ClientData.RoleID,
                petData.DbID,
                "*",
                "*",
                petData.FeedNum,
                petData.ReAliveNum,
                "*",
                "*",
                today,
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, 202, strcmd, out tcpOutPacket, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (null == tcpOutPacket)
            {
                result = -2;
            }
            else
            {
                if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
                {
                }
                result = 0;
            }
            return result;
        }

        
        public static int PetOutDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            string[] dbFields = null;
            string strcmd = string.Format("{0}:{1}", client.ClientData.RoleID, dbID);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, 10021, strcmd, out dbFields, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                result = -1;
            }
            else if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[0]) < 0)
            {
                result = -2;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        public static void PetInDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            GameManager.DBCmdMgr.AddDBCmd(10022, string.Format("{0}:{1}", client.ClientData.RoleID, dbID), null, client.ServerId);
        }

        
        public static int GetPetLifeV(PetData petData)
        {
            int result;
            if (null == petData)
            {
                result = 0;
            }
            else
            {
                result = 100;
            }
            return result;
        }

        
        public static bool IsPetNotUseGoods(PetData petData)
        {
            return Global.GetPetLifeV(petData) <= 35;
        }

        
        public static bool IsPetDead(PetData petData)
        {
            return Global.GetPetLifeV(petData) <= 0;
        }

        
        public static int GetPetLevel(PetData petData)
        {
            int result;
            if (petData.FeedNum <= 0)
            {
                result = 1;
            }
            else if (petData.FeedNum >= 1 && petData.FeedNum < 3)
            {
                result = 2;
            }
            else if (petData.FeedNum >= 3 && petData.FeedNum < 6)
            {
                result = 3;
            }
            else if (petData.FeedNum >= 6 && petData.FeedNum < 10)
            {
                result = 4;
            }
            else if (petData.FeedNum >= 10 && petData.FeedNum < 15)
            {
                result = 5;
            }
            else if (petData.FeedNum >= 15 && petData.FeedNum < 20)
            {
                result = 6;
            }
            else if (petData.FeedNum >= 20 && petData.FeedNum < 25)
            {
                result = 7;
            }
            else if (petData.FeedNum >= 25 && petData.FeedNum < 30)
            {
                result = 8;
            }
            else if (petData.FeedNum >= 30 && petData.FeedNum < 35)
            {
                result = 9;
            }
            else
            {
                result = 10;
            }
            return result;
        }

        
        public static void InitBagParams()
        {
            int[] bagGridParams = GameManager.systemParamsList.GetParamValueIntArrayByName("BagGridParams", ',');
            if (bagGridParams != null && 6 == bagGridParams.Length)
            {
                if (bagGridParams[0] > 0)
                {
                    Global.MaxPortableGridNum = bagGridParams[0];
                }
                if (bagGridParams[1] > 0)
                {
                    Global.OnePortableGridYuanBao = bagGridParams[1];
                }
                if (bagGridParams[2] > 0)
                {
                    Global.DefaultPortableGridNum = bagGridParams[2];
                }
                if (bagGridParams[3] > 0)
                {
                    Global.MaxBagGridNum = bagGridParams[3];
                }
                if (bagGridParams[4] > 0)
                {
                    Global.OneBagGridYuanBao = bagGridParams[4];
                }
                if (bagGridParams[5] > 0)
                {
                    Global.DefaultBagGridNum = bagGridParams[5];
                }
            }
            int[] ExtraStoragePriceParams = GameManager.systemParamsList.GetParamValueIntArrayByName("ExtraStoragePrice", ',');
            if (ExtraStoragePriceParams != null && 2 == ExtraStoragePriceParams.Length)
            {
                Global.ExtraBagGridPriceStartPos = Global.GMax(0, ExtraStoragePriceParams[0]);
                Global.ExtraBagGridPrice = Global.GMax(0, ExtraStoragePriceParams[1]);
            }
            Global.ManorPetMax = Global.SafeConvertToInt32(GameManager.systemParamsList.GetParamValueByName("ManorPetMax"));
        }

        
        public static int GetExtBagGridNeedYuanBao(GameClient client, int addNum, int hasTime)
        {
            int bagCapacity = Global.GetSelfBagCapacity(client);
            int extStartGrid = bagCapacity + 1;
            int extEndGrid = bagCapacity + addNum;
            int needYuanBao = 0;
            for (int pos = extStartGrid; pos <= extEndGrid; pos++)
            {
                needYuanBao += Global.GetOneBagGridExtendNeedYuanBao(pos);
                if (pos == extStartGrid)
                {
                    double hasTimePercent = (double)hasTime / (double)((bagCapacity + 1 - Global.DefaultBagGridNum) * 3000);
                    needYuanBao = (int)((double)needYuanBao * Math.Max(0.0, 1.0 - hasTimePercent));
                }
            }
            return needYuanBao;
        }

        
        public static int GetOneBagGridExtendNeedYuanBao(int extendPos)
        {
            int needYuanBao = (extendPos - Global.DefaultBagGridNum) * Global.OneBagGridYuanBao;
            if (needYuanBao > 10 * Global.OneBagGridYuanBao)
            {
                needYuanBao = 10 * Global.OneBagGridYuanBao;
            }
            return needYuanBao;
        }

        
        public static int ExtGridPortableBagDBCommand(TCPOutPacketPool pool, GameClient client, int addGridNum)
        {
            int bagCapacity = Global.GetPortableBagCapacity(client);
            int result;
            if (bagCapacity >= Global.MaxPortableGridNum)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(156, new object[0]), new object[]
                {
                    Global.MaxPortableGridNum
                }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 1);
                result = -1;
            }
            else if (bagCapacity + addGridNum > Global.MaxPortableGridNum)
            {
                if (Global.MaxPortableGridNum - bagCapacity >= 5)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(157, new object[0]), new object[]
                    {
                        Global.MaxPortableGridNum
                    }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(158, new object[0]), new object[]
                    {
                        Global.MaxPortableGridNum
                    }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                result = -2;
            }
            else
            {
                client.ClientData.MyPortableBagData.ExtGridNum += addGridNum;
                GameManager.DBCmdMgr.AddDBCmd(10044, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.MyPortableBagData.ExtGridNum), null, client.ServerId);
                GameManager.ClientMgr.NotifyPortableBagData(client);
                result = 0;
            }
            return result;
        }

        
        public static int GetExtBagGridNeedYuanBaoForStorage(GameClient client, int addNum, int hasTime)
        {
            int bagCapacity = Global.GetPortableBagCapacity(client);
            int extStartGrid = bagCapacity + 1;
            int extEndGrid = bagCapacity + addNum;
            int needYuanBao = 0;
            for (int pos = extStartGrid; pos <= extEndGrid; pos++)
            {
                needYuanBao += Global.GetOneBagGridExtendNeedYuanBaoForStorage(pos);
                if (pos == extStartGrid)
                {
                    double hasTimePercent = (double)hasTime / (double)((extStartGrid - Global.DefaultPortableGridNum) * 1500);
                    needYuanBao = (int)((double)needYuanBao * Math.Max(0.0, 1.0 - hasTimePercent));
                }
            }
            return needYuanBao;
        }

        
        public static int GetOneBagGridExtendNeedYuanBaoForStorage(int extendPos)
        {
            int needYuanBao = (extendPos - Global.DefaultPortableGridNum) * Global.OnePortableGridYuanBao;
            if (needYuanBao > 10 * Global.OnePortableGridYuanBao)
            {
                needYuanBao = 10 * Global.OnePortableGridYuanBao;
            }
            return needYuanBao;
        }

        
        private static void GetNormalAndExNum(GameClient client, int addGridNum, out int normalNum, out int exNum)
        {
            normalNum = 0;
            exNum = 0;
            addGridNum = Global.GMax(0, addGridNum);
            int bagCapacity = Global.GetPortableBagCapacity(client);
            if (bagCapacity >= Global.MaxPortableGridNum)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(156, new object[0]), new object[]
                {
                    Global.MaxPortableGridNum
                }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
            }
            else
            {
                addGridNum = Global.GMin(addGridNum, Global.MaxPortableGridNum - bagCapacity);
                normalNum = ((bagCapacity + addGridNum < Global.ExtraBagGridPriceStartPos) ? addGridNum : Global.GMax(0, Global.ExtraBagGridPriceStartPos - bagCapacity - 1));
                exNum = Global.GMax(0, addGridNum - normalNum);
            }
        }

        
        public static int ExtGridPortableBagWithYuanBao(TCPOutPacketPool pool, GameClient client, int addGridNum, int nUseZuanShi)
        {
            int bagCapacity = Global.GetPortableBagCapacity(client);
            int result;
            if (bagCapacity >= Global.MaxPortableGridNum)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(156, new object[0]), new object[]
                {
                    Global.MaxPortableGridNum
                }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                result = -1;
            }
            else
            {
                addGridNum = Global.Clamp(addGridNum, 0, Global.MaxPortableGridNum - bagCapacity);
                if (addGridNum <= 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(159, new object[0]), new object[]
                    {
                        addGridNum
                    }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    result = -2;
                }
                else
                {
                    int normalNum = 0;
                    int exNum = 0;
                    Global.GetNormalAndExNum(client, addGridNum, out normalNum, out exNum);
                    int needYuanBao = 0;
                    if (normalNum > 0)
                    {
                        needYuanBao = Global.GetExtBagGridNeedYuanBaoForStorage(client, normalNum, client.ClientData.OpenPortableGridTime);
                    }
                    needYuanBao += exNum * Global.ExtraBagGridPrice;
                    if (needYuanBao > 0)
                    {
                        if (nUseZuanShi >= 0 && nUseZuanShi < needYuanBao)
                        {
                            client.sendCmd(599, string.Format("{0}", client.ClientData.OpenPortableGridTime), false);
                            return -2;
                        }
                        if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "扩充移动仓库", true, true, false, DaiBiSySType.None))
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(160, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
                            return -170;
                        }
                    }
                    if (normalNum > 0)
                    {
                        client.ClientData.OpenPortableGridTime = 0;
                        Global.SaveRoleParamsInt64ValueToDB(client, "OpenPortableGridTick", (long)client.ClientData.OpenPortableGridTime, true);
                    }
                    client.ClientData.MyPortableBagData.ExtGridNum += normalNum + exNum;
                    GameManager.DBCmdMgr.AddDBCmd(10044, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.MyPortableBagData.ExtGridNum), null, client.ServerId);
                    GameManager.ClientMgr.NotifyPortableBagData(client);
                    result = 1;
                }
            }
            return result;
        }

        
        public static int ExtRoleBagNumWithYuanBao(TCPOutPacketPool pool, GameClient client, int addGridNum, int nUseZuanShi)
        {
            int bagCapacity = Global.GetSelfBagCapacity(client);
            int result;
            if (bagCapacity >= Global.MaxBagGridNum)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(156, new object[0]), new object[]
                {
                    Global.MaxBagGridNum
                }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                result = -1;
            }
            else
            {
                addGridNum = Global.Clamp(addGridNum, 0, Global.MaxBagGridNum - bagCapacity);
                if (addGridNum <= 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(159, new object[0]), new object[]
                    {
                        addGridNum
                    }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    result = -2;
                }
                else
                {
                    int needYuanBao = Global.GetExtBagGridNeedYuanBao(client, addGridNum, client.ClientData.OpenGridTime);
                    if (needYuanBao > 0)
                    {
                        if (nUseZuanShi >= 0 && nUseZuanShi < needYuanBao)
                        {
                            client.sendCmd(598, string.Format("{0}", client.ClientData.OpenGridTime), false);
                            return -2;
                        }
                        if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "扩充背包", true, true, false, DaiBiSySType.None))
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(161, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 30);
                            return -170;
                        }
                    }
                    client.ClientData.BagNum += addGridNum;
                    GameManager.DBCmdMgr.AddDBCmd(10097, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.BagNum), null, client.ServerId);
                    client.ClientData.OpenGridTime = 0;
                    Global.SaveRoleParamsInt32ValueToDB(client, "OpenGridTick", client.ClientData.OpenGridTime, true);
                    result = 1;
                }
            }
            return result;
        }

        
        public static GoodsData GetPortableGoodsDataByDbID(GameClient client, int id)
        {
            GoodsData result;
            if (null == client.ClientData.PortableGoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.PortableGoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.PortableGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.PortableGoodsDataList[i].Id == id)
                        {
                            return client.ClientData.PortableGoodsDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static void AddPortableGoodsData(GameClient client, GoodsData goodsData)
        {
            if (goodsData.Site == -1000)
            {
                Global.UpdatePortableGoodsNum(client, 1);
                if (null == client.ClientData.PortableGoodsDataList)
                {
                    client.ClientData.PortableGoodsDataList = new List<GoodsData>();
                }
                lock (client.ClientData.PortableGoodsDataList)
                {
                    client.ClientData.PortableGoodsDataList.Add(goodsData);
                }
            }
        }

        
        public static GoodsData AddPortableGoodsData(GameClient client, int id, int goodsID, int forgeLevel, int quality, int goodsNum, int binding, int site, string jewelList, string endTime, int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nEquipChangeLife)
        {
            GoodsData gd = new GoodsData
            {
                Id = id,
                GoodsID = goodsID,
                Using = 0,
                Forge_level = forgeLevel,
                Starttime = "1900-01-01 12:00:00",
                Endtime = endTime,
                Site = site,
                Quality = quality,
                Props = "",
                GCount = goodsNum,
                Binding = binding,
                Jewellist = jewelList,
                BagIndex = 0,
                AddPropIndex = addPropIndex,
                BornIndex = bornIndex,
                Lucky = lucky,
                Strong = strong,
                ExcellenceInfo = ExcellenceProperty,
                AppendPropLev = nAppendPropLev,
                ChangeLifeLevForEquip = nEquipChangeLife
            };
            Global.AddPortableGoodsData(client, gd);
            return gd;
        }

        
        public static void RemovePortableGoodsData(GameClient client, GoodsData goodsData)
        {
            Global.UpdatePortableGoodsNum(client, -1);
            if (null != client.ClientData.PortableGoodsDataList)
            {
                lock (client.ClientData.PortableGoodsDataList)
                {
                    client.ClientData.PortableGoodsDataList.Remove(goodsData);
                }
            }
        }

        
        public static void RemoveRebornPortableGoodsData(GameClient client, GoodsData goodsData)
        {
            Global.UpdatePortableGoodsNum(client, -1);
            if (null != client.ClientData.RebornGoodsStoreList)
            {
                lock (client.ClientData.RebornGoodsStoreList)
                {
                    client.ClientData.RebornGoodsStoreList.Remove(goodsData);
                }
            }
        }

        
        public static bool CanPortableAddGoods(GameClient client, int goodsID, int newGoodsNum, int binding)
        {
            int totalGridNum = client.ClientData.MyPortableBagData.GoodsUsedGridNum;
            int totalMaxGridCount = Global.GetPortableBagCapacity(client);
            return totalGridNum < totalMaxGridCount;
        }

        
        public static void UpdatePortableGoodsNum(GameClient client, int addNum)
        {
            client.ClientData.MyPortableBagData.GoodsUsedGridNum += addNum;
        }

        
        public static int GetPortableBagCapacity(GameClient client)
        {
            return client.ClientData.MyPortableBagData.ExtGridNum;
        }

        
        public static int GetSelfBagCapacity(GameClient client)
        {
            return client.ClientData.BagNum;
        }

        
        public static void ResetPortableBagAllGoods(GameClient client)
        {
            if (null != client.ClientData.PortableGoodsDataList)
            {
                lock (client.ClientData.PortableGoodsDataList)
                {
                    Dictionary<string, GoodsData> oldGoodsDict = new Dictionary<string, GoodsData>();
                    List<GoodsData> toRemovedGoodsDataList = new List<GoodsData>();
                    for (int i = 0; i < client.ClientData.PortableGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.PortableGoodsDataList[i].Using <= 0)
                        {
                            client.ClientData.PortableGoodsDataList[i].BagIndex = 1;
                            int gridNum = Global.GetGoodsGridNumByID(client.ClientData.PortableGoodsDataList[i].GoodsID);
                            if (gridNum > 1)
                            {
                                GoodsData oldGoodsData = null;
                                string key = string.Format("{0}_{1}_{2}", client.ClientData.PortableGoodsDataList[i].GoodsID, client.ClientData.PortableGoodsDataList[i].Binding, Global.DateTimeTicks(client.ClientData.PortableGoodsDataList[i].Endtime));
                                if (oldGoodsDict.TryGetValue(key, out oldGoodsData))
                                {
                                    int toAddNum = Global.GMin(gridNum - oldGoodsData.GCount, client.ClientData.PortableGoodsDataList[i].GCount);
                                    oldGoodsData.GCount += toAddNum;
                                    client.ClientData.PortableGoodsDataList[i].GCount -= toAddNum;
                                    client.ClientData.PortableGoodsDataList[i].BagIndex = 1;
                                    oldGoodsData.BagIndex = 1;
                                    if (!Global.ResetBagGoodsData(client, client.ClientData.PortableGoodsDataList[i]))
                                    {
                                        break;
                                    }
                                    if (oldGoodsData.GCount >= gridNum)
                                    {
                                        if (client.ClientData.PortableGoodsDataList[i].GCount > 0)
                                        {
                                            oldGoodsDict[key] = client.ClientData.PortableGoodsDataList[i];
                                        }
                                        else
                                        {
                                            oldGoodsDict.Remove(key);
                                            toRemovedGoodsDataList.Add(client.ClientData.PortableGoodsDataList[i]);
                                        }
                                    }
                                    else if (client.ClientData.PortableGoodsDataList[i].GCount <= 0)
                                    {
                                        toRemovedGoodsDataList.Add(client.ClientData.PortableGoodsDataList[i]);
                                    }
                                }
                                else
                                {
                                    oldGoodsDict[key] = client.ClientData.PortableGoodsDataList[i];
                                }
                            }
                        }
                    }
                    for (int i = 0; i < toRemovedGoodsDataList.Count; i++)
                    {
                        client.ClientData.PortableGoodsDataList.Remove(toRemovedGoodsDataList[i]);
                    }
                    client.ClientData.PortableGoodsDataList.Sort((GoodsData x, GoodsData y) => y.GoodsID - x.GoodsID);
                    int index = 0;
                    for (int i = 0; i < client.ClientData.PortableGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.PortableGoodsDataList[i].Using <= 0)
                        {
                            bool flag2 = 0 == 0;
                            client.ClientData.PortableGoodsDataList[i].BagIndex = index++;
                            if (!Global.ResetBagGoodsData(client, client.ClientData.PortableGoodsDataList[i]))
                            {
                                break;
                            }
                        }
                    }
                }
            }
            TCPOutPacket tcpOutPacket = null;
            if (null != client.ClientData.PortableGoodsDataList)
            {
                lock (client.ClientData.PortableGoodsDataList)
                {
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(client.ClientData.PortableGoodsDataList, Global._TCPManager.TcpOutPacketPool, 242);
                }
            }
            else
            {
                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(client.ClientData.PortableGoodsDataList, Global._TCPManager.TcpOutPacketPool, 242);
            }
            Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true);
        }

        
        public static bool AbandonGoods(GameClient client, GoodsData goodsData, int toGridX, int toGridY)
        {
            bool result;
            if (goodsData.Binding > 0)
            {
                result = false;
            }
            else
            {
                GameManager.GoodsPackMgr.ProcessRoleAbandonGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, goodsData, toGridX, toGridY);
                result = true;
            }
            return result;
        }

        
        public static GoodsData GetJinDanGoodsDataByDbID(GameClient client, int id)
        {
            GoodsData result;
            if (null == client.ClientData.JinDanGoodsDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.JinDanGoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.JinDanGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.JinDanGoodsDataList[i].Id == id)
                        {
                            return client.ClientData.JinDanGoodsDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static void AddJinDanGoodsData(GameClient client, GoodsData goodsData)
        {
            if (goodsData.Site == 2000)
            {
                if (null == client.ClientData.JinDanGoodsDataList)
                {
                    client.ClientData.JinDanGoodsDataList = new List<GoodsData>();
                }
                lock (client.ClientData.JinDanGoodsDataList)
                {
                    client.ClientData.JinDanGoodsDataList.Add(goodsData);
                }
            }
        }

        
        public static GoodsData AddJinDanGoodsData(GameClient client, int id, int goodsID, int forgeLevel, int quality, int goodsNum, int binding, int site, string jewelList, string endTime, int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nEquipChangeLife, List<int> washProps = null)
        {
            GoodsData gd = new GoodsData
            {
                Id = id,
                GoodsID = goodsID,
                Using = 0,
                Forge_level = forgeLevel,
                Starttime = "1900-01-01 12:00:00",
                Endtime = endTime,
                Site = site,
                Quality = quality,
                Props = "",
                GCount = goodsNum,
                Binding = binding,
                Jewellist = jewelList,
                BagIndex = 0,
                AddPropIndex = addPropIndex,
                BornIndex = bornIndex,
                Lucky = lucky,
                Strong = strong,
                ExcellenceInfo = ExcellenceProperty,
                AppendPropLev = nAppendPropLev,
                ChangeLifeLevForEquip = nEquipChangeLife,
                WashProps = washProps
            };
            Global.AddJinDanGoodsData(client, gd);
            return gd;
        }

        
        public static void RemoveJinDanGoodsData(GameClient client, GoodsData goodsData)
        {
            if (null != client.ClientData.JinDanGoodsDataList)
            {
                lock (client.ClientData.JinDanGoodsDataList)
                {
                    client.ClientData.JinDanGoodsDataList.Remove(goodsData);
                }
            }
        }

        
        public static void ResetJinDanBagAllGoods(GameClient client)
        {
            if (null != client.ClientData.JinDanGoodsDataList)
            {
                lock (client.ClientData.JinDanGoodsDataList)
                {
                    Dictionary<string, GoodsData> oldGoodsDict = new Dictionary<string, GoodsData>();
                    List<GoodsData> toRemovedGoodsDataList = new List<GoodsData>();
                    for (int i = 0; i < client.ClientData.JinDanGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.JinDanGoodsDataList[i].Using <= 0)
                        {
                            client.ClientData.JinDanGoodsDataList[i].BagIndex = 1;
                            int gridNum = Global.GetGoodsGridNumByID(client.ClientData.JinDanGoodsDataList[i].GoodsID);
                            if (gridNum > 1)
                            {
                                GoodsData oldGoodsData = null;
                                string key = string.Format("{0}_{1}_{2}", client.ClientData.JinDanGoodsDataList[i].GoodsID, client.ClientData.JinDanGoodsDataList[i].Binding, Global.DateTimeTicks(client.ClientData.JinDanGoodsDataList[i].Endtime));
                                if (oldGoodsDict.TryGetValue(key, out oldGoodsData))
                                {
                                    int toAddNum = Global.GMin(gridNum - oldGoodsData.GCount, client.ClientData.JinDanGoodsDataList[i].GCount);
                                    oldGoodsData.GCount += toAddNum;
                                    client.ClientData.JinDanGoodsDataList[i].GCount -= toAddNum;
                                    client.ClientData.JinDanGoodsDataList[i].BagIndex = 1;
                                    oldGoodsData.BagIndex = 1;
                                    if (!Global.ResetBagGoodsData(client, client.ClientData.JinDanGoodsDataList[i]))
                                    {
                                        break;
                                    }
                                    if (oldGoodsData.GCount >= gridNum)
                                    {
                                        if (client.ClientData.JinDanGoodsDataList[i].GCount > 0)
                                        {
                                            oldGoodsDict[key] = client.ClientData.JinDanGoodsDataList[i];
                                        }
                                        else
                                        {
                                            oldGoodsDict.Remove(key);
                                            toRemovedGoodsDataList.Add(client.ClientData.JinDanGoodsDataList[i]);
                                        }
                                    }
                                    else if (client.ClientData.JinDanGoodsDataList[i].GCount <= 0)
                                    {
                                        toRemovedGoodsDataList.Add(client.ClientData.JinDanGoodsDataList[i]);
                                    }
                                }
                                else
                                {
                                    oldGoodsDict[key] = client.ClientData.JinDanGoodsDataList[i];
                                }
                            }
                        }
                    }
                    for (int i = 0; i < toRemovedGoodsDataList.Count; i++)
                    {
                        client.ClientData.JinDanGoodsDataList.Remove(toRemovedGoodsDataList[i]);
                    }
                    client.ClientData.JinDanGoodsDataList.Sort((GoodsData x, GoodsData y) => y.GoodsID - x.GoodsID);
                    int index = 0;
                    for (int i = 0; i < client.ClientData.JinDanGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.JinDanGoodsDataList[i].Using <= 0)
                        {
                            bool flag2 = 0 == 0;
                            client.ClientData.JinDanGoodsDataList[i].BagIndex = index++;
                            if (!Global.ResetBagGoodsData(client, client.ClientData.JinDanGoodsDataList[i]))
                            {
                                break;
                            }
                        }
                    }
                }
            }
            TCPOutPacket tcpOutPacket = null;
            if (null != client.ClientData.JinDanGoodsDataList)
            {
                lock (client.ClientData.JinDanGoodsDataList)
                {
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(client.ClientData.JinDanGoodsDataList, Global._TCPManager.TcpOutPacketPool, 449);
                }
            }
            else
            {
                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(client.ClientData.JinDanGoodsDataList, Global._TCPManager.TcpOutPacketPool, 449);
            }
            Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true);
        }

        
        public static bool CanAddGoodsToJinDanCangKu(GameClient client, int goodsID, int newGoodsNum, int binding, string endTime = "1900-01-01 12:00:00", bool canUseOld = true)
        {
            bool result;
            if (client.ClientData.JinDanGoodsDataList == null)
            {
                result = true;
            }
            else
            {
                int gridNum = Global.GetGoodsGridNumByID(goodsID);
                gridNum = Global.GMax(gridNum, 1);
                bool findOldGrid = false;
                int totalGridNum = 0;
                lock (client.ClientData.JinDanGoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.JinDanGoodsDataList.Count; i++)
                    {
                        totalGridNum++;
                        if (canUseOld && gridNum > 1)
                        {
                            if (client.ClientData.JinDanGoodsDataList[i].GoodsID == goodsID && client.ClientData.JinDanGoodsDataList[i].Binding == binding && Global.DateTimeEqual(client.ClientData.JinDanGoodsDataList[i].Endtime, endTime))
                            {
                                if (client.ClientData.JinDanGoodsDataList[i].GCount + newGoodsNum <= gridNum)
                                {
                                    findOldGrid = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                if (findOldGrid)
                {
                    result = true;
                }
                else
                {
                    int totalMaxGridCount = Global.GetJinDanBagCapacity(client);
                    result = (totalGridNum < totalMaxGridCount);
                }
            }
            return result;
        }

        
        public static int GetJinDanBagCapacity(GameClient client)
        {
            return Global.MaxJinDanGridNum;
        }

        
        private static void GetCurrent9Grid(MapGrid mapGrid, int centerCridX, int centerCridY, out int startGridX, out int startGridY, out int endGridX, out int endGridY)
        {
            startGridX = 0;
            startGridY = 0;
            endGridX = 0;
            endGridY = 0;
            startGridX = centerCridX - Global.MaxCache9XGridNum;
            endGridX = centerCridX + Global.MaxCache9XGridNum;
            startGridY = centerCridY - Global.MaxCache9YGridNum;
            endGridY = centerCridY + Global.MaxCache9YGridNum;
            startGridX = Global.GMax(startGridX, 0);
            startGridY = Global.GMax(startGridY, 0);
            endGridX = Global.GMin(endGridX, mapGrid.MapGridXNum - 1);
            endGridY = Global.GMin(endGridY, mapGrid.MapGridYNum - 1);
        }

        
        private static bool In9Grid(int myX, int myY, int centerCridX, int centerCridY, int maxGridX, int maxGridY)
        {
            int startGridX = centerCridX - Global.MaxCache9XGridNum;
            int endGridX = centerCridX + Global.MaxCache9XGridNum;
            int startGridY = centerCridY - Global.MaxCache9YGridNum;
            int endGridY = centerCridY + Global.MaxCache9YGridNum;
            startGridX = Global.GMax(startGridX, 0);
            startGridY = Global.GMax(startGridY, 0);
            endGridX = Global.GMin(endGridX, maxGridX - 1);
            endGridY = Global.GMin(endGridY, maxGridY - 1);
            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
                {
                    if (myX == x && myY == y)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        
        public static void Get9GridObjects(GameClient client, out List<object> toRemoveObjsList, out List<object> toAddObjsList)
        {
            toRemoveObjsList = null;
            toAddObjsList = null;
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode];
            bool onlyNPC = mapGrid._GameMap.OnlyShowNPC;
            int centerCridX = client.ClientData.PosX / mapGrid.MapGridWidth;
            int centerCridY = client.ClientData.PosY / mapGrid.MapGridHeight;
            lock (client.ClientData.VisibleGrid9Objects)
            {
                List<object> keysList = client.ClientData.VisibleGrid9Objects.Keys.ToList<object>();
                int keysListCount = keysList.Count;
                for (int i = 0; i < keysListCount; i++)
                {
                    object key = keysList[i];
                    client.ClientData.VisibleGrid9Objects[key] = 0;
                }
            }
            int startGridX = 0;
            int startGridY = 0;
            int endGridX = 0;
            int endGridY = 0;
            Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);
            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
                {
                    List<object> objsList = mapGrid.FindObjects(x, y);
                    if (objsList != null && objsList.Count > 0)
                    {
                        lock (client.ClientData.VisibleGrid9Objects)
                        {
                            int i = 0;
                            while (i < objsList.Count)
                            {
                                IObject iObj = objsList[i] as IObject;
                                if (iObj.ObjectType == ObjectTypes.OT_NPC)
                                {
                                    goto IL_1AB;
                                }
                                if (!onlyNPC || iObj == client)
                                {
                                    if (iObj.CurrentCopyMapID == client.CurrentCopyMapID)
                                    {
                                        goto IL_1AB;
                                    }
                                }
                                IL_20A:
                                i++;
                                continue;
                                IL_1AB:
                                if (client.ClientData.VisibleGrid9Objects.ContainsKey(objsList[i]))
                                {
                                    client.ClientData.VisibleGrid9Objects[objsList[i]] = 1;
                                }
                                else
                                {
                                    client.ClientData.VisibleGrid9Objects[objsList[i]] = 2;
                                }
                                goto IL_20A;
                            }
                        }
                    }
                }
            }
            toRemoveObjsList = new List<object>();
            toAddObjsList = new List<object>();
            List<object> toRemoveObjsList2 = new List<object>();
            lock (client.ClientData.VisibleGrid9Objects)
            {
                foreach (object key in client.ClientData.VisibleGrid9Objects.Keys)
                {
                    int value = (int)client.ClientData.VisibleGrid9Objects[key];
                    if (0 == value)
                    {
                        if (key is Monster)
                        {
                            if ((key as Monster).CurrentCopyMapID == client.ClientData.CopyMapID)
                            {
                                (key as Monster).VisibleClientsNum--;
                            }
                        }
                        toRemoveObjsList.Add(key);
                    }
                    else if (2 == value)
                    {
                        if (key is Monster)
                        {
                            if ((key as Monster).CurrentCopyMapID == client.ClientData.CopyMapID)
                            {
                                (key as Monster).VisibleClientsNum++;
                            }
                        }
                        toAddObjsList.Add(key);
                    }
                }
                for (int i = 0; i < toRemoveObjsList.Count; i++)
                {
                    client.ClientData.VisibleGrid9Objects.Remove(toRemoveObjsList[i]);
                }
            }
            toAddObjsList = Global.ConvertObjsList(client.ClientData.MapCode, client.ClientData.CopyMapID, toAddObjsList, false);
        }

        
        public static int GetAll9ClientsNum(GameClient client)
        {
            int result;
            if (null == client)
            {
                result = 0;
            }
            else
            {
                List<object> objsList = new List<object>();
                lock (client.ClientData.VisibleGrid9Objects)
                {
                    List<object> keysList = client.ClientData.VisibleGrid9Objects.Keys.ToList<object>();
                    for (int i = 0; i < keysList.Count; i++)
                    {
                        object obj = keysList[i];
                        if (obj is GameClient)
                        {
                            objsList.Add(obj);
                        }
                    }
                }
                if (objsList.Count <= 0)
                {
                    result = 0;
                }
                else
                {
                    objsList = Global.ConvertObjsList(client.CurrentMapCode, client.CurrentCopyMapID, objsList, true);
                    result = ((objsList != null) ? objsList.Count : 0);
                }
            }
            return result;
        }

        
        public static List<object> GetAll9GridObjects(IObject obj)
        {
            List<object> result;
            if (null == obj)
            {
                result = null;
            }
            else
            {
                bool flag = 0 == 0;
                GameMap gameMap = GameManager.MapMgr.DictMaps[obj.CurrentMapCode];
                Point grid = obj.CurrentGrid;
                int posX = (int)(grid.X * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2));
                int posY = (int)(grid.Y * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
                List<object> list = Global.GetAll9GridObjects2(obj.CurrentMapCode, posX, posY, obj.CurrentCopyMapID);
                result = list;
            }
            return result;
        }

        
        public static List<object> GetAll9GridGameClient(IObject obj)
        {
            List<object> result;
            if (null == obj)
            {
                result = null;
            }
            else if (obj is GameClient)
            {
                result = Global.GetAll9GridGameClientForClient(obj as GameClient);
            }
            else
            {
                GameMap gameMap = GameManager.MapMgr.DictMaps[obj.CurrentMapCode];
                Point grid = obj.CurrentGrid;
                int posX = (int)(grid.X * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2));
                int posY = (int)(grid.Y * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
                List<object> list = Global.GetAll9GridGameClient(obj.CurrentMapCode, posX, posY, obj.CurrentCopyMapID);
                result = list;
            }
            return result;
        }

        
        public static List<object> GetAll9GridObjectsForClient(GameClient client)
        {
            List<object> objsList = new List<object>();
            lock (client.ClientData.VisibleGrid9Objects)
            {
                List<object> keysList = client.ClientData.VisibleGrid9Objects.Keys.ToList<object>();
                for (int i = 0; i < keysList.Count; i++)
                {
                    object obj = keysList[i];
                    objsList.Add(obj);
                }
            }
            if (objsList.Count <= 0)
            {
                objsList = null;
            }
            objsList = Global.ConvertObjsList(client.CurrentMapCode, client.CurrentCopyMapID, objsList, false);
            return objsList;
        }

        
        public static List<object> GetAll9GridGameClientForClient(GameClient client)
        {
            List<object> objsList = new List<object>();
            lock (client.ClientData.VisibleGrid9Objects)
            {
                List<object> keysList = client.ClientData.VisibleMeGrid9GameClients.Keys.ToList<object>();
                for (int i = 0; i < keysList.Count; i++)
                {
                    object obj = keysList[i];
                    objsList.Add(obj);
                }
            }
            if (objsList.Count <= 0)
            {
                objsList = null;
            }
            objsList = Global.ConvertObjsList(client.CurrentMapCode, client.CurrentCopyMapID, objsList, false);
            return objsList;
        }

        
        public static List<object> GetAll9GridObjects2(int mapCode, int toX, int toY, int copyMapID)
        {
            List<object> objsList = new List<object>();
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];
            int centerCridX = toX / mapGrid.MapGridWidth;
            int centerCridY = toY / mapGrid.MapGridHeight;
            int startGridX = 0;
            int startGridY = 0;
            int endGridX = 0;
            int endGridY = 0;
            Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);
            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
                {
                    List<object> tempObjsList = mapGrid.FindObjects(x, y);
                    if (null != tempObjsList)
                    {
                        int i = 0;
                        while (i < tempObjsList.Count)
                        {
                            if (tempObjsList[i] is NPC)
                            {
                                goto IL_B6;
                            }
                            if ((tempObjsList[i] as IObject).CurrentCopyMapID == copyMapID)
                            {
                                goto IL_B6;
                            }
                            IL_C7:
                            i++;
                            continue;
                            IL_B6:
                            objsList.Add(tempObjsList[i]);
                            goto IL_C7;
                        }
                    }
                }
            }
            if (objsList.Count <= 0)
            {
                objsList = null;
            }
            return Global.ConvertObjsList(mapCode, copyMapID, objsList, false);
        }

        
        public static List<object> GetAll9GridObjects2BeVisible(int mapCode, int toX, int toY, int copyMapID)
        {
            List<object> objsList = new List<object>();
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];
            int centerCridX = toX / mapGrid.MapGridWidth;
            int centerCridY = toY / mapGrid.MapGridHeight;
            int startGridX = 0;
            int startGridY = 0;
            int endGridX = 0;
            int endGridY = 0;
            Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);
            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
                {
                    List<object> tempObjsList = mapGrid.FindObjects(x, y);
                    if (null != tempObjsList)
                    {
                        int i = 0;
                        while (i < tempObjsList.Count)
                        {
                            if (tempObjsList[i] is NPC)
                            {
                                goto IL_B6;
                            }
                            if ((tempObjsList[i] as IObject).CurrentCopyMapID == copyMapID)
                            {
                                goto IL_B6;
                            }
                            IL_C7:
                            i++;
                            continue;
                            IL_B6:
                            objsList.Add(tempObjsList[i]);
                            goto IL_C7;
                        }
                    }
                }
            }
            if (objsList.Count <= 0)
            {
                objsList = null;
            }
            return Global.ConvertObjsList(mapCode, copyMapID, objsList, false);
        }

        
        public static List<object> GetAll9GridGameClient(int mapCode, int toX, int toY, int copyMapID)
        {
            List<object> objsList = new List<object>();
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];
            int centerCridX = toX / mapGrid.MapGridWidth;
            int centerCridY = toY / mapGrid.MapGridHeight;
            int i = 0;
            while (i < 504)
            {
                int x = centerCridX - (int)Global.ClientViewGridArray[i];
                int y = centerCridY - (int)Global.ClientViewGridArray[i + 1];
                if (x >= 0 && y >= 0 && x < mapGrid.MapGridXNum && y < mapGrid.MapGridYNum)
                {
                    List<object> tempObjsList = mapGrid.FindGameClient(x, y);
                    if (null != tempObjsList)
                    {
                        for (int j = 0; j < tempObjsList.Count; j++)
                        {
                            if (tempObjsList[j] is GameClient)
                            {
                                objsList.Add(tempObjsList[j]);
                            }
                        }
                    }
                }
                IL_E2:
                i += 2;
                continue;
                goto IL_E2;
            }
            if (objsList.Count <= 0)
            {
                objsList = null;
            }
            return Global.ConvertObjsList(mapCode, copyMapID, objsList, false);
        }

        
        public static List<object> GetAll9Clients(IObject obj)
        {
            return Global.GetAll9GridObjects(obj);
        }

        
        public static List<object> GetAll9Clients2(int mapCode, int toX, int toY, int copyMapID)
        {
            return Global.GetAll9GridObjects2(mapCode, toX, toY, copyMapID);
        }

        
        public static List<object> ConvertObjsList(int mapCode, int copyMapID, List<object> objsList, bool onlyGameClient = false)
        {
            List<object> result;
            if (copyMapID <= 0)
            {
                result = objsList;
            }
            else
            {
                MapTypes mapType = Global.GetMapType(mapCode);
                if (MapTypes.Normal == mapType)
                {
                    result = objsList;
                }
                else if (null == objsList)
                {
                    result = null;
                }
                else
                {
                    List<object> newObjsList = new List<object>();
                    for (int i = 0; i < objsList.Count; i++)
                    {
                        if (!onlyGameClient || objsList[i] is GameClient)
                        {
                            if (objsList[i] is IObject)
                            {
                                if (!(objsList[i] is NPC))
                                {
                                    if ((objsList[i] as IObject).CurrentCopyMapID != copyMapID)
                                    {
                                        goto IL_C8;
                                    }
                                }
                                newObjsList.Add(objsList[i]);
                            }
                        }
                        IL_C8:;
                    }
                    if (newObjsList.Count <= 0)
                    {
                        newObjsList = null;
                    }
                    result = newObjsList;
                }
            }
            return result;
        }

        
        public static List<GameClient> DistinctGameClientList(List<GameClient> objsList)
        {
            List<GameClient> result;
            if (null == objsList)
            {
                result = null;
            }
            else
            {
                HashSet<int> objHashSet = new HashSet<int>();
                List<GameClient> newObjsList = new List<GameClient>();
                for (int i = 0; i < objsList.Count; i++)
                {
                    GameClient client = objsList[i];
                    if (client != null && !objHashSet.Contains(client.ClientData.RoleID))
                    {
                        objHashSet.Add(client.ClientData.RoleID);
                        newObjsList.Add(client);
                    }
                }
                if (newObjsList.Count <= 0)
                {
                    newObjsList = null;
                }
                result = newObjsList;
            }
            return result;
        }

        
        public static List<object> FilterHideObjsList(List<object> objsList)
        {
            List<object> result;
            if (null == objsList)
            {
                result = objsList;
            }
            else
            {
                List<object> newObjsList = new List<object>();
                int i = 0;
                while (i < objsList.Count)
                {
                    if (!(objsList[i] is GameClient))
                    {
                        goto IL_7C;
                    }
                    if ((objsList[i] as GameClient).ClientData.HideSelf <= 0)
                    {
                        if ((objsList[i] as GameClient).ClientData.HideGM <= 0)
                        {
                            goto IL_7C;
                        }
                    }
                    IL_8B:
                    i++;
                    continue;
                    IL_7C:
                    newObjsList.Add(objsList[i]);
                    goto IL_8B;
                }
                result = newObjsList;
            }
            return result;
        }

        
        public static void GameClientMoveGrid(GameClient client)
        {
            if (!client.ClientData.WaitingForChangeMap)
            {
                List<object> toRemoveObjsList = null;
                List<object> toAddObjsList = null;
                Global.Get9GridObjects(client, out toRemoveObjsList, out toAddObjsList);
                if (toRemoveObjsList != null && toRemoveObjsList.Count > 0)
                {
                    Global.GameClientHandleOldObjs(client, toRemoveObjsList);
                }
                if (toAddObjsList != null && toAddObjsList.Count > 0)
                {
                    Global.GameClientHandleNewObjs(client, toAddObjsList);
                }
            }
        }

        
        public static void GameClientHandleNewObjs(GameClient client, List<object> objsList)
        {
            List<object> noHideSelfObjsList = Global.FilterHideObjsList(objsList);
            int sendRoleNum = GameManager.ClientMgr.NotifySelfOnlineOthers(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, noHideSelfObjsList, 110);
            int sendMonsterNum = GameManager.MonsterMgr.SendMonstersToClient(Global._TCPManager.MySocketListener, client, Global._TCPManager.TcpOutPacketPool, objsList, 122);
            GameManager.GoodsPackMgr.SendMySelfGoodsPackItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
            JunQiManager.SendMySelfJunQiItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
            NPCGeneralManager.SendMySelfNPCs(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
            DecorationManager.SendMySelfDecos(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
            FakeRoleManager.SendMySelfFakeRoleItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList, sendRoleNum + sendMonsterNum);
        }

        
        public static void GameClientHandleOldObjs(GameClient client, List<object> objsList)
        {
            GameManager.ClientMgr.NotifyMyselfLeaveOthers(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
            GameManager.ClientMgr.NotifyMyselfLeaveMonsters(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
            GameManager.GoodsPackMgr.DelMySelfGoodsPackItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
            NPCGeneralManager.DelMySelfNpcs(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
            DecorationManager.DelMySelfDecos(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
            JunQiManager.DelMySelfJunQiItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
            FakeRoleManager.DelMySelfFakeRoleItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
        }

        
        public static void HandleGameClientLoaded(GameClient client, GameClient otherClient)
        {
            GameManager.ClientMgr.NotifyMyselfOtherLoadAlready(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, otherClient.ClientData.RoleID, otherClient.ClientData.MapCode, Global.GetClientStartMoveTicks(otherClient), otherClient.ClientData.PosX, otherClient.ClientData.PosY, otherClient.ClientData.RoleDirection, otherClient.ClientData.CurrentAction, (int)otherClient.ClientData.DestPoint.X, (int)otherClient.ClientData.DestPoint.Y, otherClient.ClientData.MoveSpeed, 0, StoryBoard4Client.GetStoryBoardPathIndex(otherClient.ClientData.RoleID));
            GameManager.ClientMgr.NotifyMySelfOnlineOtherPet(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, otherClient);
            GameManager.ClientMgr.NotifySelfOtherHorse(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, otherClient);
        }

        
        public static void HandleMonsterLoaded(GameClient client, Monster monster)
        {
            GameManager.ClientMgr.NotifyMyselfMonsterLoadAlready(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, monster.RoleID, monster.MonsterZoneNode.MapCode, Global.GetMonsterStartMoveTicks(monster), (int)monster.SafeCoordinate.X, (int)monster.SafeCoordinate.Y, (int)monster.SafeDirection, (int)monster.SafeAction, (int)monster.DestPoint.X, (int)monster.DestPoint.Y, monster.MoveSpeed, 0, "", 0);
        }

        
        public static bool JugePointAtClientGrids(GameClient client, Monster monster, Point pos)
        {
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode];
            int gridX = (int)pos.X / mapGrid.MapGridWidth;
            int gridY = (int)pos.Y / mapGrid.MapGridHeight;
            int startGridX = 0;
            int startGridY = 0;
            int endGridX = 0;
            int endGridY = 0;
            Point grid = client.CurrentGrid;
            int currentGridX = (int)grid.X;
            int currentGridY = (int)grid.Y;
            Global.GetCurrent9Grid(mapGrid, currentGridX, currentGridY, out startGridX, out startGridY, out endGridX, out endGridY);
            return gridX >= startGridX && gridX <= endGridX && gridY >= startGridY && gridY <= endGridY;
        }

        
        public static bool CanMonsterRandomMove(Monster monster)
        {
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[monster.MonsterZoneNode.MapCode];
            int centerCridX = (int)(monster.SafeCoordinate.X / (double)mapGrid.MapGridWidth);
            int centerCridY = (int)(monster.SafeCoordinate.Y / (double)mapGrid.MapGridHeight);
            int startGridX = 0;
            int startGridY = 0;
            int endGridX = 0;
            int endGridY = 0;
            Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);
            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
                {
                    if (mapGrid.GetRoleNum(x, y) > 0)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        
        public static FuBenData GetFuBenData(GameClient client, int fuBenID)
        {
            FuBenData result;
            if (null == client.ClientData.FuBenDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.FuBenDataList)
                {
                    for (int i = 0; i < client.ClientData.FuBenDataList.Count; i++)
                    {
                        if (client.ClientData.FuBenDataList[i].FuBenID == fuBenID)
                        {
                            return client.ClientData.FuBenDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static FuBenData AddFuBenData(GameClient client, int fuBenID, int dayID, int enterNum, int nQuickPassTime, int nFinishNum)
        {
            if (null == client.ClientData.FuBenDataList)
            {
                client.ClientData.FuBenDataList = new List<FuBenData>();
            }
            FuBenData fuBenData = new FuBenData
            {
                FuBenID = fuBenID,
                DayID = dayID,
                EnterNum = enterNum,
                QuickPassTimer = nQuickPassTime,
                FinishNum = nFinishNum
            };
            lock (client.ClientData.FuBenDataList)
            {
                client.ClientData.FuBenDataList.Add(fuBenData);
            }
            return fuBenData;
        }

        
        public static int GetFuBenEnterNum(FuBenData fuBenData, out int nFinishNum)
        {
            nFinishNum = 0;
            int result;
            if (null == fuBenData)
            {
                result = 0;
            }
            else
            {
                int dayID = TimeUtil.NowDateTime().DayOfYear;
                if (fuBenData.DayID == dayID)
                {
                    nFinishNum = fuBenData.FinishNum;
                    result = fuBenData.EnterNum;
                }
                else
                {
                    result = 0;
                }
            }
            return result;
        }

        
        public static int GetFuBenCopyType(int fuBenID)
        {
            SystemXmlItem systemFuBenItem = null;
            int result;
            if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
            {
                result = -1;
            }
            else
            {
                result = systemFuBenItem.GetIntValue("CopyType", -1);
            }
            return result;
        }

        
        public static void UpdateFuBenData(GameClient client, int fuBenID, int addDayNum = 1, int addFinishNum = 0)
        {
            FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (null == fuBenData)
            {
                fuBenData = Global.AddFuBenData(client, fuBenID, dayID, addDayNum, 0, 0);
            }
            else if (fuBenData.DayID == dayID)
            {
                fuBenData.EnterNum += addDayNum;
                fuBenData.FinishNum += addFinishNum;
            }
            else
            {
                fuBenData.DayID = dayID;
                fuBenData.EnterNum = addDayNum;
                fuBenData.FinishNum = addFinishNum;
            }
            if (fuBenData.EnterNum != 0 || fuBenData.FinishNum != 0)
            {
                GameManager.DBCmdMgr.AddDBCmd(10048, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
                {
                    client.ClientData.RoleID,
                    fuBenData.FuBenID,
                    fuBenData.DayID,
                    fuBenData.EnterNum,
                    fuBenData.QuickPassTimer,
                    fuBenData.FinishNum
                }), null, client.ServerId);
            }
            GameManager.ClientMgr.NotifyFuBenData(client, fuBenData);
        }

        
        public static void UpdateFuBenDataForQuickPassTimer(GameClient client, int fuBenID, int nSec, int addNum)
        {
            FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (null == fuBenData)
            {
                fuBenData = Global.AddFuBenData(client, fuBenID, dayID, addNum, nSec, 0);
            }
            if (nSec > 0)
            {
                if (fuBenData.QuickPassTimer <= 0 || nSec < fuBenData.QuickPassTimer)
                {
                    fuBenData.QuickPassTimer = nSec;
                }
            }
            Global.UpdateFuBenData(client, fuBenID, 0, addNum);
            JunTuanManager.getInstance().AddJunTuanTaskValue(client, 5, addNum);
            ProcessTask.ProcessAddTaskVal(client, TaskTypes.CompleteFuBen, fuBenID, addNum, new object[0]);
        }

        
        public static bool FuBenPassed(GameClient client, int fuBenID)
        {
            FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
            return null != fuBenData && fuBenData.QuickPassTimer > 0;
        }

        
        public static FuBenTongGuanData GiveCopyMapGiftForScore(GameClient client, int fuBenID, int MapCode, int nMaxTime, int nFinishTimer, int killedNormalNum, int nDieCount, int nExp, int nMoney, FuBenMapItem fuBenMapItem, string strName = null)
        {
            FuBenTongGuanData fuBenTongGuanData = new FuBenTongGuanData();
            List<int> goodsID = new List<int>();
            List<CopyScoreDataInfo> tmpCopyScore = null;
            FuBenTongGuanData result;
            if (!Data.CopyScoreDataInfoList.TryGetValue(fuBenID, out tmpCopyScore))
            {
                result = null;
            }
            else if (tmpCopyScore == null)
            {
                result = null;
            }
            else
            {
                SystemXmlItem systemFuBenItem = null;
                if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
                {
                    result = null;
                }
                else
                {
                    double dExpModulus = 1.0;
                    double dMoneyModulus = 1.0;
                    int nScore0 = (nMaxTime - nFinishTimer) * 20;
                    int nScore = 2000 - Global.GMin(10, nDieCount) * 200;
                    int nScore2 = killedNormalNum * 100;
                    int nScore3 = nScore0 + nScore + nScore2;
                    fuBenTongGuanData.FuBenID = fuBenID;
                    fuBenTongGuanData.TotalScore = nScore3;
                    fuBenTongGuanData.KillNum = killedNormalNum;
                    fuBenTongGuanData.KillScore = nScore2;
                    fuBenTongGuanData.MaxKillScore = nScore2;
                    fuBenTongGuanData.UsedSecs = nFinishTimer;
                    fuBenTongGuanData.TimeScore = nScore0;
                    fuBenTongGuanData.MaxTimeScore = nMaxTime * 20;
                    fuBenTongGuanData.DieCount = nDieCount;
                    fuBenTongGuanData.DieScore = nScore;
                    fuBenTongGuanData.MaxDieScore = 2000;
                    fuBenTongGuanData.GoodsIDList = goodsID;
                    fuBenTongGuanData.MapCode = MapCode;
                    fuBenTongGuanData.AwardRate = 1.0;
                    int copyType = systemFuBenItem.GetIntValue("CopyType", -1);
                    if (1 == copyType)
                    {
                        fuBenTongGuanData.AwardRate = 0.0;
                        JieRiMultAwardActivity activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
                        if (null != activity)
                        {
                            JieRiMultConfig config = activity.GetConfig(5);
                            if (null != config)
                            {
                                fuBenTongGuanData.AwardRate += config.GetMult();
                            }
                        }
                        SpecPriorityActivity spAct = HuodongCachingMgr.GetSpecPriorityActivity();
                        if (null != spAct)
                        {
                            fuBenTongGuanData.AwardRate += spAct.GetMult(SpecPActivityBuffType.SPABT_TeamCopy);
                        }
                        fuBenTongGuanData.AwardRate = Math.Max(1.0, fuBenTongGuanData.AwardRate);
                    }
                    if (LuoLanFaZhenCopySceneManager.IsLuoLanFaZhen(fuBenID))
                    {
                        fuBenTongGuanData.AwardRate *= (double)LuoLanFaZhenCopySceneManager.getAwardRate(fuBenID, client.ClientData.FuBenSeqID);
                    }
                    else if (fuBenID == 70000)
                    {
                        fuBenTongGuanData.AwardRate *= SingletonTemplate<MoRiJudgeManager>.Instance().GetCopyAwardRate(client.ClientData.FuBenSeqID);
                    }
                    fuBenTongGuanData.TreasureEventID = OnePieceManager.getInstance().GiveCopyMapGift(client, fuBenID);
                    for (int i = 0; i < tmpCopyScore.Count; i++)
                    {
                        int nMax = tmpCopyScore[i].MaxScore;
                        int nMin = tmpCopyScore[i].MinScore;
                        if (nMin <= nScore3 && nScore3 <= nMax)
                        {
                            dExpModulus = tmpCopyScore[i].ExpModulus;
                            dMoneyModulus = tmpCopyScore[i].MoneyModulus;
                            List<GoodsData> goodsDataList = null;
                            if (tmpCopyScore[i].AwardType == 1)
                            {
                                int awardMoJing = Global.GetRandomNumber(tmpCopyScore[i].MinMoJing, tmpCopyScore[i].MaxMoJing + 1);
                                client.ClientData.FuBenPingFenAwardMoJing = awardMoJing;
                                fuBenTongGuanData.AwardMoJing = awardMoJing;
                            }
                            else if (tmpCopyScore[i].AwardType == 2)
                            {
                                int FallPacketID = tmpCopyScore[i].FallPacketID;
                                goodsDataList = GoodsBaoXiang.FetchGoodListBaseFallPacketID(client, FallPacketID, 1, FallAlgorithm.BaoXiang);
                            }
                            if (null != fuBenMapItem.GoodsDataList)
                            {
                                List<GoodsData> goodNormal = new List<GoodsData>(fuBenMapItem.GoodsDataList);
                                if (!Global.CanAddGoodsNum(client, goodNormal.Count))
                                {
                                    foreach (GoodsData item in goodNormal)
                                    {
                                        Global.UseMailGivePlayerAward(client, item, GLang.GetLang(162, new object[0]), GLang.GetLang(162, new object[0]), fuBenTongGuanData.AwardRate);
                                    }
                                }
                                else
                                {
                                    foreach (GoodsData item in goodNormal)
                                    {
                                        GoodsData goodsData = new GoodsData
                                        {
                                            Id = -1,
                                            GoodsID = item.GoodsID,
                                            Using = 0,
                                            Forge_level = item.Forge_level,
                                            Starttime = "1900-01-01 12:00:00",
                                            Endtime = "1900-01-01 12:00:00",
                                            Site = 0,
                                            Quality = item.Quality,
                                            Props = item.Props,
                                            GCount = item.GCount,
                                            Binding = item.Binding,
                                            Jewellist = item.Jewellist,
                                            BagIndex = 0,
                                            AddPropIndex = item.AddPropIndex,
                                            BornIndex = item.BornIndex,
                                            Lucky = item.Lucky,
                                            Strong = item.Strong,
                                            ExcellenceInfo = item.ExcellenceInfo,
                                            AppendPropLev = item.AppendPropLev,
                                            ChangeLifeLevForEquip = item.ChangeLifeLevForEquip,
                                            JuHunID = item.JuHunID
                                        };
                                        goodsData.GCount = (int)((double)goodsData.GCount * fuBenTongGuanData.AwardRate);
                                        goodsData.Id = Global.AddGoodsDBCommand_Hook(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, 0, goodsData.Jewellist, true, 1, "副本通关获取物品", true, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip, true, null, null, "1900-01-01 12:00:00", 0, true);
                                    }
                                }
                            }
                            if (null != goodsDataList)
                            {
                                goodsID.Add(goodsDataList[0].GoodsID);
                                client.ClientData.CopyMapAwardTmpGoods = goodsDataList[0];
                            }
                            nExp = (int)Math.Round((double)nExp * dExpModulus);
                            nMoney = (int)Math.Round((double)nMoney * dMoneyModulus);
                            fuBenTongGuanData.AwardExp = nExp;
                            fuBenTongGuanData.AwardJinBi = nMoney;
                            nExp = (int)((double)nExp * fuBenTongGuanData.AwardRate);
                            nMoney = (int)((double)nMoney * fuBenTongGuanData.AwardRate);
                            fuBenTongGuanData.AwardZhanGong = GameManager.GuildCopyMapMgr.GetZhanGongAward(client, fuBenID, fuBenMapItem.nZhanGongaward);
                            if (fuBenTongGuanData.AwardZhanGong > 0)
                            {
                                if (GameManager.ClientMgr.AddBangGong(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, ref fuBenTongGuanData.AwardZhanGong, AddBangGongTypes.BGBOSS, 0))
                                {
                                    if (0 != fuBenTongGuanData.AwardZhanGong)
                                    {
                                        GameManager.logDBCmdMgr.AddDBLogInfo(-1, "战功", "给玩家副本的奖励", "系统", client.ClientData.RoleName, "增加", fuBenTongGuanData.AwardZhanGong, client.ClientData.ZoneID, client.strUserID, client.ClientData.BangGong, client.ServerId, null);
                                    }
                                }
                                GameManager.SystemServerEvents.AddEvent(string.Format("角色获取帮贡, roleID={0}({1}), BangGong={2}, newBangGong={3}", new object[]
                                {
                                    client.ClientData.RoleID,
                                    client.ClientData.RoleName,
                                    client.ClientData.BangGong,
                                    fuBenTongGuanData.AwardZhanGong
                                }), EventLevels.Record);
                            }
                            else if (fuBenTongGuanData.AwardZhanGong < 0)
                            {
                                fuBenTongGuanData.AwardZhanGong = 0;
                                fuBenTongGuanData.AwardExp = 0;
                                fuBenTongGuanData.AwardJinBi = 0;
                                nExp = 0;
                                nMoney = 0;
                            }
                            GameManager.ClientMgr.ProcessRoleExperience(client, (long)nExp, true, true, false, "none");
                            GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nMoney, "副本" + fuBenID + "通关奖励", false);
                            if (fuBenMapItem.YuanSuFenMoaward > 0)
                            {
                                int YuanSuFenMoaward = (int)((double)fuBenMapItem.YuanSuFenMoaward * fuBenTongGuanData.AwardRate);
                                if (YuanSuFenMoaward > 0)
                                {
                                    GameManager.ClientMgr.ModifyYuanSuFenMoValue(client, YuanSuFenMoaward, "副本通关获得元素粉末", true, false);
                                }
                            }
                            if (fuBenMapItem.LightAward > 0)
                            {
                                int lightAward = (int)((double)fuBenMapItem.LightAward * fuBenTongGuanData.AwardRate);
                                if (lightAward > 0)
                                {
                                    GameManager.FluorescentGemMgr.AddFluorescentPoint(client, lightAward, "副本通关获得荧光粉末", true);
                                }
                            }
                            break;
                        }
                    }
                    GameManager.CopyMapMgr.AddAwardState(client.ClientData.RoleID, client.ClientData.FuBenSeqID, client.ClientData.MapCode, 1);
                    result = fuBenTongGuanData;
                }
            }
            return result;
        }

        
        public static void ProcessUpdateFuBenData(GameClient client)
        {
            if (null != client.ClientData.FuBenDataList)
            {
                lock (client.ClientData.OldFuBenDataList)
                {
                    client.ClientData.OldFuBenDataList.Clear();
                    foreach (FuBenData item in client.ClientData.FuBenDataList)
                    {
                        if (item != null)
                        {
                            FuBenData info = new FuBenData
                            {
                                DayID = item.DayID,
                                EnterNum = item.EnterNum,
                                FinishNum = item.FinishNum,
                                FuBenID = item.FuBenID
                            };
                            client.ClientData.OldFuBenDataList.Add(info);
                        }
                    }
                }
                lock (client.ClientData.FuBenDataList)
                {
                    for (int i = 0; i < client.ClientData.FuBenDataList.Count; i++)
                    {
                        Global.UpdateFuBenData(client, client.ClientData.FuBenDataList[i].FuBenID, 0, 0);
                    }
                }
            }
        }

        
        public static void ProcessGoToNextFuBenMap(GameClient client)
        {
            if (Global.GetLeftMonsterByCopyMapID(client.ClientData.CopyMapID) > 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(165, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
            }
            else
            {
                int toMapCode = FuBenManager.FindNextMapCodeByFuBenID(client.ClientData.MapCode);
                if (toMapCode < 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(166, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else
                {
                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
                }
            }
        }

        
        public static bool ProcessFuBenMapGetAward(GameClient client, bool notifyClient = false)
        {
            bool result;
            if (Global.GetLeftMonsterByCopyMapID(client.ClientData.CopyMapID) > 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(167, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                result = false;
            }
            else
            {
                result = FuBenManager.ProcessFuBenMapAwards(client, notifyClient);
            }
            return result;
        }

        
        public static int GetLeftMonsterByCopyMapID(int copyMapID)
        {
            CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(copyMapID);
            int result;
            if (null == copyMap)
            {
                result = 0;
            }
            else
            {
                int totalAliveCount = 0;
                if (copyMap.KilledNormalNum <= 0 && copyMap.KilledBossNum <= 0)
                {
                    totalAliveCount += copyMap.TotalNormalNum - copyMap.KilledNormalNum;
                    totalAliveCount += copyMap.TotalBossNum - copyMap.KilledBossNum;
                    result = totalAliveCount;
                }
                else
                {
                    int aliveMonsterCount = GameManager.MonsterMgr.GetCopyMapIDMonstersCount(copyMapID, 0);
                    result = aliveMonsterCount;
                }
            }
            return result;
        }

        
        public static int GetKilledMonsterNumByCopyMapID(int copyMapID, MonsterTypes monsterType)
        {
            CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(copyMapID);
            int result;
            if (null == copyMap)
            {
                result = 0;
            }
            else if (MonsterTypes.Noraml == monsterType)
            {
                result = copyMap.KilledNormalNum;
            }
            else
            {
                result = copyMap.KilledBossNum;
            }
            return result;
        }

        
        public static int GetTotalMonsterNumByCopyMapID(int copyMapID, MonsterTypes monsterType)
        {
            CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(copyMapID);
            int result;
            if (null == copyMap)
            {
                result = 0;
            }
            else if (MonsterTypes.Noraml == monsterType)
            {
                result = copyMap.TotalNormalNum;
            }
            else
            {
                result = copyMap.TotalBossNum;
            }
            return result;
        }

        
        public static string GetFuBenName(int fuBenID)
        {
            SystemXmlItem systemFuBenItem = null;
            string result;
            if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
            {
                result = "";
            }
            else
            {
                string copyName = systemFuBenItem.GetStringValue("CopyName");
                if (string.IsNullOrEmpty(copyName))
                {
                    result = copyName;
                }
                else
                {
                    copyName = copyName.Replace("【", "『");
                    copyName = copyName.Replace("】", "』");
                    string[] fields = copyName.Split(new char[]
                    {
                        '|'
                    });
                    if (fields.Length <= 1)
                    {
                        result = copyName;
                    }
                    else
                    {
                        result = fields[0];
                    }
                }
            }
            return result;
        }

        
        public static SystemXmlItem FindShiLianTaFuBenIDByLevel(GameClient client, out int myMinLevel)
        {
            myMinLevel = 1000000;
            int[] jingYanTaFuBenIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("JingYanTaFuBenIDs", ',');
            SystemXmlItem result;
            if (jingYanTaFuBenIDs == null || jingYanTaFuBenIDs.Length <= 0)
            {
                result = null;
            }
            else
            {
                SystemXmlItem systemFuBenItem = null;
                for (int i = 0; i < jingYanTaFuBenIDs.Length; i++)
                {
                    if (GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(jingYanTaFuBenIDs[i], out systemFuBenItem))
                    {
                        int minLevel = systemFuBenItem.GetIntValue("MinLevel", -1);
                        int maxLevel = systemFuBenItem.GetIntValue("MaxLevel", -1);
                        if (maxLevel <= 0)
                        {
                            maxLevel = 1000;
                        }
                        if (myMinLevel > minLevel)
                        {
                            myMinLevel = minLevel;
                        }
                        if (client.ClientData.Level >= minLevel && client.ClientData.Level <= maxLevel)
                        {
                            return systemFuBenItem;
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static SystemXmlItem FindShiLianTaFuBenItemByMapCode(GameClient client)
        {
            int fuBenID = FuBenManager.FindFuBenIDByMapCode(client.ClientData.MapCode);
            SystemXmlItem result;
            if (fuBenID <= 0)
            {
                result = null;
            }
            else
            {
                int[] jingYanTaFuBenIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("JingYanTaFuBenIDs", ',');
                if (jingYanTaFuBenIDs == null || jingYanTaFuBenIDs.Length <= 0)
                {
                    result = null;
                }
                else
                {
                    SystemXmlItem systemFuBenItem = null;
                    for (int i = 0; i < jingYanTaFuBenIDs.Length; i++)
                    {
                        if (GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(jingYanTaFuBenIDs[i], out systemFuBenItem))
                        {
                            int tmpFuBenID = systemFuBenItem.GetIntValue("ID", -1);
                            if (tmpFuBenID == fuBenID)
                            {
                                return systemFuBenItem;
                            }
                        }
                    }
                    result = null;
                }
            }
            return result;
        }

        
        public static void ProcessLimitFuBenMapNotifyMsg(GameClient client)
        {
            int fuBenID = FuBenManager.FindFuBenIDByMapCode(client.ClientData.MapCode);
            if (fuBenID >= 0)
            {
                FuBenMapItem fuBenMapItem = FuBenManager.FindMapCodeByFuBenID(fuBenID, client.ClientData.MapCode);
                if (null != fuBenMapItem)
                {
                    int minutes = fuBenMapItem.MaxTime;
                    string msgText = string.Format(GLang.GetLang(168, new object[0]), minutes);
                    if (client.ClientData.MapCode != JingJiChangManager.getInstance().getJingJiMapCode() && !Global.IsBloodCastleSceneID(client.ClientData.MapCode) && !Global.IsDaimonSquareSceneID(client.ClientData.MapCode) && !LuoLanFaZhenCopySceneManager.IsLuoLanFaZhenMap(client.ClientData.MapCode))
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, msgText, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
                    }
                    int experience = fuBenMapItem.Experience;
                    if (experience > 0)
                    {
                    }
                }
            }
        }

        
        public static void ProcessAutoGetFuBenExpAndMoneyAwards(GameClient client)
        {
            if (null == Global.FindShiLianTaFuBenItemByMapCode(client))
            {
                if (FuBenManager.CanAutoGetFuBenMapAwards(client))
                {
                    Global.ProcessFuBenMapGetAward(client, true);
                }
            }
        }

        
        public static bool CanReEnterCopyMap(int mapCode, int fuBenSeqID)
        {
            CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(mapCode, fuBenSeqID);
            bool result;
            if (null == copyMap)
            {
                result = false;
            }
            else
            {
                long nowTicks = TimeUtil.NOW();
                result = (nowTicks - copyMap.GetLastLeaveClientTicks() < 300000L);
            }
            return result;
        }

        
        public static void InitCopyMap(GameClient client)
        {
            SceneUIClasses sceneType = Global.GetMapSceneType(client.ClientData.MapCode);
            client.SceneType = (int)sceneType;
            if (client.CheckCheatData.GmGotoShadowMapCode == client.ClientData.MapCode)
            {
                client.CheckCheatData.GmGotoShadowMapCode = 0;
            }
            else
            {
                MapTypes mapType = Global.GetMapType(client.ClientData.MapCode);
                if (MapTypes.Normal == mapType)
                {
                    client.ClientData.CopyMapID = -1;
                }
                else
                {
                    CopyMap copyMap = GameManager.CopyMapMgr.GetCopyMap(client, mapType);
                    if (null == copyMap)
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("切换地图时创建副本对象失败, RoleID={0}, MapCode={1}", client.ClientData.RoleID, client.ClientData.MapCode), null, true);
                    }
                    else
                    {
                        client.ClientData.CopyMapID = copyMap.CopyMapID;
                        client.ClientData.FuBenID = copyMap.FubenMapID;
                    }
                }
            }
        }

        
        public static void ClearCopyMap(GameClient client, bool bLogout = false)
        {
            if (client.ClientData.CopyMapID > 0)
            {
                CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(client.ClientData.CopyMapID);
                if (null != copyMap)
                {
                    if (copyMap.GetGameClientCount() > 1)
                    {
                        GameManager.ClientMgr.NotifyAllFuBenMonstersNum(copyMap, false);
                    }
                    copyMap.RemoveGameClient(client);
                    if (!bLogout)
                    {
                        client.ClientData.CopyMapID = -1;
                        SceneUIClasses sceneType = Global.GetMapSceneType(copyMap.MapCode);
                        if (SceneUIClasses.NormalCopy == sceneType || SceneUIClasses.TaskCopy == sceneType)
                        {
                            copyMap.bNeedRemove = true;
                        }
                    }
                }
            }
        }

        
        public static bool CanRecordPos(GameClient client)
        {
            SceneUIClasses sceneType = Global.GetMapSceneType(client.ClientData.MapCode);
            SceneUIClasses sceneUIClasses = sceneType;
            bool result;
            switch (sceneUIClasses)
            {
                case SceneUIClasses.BloodCastle:
                case SceneUIClasses.Demon:
                    result = true;
                    break;
                default:
                    if (sceneUIClasses != SceneUIClasses.YaoSaiWorld)
                    {
                        switch (Global.GetMapType(client.ClientData.MapCode))
                        {
                            case MapTypes.Normal:
                            case MapTypes.NormalCopy:
                            case MapTypes.CaiShenMiaoCopy:
                            case MapTypes.TaskCopy:
                            case MapTypes.HuanYingSiYuan:
                            case MapTypes.MarriageCopy:
                                return true;
                        }
                        result = false;
                    }
                    else
                    {
                        result = false;
                    }
                    break;
            }
            return result;
        }

        
        public static bool MapExists(int mapCode)
        {
            return mapCode >= 0 && GameManager.MapMgr.DictMaps.ContainsKey(mapCode);
        }

        
        public static bool CanChangeMap(GameClient client, int mapCode, int posX, int posY, bool normalMapOlny = true)
        {
            bool result;
            if ((normalMapOlny && Global.GetMapType(mapCode) != MapTypes.Normal) || SceneUIClasses.Normal != Global.GetMapSceneType(mapCode))
            {
                result = false;
            }
            else if (!Global.CanChangeMapCode(client, mapCode))
            {
                result = false;
            }
            else
            {
                GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);
                result = (null != gameMap && (posX >= 0 && posX < gameMap.MapWidth && posY >= 0) && posY < gameMap.MapHeight);
            }
            return result;
        }

        
        public static MapTypes GetMapType(int mapCode)
        {
            MapTypes result;
            if (mapCode < 0)
            {
                result = MapTypes.Normal;
            }
            else
            {
                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
                {
                    result = MapTypes.Normal;
                }
                else if (gameMap.IsolatedMap < 0 || gameMap.IsolatedMap >= 9)
                {
                    result = MapTypes.Normal;
                }
                else
                {
                    result = (MapTypes)gameMap.IsolatedMap;
                }
            }
            return result;
        }

        
        public static bool CanChangeMapCode(GameClient client, int toMapCode)
        {
            SceneUIClasses sceneType = Global.GetMapSceneType(toMapCode);
            if (sceneType == SceneUIClasses.ShuiJingHuanJing)
            {
                if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.CrystalCollect, false))
                {
                    return false;
                }
            }
            MapTypes mapType = Global.GetMapType(toMapCode);
            bool result;
            if (MapTypes.Normal == mapType)
            {
                result = true;
            }
            else
            {
                if (MapTypes.NormalCopy == mapType)
                {
                    if (client.ClientData.FuBenSeqID <= 0)
                    {
                        return false;
                    }
                }
                else if (MapTypes.DianJiangCopy == mapType)
                {
                    if (client.ClientData.FuBenSeqID <= 0)
                    {
                        return false;
                    }
                }
                else if (MapTypes.CaiShenMiaoCopy == mapType)
                {
                    if (client.ClientData.FuBenSeqID <= 0)
                    {
                        return false;
                    }
                }
                else if (MapTypes.TaskCopy == mapType)
                {
                    if (client.ClientData.FuBenSeqID <= 0)
                    {
                        return false;
                    }
                }
                else if (MapTypes.MarriageCopy == mapType)
                {
                    if (client.ClientData.FuBenSeqID <= 0)
                    {
                        return false;
                    }
                }
                result = true;
            }
            return result;
        }

        
        public static bool CanEnterMap(GameClient client, int toMapCode)
        {
            GameMap toGameMap;
            bool result;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out toGameMap))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("ProcessSpriteGoToMapCmd mapCode Error, mapCode={0}", toMapCode), null, true);
                result = false;
            }
            else
            {
                result = (Global.GetUnionLevel(client, false) >= Global.GetUnionLevel(toGameMap.MinZhuanSheng, toGameMap.MinLevel, false));
            }
            return result;
        }

        
        public static bool GotoMap(GameClient client, int toMapCode)
        {
            TCPManager tcpMgr = TCPManager.getInstance();
            TCPOutPacketPool pool = TCPOutPacketPool.getInstance();
            bool result;
            if (!GameManager.MapMgr.DictMaps.ContainsKey(toMapCode))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("ProcessSpriteGoToMapCmd mapCode Error, mapCode={0}", toMapCode), null, true);
                result = false;
            }
            else
            {
                if (DBRoleBufferManager.ProcessMonthVIP(client) <= 0.0)
                {
                    int needMoney = Global.GetMapTransNeedMoney(toMapCode);
                    if (!Global.SubBindTongQianAndTongQian(client, needMoney, "地图传送"))
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(171, new object[0]), new object[]
                        {
                            needMoney,
                            Global.GetMapName(toMapCode)
                        }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 27);
                        return false;
                    }
                    if (needMoney > 0)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(GLang.GetLang(172, new object[0]), new object[]
                        {
                            needMoney,
                            Global.GetMapName(toMapCode)
                        }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    }
                }
                if (client.ClientSocket.IsKuaFuLogin)
                {
                    Global.ModifyMapRecordData(client, (ushort)toMapCode, 0, 0, 0);
                    KuaFuManager.getInstance().GotoLastMap(client);
                    result = true;
                }
                else if (KuaFuManager.getInstance().IsKuaFuMap(toMapCode))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("GotoMap denied, mapCode={0},IsKuaFuLogin={1}", toMapCode, client.ClientSocket.IsKuaFuLogin), null, true);
                    result = false;
                }
                else
                {
                    GameMap gameMap = null;
                    if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                    {
                        int toMapX = -1;
                        int toMapY = -1;
                        int toDirection = Global.GetRandomNumber(0, 8);
                        GameManager.ClientMgr.NotifyChangeMap(tcpMgr.MySocketListener, pool, client, toMapCode, toMapX, toMapY, toDirection, 0);
                    }
                    result = true;
                }
            }
            return result;
        }

        
        public static bool GotoLastMap(GameClient client, int relife = 1)
        {
            bool result;
            if (null == client)
            {
                result = false;
            }
            else
            {
                int toMapCode = GameManager.MainMapCode;
                int toPosX = -1;
                int toPosY = -1;
                if (client.ClientData.LastMapCode != -1 && client.ClientData.LastPosX != -1 && client.ClientData.LastPosY != -1 && SceneUIClasses.Normal == Global.GetMapSceneType(client.ClientData.LastMapCode))
                {
                    if (MapTypes.Normal == Global.GetMapType(client.ClientData.LastMapCode))
                    {
                        if (GameManager.BattleMgr.BattleMapCode != client.ClientData.LastMapCode && GameManager.ArenaBattleMgr.BattleMapCode != client.ClientData.LastMapCode)
                        {
                            toMapCode = client.ClientData.LastMapCode;
                            toPosX = client.ClientData.LastPosX;
                            toPosY = client.ClientData.LastPosY;
                        }
                    }
                }
                GameMap gameMap = null;
                result = (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap) && GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, toPosX, toPosY, relife, 0));
            }
            return result;
        }

        
        public static int GetMapPicCodeByCode(int mapCode)
        {
            int result;
            if (null == Global.XmlInfo["ConfigSettings"])
            {
                result = mapCode;
            }
            else
            {
                XElement xmlItem = null;
                try
                {
                    xmlItem = Global.GetXElement(Global.XmlInfo["ConfigSettings"], "Map", "Code", mapCode.ToString());
                }
                catch (Exception ex)
                {
                    throw new Exception(string.Format("{0} MapCode={1}", ex.Message.ToString(), mapCode));
                }
                if (null == xmlItem)
                {
                    result = mapCode;
                }
                else
                {
                    result = (int)Global.GetSafeAttributeLong(xmlItem, "PicCode");
                }
            }
            return result;
        }

        
        public static bool CanMapLostEquip(int mapCode)
        {
            int disableDropDown = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-drop-down", 0);
            bool result;
            if (disableDropDown > 0)
            {
                result = false;
            }
            else
            {
                GameMap gameMap = null;
                result = (GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap) && gameMap.NotLostEquip <= 0);
            }
            return result;
        }

        
        public static string GetMapName(int mapCode)
        {
            string mapName = "";
            string result;
            if (!Data.MapNamesDict.TryGetValue(mapCode, out mapName))
            {
                result = "";
            }
            else
            {
                result = mapName;
            }
            return result;
        }

        
        public static bool CanMapInLimitTimes(int mapCode, DateTime dateTime)
        {
            GameMap gameMap = null;
            bool result;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                result = true;
            }
            else if (gameMap.LimitTimes == null || gameMap.LimitTimes.Length <= 0)
            {
                result = true;
            }
            else
            {
                int endMinute = 0;
                result = Global.JugeDateTimeInTimeRange(dateTime, gameMap.LimitTimes, out endMinute, true);
            }
            return result;
        }

        
        public static bool CanMapUseGoods(int mapCode, int goodsID)
        {
            GameMap gameMap = null;
            bool result;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                result = true;
            }
            else if (gameMap.LimitGoodsIDs == null || gameMap.LimitGoodsIDs.Length <= 0)
            {
                result = true;
            }
            else
            {
                for (int i = 0; i < gameMap.LimitGoodsIDs.Length; i++)
                {
                    if (goodsID == gameMap.LimitGoodsIDs[i])
                    {
                        return false;
                    }
                }
                result = true;
            }
            return result;
        }

        
        public static bool CanMapUseBuffer(int mapCode, int bufferID)
        {
            bool result;
            switch (bufferID)
            {
                case 85:
                case 86:
                    result = Global.IsGuWuMap(mapCode);
                    break;
                default:
                    {
                        GameMap gameMap = null;
                        if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
                        {
                            result = true;
                        }
                        else if (gameMap.LimitBufferIDs == null || gameMap.LimitBufferIDs.Length <= 0)
                        {
                            result = true;
                        }
                        else
                        {
                            for (int i = 0; i < gameMap.LimitBufferIDs.Length; i++)
                            {
                                if (bufferID == gameMap.LimitBufferIDs[i])
                                {
                                    return false;
                                }
                            }
                            result = true;
                        }
                        break;
                    }
            }
            return result;
        }

        
        public static bool CanMapAutoFight(int mapCode)
        {
            GameMap gameMap = null;
            return !GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap) || gameMap.LimitAuotFight >= 1;
        }

        
        public static bool CanMapUseMagic(GameClient client, int magicCode)
        {
            bool result;
            if (null == client)
            {
                result = false;
            }
            else
            {
                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap))
                {
                    result = true;
                }
                else if (gameMap.InSafeRegionList(client.CurrentGrid))
                {
                    result = false;
                }
                else if (gameMap.LimitMagicIDs == null || gameMap.LimitMagicIDs.Length <= 0)
                {
                    result = true;
                }
                else
                {
                    for (int i = 0; i < gameMap.LimitMagicIDs.Length; i++)
                    {
                        if (magicCode == gameMap.LimitMagicIDs[i])
                        {
                            return false;
                        }
                    }
                    result = true;
                }
            }
            return result;
        }

        
        public static bool CanMapRideHorse(int mapCode)
        {
            bool result;
            if (null == Global.XmlInfo["ConfigSettings"])
            {
                result = false;
            }
            else
            {
                XElement xmlItem = Global.GetXElement(Global.XmlInfo["ConfigSettings"], "Map", "Code", mapCode.ToString());
                if (null == xmlItem)
                {
                    result = false;
                }
                else
                {
                    int nRet = (int)Global.GetSafeAttributeLong(xmlItem, "Horse");
                    result = (nRet == 1);
                }
            }
            return result;
        }

        
        public static void TestRoleRandomPosition(GameClient client)
        {
            RoleDataEx roleData = client.ClientData.GetRoleData();
            if (0 == GameManager.TestGamePerformanceMapMode)
            {
                roleData.MapCode = GameManager.TestGamePerformanceMapCode;
            }
            else if (GameManager.TestGamePerformanceMapMode == 2)
            {
                Point newPos;
                if (Global.GetRandomNumber(0, 2) % 2 == 0)
                {
                    roleData.MapCode = 1;
                    newPos = GameManager.TestBirthPointList1[Global.GetRandomNumber(0, GameManager.TestBirthPointList1.Count)];
                }
                else
                {
                    roleData.MapCode = 2;
                    newPos = GameManager.TestBirthPointList2[Global.GetRandomNumber(0, GameManager.TestBirthPointList2.Count)];
                }
                roleData.PosX = (int)newPos.X;
                roleData.PosY = (int)newPos.Y;
            }
            else if (GameManager.TestGamePerformanceMapMode == 3)
            {
                client.ClientData.IsFlashPlayer = 0;
                roleData.MapCode = Global.GetRandomNumber(0, 11) * 10 + Global.GetRandomNumber(1, 4);
                roleData.PosX = 5378;
                roleData.PosY = 6256;
            }
        }

        
        public static bool IsSpriteMapGridChanged(GameClient client, MapGrid mapGrid, int mapCode, int posX, int posY)
        {
            return Math.Abs(posX - client.ClientData.PosX) >= mapGrid.MapGridWidth || Math.Abs(posY - client.ClientData.PosY) >= mapGrid.MapGridHeight || mapCode != client.ClientData.MapCode;
        }

        
        public static string GetJingMaiName(int jingMaiID)
        {
            string result;
            if (jingMaiID < 0 || jingMaiID >= 8)
            {
                result = "";
            }
            else
            {
                result = GLang.GetLang(Global.JingMaiNames[jingMaiID]);
            }
            return result;
        }

        
        public static string GetJingMaiBodyLevelName(int jingMaiBodyLevel)
        {
            string result;
            if (jingMaiBodyLevel < 0 || jingMaiBodyLevel >= Global.JingMaiBodyLevelNames.Length)
            {
                result = "";
            }
            else
            {
                result = GLang.GetLang(Global.JingMaiBodyLevelNames[jingMaiBodyLevel]);
            }
            return result;
        }

        
        public static SystemXmlItem GetJingMaiXmlItem(int jingMaiID, int occupation, int level)
        {
            return JingMaiCacheManager.GetJingMaiItem(occupation, jingMaiID, level);
        }

        
        public static int GetJingMaiDbIDByJMID(GameClient client, int jingMaiBodyLevel, int jingMaiID)
        {
            int result;
            if (null == client.ClientData.JingMaiDataList)
            {
                result = -1;
            }
            else
            {
                lock (client.ClientData.JingMaiDataList)
                {
                    for (int i = 0; i < client.ClientData.JingMaiDataList.Count; i++)
                    {
                        if (client.ClientData.JingMaiDataList[i].JingMaiID == jingMaiID && client.ClientData.JingMaiDataList[i].JingMaiBodyLevel == jingMaiBodyLevel)
                        {
                            return client.ClientData.JingMaiDataList[i].DbID;
                        }
                    }
                }
                result = -1;
            }
            return result;
        }

        
        public static JingMaiData GetJingMaiDataByJMID(GameClient client, int jingMaiBodyLevel, int jingMaiID)
        {
            JingMaiData result;
            if (null == client.ClientData.JingMaiDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.JingMaiDataList)
                {
                    for (int i = 0; i < client.ClientData.JingMaiDataList.Count; i++)
                    {
                        if (client.ClientData.JingMaiDataList[i].JingMaiID == jingMaiID && client.ClientData.JingMaiDataList[i].JingMaiBodyLevel == jingMaiBodyLevel)
                        {
                            return client.ClientData.JingMaiDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static JingMaiData GetJingMaiDataByDbID(GameClient client, int dbID)
        {
            JingMaiData result;
            if (null == client.ClientData.JingMaiDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.JingMaiDataList)
                {
                    for (int i = 0; i < client.ClientData.JingMaiDataList.Count; i++)
                    {
                        if (client.ClientData.JingMaiDataList[i].DbID == dbID)
                        {
                            return client.ClientData.JingMaiDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static int GetUpJingMaiNeedLingLi(GameClient client, SystemXmlItem systemJingMaiItem, int jingMaiBodyLevel, int jingMaiID)
        {
            return systemJingMaiItem.GetIntValue("LingLi", -1);
        }

        
        public static int GetUpJingMaiNeedLevel(GameClient client, SystemXmlItem systemJingMaiItem, int jingMaiBodyLevel, int jingMaiID)
        {
            return systemJingMaiItem.GetIntValue("LevelLimit", -1);
        }

        
        public static int ProcessUpJingmaiLevel(GameClient client, int jingMaiBodyLevel, int jingMaiID, ref int jingMaiLevel, int luckyPercent)
        {
            int result;
            if (jingMaiBodyLevel != client.ClientData.JingMaiBodyLevel)
            {
                result = -100000;
            }
            else if (jingMaiBodyLevel > Global.MaxJingMaiBodyLevel)
            {
                result = -10000;
            }
            else
            {
                int dbID = -1;
                int nextLevel = 1;
                JingMaiData jingMaiData = null;
                if (jingMaiLevel == -1)
                {
                    jingMaiData = Global.GetJingMaiDataByJMID(client, jingMaiBodyLevel, jingMaiID);
                    if (null != jingMaiData)
                    {
                        dbID = jingMaiData.DbID;
                        nextLevel = jingMaiData.JingMaiLevel + 1;
                        if (nextLevel > Global.MaxJingMaiLevel)
                        {
                            nextLevel = -1;
                        }
                    }
                }
                else
                {
                    nextLevel = jingMaiLevel;
                    jingMaiData = Global.GetJingMaiDataByJMID(client, jingMaiBodyLevel, jingMaiID);
                    if (null != jingMaiData)
                    {
                        dbID = jingMaiData.DbID;
                    }
                    if (nextLevel > Global.MaxJingMaiLevel)
                    {
                        nextLevel = -1;
                    }
                }
                if (nextLevel < 0)
                {
                    result = -1000;
                }
                else
                {
                    if (jingMaiLevel == -1)
                    {
                        if (!Global.TodayCanChongXue(client))
                        {
                            return -11000;
                        }
                    }
                    int nOcc = Global.CalcOriginalOccupationID(client);
                    SystemXmlItem systemJingMai = Global.GetJingMaiXmlItem(jingMaiID, nOcc, jingMaiBodyLevel - 1);
                    if (null == systemJingMai)
                    {
                        result = -1;
                    }
                    else
                    {
                        int needRoleLevel = Global.GetUpJingMaiNeedLevel(client, systemJingMai, jingMaiBodyLevel, jingMaiID);
                        if (client.ClientData.Level < needRoleLevel)
                        {
                            result = -200;
                        }
                        else
                        {
                            if (jingMaiLevel == -1)
                            {
                                int needLingLi = Global.GetUpJingMaiNeedLingLi(client, systemJingMai, jingMaiBodyLevel, jingMaiID);
                                if (needLingLi < 0)
                                {
                                    return -2;
                                }
                                if (client.ClientData.InterPower < needLingLi)
                                {
                                    return -3;
                                }
                                if (!GameManager.ClientMgr.SubInterPower(client, needLingLi))
                                {
                                    return -4;
                                }
                                int chongXueGoodsID = systemJingMai.GetIntValue("GoodsID", -1);
                                if (Global.GetTotalGoodsCountByID(client, chongXueGoodsID) <= 0)
                                {
                                    return -104;
                                }
                                bool usedBinding = false;
                                bool usedTimeLimited = false;
                                if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, chongXueGoodsID, 1, false, out usedBinding, out usedTimeLimited, false))
                                {
                                    return -104;
                                }
                                Global.UpdateDailyJingMaiData(client, 1);
                            }
                            client.ClientData.ChongXueFailedNum = 0;
                            string[] dbFields = null;
                            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
                            {
                                client.ClientData.RoleID,
                                dbID,
                                jingMaiBodyLevel,
                                jingMaiID,
                                nextLevel
                            });
                            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10024, strcmd, out dbFields, client.ServerId);
                            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
                            {
                                result = -20;
                            }
                            else if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[0]) < 0)
                            {
                                result = -21;
                            }
                            else
                            {
                                dbID = Convert.ToInt32(dbFields[0]);
                                if (null == client.ClientData.JingMaiDataList)
                                {
                                    client.ClientData.JingMaiDataList = new List<JingMaiData>();
                                }
                                int addXueWeiNum = 0;
                                int oldJingMaiLevel = 0;
                                int newJingMaiLevel = 0;
                                lock (client.ClientData.JingMaiDataList)
                                {
                                    if (null == jingMaiData)
                                    {
                                        jingMaiData = new JingMaiData
                                        {
                                            DbID = dbID,
                                            JingMaiID = jingMaiID,
                                            JingMaiLevel = nextLevel,
                                            JingMaiBodyLevel = jingMaiBodyLevel
                                        };
                                        client.ClientData.JingMaiDataList.Add(jingMaiData);
                                        addXueWeiNum = nextLevel;
                                        newJingMaiLevel = jingMaiData.JingMaiLevel;
                                    }
                                    else
                                    {
                                        addXueWeiNum = nextLevel - jingMaiData.JingMaiLevel;
                                        oldJingMaiLevel = jingMaiData.JingMaiLevel;
                                        jingMaiData.JingMaiLevel = nextLevel;
                                        newJingMaiLevel = jingMaiData.JingMaiLevel;
                                    }
                                }
                                Global.AddRoleJingMaiEvent(client, client.ClientData.JingMaiBodyLevel, jingMaiID, oldJingMaiLevel, newJingMaiLevel);
                                client.ClientData.RoleXueWeiNum += addXueWeiNum;
                                Global.BroadcastJingMaiLevelOk(client, jingMaiData);
                                int totalJingMaiXueWeiNum = client.ClientData.RoleXueWeiNum;
                                if (client.ClientData.JingMaiBodyLevel < Global.MaxJingMaiBodyLevel)
                                {
                                    int oldJingMaiBodyLevel = client.ClientData.JingMaiBodyLevel;
                                    Global.CalcJingMaiBodyLevel(client, totalJingMaiXueWeiNum);
                                    Global.BroadcastJingMaiBodyLevelOk(client, oldJingMaiBodyLevel);
                                }
                                Global.AddRoleQueueCmd(client, QueueCmdIDs.NotifyEndJingMai, TimeUtil.NOW() * 10000L + 20000000L);
                                jingMaiLevel = nextLevel;
                                result = dbID;
                            }
                        }
                    }
                }
            }
            return result;
        }

        
        public static void ProcessEndUpJingMai(GameClient client)
        {
            GameManager.ClientMgr.NotifyEndChongXueCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
            GameManager.ClientMgr.NotifyJingMaiInfoCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            Global.AddSelfJingMaiExp(client, 1);
            Global.AddOthersJingMaiExp(client);
        }

        
        private static void AddRoleJingMaiExp(GameClient client, int jingMaiExp)
        {
            GameManager.ClientMgr.ProcessRoleExperience(client, (long)jingMaiExp, true, false, false, "none");
        }

        
        public static void AddSelfQuickJingMaiExp(GameClient client)
        {
            Global.AddSelfJingMaiExp(client, 25);
        }

        
        private static void AddSelfJingMaiExp(GameClient client, int nMultiple = 1)
        {
            if (nMultiple < 1)
            {
                nMultiple = 1;
            }
            SystemXmlItem systemJingMaiExp = null;
            if (GameManager.systemJingMaiExpMgr.SystemXmlItemDict.TryGetValue(client.ClientData.JingMaiBodyLevel, out systemJingMaiExp))
            {
                int selfRoleExp = systemJingMaiExp.GetIntValue("SelfRoleExp", -1) * nMultiple;
                Global.AddRoleJingMaiExp(client, selfRoleExp);
                client.ClientData.TotalJingMaiExp += selfRoleExp;
                GameManager.DBCmdMgr.AddDBCmd(10038, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, selfRoleExp, client.ClientData.JingMaiExpNum), null, client.ServerId);
                GameManager.ClientMgr.NotifyOtherJingMaiExp(client);
            }
        }

        
        private static void AddOthersJingMaiExp(GameClient client)
        {
            List<object> clientList = new List<object>();
            GameManager.ClientMgr.LookupRolesInCircle(client, client.ClientData.MapCode, client.ClientData.PosX, client.ClientData.PosY, 250, clientList);
            if (clientList.Count > 0)
            {
                SystemXmlItem systemJingMaiExp = null;
                for (int i = 0; i < clientList.Count; i++)
                {
                    GameClient otherClient = clientList[i] as GameClient;
                    systemJingMaiExp = null;
                    if (GameManager.systemJingMaiExpMgr.SystemXmlItemDict.TryGetValue(otherClient.ClientData.JingMaiBodyLevel, out systemJingMaiExp))
                    {
                        int canGetExpNum = Global.GetLeftAddJingMaiExpNum(otherClient);
                        if (canGetExpNum > 0)
                        {
                            otherClient.ClientData.JingMaiExpNum++;
                            int othersRoleExp = systemJingMaiExp.GetIntValue("OthersRoleExp", -1);
                            Global.AddRoleJingMaiExp(otherClient, othersRoleExp);
                            otherClient.ClientData.TotalJingMaiExp += othersRoleExp;
                            GameManager.DBCmdMgr.AddDBCmd(10038, string.Format("{0}:{1}:{2}", otherClient.ClientData.RoleID, othersRoleExp, otherClient.ClientData.JingMaiExpNum), null, otherClient.ServerId);
                            GameManager.ClientMgr.NotifyOtherJingMaiExp(otherClient);
                        }
                    }
                }
            }
        }

        
        public static int GetLeftAddJingMaiExpNum(GameClient client)
        {
            long ticks = TimeUtil.NOW();
            long canGetExpNum = (ticks - client.ClientData.RegTime) / 86400000L * 20L;
            canGetExpNum += 20L;
            canGetExpNum -= (long)client.ClientData.JingMaiExpNum;
            return (int)canGetExpNum;
        }

        
        public static void UpdateJingMaiListProps(GameClient client, bool toAdd = true)
        {
            Dictionary<string, int> jingMaiPropsDict = new Dictionary<string, int>();
            if (null != client.ClientData.JingMaiDataList)
            {
                lock (client.ClientData.JingMaiDataList)
                {
                    for (int i = 0; i < client.ClientData.JingMaiDataList.Count; i++)
                    {
                        JingMaiData jingMaiData = client.ClientData.JingMaiDataList[i];
                        Global.UpdateJingMaiProps(client, jingMaiData, jingMaiPropsDict, toAdd);
                    }
                }
            }
            int canGetExpNum = Global.GetLeftAddJingMaiExpNum(client);
            jingMaiPropsDict["JiaChengCiShu"] = canGetExpNum;
            jingMaiPropsDict["LeiJiJingYan"] = client.ClientData.TotalJingMaiExp;
            client.ClientData.JingMaiPropsDict = jingMaiPropsDict;
        }

        
        private static int CalcJingMaiProp(SystemXmlItem systemJingMaiItem, JingMaiData jingMaiData)
        {
            return systemJingMaiItem.GetIntValue("Property", -1);
        }

        
        private static void CalcLevelsJingMaiProp(GameClient client, JingMaiData jingMaiData, ref Dictionary<string, int> propsDict)
        {
            int nOcc = Global.CalcOriginalOccupationID(client);
            SystemXmlItem systemJingMai = Global.GetJingMaiXmlItem(jingMaiData.JingMaiID, nOcc, jingMaiData.JingMaiBodyLevel - 1);
            if (null != systemJingMai)
            {
                int property = Global.CalcJingMaiProp(systemJingMai, jingMaiData);
                string propName = systemJingMai.GetStringValue("EnglishName");
                for (int i = 1; i <= jingMaiData.JingMaiLevel; i++)
                {
                    if (!propsDict.ContainsKey(propName))
                    {
                        propsDict[propName] = 0;
                    }
                    Dictionary<string, int> dictionary;
                    string key;
                    (dictionary = propsDict)[key = propName] = dictionary[key] + property;
                }
            }
        }

        
        private static void UpdateJingMaiProps(GameClient client, JingMaiData jingMaiData, Dictionary<string, int> jingMaiPropsDict, bool toAdd)
        {
            Dictionary<string, int> propsDict = new Dictionary<string, int>();
            Global.CalcLevelsJingMaiProp(client, jingMaiData, ref propsDict);
            if (propsDict.Count > 0)
            {
                foreach (string propName in propsDict.Keys)
                {
                    int value = propsDict[propName];
                    if (!jingMaiPropsDict.ContainsKey(propName))
                    {
                        jingMaiPropsDict[propName] = 0;
                    }
                    if (toAdd)
                    {
                        jingMaiPropsDict[propName] += value;
                    }
                    else
                    {
                        jingMaiPropsDict[propName] -= value;
                    }
                }
            }
        }

        
        public static int CalcJingMaiXueWeiNum(SafeClientData clientData)
        {
            int result;
            if (null == clientData.JingMaiDataList)
            {
                result = 0;
            }
            else
            {
                int totalNum = 0;
                lock (clientData.JingMaiDataList)
                {
                    for (int i = 0; i < clientData.JingMaiDataList.Count; i++)
                    {
                        totalNum += clientData.JingMaiDataList[i].JingMaiLevel;
                    }
                }
                result = totalNum;
            }
            return result;
        }

        
        public static int CalcJingMaiOkNum(SafeClientData clientData)
        {
            int result;
            if (null == clientData.JingMaiDataList)
            {
                result = 0;
            }
            else
            {
                int totalNum = 0;
                lock (clientData.JingMaiDataList)
                {
                    for (int i = 0; i < clientData.JingMaiDataList.Count; i++)
                    {
                        if (clientData.JingMaiDataList[i].JingMaiLevel >= Global.MaxJingMaiLevel)
                        {
                            totalNum++;
                        }
                    }
                }
                result = totalNum;
            }
            return result;
        }

        
        public static void CalcJingMaiBodyLevel(GameClient client, int totalJingMaiXueWeiNum = -1)
        {
            int totalNum = totalJingMaiXueWeiNum;
            if (totalNum < 0)
            {
                totalNum = client.ClientData.RoleXueWeiNum;
            }
            client.ClientData.JingMaiBodyLevel = totalNum / (Global.MaxJingMaiLevel * 8) + 1;
        }

        
        public static int GetDailyJingMaiNum(GameClient client)
        {
            int result;
            if (null == client.ClientData.MyDailyJingMaiData)
            {
                result = 0;
            }
            else
            {
                string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
                DailyJingMaiData dailyJingMaiData = client.ClientData.MyDailyJingMaiData;
                if (dailyJingMaiData.JmTime != today)
                {
                    result = 0;
                }
                else
                {
                    result = dailyJingMaiData.JmNum;
                }
            }
            return result;
        }

        
        public static int TodayChongXueNum(GameClient client)
        {
            int dailyJingMaiNum = Global.GetDailyJingMaiNum(client);
            return Global.MaxDailyJingMaiNum - dailyJingMaiNum;
        }

        
        public static bool TodayCanChongXue(GameClient client)
        {
            return Global.TodayChongXueNum(client) > 0;
        }

        
        public static void UpdateDailyJingMaiData(GameClient client, int num = 1)
        {
            bool reset = false;
            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
            if (null == client.ClientData.MyDailyJingMaiData)
            {
                reset = true;
            }
            else if (client.ClientData.MyDailyJingMaiData.JmTime == today)
            {
                client.ClientData.MyDailyJingMaiData.JmNum += num;
            }
            else
            {
                reset = true;
            }
            if (reset)
            {
                client.ClientData.MyDailyJingMaiData = new DailyJingMaiData
                {
                    JmTime = today,
                    JmNum = num
                };
            }
            GameManager.DBCmdMgr.AddDBCmd(10042, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.MyDailyJingMaiData.JmTime, client.ClientData.MyDailyJingMaiData.JmNum), null, client.ServerId);
            GameManager.ClientMgr.NotifyDailyJingMaiData(client);
        }

        
        public static int GetFreeChuanSongNum(GameClient client)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            int freeCSDayID = Global.GetRoleParamsInt32FromDB(client, "FreeCSDayID");
            int freeCSNum = Math.Max(0, Global.GetRoleParamsInt32FromDB(client, "FreeCSNum"));
            int maxTimes = (int)GameManager.systemParamsList.GetParamValueIntByName("FreeCSMaxTimes", -1);
            int result;
            if (freeCSDayID == dayID)
            {
                result = maxTimes - freeCSNum;
            }
            else
            {
                result = maxTimes;
            }
            return result;
        }

        
        public static void AddFreeChuanSongNum(GameClient client)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            int freeCSDayID = Global.GetRoleParamsInt32FromDB(client, "FreeCSDayID");
            int freeCSNum = Math.Max(0, Global.GetRoleParamsInt32FromDB(client, "FreeCSNum"));
            if (freeCSDayID == dayID)
            {
                freeCSNum++;
            }
            else
            {
                freeCSDayID = dayID;
                freeCSNum = 1;
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "FreeCSDayID", freeCSDayID, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "FreeCSNum", freeCSNum, true);
        }

        
        public static int GetMapTransNeedMoney(int mapCode)
        {
            int needMoney = 0;
            if (Data.MapTransNeedMoneyDict.ContainsKey(mapCode))
            {
                needMoney = Data.MapTransNeedMoneyDict[mapCode];
            }
            else
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("GetMapTransNeedMoney mapCode Error, mapCode={0}", mapCode), null, true);
            }
            return needMoney;
        }

        
        public static T1 SendToNameServer<T, T1>(TCPClient tcpClient, int cmdId, T cmdInfo)
        {
            T1 fieldsData = default(T1);
            byte[] bytesCmd = DataHelper.ObjectToBytes<T>(cmdInfo);
            TCPOutPacket tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(TCPOutPacketPool.getInstance(), bytesCmd, 0, bytesCmd.Length, cmdId);
            if (null != tcpOutPacket)
            {
                byte[] bytesData = Global.SendAndRecvData(tcpClient, tcpOutPacket);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)cmdId), null, true);
                    return fieldsData;
                }
                fieldsData = DataHelper.BytesToObject<T1>(bytesData, 6, bytesData.Length - 6);
                Global.PushBackTcpOutPacket(tcpOutPacket);
            }
            return fieldsData;
        }

        
        public static byte[] SendAndRecvData(TCPClient tcpClient, TCPOutPacket tcpOutPacket)
        {
            byte[] bytesData = null;
            try
            {
                if (null != tcpClient)
                {
                    bytesData = tcpClient.SendData(tcpOutPacket);
                }
                if (bytesData != null && bytesData.Length >= 6)
                {
                    ushort returnCmdID = BitConverter.ToUInt16(bytesData, 4);
                    if (30767 == returnCmdID)
                    {
                        bytesData = null;
                        LogManager.WriteLog(LogTypes.Error, "与NameServer 通讯时返回错误 CMD_DB_ERR_RETURN", null, true);
                    }
                }
            }
            catch (Exception ex)
            {
                LogManager.WriteLog(LogTypes.Error, "与NameServer 通讯时发生异常" + ex, null, true);
            }
            return bytesData;
        }

        
        public static byte[] SendAndRecvData(TCPOutPacket tcpOutPacket, int serverId, int PoolId)
        {
            TCPClient tcpClient = null;
            byte[] bytesData = null;
            try
            {
                tcpClient = GlobalNew.PopGameDbClient(serverId, PoolId);
                if (null != tcpClient)
                {
                    bytesData = tcpClient.SendData(tcpOutPacket);
                }
                if (bytesData != null && bytesData.Length >= 6)
                {
                    ushort returnCmdID = BitConverter.ToUInt16(bytesData, 4);
                    if (30767 == returnCmdID)
                    {
                        bytesData = null;
                        LogManager.WriteLog(LogTypes.Error, "与DBServer 通讯时返回错误 CMD_DB_ERR_RETURN", null, true);
                    }
                }
            }
            finally
            {
                if (null != tcpClient)
                {
                    GlobalNew.PushGameDbClient(serverId, tcpClient, PoolId);
                }
            }
            return bytesData;
        }

        
        public static TCPProcessCmdResults RequestToDBServer(TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, string strcmd, out string[] fields, int serverId)
        {
            fields = null;
            try
            {
                byte[] bytesData = Global.SendAndRecvData<string>(nID, strcmd, serverId, 0);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                int length = BitConverter.ToInt32(bytesData, 0);
                string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);
                fields = strData.Split(new char[]
                {
                    ':'
                });
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteExceptionLogEx(ex, "RequestToDBServer");
            }
            return TCPProcessCmdResults.RESULT_FAILED;
        }

        
        public static byte[] SendAndRecvData<T>(int cmdId, T data, int serverId, int PoolId = 0)
        {
            byte[] bytesData = null;
            TCPOutPacket tcpOutPacket = null;
            TCPOutPacketPool pool = TCPOutPacketPool.getInstance();
            if (null != pool)
            {
                try
                {
                    if (data is string)
                    {
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, data as string, cmdId);
                    }
                    else if (data is byte[])
                    {
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, data as byte[], cmdId);
                    }
                    else
                    {
                        byte[] cmdData = DataHelper.ObjectToBytes<T>(data);
                        if (null != cmdData)
                        {
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdData, cmdId);
                        }
                    }
                    if (null != tcpOutPacket)
                    {
                        bytesData = Global.SendAndRecvData(tcpOutPacket, serverId, PoolId);
                    }
                }
                finally
                {
                    if (null != tcpOutPacket)
                    {
                        pool.Push(tcpOutPacket);
                    }
                }
            }
            return bytesData;
        }

        
        public static T1 sendToDB<T1, T2>(int cmdId, T2 cmd, int serverId)
        {
            try
            {
                byte[] bytesData = Global.SendAndRecvData<T2>(cmdId, cmd, serverId, 0);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)cmdId), null, true);
                    return default(T1);
                }
                int length = BitConverter.ToInt32(bytesData, 0);
                return DataHelper.BytesToObject<T1>(bytesData, 6, length - 2);
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "sendToDB", false, false);
            }
            return default(T1);
        }

        
        public static string[] SendToDB<T>(int nCmdID, T CmdInfo, int serverId)
        {
            byte[] bytesData = Global.SendAndRecvData<T>(nCmdID, CmdInfo, serverId, 0);
            string[] result;
            if (null == bytesData)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nCmdID), null, true);
                result = null;
            }
            else
            {
                int length = BitConverter.ToInt32(bytesData, 0);
                string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);
                string[] fieldsData = strData.Split(new char[]
                {
                    ':'
                });
                if (fieldsData == null || fieldsData.Length <= 0)
                {
                    result = null;
                }
                else
                {
                    result = fieldsData;
                }
            }
            return result;
        }

        
        public static string Send2DB<T>(int nCmdID, T CmdInfo, int serverId)
        {
            try
            {
                byte[] bytesData = Global.SendAndRecvData<T>(nCmdID, CmdInfo, serverId, 0);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nCmdID), null, true);
                    return null;
                }
                int length = BitConverter.ToInt32(bytesData, 0);
                return new UTF8Encoding().GetString(bytesData, 6, length - 2);
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "sendToDB", false, false);
            }
            return "";
        }

        
        public static TCPProcessCmdResults RequestToDBServer2(TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, string strcmd, out TCPOutPacket tcpOutPacket, int serverId)
        {
            tcpOutPacket = null;
            try
            {
                byte[] bytesData = Global.SendAndRecvData<string>(nID, strcmd, serverId, 0);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                int length = BitConverter.ToInt32(bytesData, 0);
                ushort cmd = BitConverter.ToUInt16(bytesData, 4);
                tcpOutPacket = pool.Pop();
                tcpOutPacket.PacketCmdID = cmd;
                tcpOutPacket.FinalWriteData(bytesData, 6, length - 2);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "RequestToDBServer2", false, false);
            }
            return TCPProcessCmdResults.RESULT_FAILED;
        }

        
        public static TCPProcessCmdResults RequestToDBServer3(TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, string strcmd, out byte[] bytesData, int serverId)
        {
            bytesData = null;
            try
            {
                bytesData = Global.SendAndRecvData<string>(nID, strcmd, serverId, 0);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "RequestToDBServer3", false, false);
            }
            return TCPProcessCmdResults.RESULT_FAILED;
        }

        
        public static TCPProcessCmdResults RequestToDBServer4(TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, string strcmd, out byte[] bytesData, out int dataStartPos, out int dataLen, int serverId)
        {
            bytesData = null;
            dataStartPos = 0;
            dataLen = 0;
            try
            {
                bytesData = Global.SendAndRecvData<string>(nID, strcmd, serverId, 0);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                int length = BitConverter.ToInt32(bytesData, 0);
                dataStartPos = 6;
                dataLen = length - 2;
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "RequestToDBServer4", false, false);
            }
            return TCPProcessCmdResults.RESULT_FAILED;
        }

        
        public static TCPProcessCmdResults TransferRequestToDBServer(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket, int serverId)
        {
            tcpOutPacket = null;
            try
            {
                byte[] bytesData = Global.SendAndRecvData<byte[]>(nID, data, socket.ServerId, 0);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                int length = BitConverter.ToInt32(bytesData, 0);
                ushort cmd = BitConverter.ToUInt16(bytesData, 4);
                tcpOutPacket = pool.Pop();
                tcpOutPacket.PacketCmdID = cmd;
                tcpOutPacket.FinalWriteData(bytesData, 6, length - 2);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
            }
            return TCPProcessCmdResults.RESULT_FAILED;
        }

        
        public static TCPProcessCmdResults TransferRequestToDBServer2(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out byte[] bytesData, int serverId)
        {
            bytesData = null;
            try
            {
                bytesData = Global.SendAndRecvData<byte[]>(nID, data, socket.ServerId, 0);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false, false);
            }
            return TCPProcessCmdResults.RESULT_FAILED;
        }

        
        public static string[] ExecuteDBCmd(int nID, string strcmd, int serverId)
        {
            string[] fieldsData = null;
            string[] result;
            if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, nID, strcmd, out fieldsData, serverId))
            {
                result = null;
            }
            else if (fieldsData == null || fieldsData.Length <= 0)
            {
                result = null;
            }
            else
            {
                result = fieldsData;
            }
            return result;
        }

        
        public static string QueryUserMoneyFromDB(int roleID, string otherRoleName, out int userMoney, out int realMoney, int serverId)
        {
            userMoney = 0;
            realMoney = 0;
            string result;
            if (string.IsNullOrEmpty(otherRoleName))
            {
                result = null;
            }
            else
            {
                string[] dbFields = Global.ExecuteDBCmd(10069, string.Format("{0}:{1}", roleID, otherRoleName), serverId);
                if (dbFields == null || dbFields.Length < 4)
                {
                    if (null == dbFields)
                    {
                        return null;
                    }
                }
                else
                {
                    userMoney = Global.SafeConvertToInt32(dbFields[2]);
                    realMoney = Global.SafeConvertToInt32(dbFields[3]);
                }
                result = dbFields[1];
            }
            return result;
        }

        
        public static string QueryUserMoneyFromDB(int roleID, string otherRoleName, int serverId = 0)
        {
            string result;
            if (string.IsNullOrEmpty(otherRoleName))
            {
                result = null;
            }
            else
            {
                string[] dbFields = Global.ExecuteDBCmd(10069, string.Format("{0}:{1}", roleID, otherRoleName), serverId);
                if (dbFields == null || dbFields.Length < 4)
                {
                    if (null == dbFields)
                    {
                        return null;
                    }
                }
                result = dbFields[1];
            }
            return result;
        }

        
        public static string GetHuoDongKeyString(string fromDate, string toDate)
        {
            return string.Format("{0}_{1}", fromDate, toDate);
        }

        
        public static string[] QeuryUserActivityInfo(GameClient client, string keyStr, int activityType, string tag = "0")
        {
            string strcmd = string.Format("{0}:{1}:{2}:{3}", new object[]
            {
                client.ClientData.RoleID,
                keyStr,
                activityType,
                tag
            });
            return Global.ExecuteDBCmd(10221, strcmd, client.ServerId);
        }

        
        public static string[] UpdateUserActivityInfo(GameClient client, string keyStr, int activityType, long hasGetTimes, string lastGetTime)
        {
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                client.ClientData.RoleID,
                keyStr,
                activityType,
                hasGetTimes,
                lastGetTime
            });
            return Global.ExecuteDBCmd(10222, strcmd, client.ServerId);
        }

        
        public static int GetSwitchServerWaitSecs(TMSKSocket socket)
        {
            TimeSpan timeOfDay = TimeUtil.NowDateTime().TimeOfDay;
            int result;
            if (timeOfDay.TotalMinutes >= (double)GameManager.ConstCheckServerTimeDiffMinutes && timeOfDay.TotalMinutes < TimeSpan.FromDays(1.0).TotalMinutes - (double)GameManager.ConstCheckServerTimeDiffMinutes)
            {
                result = 0;
            }
            else
            {
                long waitSecs = (socket.session.LastLogoutServerTicks - TimeUtil.NOW()) / 1000L;
                if (waitSecs < 0L || waitSecs > (long)(GameManager.ConstCheckServerTimeDiffMinutes * 60))
                {
                    if (waitSecs > 30L && waitSecs < 3600L)
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("账号登陆时检测，服务器时间误差可能超过60秒，本次登录比上次下线时间早{0}秒", waitSecs), null, true);
                    }
                    waitSecs = 0L;
                }
                result = (int)waitSecs;
            }
            return result;
        }

        
        public static int RegisterUserIDToDBServer(string userID, int state, int serverId, ref long logoutServerTicks)
        {
            logoutServerTicks = 0L;
            string[] fieldsData = null;
            long startTicks = TimeUtil.NOW();
            int count = 0;
            while (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10025, string.Format("{0}:{1}:{2}", userID, GameManager.ServerLineID, state), out fieldsData, serverId))
            {
                if (state == 0)
                {
                    if (count++ < 5 || Math.Abs(TimeUtil.NOW() - startTicks) < 60000L)
                    {
                        Thread.Sleep(100);
                        continue;
                    }
                }
                return -1;
            }
            if (fieldsData == null || fieldsData.Length <= 0)
            {
                return -2;
            }
            if (fieldsData.Length >= 2)
            {
                logoutServerTicks = Convert.ToInt64(fieldsData[1]);
            }
            return Convert.ToInt32(fieldsData[0]);
        }

        
        public static void BanRoleNameToDBServer(string roleName, int banVal)
        {
            GameManager.DBCmdMgr.AddDBCmd(10026, string.Format("{0}:{1}", roleName, banVal), null, 0);
        }

        
        public static void BanRoleChatToDBServer(string roleName, int banHour)
        {
            GameManager.DBCmdMgr.AddDBCmd(10027, string.Format("{0}:{1}", roleName, banHour), null, 0);
        }

        
        public static void AddDBBulletinMsg(string msgID, string fromDate, string toDate, int interval, string bulletinText)
        {
            GameManager.DBCmdMgr.AddDBCmd(10029, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                msgID,
                fromDate.Replace(':', '$'),
                toDate.Replace(':', '$'),
                interval,
                bulletinText
            }), null, 0);
        }

        
        public static void RemoveDBBulletinMsg(string msgID)
        {
            GameManager.DBCmdMgr.AddDBCmd(10030, string.Format("{0}", msgID), null, 0);
        }

        
        public static Dictionary<string, BulletinMsgData> LoadDBBulletinMsgDict()
        {
            Dictionary<string, BulletinMsgData> dict = null;
            byte[] bytesData = null;
            Dictionary<string, BulletinMsgData> result;
            if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer3(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10031, string.Format("{0}", GameManager.ServerLineID), out bytesData, 0))
            {
                result = dict;
            }
            else if (bytesData == null || bytesData.Length <= 6)
            {
                result = dict;
            }
            else
            {
                int length = BitConverter.ToInt32(bytesData, 0);
                dict = DataHelper.BytesToObject<Dictionary<string, BulletinMsgData>>(bytesData, 6, length - 2);
                result = dict;
            }
            return result;
        }

        
        public static void UpdateDBGameConfigg(string paramName, string paramValue)
        {
            GameManager.DBCmdMgr.AddDBCmd(10034, string.Format("{0}:{1}", paramName, paramValue), null, 0);
        }

        
        public static Dictionary<string, string> LoadDBGameConfigDict()
        {
            Dictionary<string, string> dict = null;
            byte[] bytesData = null;
            Dictionary<string, string> result;
            if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer3(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10033, string.Format("{0}", GameManager.ServerLineID), out bytesData, 0))
            {
                result = dict;
            }
            else if (bytesData == null || bytesData.Length <= 6)
            {
                result = dict;
            }
            else
            {
                int length = BitConverter.ToInt32(bytesData, 0);
                dict = DataHelper.BytesToObject<Dictionary<string, string>>(bytesData, 6, length - 2);
                result = dict;
            }
            return result;
        }

        
        public static int FilterValue(GameClient client, int value)
        {
            int result;
            if (client.ClientData.AntiAddictionTimeType <= 0)
            {
                result = value;
            }
            else if (client.ClientData.AntiAddictionTimeType <= 1)
            {
                result = (int)((double)value * 0.5);
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        public static long FilterValue(GameClient client, long value)
        {
            long result;
            if (client.ClientData.AntiAddictionTimeType <= 0)
            {
                result = value;
            }
            else if (client.ClientData.AntiAddictionTimeType <= 1)
            {
                result = (long)((double)value * 0.5);
            }
            else
            {
                result = 0L;
            }
            return result;
        }

        
        public static bool FilterFallGoods(GameClient client)
        {
            return client.ClientData.AntiAddictionTimeType <= 0;
        }

        
        public static int GetAntiAddictionTimeType(GameClient client)
        {
            int isAdult = GameManager.OnlineUserSession.FindUserAdult(client.ClientSocket);
            int result;
            if (isAdult > 0)
            {
                result = 0;
            }
            else
            {
                int hintSecs = GameManager.GameConfigMgr.GetGameConfigItemInt("anti-addiction-hint", 10800);
                hintSecs = Global.GMax(0, hintSecs);
                if (client.ClientData.AntiAddictionSecs < hintSecs)
                {
                    result = 0;
                }
                else
                {
                    int warningSecs = GameManager.GameConfigMgr.GetGameConfigItemInt("anti-addiction-warning", 18000);
                    warningSecs = Global.GMax(0, warningSecs);
                    if (client.ClientData.AntiAddictionSecs >= hintSecs && client.ClientData.AntiAddictionSecs < warningSecs)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 2;
                    }
                }
            }
            return result;
        }

        
        public static int GetAntiAddictionTimeType_TengXun(GameClient client)
        {
            int result;
            if (client.ClientData.TengXunFCMRate >= 1.0)
            {
                result = 0;
            }
            else if (client.ClientData.TengXunFCMRate >= 0.5 && client.ClientData.TengXunFCMRate < 1.0)
            {
                result = 1;
            }
            else
            {
                result = 2;
            }
            return result;
        }

        
        public static void AutoGiveNewRoleGoods(GameClient client)
        {
            if (null == GameManager.AutoGiveGoodsIDList)
            {
                int[] autoGiveGoodsIDList = GameManager.systemParamsList.GetParamValueIntArrayByName("AutoGiveGoodsIDList", ',');
                if (null == autoGiveGoodsIDList)
                {
                    autoGiveGoodsIDList = new int[0];
                }
                GameManager.AutoGiveGoodsIDList = autoGiveGoodsIDList.ToList<int>();
            }
            if (GameManager.AutoGiveGoodsIDList != null && GameManager.AutoGiveGoodsIDList.Count > 0)
            {
                for (int i = 0; i < GameManager.AutoGiveGoodsIDList.Count; i++)
                {
                    SystemXmlItem sytemGoodsItem = null;
                    if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(GameManager.AutoGiveGoodsIDList[i], out sytemGoodsItem))
                    {
                        LogManager.WriteLog(LogTypes.Warning, string.Format("新手上给予的物品ID不存在: GoodsID={0}", GameManager.AutoGiveGoodsIDList[i]), null, true);
                    }
                    else if (Global.IsRoleOccupationMatchGoods(client, GameManager.AutoGiveGoodsIDList[i]))
                    {
                        Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, GameManager.AutoGiveGoodsIDList[i], 1, 0, "", 0, 1, 0, "", true, 1, "自动给予新手物品", "1900-01-01 12:00:00", 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
                    }
                }
            }
        }

        
        public static void AutoGiveNewRoleGoodsToPortableBag(GameClient client)
        {
            if (null == GameManager.AutoGiveGoodsIDPortableList)
            {
                int[] AutoGiveGoodsIDPortableList = GameManager.systemParamsList.GetParamValueIntArrayByName("AutoGiveGoodsIDPortableList", ',');
                if (null != AutoGiveGoodsIDPortableList)
                {
                    GameManager.AutoGiveGoodsIDPortableList = AutoGiveGoodsIDPortableList.ToList<int>();
                }
                else
                {
                    GameManager.AutoGiveGoodsIDPortableList = new List<int>();
                }
            }
            if (GameManager.AutoGiveGoodsIDPortableList != null && GameManager.AutoGiveGoodsIDPortableList.Count > 0)
            {
                for (int i = 0; i < GameManager.AutoGiveGoodsIDPortableList.Count; i++)
                {
                    SystemXmlItem sytemGoodsItem = null;
                    if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(GameManager.AutoGiveGoodsIDPortableList[i], out sytemGoodsItem))
                    {
                        LogManager.WriteLog(LogTypes.Warning, string.Format("新手上给予的物品ID不存在: GoodsID={0}", GameManager.AutoGiveGoodsIDPortableList[i]), null, true);
                    }
                    else if (Global.IsRoleOccupationMatchGoods(client, GameManager.AutoGiveGoodsIDPortableList[i]))
                    {
                        Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, GameManager.AutoGiveGoodsIDPortableList[i], 1, 0, "", 0, 1, -1000, "", true, 1, "自动给予新手物品到仓库", "1900-01-01 12:00:00", 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
                    }
                }
            }
        }

        
        public static void AutoGiveNewRoleOtherValues(GameClient client)
        {
        }

        
        public static bool IsArrayANDArray(int[] aryA, int[] aryB)
        {
            HashSet<int> setA = new HashSet<int>();
            HashSet<int> setB = new HashSet<int>();
            for (int i = 0; i < aryA.Length; i++)
            {
                setA.Add(aryA[i]);
            }
            for (int j = 0; j < aryB.Length; j++)
            {
                setB.Add(aryB[j]);
            }
            return setA.SetEquals(setB);
        }

        
        public static bool IsArrayORArray(int[] aryA, int[] aryB)
        {
            HashSet<int> setA = new HashSet<int>();
            HashSet<int> setB = new HashSet<int>();
            for (int i = 0; i < aryA.Length; i++)
            {
                setA.Add(aryA[i]);
            }
            for (int j = 0; j < aryB.Length; j++)
            {
                setB.Add(aryB[j]);
            }
            setA.IntersectWith(setB);
            return setA.Count > 0;
        }

        
        public static bool CanUpackGoods(GameClient client, SystemXmlItem systemGoodsItem, int goodsID)
        {
            int baoguoID = systemGoodsItem.GetIntValue("BaoguoID", -1);
            bool result;
            if (baoguoID <= 0)
            {
                result = true;
            }
            else
            {
                List<GoodsData> goodsDataList = GoodsBaoGuoCachingMgr.FindGoodsBaoGuoByID(baoguoID);
                result = (null == goodsDataList || Global.CanAddGoodsNum(client, goodsDataList.Count));
            }
            return result;
        }

        
        public static void UnpackGoodsByID(GameClient client, SystemXmlItem systemGoodsItem, int goodsID)
        {
            int baoguoID = systemGoodsItem.GetIntValue("BaoguoID", -1);
            if (baoguoID > 0)
            {
                List<GoodsData> goodsDataList = GoodsBaoGuoCachingMgr.FindGoodsBaoGuoByID(baoguoID);
                if (null != goodsDataList)
                {
                    for (int i = 0; i < goodsDataList.Count; i++)
                    {
                        Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsDataList[i].GoodsID, goodsDataList[i].GCount, goodsDataList[i].Quality, goodsDataList[i].Props, goodsDataList[i].Forge_level, goodsDataList[i].Binding, 0, goodsDataList[i].Jewellist, false, 1, "解开包裹", "1900-01-01 12:00:00", goodsDataList[i].AddPropIndex, goodsDataList[i].BornIndex, goodsDataList[i].Lucky, goodsDataList[i].Strong, goodsDataList[i].ExcellenceInfo, goodsDataList[i].AppendPropLev, goodsDataList[i].ChangeLifeLevForEquip, null, null, 0, true);
                    }
                }
            }
        }

        
        public static void InitBufferDataListHashSet(GameClient client)
        {
            lock (client.ClientData.BufferDataListHashSet)
            {
                if (null != client.ClientData.BufferDataList)
                {
                    lock (client.ClientData.BufferDataList)
                    {
                        foreach (BufferData bufferData in client.ClientData.BufferDataList)
                        {
                            if (!client.ClientData.BufferDataListHashSet.Contains(bufferData.BufferID))
                            {
                                client.ClientData.BufferDataListHashSet.Add(bufferData.BufferID);
                            }
                        }
                    }
                }
            }
        }

        
        public static void AddIDToBufferDataListHashSet(GameClient client, int bufferID)
        {
            lock (client.ClientData.BufferDataListHashSet)
            {
                if (!client.ClientData.BufferDataListHashSet.Contains(bufferID))
                {
                    client.ClientData.BufferDataListHashSet.Add(bufferID);
                }
            }
        }

        
        public static BufferData GetBufferDataByID(GameClient client, int bufferID)
        {
            lock (client.ClientData.BufferDataListHashSet)
            {
                if (!client.ClientData.BufferDataListHashSet.Contains(bufferID))
                {
                    return null;
                }
            }
            BufferData result;
            if (null == client.ClientData.BufferDataList)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.BufferDataList)
                {
                    for (int i = 0; i < client.ClientData.BufferDataList.Count; i++)
                    {
                        if (client.ClientData.BufferDataList[i].BufferID == bufferID)
                        {
                            return client.ClientData.BufferDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static BufferData GetBufferDataByClientData(List<BufferData> bufferDataList, int bufferID)
        {
            BufferData result;
            if (null == bufferDataList)
            {
                result = null;
            }
            else
            {
                lock (bufferDataList)
                {
                    for (int i = 0; i < bufferDataList.Count; i++)
                    {
                        if (bufferDataList[i].BufferID == bufferID)
                        {
                            return bufferDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static BufferData GetBufferDataByID(SafeClientData clientData, int bufferID)
        {
            BufferData result;
            if (clientData == null || null == clientData.BufferDataList)
            {
                result = null;
            }
            else
            {
                lock (clientData.BufferDataList)
                {
                    for (int i = 0; i < clientData.BufferDataList.Count; i++)
                    {
                        if (clientData.BufferDataList[i].BufferID == bufferID)
                        {
                            return clientData.BufferDataList[i];
                        }
                    }
                }
                result = null;
            }
            return result;
        }

        
        private static void AddBufferData(GameClient client, BufferData bufferData)
        {
            if (null == client.ClientData.BufferDataList)
            {
                client.ClientData.BufferDataList = new List<BufferData>();
            }
            lock (client.ClientData.BufferDataList)
            {
                client.ClientData.BufferDataList.Add(bufferData);
            }
            Global.AddIDToBufferDataListHashSet(client, bufferData.BufferID);
        }

        
        public static void RemoveBufferData(GameClient client, int bufferID)
        {
            if (null != client.ClientData.BufferDataList)
            {
                BufferData bufferData = null;
                lock (client.ClientData.BufferDataList)
                {
                    for (int i = 0; i < client.ClientData.BufferDataList.Count; i++)
                    {
                        if (client.ClientData.BufferDataList[i].BufferID == bufferID)
                        {
                            bufferData = client.ClientData.BufferDataList[i];
                            bufferData.StartTime = 0L;
                            bufferData.BufferSecs = 0;
                            bufferData.BufferVal = 0L;
                            break;
                        }
                    }
                }
                if (null != bufferData)
                {
                    Global.UpdateDBBufferData(client, bufferData);
                    GameManager.ClientMgr.NotifyBufferData(client, bufferData);
                }
            }
        }

        
        public static void RemoveAllBufferData(GameClient client)
        {
            if (null != client.ClientData.BufferDataList)
            {
                lock (client.ClientData.BufferDataList)
                {
                    for (int i = 0; i < client.ClientData.BufferDataList.Count; i++)
                    {
                        BufferData bufferData = client.ClientData.BufferDataList[i];
                        bufferData.StartTime = 0L;
                        bufferData.BufferSecs = 0;
                        bufferData.BufferVal = 0L;
                        Global.UpdateDBBufferData(client, bufferData);
                        GameManager.ClientMgr.NotifyBufferData(client, bufferData);
                    }
                }
            }
        }

        
        public static void UpdateBufferDataTitle(GameClient client, int bufferItemType, long bufferVal, long startTime, int bufferSecs)
        {
            bool isNewData = false;
            BufferData bufferData = Global.GetBufferDataByID(client, bufferItemType);
            if (null == bufferData)
            {
                isNewData = true;
                bufferData = new BufferData
                {
                    BufferID = bufferItemType,
                    BufferType = 1
                };
            }
            bufferData.StartTime = TimeUtil.NOW();
            bufferData.BufferSecs = bufferSecs;
            bufferData.BufferVal = bufferVal;
            if (isNewData)
            {
                Global.AddBufferData(client, bufferData);
            }
            GameManager.ClientMgr.NotifySelfLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            Global.UpdateDBBufferData(client, bufferData);
            GameManager.ClientMgr.NotifyBufferData(client, bufferData);
        }

        
        public static void UpdateBufferData(GameClient client, BufferItemTypes bufferItemType, double[] actionParams, int bufferType = 0, bool notifyPropsChanged = true)
        {
            bool isNewData = false;
            BufferData bufferData = Global.GetBufferDataByID(client, (int)bufferItemType);
            if (null == bufferData)
            {
                isNewData = true;
                bufferData = new BufferData
                {
                    BufferID = (int)bufferItemType,
                    BufferType = bufferType,
                    BufferVal = 0L
                };
            }
            else
            {
                bufferData.BufferType = bufferType;
            }
            if (bufferItemType == BufferItemTypes.ZuZhou)
            {
                bufferData.StartTime = TimeUtil.NOW();
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.NoDie)
            {
                bufferData.StartTime = TimeUtil.NOW();
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.LifeVReserve || bufferItemType == BufferItemTypes.MagicVReserve || bufferItemType == BufferItemTypes.LingLiVReserve)
            {
                if (bufferData.BufferVal > 0L)
                {
                    bufferData.BufferVal += (long)((int)actionParams[0]);
                }
                else
                {
                    bufferData.StartTime = (long)((int)actionParams[0]);
                    bufferData.BufferVal = (long)((int)actionParams[0]);
                }
            }
            else if (bufferItemType == BufferItemTypes.TimeHUZHAONoShow)
            {
                bufferData.StartTime = (long)((int)actionParams[0]);
                bufferData.BufferVal = (long)((int)actionParams[0]);
            }
            else if (bufferItemType == BufferItemTypes.AntiBoss)
            {
                long nowTicks = TimeUtil.NOW();
                if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                {
                    if ((long)((int)actionParams[1]) >= bufferData.BufferVal)
                    {
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0] * 60;
                        bufferData.BufferVal = (long)((int)actionParams[1]);
                    }
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0] * 60;
                    bufferData.BufferVal = (long)((int)actionParams[1]);
                }
            }
            else if (bufferItemType == BufferItemTypes.TimeWUDIHUZHAONoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = 0L;
            }
            else if (bufferItemType == BufferItemTypes.AntiRole)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.TimeExp)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.TimeAddAttack || bufferItemType == BufferItemTypes.TimeAddMAttack || bufferItemType == BufferItemTypes.TimeAddDSAttack || bufferItemType == BufferItemTypes.TimeAddDefense || bufferItemType == BufferItemTypes.TimeAddMDefense || bufferItemType == BufferItemTypes.PKKingBuffer)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.TimeAddLifeMagic)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.TimeAddLifeNoShow || bufferItemType == BufferItemTypes.TimeAddMagicNoShow)
            {
                long nowTicks = TimeUtil.NOW();
                if (bufferData.BufferVal == (long)actionParams[1])
                {
                    if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                    {
                        bufferData.BufferSecs += (int)actionParams[0];
                    }
                    else
                    {
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0];
                    }
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0];
                }
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.DSTimeAddLifeNoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = ((long)actionParams[1] << 32 | (long)actionParams[2]);
            }
            else if (bufferItemType == BufferItemTypes.WaWaExp)
            {
                bufferData.StartTime = (long)((int)actionParams[0]);
                bufferData.BufferVal = (long)((int)actionParams[0]);
                bufferData.BufferSecs = (int)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.FallTianSheng)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[1];
                bufferData.BufferVal = (long)((int)(actionParams[0] * 100.0));
            }
            else if (bufferItemType == BufferItemTypes.ChengJiu || bufferItemType == BufferItemTypes.WuXue)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = 86400;
                bufferData.BufferVal = (long)((int)actionParams[0]);
            }
            else if (bufferItemType == BufferItemTypes.JieRiChengHao)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[1] * 60 * 60;
                bufferData.BufferVal = (long)((int)actionParams[0]);
            }
            else if (bufferItemType == BufferItemTypes.MonthVIP)
            {
                long nowTicks = TimeUtil.NOW();
                if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                {
                    bufferData.BufferSecs += (int)actionParams[0] * 60;
                    bufferData.BufferVal = Math.Max((long)((int)actionParams[1]), bufferData.BufferVal);
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0] * 60;
                    bufferData.BufferVal = (long)((int)actionParams[1]);
                }
            }
            else if (bufferItemType == BufferItemTypes.FiveExperience || bufferItemType == BufferItemTypes.ThreeExperience || bufferItemType == BufferItemTypes.DblExperience)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.RebornMutilExp)
            {
                long nowTicks = TimeUtil.NOW();
                int nGoodsID = (int)(bufferData.BufferVal >> 32 & (long) 0xffff_ffffUL);
                if ((long)nGoodsID == ((long)actionParams[1] >> 32 & (long) 0xffff_ffffUL))
                {
                    if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                    {
                        bufferData.BufferSecs += (int)actionParams[0];
                    }
                    else
                    {
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0];
                    }
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0];
                }
                bufferData.BufferVal = (long)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.MutilExperience)
            {
                long nowTicks = TimeUtil.NOW();
                int nGoodsID = (int)((ulong)(bufferData.BufferVal >> 32) & 0xffff_ffffUL);
                if ((long)nGoodsID == (long)((ulong)((long)actionParams[1] >> 32) & 0xffff_ffffUL))
                {
                    if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                    {
                        bufferData.BufferSecs += (int)actionParams[0];
                    }
                    else
                    {
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0];
                    }
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0];
                }
                bufferData.BufferVal = (long)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.ErGuoTou)
            {
                long nowTicks = TimeUtil.NOW();
                if (bufferData.BufferVal == (long)actionParams[1])
                {
                    bufferData.BufferSecs += (int)actionParams[0] * 60;
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0] * 60;
                    bufferData.BufferVal = (long)actionParams[1];
                }
            }
            else if (bufferItemType == BufferItemTypes.ZhuFu)
            {
                long nowTicks = TimeUtil.NOW();
                if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                {
                    bufferData.BufferSecs += (int)actionParams[0] * 60;
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0] * 60;
                }
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.GuMuTimeLimit)
            {
                if ((int)actionParams[0] > 0)
                {
                    bufferData.StartTime = (long)TimeUtil.NowDateTime().DayOfYear;
                    bufferData.BufferVal = (long)((int)actionParams[0] * 60);
                }
                bufferData.BufferSecs += (int)actionParams[1] * 60;
            }
            else if (bufferItemType == BufferItemTypes.MingJieMapLimit)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (long)((int)actionParams[0] * 60);
            }
            else if (bufferItemType == BufferItemTypes.DSTimeHideNoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.DSTimeShiDuNoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = ((long)actionParams[1] << 32 | (long)actionParams[2]);
            }
            else if (bufferItemType == BufferItemTypes.TimeFEIXUENoShow || bufferItemType == BufferItemTypes.TimeZHONGDUNoShow || bufferItemType == BufferItemTypes.TimeLINGHUNoShow || bufferItemType == BufferItemTypes.TimeRANSHAONoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = 0L;
            }
            else if (bufferItemType == BufferItemTypes.DSTimeAddDefenseNoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.DSTimeAddMDefenseNoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.FSAddHuDunNoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.MU_SUBDAMAGEPERCENTTIMER)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.MU_SUBDAMAGEPERCENTTIMER1)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.RongYu)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.MU_JINGJICHANG_JUNXIAN)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = 0;
                bufferData.BufferVal = (long)((int)actionParams[0]);
            }
            else if (bufferItemType == BufferItemTypes.MU_SPECMACH_EXP)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = 0;
                bufferData.BufferVal = (long)((int)actionParams[0]);
            }
            else if (bufferItemType == BufferItemTypes.MU_LUOLANCHENGZHAN_QIZHI1 || bufferItemType == BufferItemTypes.MU_LUOLANCHENGZHAN_QIZHI2 || bufferItemType == BufferItemTypes.MU_LUOLANCHENGZHAN_QIZHI3 || bufferItemType == BufferItemTypes.MU_LANGHUNLINGYU_QIZHI1 || bufferItemType == BufferItemTypes.MU_LANGHUNLINGYU_QIZHI2 || bufferItemType == BufferItemTypes.MU_LANGHUNLINGYU_QIZHI3)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.KarenEastCrystal || bufferItemType == BufferItemTypes.KingOfBattleCrystal || bufferItemType == BufferItemTypes.KingOfBattleBoss_GJDZY || bufferItemType == BufferItemTypes.KingOfBattleBoss_GJDJX || bufferItemType == BufferItemTypes.KingOfBattleBoss_GJDNH || bufferItemType == BufferItemTypes.ZorkBattle_1 || bufferItemType == BufferItemTypes.ZorkBattle_2 || bufferItemType == BufferItemTypes.ZorkBattle_3 || bufferItemType == BufferItemTypes.ZorkBattle_4 || bufferItemType == BufferItemTypes.ZorkBattle_5)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)((int)actionParams[1]);
                GameManager.ClientMgr.NotifyOtherBufferData(client, bufferData);
            }
            else if (bufferItemType == BufferItemTypes.MU_WORLDLEVEL)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = 0;
                bufferData.BufferVal = (long)((int)actionParams[0]);
            }
            else if (bufferItemType >= BufferItemTypes.MU_ZHANMENGBUILD_ZHANQI && bufferItemType <= BufferItemTypes.MU_ZHANMENGBUILD_GUANGHUAN)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.ADDTEMPStrength || bufferItemType == BufferItemTypes.ADDTEMPIntelligsence || bufferItemType == BufferItemTypes.ADDTEMPDexterity || bufferItemType == BufferItemTypes.ADDTEMPConstitution)
            {
                long nowTicks = TimeUtil.NOW();
                lock (bufferData)
                {
                    if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                    {
                        bufferData.BufferSecs += (int)actionParams[0];
                    }
                    else
                    {
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0];
                        if (bufferData.BufferVal <= 0L)
                        {
                        }
                        bufferData.BufferVal = (long)((int)actionParams[1]);
                    }
                }
                DBRoleBufferManager.RefreshTimePropBuffer(client, bufferItemType);
                client.delayExecModule.SetDelayExecProc(new DelayExecProcIds[]
                {
                    DelayExecProcIds.RecalcProps,
                    DelayExecProcIds.NotifyRefreshProps
                });
            }
            else if (bufferItemType == BufferItemTypes.ADDTEMPATTACKSPEED || bufferItemType == BufferItemTypes.ADDTEMPLUCKYATTACK || bufferItemType == BufferItemTypes.ADDTEMPFATALATTACK || bufferItemType == BufferItemTypes.ADDTEMPDOUBLEATTACK)
            {
                long nowTicks = TimeUtil.NOW();
                if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                {
                    bufferData.BufferSecs += (int)actionParams[0];
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0];
                }
                bufferData.BufferVal = (long)((int)actionParams[1]);
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                DBRoleBufferManager.RefreshTimePropBuffer(client, bufferItemType);
            }
            else if (bufferItemType == BufferItemTypes.MU_ADDLUCKYATTACKPERCENTTIMER || bufferItemType == BufferItemTypes.MU_ADDFATALATTACKPERCENTTIMER || bufferItemType == BufferItemTypes.MU_ADDDOUBLEATTACKPERCENTTIMER || bufferItemType == BufferItemTypes.MU_ADDLIFERECOVERPERCENT || bufferItemType == BufferItemTypes.MU_ADDMAXHPVALUE || bufferItemType == BufferItemTypes.MU_ADDMAXMPVALUE || bufferItemType == BufferItemTypes.MU_ADDLIFERECOVERPERCENT)
            {
                long nowTicks = TimeUtil.NOW();
                if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L && bufferData.BufferVal == (long)((int)actionParams[1]))
                {
                    bufferData.BufferSecs += (int)actionParams[0];
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0];
                }
                bufferData.BufferVal = (long)((int)actionParams[1]);
            }
            else if (bufferItemType == BufferItemTypes.MU_ADDMAXLIFEPERCENTANDVALUE || bufferItemType == BufferItemTypes.MU_SUBDAMAGEPERCENTVALUETIMER || bufferItemType == BufferItemTypes.MU_ADDATTACKANDDEFENSEEPERCENTVALUETIMER || bufferItemType == BufferItemTypes.MU_ADD_HIT_DODGE_PERCENT || bufferItemType == BufferItemTypes.MU_ADD_DAMAGE_THORN_PERCENT)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = ((long)actionParams[1] << 32 | (long)actionParams[2]);
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                if (bufferItemType == BufferItemTypes.MU_ADDMAXLIFEPERCENTANDVALUE)
                {
                    client.ClientData.LifeV = (int)RoleAlgorithm.GetMaxLifeV(client);
                    client.ClientData.MagicV = (int)RoleAlgorithm.GetMaxMagicV(client);
                    if (client.ClientData.CurrentLifeV > client.ClientData.LifeV)
                    {
                        client.ClientData.CurrentLifeV = client.ClientData.LifeV;
                    }
                    if (client.ClientData.CurrentMagicV > client.ClientData.MagicV)
                    {
                        client.ClientData.CurrentMagicV = client.ClientData.MagicV;
                    }
                    GameManager.ClientMgr.NotifySelfLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.MU_ANGELTEMPLEBUFF1 || bufferItemType == BufferItemTypes.MU_ANGELTEMPLEBUFF2)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)((int)actionParams[1]);
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }
            else if (bufferItemType == BufferItemTypes.MU_MAXLIFEPERCENT || bufferItemType == BufferItemTypes.MU_ADDDEFENSETIMER || bufferItemType == BufferItemTypes.MU_ADDATTACKTIMER)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)((int)actionParams[1]);
                if (notifyPropsChanged)
                {
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.MU_REDNAME_DEBUFF)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[1] * 60;
                bufferData.BufferVal = (long)((int)actionParams[0]) + ((long)actionParams[2] << 32);
            }
            else if (bufferItemType == BufferItemTypes.HuiJiHuTi)
            {
                bufferData.StartTime = TimeUtil.NOW();
                bufferData.BufferSecs = (int)actionParams[1];
                bufferData.BufferVal = (long)((int)actionParams[0]);
                if (notifyPropsChanged)
                {
                    GameManager.ClientMgr.NotifyOtherBufferData(client, bufferData);
                }
            }
            else if (bufferItemType == BufferItemTypes.BianShen)
            {
                bufferData.StartTime = TimeUtil.NOW();
                bufferData.BufferSecs = (int)actionParams[1];
                bufferData.BufferVal = (long)((int)actionParams[0]);
                if (notifyPropsChanged)
                {
                    GameManager.ClientMgr.NotifyOtherBufferData(client, bufferData);
                }
            }
            else if (bufferItemType == BufferItemTypes.LianZhanBuff)
            {
                bufferData.StartTime = TimeUtil.NOW();
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.HysyShengBei)
            {
                bufferData.StartTime = TimeUtil.NOW();
                bufferData.BufferSecs = (int)actionParams[1];
                bufferData.BufferVal = (long)((int)actionParams[0]);
                GameManager.ClientMgr.NotifyOtherBufferData(client, bufferData);
            }
            else if (bufferItemType == BufferItemTypes.LangHunLingYu_ChengHao)
            {
                bufferData.BufferVal = (long)((int)actionParams[0]);
                GameManager.ClientMgr.NotifyOtherBufferData(client, bufferData);
            }
            else if (bufferItemType == BufferItemTypes.ZhongShenZhiShen_ChengHao || bufferItemType == BufferItemTypes.CoupleArena_YongQi_Buff || bufferItemType == BufferItemTypes.CoupleArena_ZhenAi_Buff)
            {
                bufferData.BufferVal = (long)((int)actionParams[0]);
                GameManager.ClientMgr.NotifyOtherBufferData(client, bufferData);
            }
            else if (bufferData.BufferType <= 0)
            {
                long nowTicks = TimeUtil.NOW();
                if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                {
                    bufferData.BufferSecs += (int)actionParams[0] * 60;
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0] * 60;
                }
            }
            else
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = 0;
                bufferData.BufferVal = (long)((int)actionParams[0]);
            }
            if (isNewData)
            {
                Global.AddBufferData(client, bufferData);
            }
            if (bufferItemType == BufferItemTypes.LingLiVReserve)
            {
                DBRoleBufferManager.ProcessLingLiVReserve2(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, bufferData);
            }
            else if (bufferItemType == BufferItemTypes.UpLifeLimit)
            {
                DBRoleBufferManager.AddUpLifeLimitStatus(client);
            }
            else if (bufferItemType == BufferItemTypes.AddTempAttack)
            {
                DBRoleBufferManager.AddAttackBuffer(client);
            }
            else if (bufferItemType == BufferItemTypes.TimeAddAttack || bufferItemType == BufferItemTypes.TimeAddMAttack || bufferItemType == BufferItemTypes.TimeAddDSAttack || bufferItemType == BufferItemTypes.TimeAddDefense || bufferItemType == BufferItemTypes.TimeAddMDefense || bufferItemType == BufferItemTypes.PKKingBuffer)
            {
                DBRoleBufferManager.RefreshTimePropBuffer(client, bufferItemType);
            }
            else if (bufferItemType == BufferItemTypes.AddTempDefense)
            {
                DBRoleBufferManager.AddDefenseBuffer(client);
            }
            else if (bufferItemType != BufferItemTypes.SheLiZhiYuan)
            {
                if (bufferItemType != BufferItemTypes.DiWanZhiYou)
                {
                    if (bufferItemType == BufferItemTypes.JunQi)
                    {
                        if (notifyPropsChanged)
                        {
                            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                            GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
                        }
                    }
                    else if (bufferItemType == BufferItemTypes.ChengJiu)
                    {
                        if (notifyPropsChanged)
                        {
                            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (bufferItemType == BufferItemTypes.JingMai)
                    {
                        if (notifyPropsChanged)
                        {
                            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (bufferItemType == BufferItemTypes.WuXue)
                    {
                        if (notifyPropsChanged)
                        {
                            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (bufferItemType == BufferItemTypes.ZuanHuang)
                    {
                        if (notifyPropsChanged)
                        {
                            bufferData.BufferVal = (long)actionParams[0];
                            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (bufferItemType == BufferItemTypes.ZhanHun)
                    {
                        if (notifyPropsChanged)
                        {
                            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (bufferItemType == BufferItemTypes.RongYu)
                    {
                        if (notifyPropsChanged)
                        {
                            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (bufferItemType >= BufferItemTypes.MU_ZHANMENGBUILD_ZHANQI && bufferItemType <= BufferItemTypes.MU_ZHANMENGBUILD_GUANGHUAN)
                    {
                        if (notifyPropsChanged)
                        {
                            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (bufferItemType == BufferItemTypes.MU_JINGJICHANG_JUNXIAN)
                    {
                        if (notifyPropsChanged)
                        {
                            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (bufferItemType == BufferItemTypes.JieRiChengHao)
                    {
                        if (notifyPropsChanged)
                        {
                            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        }
                    }
                    else if (bufferItemType == BufferItemTypes.MU_ADDMAXHPVALUE || bufferItemType == BufferItemTypes.MU_ADDMAXMPVALUE)
                    {
                        GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                        GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
                    }
                    else if (bufferItemType == BufferItemTypes.JunTuanCaiJiBuff)
                    {
                        bufferData.StartTime = TimeUtil.NOW();
                        bufferData.BufferSecs = 0;
                        bufferData.BufferVal = (long)((int)actionParams[1]);
                    }
                    else if (bufferItemType == BufferItemTypes.DiGongLingZhu)
                    {
                        bufferData.StartTime = TimeUtil.NOW();
                        bufferData.BufferSecs = 0;
                        bufferData.BufferVal = (long)((int)actionParams[0]);
                    }
                    else if (bufferItemType == BufferItemTypes.DiGongChenMin)
                    {
                        bufferData.StartTime = TimeUtil.NOW();
                        bufferData.BufferSecs = 0;
                        bufferData.BufferVal = (long)((int)actionParams[0]);
                    }
                    else if (bufferItemType == BufferItemTypes.HuangMoLingZhu)
                    {
                        bufferData.StartTime = TimeUtil.NOW();
                        bufferData.BufferSecs = 0;
                        bufferData.BufferVal = (long)((int)actionParams[0]);
                    }
                    else if (bufferItemType == BufferItemTypes.LuoLanGuiZu_Title)
                    {
                        bufferData.StartTime = TimeUtil.NOW();
                        bufferData.BufferSecs = 0;
                        bufferData.BufferVal = (long)((int)actionParams[0]);
                    }
                    else if (bufferItemType == BufferItemTypes.LuoLanChengZhu_Title)
                    {
                        bufferData.StartTime = TimeUtil.NOW();
                        bufferData.BufferSecs = 0;
                        bufferData.BufferVal = (long)((int)actionParams[0]);
                    }
                    else if (bufferItemType == BufferItemTypes.ShengYuChengZhu_Title)
                    {
                        bufferData.StartTime = TimeUtil.NOW();
                        bufferData.BufferSecs = 0;
                        bufferData.BufferVal = (long)((int)actionParams[0]);
                    }
                    else if (bufferItemType == BufferItemTypes.BangHuiMatchBZ_GoldChengHao || bufferItemType == BufferItemTypes.BangHuiMatchCY_GoldChengHao || bufferItemType == BufferItemTypes.BangHuiMatchBZ_RookieChengHao || bufferItemType == BufferItemTypes.BangHuiMatchCY_RookieChengHao || bufferItemType == BufferItemTypes.CompBossKiller_1 || bufferItemType == BufferItemTypes.CompBossKiller_2 || bufferItemType == BufferItemTypes.CompBossKiller_3 || bufferItemType == BufferItemTypes.CompJunXian_1_1 || bufferItemType == BufferItemTypes.CompJunXian_1_2 || bufferItemType == BufferItemTypes.CompJunXian_1_3 || bufferItemType == BufferItemTypes.CompJunXian_2_1 || bufferItemType == BufferItemTypes.CompJunXian_2_2 || bufferItemType == BufferItemTypes.CompJunXian_2_3 || bufferItemType == BufferItemTypes.CompJunXian_3_1 || bufferItemType == BufferItemTypes.CompJunXian_3_2 || bufferItemType == BufferItemTypes.CompJunXian_3_3 || bufferItemType == BufferItemTypes.CompBattle_Self || bufferItemType == BufferItemTypes.CompBattle_1 || bufferItemType == BufferItemTypes.CompBattle_2 || bufferItemType == BufferItemTypes.CompBattle_3 || bufferItemType == BufferItemTypes.CompBattle_4 || bufferItemType == BufferItemTypes.CompBattle_5 || bufferItemType == BufferItemTypes.ZorkTopTeam_Title || bufferItemType == BufferItemTypes.ZorkTopKiller_Title)
                    {
                        bufferData.StartTime = TimeUtil.NOW();
                        bufferData.BufferSecs = 0;
                        bufferData.BufferVal = (long)((int)actionParams[0]);
                    }
                }
            }
            Global.UpdateDBBufferData(client, bufferData);
            GameManager.ClientMgr.NotifyBufferData(client, bufferData);
        }

        
        public static void UpdateDBBufferData(GameClient client, BufferData bufferData)
        {
            if (bufferData.BufferType < 1)
            {
                GameManager.DBCmdMgr.AddDBCmd(10051, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
                {
                    client.ClientData.RoleID,
                    bufferData.BufferID,
                    bufferData.StartTime,
                    bufferData.BufferSecs,
                    bufferData.BufferVal
                }), null, client.ServerId);
            }
        }

        
        public static void UpdateAllDBBufferData(GameClient client)
        {
            if (null != client.ClientData.BufferDataList)
            {
                lock (client.ClientData.BufferDataList)
                {
                    for (int i = 0; i < client.ClientData.BufferDataList.Count; i++)
                    {
                        BufferItemTypes bufferItemType = (BufferItemTypes)client.ClientData.BufferDataList[i].BufferID;
                        if (bufferItemType == BufferItemTypes.LifeVReserve || bufferItemType == BufferItemTypes.MagicVReserve || bufferItemType == BufferItemTypes.LingLiVReserve || bufferItemType == BufferItemTypes.WaWaExp || bufferItemType == BufferItemTypes.GuMuTimeLimit || bufferItemType == BufferItemTypes.ErGuoTou)
                        {
                            Global.UpdateDBBufferData(client, client.ClientData.BufferDataList[i]);
                        }
                    }
                }
            }
        }

        
        public static void UpdateChengHaoBuff(GameClient client)
        {
            LuoLanChengZhanManager.getInstance().UpdateChengHaoBuff(client);
        }

        
        public static bool IsBufferDataOver(BufferData bufferData, long nowTicks = 0L)
        {
            bool result;
            if (bufferData.BufferID == 4 || bufferData.BufferID == 5 || bufferData.BufferID == 10)
            {
                result = (bufferData.BufferVal <= 0L);
            }
            else if (bufferData.BufferID == 28)
            {
                result = (bufferData.BufferVal <= 0L);
            }
            else if (bufferData.BufferID == 48)
            {
                result = (bufferData.BufferVal <= 0L);
            }
            else if (bufferData.BufferID == 87)
            {
                result = (bufferData.BufferVal < 0L);
            }
            else if (bufferData.BufferID == 99)
            {
                result = (bufferData.BufferVal <= 0L);
            }
            else if (bufferData.BufferID == 31)
            {
                result = (bufferData.BufferVal < 0L);
            }
            else if (bufferData.BufferID == 34)
            {
                if (bufferData.StartTime != (long)TimeUtil.NowDateTime().DayOfYear)
                {
                    result = (bufferData.BufferSecs <= 0);
                }
                else
                {
                    result = (bufferData.BufferVal + (long)bufferData.BufferSecs <= 0L);
                }
            }
            else if (bufferData.BufferID == 85 || bufferData.BufferID == 86)
            {
                nowTicks = TimeUtil.NOW();
                long leftTicks = (long)bufferData.BufferSecs * 1000L;
                result = (nowTicks - bufferData.StartTime >= leftTicks);
            }
            else if (bufferData.BufferID == 103 || bufferData.BufferID == 111 || bufferData.BufferID == 2080010 || bufferData.BufferID == 2080011)
            {
                result = (bufferData.BufferVal == 0L);
            }
            else if (bufferData.BufferID != 39 && GameManager.ClientMgr.VertifyBuffFashion(bufferData.BufferID))
            {
                result = (bufferData.BufferVal == 0L);
            }
            else if (bufferData.BufferType <= 0)
            {
                if (nowTicks <= 0L)
                {
                    nowTicks = TimeUtil.NOW();
                }
                long leftTicks = (long)bufferData.BufferSecs * 1000L;
                result = (nowTicks - bufferData.StartTime >= leftTicks);
            }
            else
            {
                result = (bufferData.StartTime <= 0L);
            }
            return result;
        }

        
        public static void InitTempBuffer(GameClient client)
        {
            if (client.ClientData.Faction > 0)
            {
                int junQiLevel = JunQiManager.GetJunQiLevelByBHID(client.ClientData.Faction);
                Global.UpdateBufferData(client, BufferItemTypes.JunQi, new double[]
                {
                    (double)junQiLevel - 1.0
                }, 1, false);
            }
            Global.ActiveJinMaiBuffer(client, false);
            Global.ActiveZhanHunBuffer(client, false);
        }

        
        public static void AddBufferDataIntoDict(GameClient client, int bufferID, BufferData bufferData)
        {
            lock (client.ClientData.BufferDataDict)
            {
                client.ClientData.BufferDataDict[bufferID] = bufferData;
            }
        }

        
        public static BufferData GetBufferDataFromDict(GameClient client, int bufferID)
        {
            BufferData bufferData = null;
            lock (client.ClientData.BufferDataDict)
            {
                client.ClientData.BufferDataDict.TryGetValue(bufferID, out bufferData);
            }
            return bufferData;
        }

        
        public static bool AddBufferByGoodsID(GameClient client, int goodsID)
        {
            List<MagicActionItem> lsMagicAction = new List<MagicActionItem>();
            bool result;
            if (GameManager.SystemMagicActionMgr.GoodsActionsDict.TryGetValue(goodsID, out lsMagicAction))
            {
                for (int i = 0; i < lsMagicAction.Count; i++)
                {
                    MagicAction.ProcessAction(client, client, lsMagicAction[i].MagicActionID, lsMagicAction[i].MagicActionParams, -1, -1, 0, 1, 0, 0, -1, -1, goodsID, false, false, 1.0, 1, 0.0);
                }
                result = true;
            }
            else
            {
                result = false;
            }
            return result;
        }

        
        public static List<BufferDataMini> GetBufferMiniList(GameClient client)
        {
            List<BufferDataMini> result;
            if (null == client.ClientData.BufferDataList)
            {
                result = null;
            }
            else
            {
                List<BufferDataMini> lBuffMiniList = new List<BufferDataMini>();
                lock (client.ClientData.BufferDataList)
                {
                    for (int i = 0; i < client.ClientData.BufferDataList.Count; i++)
                    {
                        if (Data.IsMiniBufferDataId(client.ClientData.BufferDataList[i].BufferID))
                        {
                            if (!Global.IsBufferDataOver(client.ClientData.BufferDataList[i], 0L))
                            {
                                lBuffMiniList.Add(new BufferDataMini
                                {
                                    BufferID = client.ClientData.BufferDataList[i].BufferID,
                                    StartTime = client.ClientData.BufferDataList[i].StartTime,
                                    BufferVal = client.ClientData.BufferDataList[i].BufferVal,
                                    BufferType = client.ClientData.BufferDataList[i].BufferType,
                                    BufferSecs = client.ClientData.BufferDataList[i].BufferSecs
                                });
                            }
                        }
                    }
                }
                result = lBuffMiniList;
            }
            return result;
        }

        
        public static BufferData GetMonsterBufferDataByID(Monster monster, int bufferID)
        {
            BufferData result;
            if (null == monster.BufferDataDict)
            {
                result = null;
            }
            else
            {
                lock (monster.BufferDataDict)
                {
                    BufferData bufferData = null;
                    monster.BufferDataDict.TryGetValue(bufferID, out bufferData);
                    result = bufferData;
                }
            }
            return result;
        }

        
        private static void AddMonsterBufferData(Monster monster, BufferData bufferData)
        {
            if (null == monster.BufferDataDict)
            {
                monster.BufferDataDict = new Dictionary<int, BufferData>();
            }
            lock (monster.BufferDataDict)
            {
                monster.BufferDataDict[bufferData.BufferID] = bufferData;
            }
        }

        
        public static void RemoveMonsterBufferData(Monster monster, int bufferID)
        {
            if (null != monster.BufferDataDict)
            {
                lock (monster.BufferDataDict)
                {
                    monster.BufferDataDict.Remove(bufferID);
                }
            }
        }

        
        public static void UpdateMonsterBufferData(Monster monster, BufferItemTypes bufferItemType, double[] actionParams)
        {
            BufferData bufferData = Global.GetMonsterBufferDataByID(monster, (int)bufferItemType);
            if (null == bufferData)
            {
                bufferData = new BufferData
                {
                    BufferID = (int)bufferItemType,
                    BufferType = 1,
                    BufferVal = 0L
                };
            }
            if (bufferItemType == BufferItemTypes.ZuZhou)
            {
                bufferData.StartTime = TimeUtil.NOW();
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (long)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.DSTimeAddLifeNoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = ((long)actionParams[1] << 32 | (long)actionParams[2]);
            }
            else if (bufferItemType == BufferItemTypes.DSTimeShiDuNoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = ((long)actionParams[1] << 32 | (long)actionParams[2]);
            }
            else if (bufferItemType == BufferItemTypes.TimeFEIXUENoShow || bufferItemType == BufferItemTypes.TimeZHONGDUNoShow || bufferItemType == BufferItemTypes.TimeLINGHUNoShow || bufferItemType == BufferItemTypes.TimeRANSHAONoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = 0L;
            }
            else if (bufferItemType == BufferItemTypes.TimeHUZHAONoShow)
            {
                bufferData.StartTime = (long)((int)actionParams[0]);
                bufferData.BufferVal = (long)((int)actionParams[0]);
            }
            else if (bufferItemType == BufferItemTypes.TimeWUDIHUZHAONoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = 0L;
            }
            else if (bufferItemType == BufferItemTypes.MU_MARRIAGE_SUBDAMAGEPERCENTTIMER)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (long)(actionParams[1] * 100.0);
            }
            Global.AddMonsterBufferData(monster, bufferData);
        }

        
        private static long GetLastDBCmdTicks(GameClient client, int dbCmdID, long nowTicks)
        {
            long lastDbCmdTicks = 0L;
            lock (client.ClientData.LastDBCmdTicksDict)
            {
                if (client.ClientData.LastDBCmdTicksDict.TryGetValue(dbCmdID, out lastDbCmdTicks))
                {
                    return lastDbCmdTicks;
                }
            }
            return nowTicks;
        }

        
        public static void SetLastDBCmdTicks(GameClient client, int dbCmdID, long nowTicks)
        {
            lock (client.ClientData.LastDBCmdTicksDict)
            {
                client.ClientData.LastDBCmdTicksDict[dbCmdID] = nowTicks;
            }
        }

        
        public static void ProcessDBCmdByTicks(GameClient client, bool force = false)
        {
            if (client.ClientData.HideGM <= 0)
            {
                DateTime dateTime = TimeUtil.NowDateTime();
                long nowTicks = dateTime.Ticks / 10000L;
                bool instantUpdate = Global.InstantDBUpdateRoleStat(dateTime);
                long lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10004, nowTicks);
                if (nowTicks - lastDbCmdTicks >= 3600000L || force)
                {
                    string strcmd = string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.Money1);
                    GameManager.DBCmdMgr.AddDBCmd(10004, strcmd, null, client.ServerId);
                    Global.SetLastDBCmdTicks(client, 10004, nowTicks);
                }
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10003, nowTicks);
                if (nowTicks - lastDbCmdTicks >= 3600000L || force)
                {
                    GameManager.DBCmdMgr.AddDBCmd(10003, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.InterPower), null, client.ServerId);
                    Global.SetLastDBCmdTicks(client, 10003, nowTicks);
                }
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10002, nowTicks);
                if (nowTicks - lastDbCmdTicks >= 3600000L || force || instantUpdate)
                {
                    if (client.ClientData.IsFlashPlayer == 1 && force)
                    {
                        client.ClientData.Level = 1;
                        client.ClientData.Experience = 0L;
                    }
                    GameManager.DBCmdMgr.AddDBCmd(10002, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.Level, client.ClientData.Experience), null, client.ServerId);
                    Global.SetLastDBCmdTicks(client, 10002, nowTicks);
                }
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10009, nowTicks);
                if (nowTicks - lastDbCmdTicks >= 3600000L || force)
                {
                    GameManager.DBCmdMgr.AddDBCmd(10009, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.PKValue, client.ClientData.PKPoint), null, client.ServerId);
                    Global.SetLastDBCmdTicks(client, 10009, nowTicks);
                }
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10054, nowTicks);
                if (nowTicks - lastDbCmdTicks >= 3600000L || force || instantUpdate)
                {
                    GameManager.DBCmdMgr.AddDBCmd(10054, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.LianZhan), null, client.ServerId);
                    Global.SetLastDBCmdTicks(client, 10054, nowTicks);
                }
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10055, nowTicks);
                if (nowTicks - lastDbCmdTicks >= 3600000L || force || instantUpdate)
                {
                    GameManager.DBCmdMgr.AddDBCmd(10055, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.KillBoss), null, client.ServerId);
                    Global.SetLastDBCmdTicks(client, 10055, nowTicks);
                }
                if (null != client.ClientData.MyRoleDailyData)
                {
                    lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10050, nowTicks);
                    if (nowTicks - lastDbCmdTicks >= 3600000L || force)
                    {
                        RoleDailyData roleDailyData = client.ClientData.MyRoleDailyData;
                        GameManager.DBCmdMgr.AddDBCmd(10050, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}", new object[]
                        {
                            client.ClientData.RoleID,
                            roleDailyData.ExpDayID,
                            roleDailyData.TodayExp,
                            roleDailyData.LingLiDayID,
                            roleDailyData.TodayLingLi,
                            roleDailyData.KillBossDayID,
                            roleDailyData.TodayKillBoss,
                            roleDailyData.FuBenDayID,
                            roleDailyData.TodayFuBenNum,
                            roleDailyData.WuXingDayID,
                            roleDailyData.WuXingNum,
                            roleDailyData.RebornExpDayID,
                            roleDailyData.RebornExpMonster,
                            roleDailyData.RebornExpSale
                        }), null, client.ServerId);
                        Global.SetLastDBCmdTicks(client, 10050, nowTicks);
                    }
                }
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10056, nowTicks);
                if (nowTicks - lastDbCmdTicks >= 3600000L || force || instantUpdate)
                {
                    GameManager.DBCmdMgr.AddDBCmd(10056, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
                    {
                        client.ClientData.RoleID,
                        client.ClientData.RoleEquipJiFen,
                        client.ClientData.RoleXueWeiNum,
                        client.ClientData.TotalLearnedSkillLevelCount,
                        client.ClientData.RoleHorseJiFen
                    }), null, client.ServerId);
                    Global.SetLastDBCmdTicks(client, 10056, nowTicks);
                }
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10064, nowTicks);
                if (nowTicks - lastDbCmdTicks >= 3600000L || force || instantUpdate)
                {
                    GameManager.DBCmdMgr.AddDBCmd(10064, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.BattleNum), null, client.ServerId);
                    Global.SetLastDBCmdTicks(client, 10064, nowTicks);
                }
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10065, nowTicks);
                if (nowTicks - lastDbCmdTicks >= 3600000L || force || instantUpdate)
                {
                    GameManager.DBCmdMgr.AddDBCmd(10065, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.HeroIndex), null, client.ServerId);
                    Global.SetLastDBCmdTicks(client, 10065, nowTicks);
                }
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 10133, nowTicks);
                if (nowTicks - lastDbCmdTicks >= 1800000L || force)
                {
                    Global.CalculateCombatForce(client);
                    GameManager.DBCmdMgr.AddDBCmd(10133, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
                    {
                        client.ClientData.RoleID,
                        client.ClientData.CombatForce,
                        client.ClientData.Level,
                        client.ClientData.ChangeLifeCount,
                        client.ClientData.YinLiang
                    }), null, client.ServerId);
                    Global.SetLastDBCmdTicks(client, 10133, nowTicks);
                }
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, 694, 0L);
                if (nowTicks - lastDbCmdTicks >= 120000L)
                {
                    if (lastDbCmdTicks > 0L)
                    {
                        Global.sendToDB<int, FastCacheData>(694, new FastCacheData
                        {
                            ID = client.ClientData.RoleID,
                            Flag_BaseInfo = true,
                            ZhanLi = (long)client.ClientData.CombatForce,
                            Position = string.Format("{0}:{1}:{2}:{3}", new object[]
                            {
                                client.ClientData.MapCode,
                                4,
                                client.ClientData.PosX,
                                client.ClientData.PosY
                            })
                        }, client.ServerId);
                    }
                    Global.SetLastDBCmdTicks(client, 694, nowTicks);
                }
            }
        }

        
        private static bool InstantDBUpdateRoleStat(DateTime dateTime)
        {
            int day = dateTime.DayOfYear;
            int hour = dateTime.Hour;
            int minute = dateTime.Minute;
            bool result;
            if (day != Global.LastDBUpdateRoleStatDay)
            {
                Global.LastDBUpdateRoleStatDay = day;
                Global.LastDBUpdateRoleStatHour = hour;
                Global.LastDBUpdateRoleStatMinute = minute;
                result = false;
            }
            else if (hour == Global.LastDBUpdateRoleStatHour && minute == Global.LastDBUpdateRoleStatMinute)
            {
                result = false;
            }
            else
            {
                int lastTime = Global.LastDBUpdateRoleStatHour * 60 + Global.LastDBUpdateRoleStatMinute;
                int nowTime = hour * 60 + minute;
                bool ret = false;
                int itemTime = 405;
                if (itemTime > lastTime)
                {
                    if (nowTime >= itemTime)
                    {
                        ret = true;
                    }
                }
                Global.LastDBUpdateRoleStatDay = day;
                Global.LastDBUpdateRoleStatHour = hour;
                Global.LastDBUpdateRoleStatMinute = minute;
                result = ret;
            }
            return result;
        }

        
        private static long GetLastDBSkillCmdTicks(GameClient client, int skillID)
        {
            long lastDbSkillCmdTicks = 0L;
            lock (client.ClientData.LastDBSkillCmdTicksDict)
            {
                if (client.ClientData.LastDBSkillCmdTicksDict.TryGetValue(skillID, out lastDbSkillCmdTicks))
                {
                    return lastDbSkillCmdTicks;
                }
            }
            return 0L;
        }

        
        public static void SetLastDBSkillCmdTicks(GameClient client, int skillID, long nowTicks)
        {
            lock (client.ClientData.LastDBSkillCmdTicksDict)
            {
                client.ClientData.LastDBSkillCmdTicksDict[skillID] = nowTicks;
            }
        }

        
        public static void ProcessDBSkillCmdByTicks(GameClient client, bool force = false)
        {
            if (null != client.ClientData.SkillDataList)
            {
                long nowTicks = TimeUtil.NOW();
                lock (client.ClientData.SkillDataList)
                {
                    for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                    {
                        SkillData skillData = client.ClientData.SkillDataList[i];
                        if (skillData.DbID >= 0)
                        {
                            long lastDbSillCmdTicks = Global.GetLastDBSkillCmdTicks(client, skillData.SkillID);
                            if (lastDbSillCmdTicks > 0L && (nowTicks - lastDbSillCmdTicks >= 7200000L || force))
                            {
                                Global.SetLastDBSkillCmdTicks(client, skillData.SkillID, 0L);
                                GameManager.DBCmdMgr.AddDBCmd(10037, string.Format("{0}:{1}:{2}:{3}", new object[]
                                {
                                    client.ClientData.RoleID,
                                    skillData.DbID,
                                    skillData.SkillLevel,
                                    skillData.UsedNum
                                }), null, client.ServerId);
                            }
                        }
                    }
                }
            }
        }

        
        private static long GetLastDBRoleParamCmdTicks(GameClient client, string paramName)
        {
            long lastDbRoleParamCmdTicks = 0L;
            lock (client.ClientData.LastDBRoleParamCmdTicksDict)
            {
                if (client.ClientData.LastDBRoleParamCmdTicksDict.TryGetValue(paramName, out lastDbRoleParamCmdTicks))
                {
                    return lastDbRoleParamCmdTicks;
                }
            }
            return 0L;
        }

        
        public static void SetLastDBRoleParamCmdTicks(GameClient client, string paramName, long nowTicks)
        {
            lock (client.ClientData.LastDBRoleParamCmdTicksDict)
            {
                client.ClientData.LastDBRoleParamCmdTicksDict[paramName] = nowTicks;
            }
        }

        
        public static void ProcessDBRoleParamCmdByTicks(GameClient client, bool force = false)
        {
            if (null != client.ClientData.RoleParamsDict)
            {
                long nowTicks = TimeUtil.NOW();
                List<string> changeList = new List<string>();
                lock (client.ClientData.LastDBRoleParamCmdTicksDict)
                {
                    List<string> keysList = client.ClientData.LastDBRoleParamCmdTicksDict.Keys.ToList<string>();
                    int keysListCount = keysList.Count;
                    for (int i = 0; i < keysListCount; i++)
                    {
                        string key = keysList[i];
                        long lastDbRoleParamCmdTicks = client.ClientData.LastDBRoleParamCmdTicksDict[key];
                        if (lastDbRoleParamCmdTicks > 0L)
                        {
                            if (nowTicks - lastDbRoleParamCmdTicks >= 7200000L || force)
                            {
                                changeList.Add(key);
                                Global.SetLastDBRoleParamCmdTicks(client, key, 0L);
                            }
                        }
                    }
                }
                foreach (string key in changeList)
                {
                    string paramValue = Global.GetRoleParamByName(client, key);
                    GameManager.DBCmdMgr.AddDBCmd(10100, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, key, paramValue), null, client.ServerId);
                }
            }
        }

        
        private static long GetLastDBEquipStrongCmdTicks(GameClient client, int goodsDbID)
        {
            long lastDbEquipStrongCmdTicks = 0L;
            lock (client.ClientData.LastDBEquipStrongCmdTicksDict)
            {
                if (client.ClientData.LastDBEquipStrongCmdTicksDict.TryGetValue(goodsDbID, out lastDbEquipStrongCmdTicks))
                {
                    return lastDbEquipStrongCmdTicks;
                }
            }
            return 0L;
        }

        
        public static void SetLastDBEquipStrongCmdTicks(GameClient client, int goodsDbID, long nowTicks, bool forceAdd)
        {
            lock (client.ClientData.LastDBEquipStrongCmdTicksDict)
            {
                long oldTicks;
                if (forceAdd)
                {
                    client.ClientData.LastDBEquipStrongCmdTicksDict[goodsDbID] = nowTicks;
                }
                else if (!client.ClientData.LastDBEquipStrongCmdTicksDict.TryGetValue(goodsDbID, out oldTicks) || oldTicks <= 0L || oldTicks > nowTicks)
                {
                    client.ClientData.LastDBEquipStrongCmdTicksDict[goodsDbID] = nowTicks;
                }
            }
        }

        
        public static void ProcessDBEquipStrongCmdByTicks(GameClient client, bool force = false)
        {
            if (null != client.ClientData.GoodsDataList)
            {
                long nowTicks = TimeUtil.NOW();
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        GoodsData goodsData = client.ClientData.GoodsDataList[i];
                        if (goodsData.Using > 0)
                        {
                            long lastDbEquipStrongCmdTicks = Global.GetLastDBEquipStrongCmdTicks(client, goodsData.Id);
                            if (lastDbEquipStrongCmdTicks > 0L)
                            {
                                if (nowTicks - lastDbEquipStrongCmdTicks >= 7200000L || force)
                                {
                                    Global.UpdateEquipStrong(client, goodsData);
                                }
                            }
                        }
                    }
                }
            }
        }

        
        public static void UpdateEquipStrong(GameClient client, GoodsData goodsData)
        {
            Global.ModGoodsStrongDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData);
            Global.SetLastDBEquipStrongCmdTicks(client, goodsData.Id, 0L, true);
        }

        
        public static void ForceCloseClient(GameClient client, string reason = "", bool sync = true)
        {
            if (!string.IsNullOrEmpty(reason))
            {
                reason = string.Format("RoleID={0}, RoleName={1}, 强制关闭:{2}", client.ClientData.RoleID, client.ClientData.RoleName, reason);
            }
            client.ClientData.ClosingClientStep = 1;
            Global._TCPManager.MySocketListener.CloseSocket(client.ClientSocket, reason);
        }

        
        public static void ForceCloseSocket(TMSKSocket socket, string reason = "", bool sync = true)
        {
            if ("" != reason || string.IsNullOrEmpty(socket.CloseReason))
            {
                socket.CloseReason = reason;
            }
            Global._TCPManager.ExternalClearSocket(socket);
        }

        
        public static void ProcessClientHeart(GameClient client)
        {
            long nowTicks = TimeUtil.NOW();
            if (client.CheckCheatData.ProcessBoosterTicks > 0L && nowTicks - client.CheckCheatData.ProcessBoosterTicks > 90000L)
            {
                if (TimeUtil.HasTimeDrift())
                {
                    client.CheckCheatData.ProcessBoosterTicks = 0L;
                }
                else
                {
                    client.CheckCheatData.ProcessBooster = true;
                }
            }
            string detail;
            if (nowTicks - client.ClientData.LastClientHeartTicks < 180000L)
            {
                if (!client.CheckCheatData.MismatchingMapCode)
                {
                    return;
                }
                if (nowTicks - client.ClientData.ServerPosTicks < 60000L)
                {
                    return;
                }
                detail = "客户端在心跳时间内，但是地图不匹配，并且超出了地图错误的上报时间";
            }
            else
            {
                detail = "客户端心跳超时";
            }
            if (0 == client.ClientData.ClosingClientStep)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("RoleID={0}, RoleName={1}, IP={2} 已经无心跳", client.ClientData.RoleID, client.ClientData.RoleName, Global.GetSocketRemoteEndPoint(client.ClientSocket, false)), null, true);
                Global.ForceCloseClient(client, detail, true);
            }
            else if (1 == client.ClientData.ClosingClientStep)
            {
                if (nowTicks - client.ClientData.LastClientHeartTicks >= 240000L)
                {
                    client.ClientData.ClosingClientStep = 2;
                    Global.ForceCloseSocket(client.ClientSocket, "", true);
                }
            }
        }

        
        public static void UpdateHuoDongDBCommand(TCPOutPacketPool pool, GameClient client)
        {
            HuodongData huodongData = client.ClientData.MyHuodongData;
            string StepTimeStr = new DateTime(huodongData.StepTime * 10000L).ToString("yyyy-MM-dd HH$mm$ss");
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}:{14}:{15}:{16}:{17}:{18}:{19}:{20}:{21}", new object[]
            {
                client.ClientData.RoleID,
                huodongData.LastWeekID,
                huodongData.LastDayID,
                huodongData.LoginNum,
                huodongData.NewStep,
                StepTimeStr,
                huodongData.LastMTime,
                huodongData.CurMID,
                huodongData.CurMTime,
                huodongData.SongLiID,
                huodongData.LoginGiftState,
                huodongData.OnlineGiftState,
                huodongData.LastLimitTimeHuoDongID,
                huodongData.LastLimitTimeDayID,
                huodongData.LimitTimeLoginNum,
                huodongData.LimitTimeGiftState,
                huodongData.EveryDayOnLineAwardStep,
                huodongData.GetEveryDayOnLineAwardDayID,
                huodongData.SeriesLoginGetAwardStep,
                huodongData.SeriesLoginAwardDayID,
                huodongData.SeriesLoginAwardGoodsID,
                huodongData.EveryDayOnLineAwardGoodsID
            });
            GameManager.DBCmdMgr.AddDBCmd(10045, strcmd, null, client.ServerId);
        }

        
        public static bool UpdateWeekLoginNum(GameClient client)
        {
            int weekID = (int)TimeUtil.NowDateTime().DayOfWeek;
            int todayID = TimeUtil.NowDateTime().DayOfYear;
            int lastDayId = Global.SafeConvertToInt32(client.ClientData.MyHuodongData.LastDayID);
            bool result;
            if (lastDayId >= todayID && Math.Abs(lastDayId - todayID) < 2)
            {
                result = false;
            }
            else
            {
                bool reset = false;
                if (1 != weekID)
                {
                    if (client.ClientData.MyHuodongData.LastDayID != todayID.ToString())
                    {
                        if (client.ClientData.MyHuodongData.LastDayID == TimeUtil.NowDateTime().AddDays(-1.0).DayOfYear.ToString())
                        {
                            client.ClientData.MyHuodongData.LastDayID = todayID.ToString();
                            client.ClientData.MyHuodongData.LoginNum++;
                            return true;
                        }
                        reset = true;
                    }
                }
                else
                {
                    reset = true;
                }
                if (reset)
                {
                    client.ClientData.MyHuodongData.LoginGiftState = 0;
                    client.ClientData.MyHuodongData.LastWeekID = weekID.ToString();
                    client.ClientData.MyHuodongData.LastDayID = todayID.ToString();
                    client.ClientData.MyHuodongData.LoginNum = 1;
                    result = true;
                }
                else
                {
                    result = false;
                }
            }
            return result;
        }

        
        public static void InitNewStep(GameClient client)
        {
            if (client.ClientData.MyHuodongData.NewStep <= 0)
            {
                if (client.ClientData.MyHuodongData.StepTime <= 0L)
                {
                    client.ClientData.MyHuodongData.StepTime = TimeUtil.NOW();
                }
            }
        }

        
        public static bool UpdateLimitTimeLoginNum(GameClient client)
        {
            int todayID = TimeUtil.NowDateTime().DayOfYear;
            int currentHuoDongID = HuodongCachingMgr.GetLimitTimeLoginHuoDongID();
            if (currentHuoDongID > 0)
            {
                if (currentHuoDongID != client.ClientData.MyHuodongData.LastLimitTimeHuoDongID)
                {
                    client.ClientData.MyHuodongData.LastLimitTimeHuoDongID = currentHuoDongID;
                    client.ClientData.MyHuodongData.LastLimitTimeDayID = todayID;
                    client.ClientData.MyHuodongData.LimitTimeLoginNum = 1;
                    client.ClientData.MyHuodongData.LimitTimeGiftState = 0;
                    return true;
                }
                if (todayID != client.ClientData.MyHuodongData.LastLimitTimeDayID)
                {
                    client.ClientData.MyHuodongData.LastLimitTimeDayID = todayID;
                    client.ClientData.MyHuodongData.LimitTimeLoginNum++;
                    return true;
                }
            }
            return false;
        }

        
        public static object TryLockObject(object obj, int millisecondsTimeout = 5000)
        {
            bool lockWasTaken = false;
            Monitor.TryEnter(obj, millisecondsTimeout, ref lockWasTaken);
            object result;
            if (lockWasTaken)
            {
                result = obj;
            }
            else
            {
                try
                {
                    StackTrace stackTrace = new StackTrace(1, true);
                    DataHelper.WriteFormatStackLog(stackTrace, "");
                }
                catch (Exception)
                {
                }
                result = null;
            }
            return result;
        }

        
        public static void FinalUnLockObject(object obj)
        {
            if (null != obj)
            {
                Monitor.Exit(obj);
            }
        }

        
        public static long GetMonsterStartMoveTicks(Monster monster)
        {
            return TimeUtil.NOW();
        }

        
        public static long GetClientStartMoveTicks(GameClient client)
        {
            return TimeUtil.NOW();
        }

        
        public static long GetPetStartMoveTicks(GameClient client)
        {
            return TimeUtil.NOW();
        }

        
        public static int GetNameColorIndexByPKPoints(int pkPoints)
        {
            int result;
            if (pkPoints >= 0 && pkPoints <= 99)
            {
                result = 0;
            }
            else if (pkPoints >= 100 && pkPoints <= 199)
            {
                result = 1;
            }
            else
            {
                result = 2;
            }
            return result;
        }

        
        public static int GetLaoFangMapCode()
        {
            if (-1 == Global.LaoFangMapCode)
            {
                Global.LaoFangMapCode = (int)GameManager.systemParamsList.GetParamValueIntByName("LaoFangMapCode", -1);
            }
            return Global.LaoFangMapCode;
        }

        
        public static void ForceChangeToLaoFangMap(RoleDataEx roleDataEx)
        {
            int toMapCode = Global.GetLaoFangMapCode();
            if (-1 != toMapCode)
            {
                if (roleDataEx.PKPoint >= Global.MinEnterJailPKPoints)
                {
                    roleDataEx.MapCode = toMapCode;
                    roleDataEx.PosX = 0;
                    roleDataEx.PosY = 0;
                }
            }
        }

        
        public static void ForceSendToLaoFangMap(GameClient client, int pkPoints)
        {
            if (client.ClientData.MapCode == GameManager.MainMapCode)
            {
                client.ClientData.PKPoint = pkPoints;
                GameManager.ClientMgr.SetRolePKValuePoint(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, client.ClientData.PKValue, client.ClientData.PKPoint, false);
                int toMapCode = Global.GetLaoFangMapCode();
                if (-1 != toMapCode)
                {
                    GameMap gameMap = null;
                    if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                    {
                        GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
                    }
                }
            }
        }

        
        public static void ForceTakeOutLaoFangMap(GameClient client, int pkPoints)
        {
            if (client.ClientData.MapCode == Global.GetLaoFangMapCode())
            {
                client.ClientData.PKPoint = pkPoints;
                GameManager.ClientMgr.SetRolePKValuePoint(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, client.ClientData.PKValue, client.ClientData.PKPoint, false);
                int toMapCode = GameManager.MainMapCode;
                if (-1 != toMapCode)
                {
                    GameMap gameMap = null;
                    if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                    {
                        GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
                    }
                }
            }
        }

        
        public static bool AddToTodayRoleKillRoleSet(int clientID, int enemyID)
        {
            long key = (long)((long)clientID << 32 + enemyID);
            lock (Global.RoleKillRoleSet)
            {
                if (!Global.RoleKillRoleSet.Contains(key))
                {
                    Global.RoleKillRoleSet.Add(key);
                    return true;
                }
            }
            return false;
        }

        
        public static void ClearTodayRoleKillRoleSet()
        {
            lock (Global.RoleKillRoleSet)
            {
                Global.RoleKillRoleSet.Clear();
            }
        }

        
        public static bool IsPurpleName(GameClient client)
        {
            long ticks = TimeUtil.NOW();
            return ticks - client.ClientData.StartPurpleNameTicks < Global.MaxPurpleNameTicks;
        }

        
        public static bool IsRedName(GameClient client)
        {
            return client.ClientData.PKPoint >= Global.MinRedNamePKPoints;
        }

        
        public static LianZhanConfig GetLianZhanBufferVal(int lianZhanNum)
        {
            LianZhanConfig result;
            if (Data.LianZhanConfigList == null || Data.LianZhanConfigList.Count == 0)
            {
                result = null;
            }
            else if (lianZhanNum >= Data.MaxLianZhanNum)
            {
                if (lianZhanNum % Data.MaxLianZhanNum == 0)
                {
                    result = Data.LianZhanConfigList[Data.LianZhanConfigList.Count - 1];
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = Data.LianZhanConfigList.Find((LianZhanConfig x) => x.Num == lianZhanNum);
            }
            return result;
        }

        
        public static bool CanContinueLianZhan(GameClient client)
        {
            bool result;
            if (client.ClientData.StartLianZhanTicks <= 0L)
            {
                result = false;
            }
            else if (client.ClientData.WaitingLianZhanMS <= 0L)
            {
                result = false;
            }
            else
            {
                long ticks = TimeUtil.NOW();
                result = (ticks - client.ClientData.StartLianZhanTicks < client.ClientData.WaitingLianZhanMS);
            }
            return result;
        }

        
        public static double GetLianZhanSecs(int lianZhanNum)
        {
            int index = 0;
            for (int i = 0; i < Global.LianZhanNums.Length; i++)
            {
                if (lianZhanNum < Global.LianZhanNums[i])
                {
                    index = i - 1;
                    break;
                }
            }
            return Global.LianZhanSecs[index];
        }

        
        public static string GetLianZhanBufferName(int bufferVal)
        {
            string result;
            if (bufferVal < 0 || bufferVal >= Global.LianZhanBufferNames.Length)
            {
                result = "";
            }
            else
            {
                result = GLang.GetLang(Global.LianZhanBufferNames[bufferVal]);
            }
            return result;
        }

        
        public static void BroadcastRoleActionMsg(GameClient client, RoleActionsMsgTypes msgType, string msgText, bool sendToOtherLines = true, GameInfoTypeIndexes infoType = GameInfoTypeIndexes.Normal, ShowGameInfoTypes showType = ShowGameInfoTypes.None, int minZhuanSheng = 0, int minLevel = 0, int maxZhuanSheng = 100, int maxLevel = 100)
        {
            int roleID = (client == null) ? -1 : client.ClientData.RoleID;
            if (!string.IsNullOrEmpty(msgText))
            {
                if (msgType == RoleActionsMsgTypes.Bulletin)
                {
                    Global.StartBulletinID++;
                    string msgID = string.Format("{0}_{1}", Global.StartBulletinID, GameManager.ServerLineID);
                    int minutes = 0;
                    int playNum = 1;
                    BulletinMsgData bulletinMsgData = GameManager.BulletinMsgMgr.AddBulletinMsg(msgID, minutes, playNum, msgText, 1);
                    GameManager.ClientMgr.NotifyAllBulletinMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, null, bulletinMsgData, minZhuanSheng, minLevel);
                    if (sendToOtherLines)
                    {
                        msgText = msgText.Replace(" ", "\u3000");
                        string gmCmdData = string.Format("-sysmsg {0} {1} {2} {3}", new object[]
                        {
                            msgID,
                            minutes,
                            playNum,
                            msgText
                        });
                        GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
                        {
                            roleID,
                            "",
                            0,
                            "",
                            0,
                            gmCmdData,
                            0,
                            0,
                            GameManager.ServerLineID
                        }), null, 0);
                    }
                }
                else if (msgType == RoleActionsMsgTypes.HintMsg)
                {
                    GameManager.ClientMgr.NotifyAllImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, null, msgText, infoType, showType, 0, minZhuanSheng, minLevel, maxZhuanSheng, maxLevel);
                    if (sendToOtherLines)
                    {
                        msgText = msgText.Replace(" ", "\u3000");
                        string gmCmdData = string.Format("-hintmsg {0} {1} {2}", (int)infoType, (int)showType, msgText);
                        GameManager.DBCmdMgr.AddDBCmd(157, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", new object[]
                        {
                            roleID,
                            "",
                            0,
                            "",
                            0,
                            gmCmdData,
                            0,
                            0,
                            GameManager.ServerLineID
                        }), null, 0);
                    }
                }
            }
        }

        
        public static void BroadcastBangHuiMsg(int roleID, int faction, string msgText, bool sendToOtherLines = true, GameInfoTypeIndexes infoType = GameInfoTypeIndexes.Normal, ShowGameInfoTypes showType = ShowGameInfoTypes.None)
        {
            GameManager.ClientMgr.NotifyBangHuiImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, faction, msgText, infoType, showType, 0);
        }

        
        public static void BroadcastVipOnceAwardHint(GameClient client)
        {
        }

        
        public static void BroadcastVipFetchYuanBaoAwardMsg(GameClient client, int yuanBaoNum)
        {
        }

        
        public static void BroadcastVipFetchBindYuanBaoAwardMsg(GameClient client, int yuanBaoNum)
        {
        }

        
        public static void BroadcastXKilledY(GameClient client, GameClient enemy)
        {
            if (client.ClientData.MapCode != GameManager.ArenaBattleMgr.BattleMapCode)
            {
                if (client.ClientData.MapCode == GameManager.BattleMgr.BattleMapCode)
                {
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(202, new object[0]), new object[]
                    {
                        Global.GetBattleZhenYing(enemy),
                        Global.FormatRoleName(enemy, enemy.ClientData.RoleName),
                        Global.GetBattleZhenYing(client),
                        Global.FormatRoleName(client, client.ClientData.RoleName)
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
                }
                else if (Global.IsHuangGongMapCode(client.ClientData.MapCode))
                {
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(203, new object[0]), new object[]
                    {
                        Global.FormatRoleName(enemy, enemy.ClientData.RoleName),
                        Global.FormatRoleName(client, client.ClientData.RoleName)
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
                }
                else if (Global.GetWangChengMapCode() == client.ClientData.MapCode)
                {
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(204, new object[0]), new object[]
                    {
                        Global.FormatRoleName(enemy, enemy.ClientData.RoleName),
                        Global.FormatRoleName(client, client.ClientData.RoleName)
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
                }
                else if (enemy.ClientData.Faction > 0 && enemy.ClientData.Faction != client.ClientData.Faction)
                {
                    Global.BroadcastBangHuiMsg(enemy.ClientData.RoleID, enemy.ClientData.Faction, StringUtil.substitute(GLang.GetLang(207, new object[0]), new object[]
                    {
                        Global.FormatRoleName(enemy, enemy.ClientData.RoleName),
                        Global.GetServerLineName2(),
                        Global.GetMapName(client.ClientData.MapCode),
                        Global.FormatRoleName(client, client.ClientData.RoleName)
                    }), true, GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlyChatBox);
                }
            }
        }

        
        public static void BroadcastXKilledMonster(GameClient client, Monster monster)
        {
            SceneUIClasses sceneType = Global.GetMapSceneType(monster.CurrentMapCode);
            if (Global.GetMapType(monster.CurrentMapCode) == MapTypes.Normal && SceneUIClasses.Comp != sceneType && !ThemeBoss.getInstance().IsThemeBoss(monster))
            {
                string broadCastMsg = null;
                if (401 == monster.MonsterType)
                {
                    broadCastMsg = StringUtil.substitute(GLang.GetLang(208, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetMapName(monster.CurrentMapCode),
                        monster.MonsterInfo.VSName
                    });
                }
                else if (601 == monster.MonsterType || 501 == monster.MonsterType)
                {
                    broadCastMsg = StringUtil.substitute(GLang.GetLang(209, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetMapName(monster.CurrentMapCode),
                        monster.MonsterInfo.VSName
                    });
                    Global.AddHuoDongEvent(client, monster.MonsterType, monster.MonsterInfo.VSName);
                }
                if (null != broadCastMsg)
                {
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastUpLevel(GameClient client, int oldLevel)
        {
            if (oldLevel / 10 != client.ClientData.Level / 10)
            {
                if (client.ClientData.Level / 10 >= 3)
                {
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(210, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        client.ClientData.Level
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastJingMaiLevelOk(GameClient client, JingMaiData jingMaiData)
        {
            if (jingMaiData.JingMaiLevel >= Global.MaxJingMaiLevel)
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(211, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetJingMaiBodyLevelName(jingMaiData.JingMaiBodyLevel - 1),
                    Global.GetJingMaiName(jingMaiData.JingMaiID)
                });
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastJingMaiBodyLevelOk(GameClient client, int oldJingMaiBodyLevel)
        {
            if (oldJingMaiBodyLevel != client.ClientData.JingMaiBodyLevel)
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(212, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetJingMaiBodyLevelName(oldJingMaiBodyLevel - 1)
                });
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastEnchanceOk(GameClient client, GoodsData goodsData)
        {
            if (goodsData.Quality >= 3)
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(213, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetGoodsNameByID(goodsData.GoodsID),
                    Global.GetEnchanceText((GoodsQuality)goodsData.Quality)
                });
                Global.BroadcastRoleActionMsg(client, (goodsData.Quality >= 3) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastForgeOk(GameClient client, GoodsData goodsData)
        {
            if (goodsData.Forge_level == 9 || goodsData.Forge_level == 13 || goodsData.Forge_level == 15 || goodsData.Forge_level == 18 || goodsData.Forge_level == 20)
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(214, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetGoodsNameByID(goodsData.GoodsID),
                    goodsData.Forge_level
                });
                Global.BroadcastRoleActionMsg(client, (goodsData.Forge_level >= 6) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastJingLianOk(GameClient client, int goodsID)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(215, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetGoodsNameByID(goodsID)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastSubForgeOk(GameClient client, GoodsData goodsData)
        {
            int nowAddProIndex = goodsData.AddPropIndex;
            if (nowAddProIndex >= 6)
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(216, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetGoodsNameByID(goodsData.GoodsID),
                    nowAddProIndex
                });
                Global.BroadcastRoleActionMsg(client, (nowAddProIndex >= 6) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastEquipBornUpdateComleted(GameClient client, GoodsData goodsData, int oldEquipBornIndex)
        {
        }

        
        public static void BroadcastEquipUpgradeOk(GameClient client, int oldGoodsID, int newGoodsID, int quality, int forge_Level)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(218, new object[0]), new object[]
            {
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetGoodsNameByID(newGoodsID)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastChuanChengOk(GameClient client, GoodsData leftGoodsData, GoodsData rightGoodsData)
        {
            string equipProTipString = "";
            if (rightGoodsData.Quality >= 3)
            {
                equipProTipString += Global.GetEnchanceText((GoodsQuality)rightGoodsData.Quality);
            }
            if (rightGoodsData.Forge_level >= 6)
            {
                if (equipProTipString.Length > 0)
                {
                    equipProTipString += " ";
                }
                equipProTipString += string.Format(GLang.GetLang(220, new object[0]), rightGoodsData.Forge_level);
            }
            if (!string.IsNullOrEmpty(equipProTipString))
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(223, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    equipProTipString,
                    Global.GetGoodsNameByID(rightGoodsData.GoodsID)
                });
                RoleActionsMsgTypes msgType = (rightGoodsData.Quality >= 3 || rightGoodsData.Forge_level >= 6) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg;
                if (rightGoodsData.Forge_level == 9 || rightGoodsData.Forge_level == 13 || rightGoodsData.Forge_level == 15 || rightGoodsData.Forge_level == 18 || rightGoodsData.Forge_level == 20)
                {
                    Global.BroadcastRoleActionMsg(client, msgType, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastAppendChuanChengOk(GameClient client, GoodsData leftGoodsData, GoodsData rightGoodsData)
        {
            string equipProTipString = "";
            if (rightGoodsData.AppendPropLev > 10 && rightGoodsData.AppendPropLev % 10 == 0)
            {
                if (equipProTipString.Length > 0)
                {
                    equipProTipString += " ";
                }
                equipProTipString += string.Format(GLang.GetLang(224, new object[0]), rightGoodsData.AppendPropLev);
            }
            if (!string.IsNullOrEmpty(equipProTipString))
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(225, new object[0]), new object[]
                {
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    equipProTipString,
                    Global.GetGoodsNameByID(rightGoodsData.GoodsID)
                });
                RoleActionsMsgTypes msgType = RoleActionsMsgTypes.HintMsg;
                Global.BroadcastRoleActionMsg(client, msgType, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastHorseUpgradeOk(GameClient client, int oldHorseID, int newHorseID)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(226, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetHorseNameByID(oldHorseID),
                Global.GetHorseNameByID(newHorseID)
            });
            RoleActionsMsgTypes msgType = (newHorseID >= 5) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg;
            Global.BroadcastRoleActionMsg(client, msgType, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastHorseEnchanceOk(GameClient client, int horseID)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(227, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetHorseNameByID(horseID)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastMergeJewelOk(GameClient client, int goodsID)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(228, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetGoodsNameByID(goodsID)
            });
            int num = (Global.GetJewelLevel(goodsID) >= 6) ? 1 : 2;
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastFuBenExperience(GameClient client, int fuBenID, int experience)
        {
            if (experience >= 500000)
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(230, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetFuBenName(fuBenID),
                    experience
                });
                Global.BroadcastRoleActionMsg(client, (fuBenID < 20) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastLianZhanNum(GameClient client, int oldLianZhanNum, int newLianZhanNum)
        {
            if (oldLianZhanNum / 100 != newLianZhanNum / 100 && newLianZhanNum > oldLianZhanNum)
            {
                if (MapTypes.Normal == Global.GetMapType(client.ClientData.MapCode))
                {
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(231, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetMapName(client.ClientData.MapCode),
                        Global.GetLianZhanBufferName(newLianZhanNum / 100 - 1),
                        Global.GetLianZhanBufferVal(newLianZhanNum)
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
                    Global.AddLianZhanEvent(client, newLianZhanNum);
                }
            }
        }

        
        public static void BroadcastLeaveLaoFangHint(GameClient client, int toMapCode)
        {
            if (toMapCode == Global.GetLaoFangMapCode())
            {
                if (client.ClientData.PKPoint > 0)
                {
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(232, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName)
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastLeaveLaoFangHint2(GameClient client, int toMapCode)
        {
            if (toMapCode == Global.GetLaoFangMapCode())
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(233, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName)
                });
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastEnterLaoFangHint(GameClient client, int toMapCode)
        {
            if (toMapCode == Global.GetLaoFangMapCode())
            {
                if (client.ClientData.PKPoint >= Global.MinEnterJailPKPoints)
                {
                    int pkPoint = client.ClientData.PKPoint - Global.MinLeaveJailPKPoints;
                    int jailMinutes = ((pkPoint - 1) / Global.SubPKPointsPer10Seconds + 1) * 10 / 60;
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(234, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        jailMinutes
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastKillBiaoCheHint(GameClient client, BiaoCheItem biaoCheItem)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(235, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                biaoCheItem.OwnerRoleName,
                Global.GetYaBiaoName(biaoCheItem.YaBiaoID)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastBiaoCheOkHint(GameClient client, BiaoCheItem biaoCheItem)
        {
            if (null != biaoCheItem)
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(236, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    biaoCheItem.OwnerRoleName
                });
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastGetGoodsHint(GameClient client, GoodsData goodsData, string killedMonsterName, int killedMonsterMap, bool bNeedSend = true)
        {
            if (!string.IsNullOrEmpty(killedMonsterName))
            {
                killedMonsterName = killedMonsterName.Replace("【BOSS】", "『BOSS』");
                SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsData);
                if (null != systemGoods)
                {
                    int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                    string goodsName = systemGoods.GetStringValue("Title");
                    int toLevel = systemGoods.GetIntValue("ToLevel", -1);
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(240, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetMapName(killedMonsterMap),
                        killedMonsterName,
                        goodsName
                    });
                    if (bNeedSend)
                    {
                        Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox, 0, 0, 100, 100);
                    }
                }
            }
        }

        
        public static void BroadcastWuXingExperience(GameClient client, int experience)
        {
            if (experience >= 500000)
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(241, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    experience
                });
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastHeroMapOk(GameClient client, int heroIndex, bool isNewHeroIndex)
        {
            SystemXmlItem systemHeroConfigItem = null;
            if (GameManager.systemHeroConfigMgr.SystemXmlItemDict.TryGetValue(heroIndex, out systemHeroConfigItem))
            {
                int bossID = systemHeroConfigItem.GetIntValue("BOSSID", -1);
                string leiZhuName = Global.GetMonsterNameByID(bossID);
                string broadCastMsg;
                if (isNewHeroIndex)
                {
                    string awardName = systemHeroConfigItem.GetStringValue("AwardName");
                    broadCastMsg = StringUtil.substitute(GLang.GetLang(242, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        heroIndex,
                        leiZhuName,
                        awardName
                    });
                }
                else
                {
                    broadCastMsg = StringUtil.substitute(GLang.GetLang(243, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        heroIndex,
                        leiZhuName
                    });
                }
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastLingDiOkHint(string bhName, int mapCode)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(244, new object[0]), new object[]
            {
                bhName
            });
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastHuangChengOkHintEx(string bhName, bool isBattleOver = false)
        {
            string broadCastMsg;
            if (!isBattleOver)
            {
                long nSecond = 0L;
                if (LuoLanChengZhanManager.getInstance().IsInWangChengFightingTime(TimeUtil.NowDateTime()))
                {
                    nSecond = (LuoLanChengZhanManager.getInstance().GetBattleEndMs() - TimeUtil.NOW()) / 1000L;
                }
                broadCastMsg = StringUtil.substitute(GLang.GetLang(245, new object[0]), new object[]
                {
                    bhName,
                    nSecond / 60L,
                    nSecond % 60L
                });
            }
            else
            {
                broadCastMsg = StringUtil.substitute(GLang.GetLang(668, new object[0]), new object[]
                {
                    bhName
                });
            }
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastHuangChengOkHint(GameClient client)
        {
        }

        
        public static void BroadcastHuangChengFailedHint()
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(247, new object[0]), new object[]
            {
                Global.GetServerLineName2()
            });
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastWangChengFailedHint()
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(248, new object[0]), new object[0]);
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastAddHuangFeiHint(string huanDiRoleName, string otherRoleName)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(249, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                otherRoleName,
                huanDiRoleName
            });
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastRemoveHuangFeiHint(string huanDiRoleName, string otherRoleName)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(250, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                huanDiRoleName,
                otherRoleName
            });
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastSendToLaoFangHint(GameClient client, string otherRoleName)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(251, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                otherRoleName
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastTakeOutLaoFangHint(string huangDiRoleName, string otherRoleName)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(252, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                huangDiRoleName,
                otherRoleName
            });
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastBanChatHint(string huangDiRoleName, string otherRoleName)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(253, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                huangDiRoleName,
                otherRoleName
            });
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastHuangDiLoginHint(GameClient client)
        {
            long nowTicks = TimeUtil.NOW();
            if (!GameManager.IsKuaFuServer && nowTicks >= Data.NextBroadCastTickDict[1])
            {
                Data.NextBroadCastTickDict[1] = nowTicks + Data.LuoLanKingGongGaoCD * 1000L;
                if (client.ClientData.Faction == WangChengManager.GetWangZuBHid())
                {
                    if (client.ClientData.BHZhiWu == 1)
                    {
                        string broadCastMsg = StringUtil.substitute(GLang.GetLang(254, new object[0]), new object[]
                        {
                            Global.FormatRoleName(client, client.ClientData.RoleName)
                        });
                        Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
                    }
                }
            }
        }

        
        public static void BroadcastPkKingLoginHint(GameClient client)
        {
            long nowTicks = TimeUtil.NOW();
            if (!GameManager.IsKuaFuServer && nowTicks >= Data.NextBroadCastTickDict[0])
            {
                Data.NextBroadCastTickDict[0] = nowTicks + Data.LuoLanKingGongGaoCD * 1000L;
                if (Global.IsPkKing(client))
                {
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(255, new object[0]), new object[]
                    {
                        Global.FormatRoleName(client, client.ClientData.RoleName)
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.HintAndBox, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastJunQiUpLevelHint(GameClient client, int junQiLevel)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(256, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                client.ClientData.BHName,
                junQiLevel
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastZhanMengBuildUpLevelHint(GameClient client, int buildType, int level)
        {
            string buildName = "";
            if (1 == buildType)
            {
                buildName = GLang.GetLang(257, new object[0]);
            }
            else if (2 == buildType)
            {
                buildName = GLang.GetLang(258, new object[0]);
            }
            else if (3 == buildType)
            {
                buildName = GLang.GetLang(259, new object[0]);
            }
            else if (4 == buildType)
            {
                buildName = GLang.GetLang(260, new object[0]);
            }
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(261, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                client.ClientData.BHName,
                buildName,
                level
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastYangZhouTaxHint(GameClient client, int lingDiID, int tax)
        {
            if (lingDiID == 1)
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(262, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    tax
                });
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastYangGongBKGoodsHint(GameClient client, GoodsData goodsData)
        {
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsData);
            if (null != systemGoods)
            {
                int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                string goodsName = systemGoods.GetStringValue("Title");
                int toLevel = systemGoods.GetIntValue("ToLevel", -1);
            }
        }

        
        public static void BroadcastQianKunDaiGoodsHint(GameClient client, int goodsID, int nActType)
        {
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsID);
            if (null != systemGoods)
            {
                string sMsg = "";
                if (nActType == 1)
                {
                    sMsg = "通过祈福活动，";
                }
                else if (nActType == 2)
                {
                    sMsg = "参与『幸运抽奖』，";
                }
                else if (nActType == 3)
                {
                    sMsg = "参与『月度抽奖』，";
                }
                int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                string goodsName = systemGoods.GetStringValue("Title");
                int toLevel = systemGoods.GetIntValue("ToLevel", -1);
                RoleActionsMsgTypes mstType = RoleActionsMsgTypes.HintMsg;
                string broadCastMsg;
                if (categoriy >= 0 && categoriy < 49)
                {
                    broadCastMsg = StringUtil.substitute(GLang.GetLang(266, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        sMsg,
                        toLevel,
                        goodsName
                    });
                    mstType = RoleActionsMsgTypes.Bulletin;
                }
                else
                {
                    broadCastMsg = StringUtil.substitute(GLang.GetLang(267, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        sMsg,
                        goodsName
                    });
                }
                Global.BroadcastRoleActionMsg(client, mstType, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastWaBaoGoodsHint(GameClient client, GoodsData goodsData)
        {
            Global.AddWaBaoGoodsEvent(client, goodsData);
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsData);
            if (null != systemGoods)
            {
                int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                string goodsName = systemGoods.GetStringValue("Title");
                int toLevel = systemGoods.GetIntValue("ToLevel", -1);
                string broadCastMsg;
                if (categoriy >= 0 && categoriy < 49)
                {
                    broadCastMsg = StringUtil.substitute(GLang.GetLang(268, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        toLevel,
                        goodsName,
                        Global.GetEnchanceText((GoodsQuality)goodsData.Quality),
                        goodsData.Forge_level
                    });
                }
                else
                {
                    broadCastMsg = StringUtil.substitute(GLang.GetLang(269, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        goodsName
                    });
                }
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static void BroadcastYaoShiWaBaoGoodsHint(GameClient client, GoodsData goodsData, int idYaoShi, int idXiangZi)
        {
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsData);
            if (null != systemGoods)
            {
                SystemXmlItem systemGoodsYaoShi = null;
                SystemXmlItem systemGoodsXiangZhi = null;
                if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(idYaoShi, out systemGoodsYaoShi))
                {
                    if (null != systemGoodsYaoShi)
                    {
                        if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(idXiangZi, out systemGoodsXiangZhi))
                        {
                            if (null != systemGoodsXiangZhi)
                            {
                                int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                                string goodsName = systemGoods.GetStringValue("Title");
                                int toLevel = systemGoods.GetIntValue("ToLevel", -1);
                                string broadCastMsg;
                                if (categoriy >= 0 && categoriy < 49)
                                {
                                    broadCastMsg = StringUtil.substitute(GLang.GetLang(270, new object[0]), new object[]
                                    {
                                        Global.GetServerLineName2(),
                                        Global.FormatRoleName(client, client.ClientData.RoleName),
                                        systemGoodsYaoShi.GetStringValue("Title"),
                                        systemGoodsXiangZhi.GetStringValue("Title"),
                                        toLevel,
                                        goodsName,
                                        goodsData.Forge_level
                                    });
                                }
                                else
                                {
                                    broadCastMsg = StringUtil.substitute(GLang.GetLang(271, new object[0]), new object[]
                                    {
                                        Global.GetServerLineName2(),
                                        Global.FormatRoleName(client, client.ClientData.RoleName),
                                        systemGoodsYaoShi.GetStringValue("Title"),
                                        systemGoodsXiangZhi.GetStringValue("Title"),
                                        goodsName
                                    });
                                }
                                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
                            }
                        }
                    }
                }
            }
        }

        
        public static void BroadcastFallBaoXiangGoodsHint(GameClient client, GoodsData goodsData, int actionGoodsID)
        {
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsData);
            if (null != systemGoods)
            {
                int categoriy = systemGoods.GetIntValue("Categoriy", -1);
                string goodsName = systemGoods.GetStringValue("Title");
                int toLevel = systemGoods.GetIntValue("ToLevel", -1);
                string broadCastMsg;
                if (categoriy >= 0 && categoriy < 49)
                {
                    broadCastMsg = StringUtil.substitute(GLang.GetLang(272, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetGoodsNameByID(actionGoodsID),
                        toLevel,
                        goodsName,
                        goodsData.Forge_level
                    });
                }
                else
                {
                    broadCastMsg = StringUtil.substitute(GLang.GetLang(273, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetGoodsNameByID(actionGoodsID),
                        goodsName
                    });
                }
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static int GetSiteByCategoriy(int categoriy)
        {
            int result;
            if (null == Data.BagTypeDict)
            {
                result = 0;
            }
            else if (Data.BagTypeDict.ContainsKey(categoriy))
            {
                result = Data.BagTypeDict[categoriy].BagType;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        public static int GetBindingByCategoriy(int categoriy, int defaultVal)
        {
            int result;
            if (null == Data.BagTypeDict)
            {
                result = defaultVal;
            }
            else if (Data.BagTypeDict.ContainsKey(categoriy))
            {
                result = Data.BagTypeDict[categoriy].BindingType;
            }
            else
            {
                result = defaultVal;
            }
            return result;
        }

        
        public static void BroadSelfFallBoxGoods(GameClient client, GoodsData goodsData)
        {
            if (goodsData.Site == 8000 || goodsData.Site == 3000 || goodsData.Site == 11000)
            {
                SystemXmlItem systemGoods;
                if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                {
                    string goodsName = systemGoods.GetStringValue("Title");
                    string msg = string.Format(GLang.GetLang(2605, new object[0]), systemGoods.GetStringValue("Title"), goodsData.GCount);
                    GameManager.LuaMgr.NotifyImportantMsg(client, msg, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
                }
            }
        }

        
        public static void BroadcastVIPMonthHint(GameClient client, int vipGoodsID)
        {
            string goodsName = Global.GetGoodsNameByID(vipGoodsID);
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(274, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                goodsName,
                Global.GetVipTypeNameString(client),
                Global.GetVipTypeGiveYuanBao(client)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastShouChongDaLiHint(GameClient client)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(275, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastDayChongDaLiHint(GameClient client)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(276, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastChongJiLingQuShengZhuangHint(GameClient client, int nBtnIndex, int nItemID)
        {
            int nLev = 0;
            if (nBtnIndex == 1)
            {
                nLev = 50;
            }
            else if (nBtnIndex == 2)
            {
                nLev = 55;
            }
            else if (nBtnIndex == 3)
            {
                nLev = 60;
            }
            else if (nBtnIndex == 4)
            {
                nLev = 65;
            }
            else if (nBtnIndex == 5)
            {
                nLev = 75;
            }
            string goodsName = Global.GetGoodsNameByID(nItemID);
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(277, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                nLev,
                goodsName
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastShengZhuangJiQingHuiKuiHint(GameClient client)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(278, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastTinyClientDaLiHint(GameClient client)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(279, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
        }

        
        public static void BroadcastJiFenDaLiHint(GameClient client)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(280, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastShengXiaoGuessWinHint(GameClient client, int mutiple, string shengXiaoResult, int gainGold)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(281, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                mutiple,
                shengXiaoResult,
                gainGold
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastBangHuiCreateOk(GameClient client, string bangHuiName)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(282, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                bangHuiName
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
        }

        
        public static void BroadcastArenaChampionMsg(bool hasChampion = true, GameClient client = null)
        {
            string broadCastMsg;
            if (hasChampion && client != null)
            {
                broadCastMsg = StringUtil.substitute(GLang.GetLang(283, new object[0]), new object[]
                {
                    Global.FormatRoleName(client, client.ClientData.RoleName)
                });
            }
            else
            {
                broadCastMsg = StringUtil.substitute(GLang.GetLang(284, new object[0]), new object[0]);
            }
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.HintAndBox, 0, 0, 100, 100);
        }

        
        public static void BroadcastCityWarRequestOk(GameClient client, string bangHuiName, int afterDays)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(285, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                bangHuiName,
                afterDays
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static void BroadcastClientEnterArenaBattle(GameClient client)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(286, new object[0]), new object[]
            {
                Global.FormatRoleName(client, client.ClientData.RoleName)
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
        }

        
        public static void BroadcastNpcSaleGoods(GameClient client, int goodsID)
        {
            int categoriy = Global.GetGoodsCatetoriy(goodsID);
        }

        
        public static void BroadcastClientChuanQiJingMai(GameClient client, int jingMaiLevel)
        {
            if (jingMaiLevel >= 3)
            {
                int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.JingMai, Math.Max(0, jingMaiLevel - 1));
                if (goodsID >= 0)
                {
                    string goodsName = Global.GetGoodsNameByID(goodsID);
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(291, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        goodsName
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastClientChuanQiWuXue(GameClient client, int nNewBufferGoodsIndexID)
        {
            if (nNewBufferGoodsIndexID >= 1)
            {
                int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.WuXue, nNewBufferGoodsIndexID);
                if (goodsID >= 0)
                {
                    string goodsName = Global.GetGoodsNameByID(goodsID);
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(292, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        goodsName
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastClientChuanQiChengJiu(GameClient client, int nNewBufferGoodsIndexID)
        {
            if (nNewBufferGoodsIndexID >= 1)
            {
                int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.ChengJiu, nNewBufferGoodsIndexID - 1);
                if (goodsID >= 0)
                {
                    string goodsName = Global.GetGoodsNameByID(goodsID);
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(293, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        goodsName
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastClientChuanQiZhanHun(GameClient client, int level)
        {
            if (level >= 4)
            {
                int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.ZhanHun, Math.Max(0, level - 1));
                if (goodsID >= 0)
                {
                    string goodsName = Global.GetGoodsNameByID(goodsID);
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(294, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        goodsName
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastClientChuanQiRongYu(GameClient client, int level)
        {
            if (level >= 30)
            {
                int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.RongYu, Math.Max(0, level - 1));
                if (goodsID >= 0)
                {
                    string goodsName = Global.GetGoodsNameByID(goodsID);
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(295, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        goodsName
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastClientMUShengWang(GameClient client, int level)
        {
            if (level >= 4)
            {
                int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.MU_JINGJICHANG_JUNXIAN, Math.Max(0, level - 1));
                if (goodsID >= 0)
                {
                    string goodsName = Global.GetGoodsNameByID(goodsID);
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(296, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        goodsName
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastClientTo60(GameClient client, int minDay, int maxDay, int yuanBao)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(297, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                maxDay,
                yuanBao
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
        }

        
        public static void BroadcastClientKaiFuOnlineRandomAward(int zoneID, string roleName, int yuanBao)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(298, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName3(zoneID, roleName),
                yuanBao
            });
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox, 0, 0, 100, 100);
        }

        
        public static void BroadcastJiaSongOk(GameClient client)
        {
            string weaponName = GLang.GetLang(299, new object[0]);
            int nOcc = Global.CalcOriginalOccupationID(client);
            if (1 == nOcc)
            {
                weaponName = GLang.GetLang(300, new object[0]);
            }
            else if (2 == nOcc)
            {
                weaponName = GLang.GetLang(301, new object[0]);
            }
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(302, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                weaponName
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox, 0, 0, 100, 100);
        }

        
        public static void BroadcastZuanHuangLevelOk(GameClient client, int oldLevel, int newLevel)
        {
            if (oldLevel != newLevel)
            {
                if (newLevel >= 3)
                {
                    string broadCastMsg = StringUtil.substitute(GLang.GetLang(303, new object[0]), new object[]
                    {
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        newLevel
                    });
                    Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox, 0, 0, 100, 100);
                }
            }
        }

        
        public static void BroadcastOpenGiveBox(GameClient client, int goodsID)
        {
            string broadCastMsg;
            if (goodsID >= 1550 && goodsID <= 1552)
            {
                broadCastMsg = StringUtil.substitute(GLang.GetLang(304, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName)
                });
            }
            else if (1560 == goodsID)
            {
                broadCastMsg = StringUtil.substitute(GLang.GetLang(305, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName)
                });
            }
            else
            {
                if (1570 != goodsID)
                {
                    return;
                }
                broadCastMsg = StringUtil.substitute(GLang.GetLang(306, new object[0]), new object[]
                {
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName)
                });
            }
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox, 0, 0, 100, 100);
        }

        
        public static void BroadcastChangeLifeSuccess(GameClient client, int nCount)
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(307, new object[0]), new object[]
            {
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                nCount
            });
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
        }

        
        public static string GetServerLineName1()
        {
            return Global.GetLang(Global.LineNames[GameManager.ServerLineID]);
        }

        
        public static string GetServerLineName2()
        {
            return "";
        }

        
        public static void EnterCaiShenMiao(GameClient client, int fuBenID, int goodsBinding)
        {
            SystemXmlItem systemFuBenItem = null;
            if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(319, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
            }
            else
            {
                int toMapCode = systemFuBenItem.GetIntValue("MapCode", -1);
                string[] dbFields = Global.ExecuteDBCmd(10049, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
                if (dbFields == null || dbFields.Length < 2)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(320, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else
                {
                    int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);
                    Global.UpdateFuBenData(client, fuBenID, 1, 0);
                    GameMap gameMap = null;
                    if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(321, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    }
                    else
                    {
                        client.ClientData.FuBenSeqID = fuBenSeqID;
                        FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, goodsBinding, fuBenID);
                        GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
                    }
                }
            }
        }

        
        public static DateTimeRange[] ParseDateTimeRangeStr(string str)
        {
            DateTimeRange[] result;
            if (null == str)
            {
                result = null;
            }
            else
            {
                str = str.Trim();
                if (string.IsNullOrEmpty(str))
                {
                    result = null;
                }
                else
                {
                    string[] fields = str.Split(new char[]
                    {
                        '|'
                    });
                    if (fields == null || fields.Length <= 0)
                    {
                        result = null;
                    }
                    else
                    {
                        DateTimeRange[] dateTimeRangeArray = new DateTimeRange[fields.Length];
                        for (int i = 0; i < fields.Length; i++)
                        {
                            string timeRangeStr = fields[i].Trim();
                            if (string.IsNullOrEmpty(timeRangeStr))
                            {
                                dateTimeRangeArray[i] = null;
                            }
                            else
                            {
                                string[] fields2 = timeRangeStr.Split(new char[]
                                {
                                    '-'
                                });
                                if (fields2 == null || fields2.Length != 2)
                                {
                                    dateTimeRangeArray[i] = null;
                                }
                                else
                                {
                                    string timeFieldStr = fields2[0].Trim();
                                    if (string.IsNullOrEmpty(timeFieldStr))
                                    {
                                        dateTimeRangeArray[i] = null;
                                    }
                                    else
                                    {
                                        string[] fields3 = timeFieldStr.Split(new char[]
                                        {
                                            ':'
                                        });
                                        if (fields3 == null || fields3.Length != 2)
                                        {
                                            dateTimeRangeArray[i] = null;
                                        }
                                        else
                                        {
                                            string timeFieldStr2 = fields2[1].Trim();
                                            if (string.IsNullOrEmpty(timeFieldStr2))
                                            {
                                                dateTimeRangeArray[i] = null;
                                            }
                                            else
                                            {
                                                string[] fields4 = timeFieldStr2.Split(new char[]
                                                {
                                                    ':'
                                                });
                                                if (fields4 == null || fields4.Length != 2)
                                                {
                                                    dateTimeRangeArray[i] = null;
                                                }
                                                else
                                                {
                                                    dateTimeRangeArray[i] = new DateTimeRange
                                                    {
                                                        FromHour = Global.SafeConvertToInt32(fields3[0]),
                                                        FromMinute = Global.SafeConvertToInt32(fields3[1]),
                                                        EndHour = Global.SafeConvertToInt32(fields4[0]),
                                                        EndMinute = Global.SafeConvertToInt32(fields4[1])
                                                    };
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        result = dateTimeRangeArray;
                    }
                }
            }
            return result;
        }

        
        public static bool JugeDateTimeInTimeRange(DateTime dateTime, DateTimeRange[] dateTimeRangeArray, out int endMinute, bool equalEndTime = true)
        {
            endMinute = 0;
            bool result;
            if (null == dateTimeRangeArray)
            {
                result = true;
            }
            else
            {
                int hour = dateTime.Hour;
                int minute = dateTime.Minute;
                for (int i = 0; i < dateTimeRangeArray.Length; i++)
                {
                    if (null != dateTimeRangeArray[i])
                    {
                        int time = dateTimeRangeArray[i].FromHour * 60 + dateTimeRangeArray[i].FromMinute;
                        int time2 = dateTimeRangeArray[i].EndHour * 60 + dateTimeRangeArray[i].EndMinute;
                        int time3 = hour * 60 + minute;
                        if (!equalEndTime)
                        {
                            time2--;
                        }
                        if (time3 >= time && time3 <= time2)
                        {
                            endMinute = time2;
                            return true;
                        }
                    }
                }
                result = false;
            }
            return result;
        }

        
        public static void GetYaBiaoReward(int yaBiaoID, out int yinLiang, out int experience, out int yaJin)
        {
            yinLiang = 0;
            experience = 0;
            yaJin = 0;
            SystemXmlItem systemYaBiaoItem = null;
            if (GameManager.systemYaBiaoMgr.SystemXmlItemDict.TryGetValue(yaBiaoID, out systemYaBiaoItem))
            {
                yinLiang = systemYaBiaoItem.GetIntValue("RewardYL", -1);
                experience = systemYaBiaoItem.GetIntValue("RewardExp", -1);
                yaJin = systemYaBiaoItem.GetIntValue("YaJin", -1);
            }
        }

        
        public static void GetYaBiaoCondition(int yaBiaoID, out int minLevel, out int maxLevel, out int yaJin)
        {
            minLevel = 0;
            maxLevel = 0;
            yaJin = 0;
            SystemXmlItem systemYaBiaoItem = null;
            if (GameManager.systemYaBiaoMgr.SystemXmlItemDict.TryGetValue(yaBiaoID, out systemYaBiaoItem))
            {
                minLevel = systemYaBiaoItem.GetIntValue("MinLevel", -1);
                minLevel = Global.GMax(minLevel, 0);
                maxLevel = systemYaBiaoItem.GetIntValue("MaxLevel", -1);
                if (maxLevel < 0)
                {
                    maxLevel = 65536;
                }
                yaJin = systemYaBiaoItem.GetIntValue("YaJin", -1);
                yaJin = Global.GMax(yaJin, 0);
            }
        }

        
        public static bool CanTakeNormalYaBiao(GameClient client)
        {
            bool result;
            if (null == client.ClientData.MyYaBiaoData)
            {
                result = true;
            }
            else
            {
                int dayID = TimeUtil.NowDateTime().DayOfYear;
                if (client.ClientData.MyYaBiaoData.YaBiaoDayID != dayID)
                {
                    result = true;
                }
                else
                {
                    int maxDayYaBiaoNum = Global.MaxDayYaBiaoNum;
                    maxDayYaBiaoNum += (int)DBRoleBufferManager.ProcessMonthVIP(client);
                    result = (client.ClientData.MyYaBiaoData.YaBiaoNum < maxDayYaBiaoNum);
                }
            }
            return result;
        }

        
        public static int GetTouBaoYinPiaoNum(int yinLiang)
        {
            return yinLiang / 5;
        }

        
        public static string GetYaBiaoName(int yaBiaoID)
        {
            string result;
            if (1 == yaBiaoID)
            {
                result = GLang.GetLang(322, new object[0]);
            }
            else if (2 == yaBiaoID)
            {
                result = GLang.GetLang(323, new object[0]);
            }
            else if (3 == yaBiaoID)
            {
                result = GLang.GetLang(324, new object[0]);
            }
            else
            {
                result = "";
            }
            return result;
        }

        
        public static BiaoCheData BiaoCheItem2BiaoCheData(BiaoCheItem biaoCheItem)
        {
            return new BiaoCheData
            {
                OwnerRoleID = biaoCheItem.OwnerRoleID,
                BiaoCheID = biaoCheItem.BiaoCheID,
                BiaoCheName = biaoCheItem.BiaoCheName,
                YaBiaoID = biaoCheItem.YaBiaoID,
                MapCode = biaoCheItem.MapCode,
                PosX = biaoCheItem.PosX,
                PosY = biaoCheItem.PosY,
                Direction = biaoCheItem.Direction,
                LifeV = biaoCheItem.LifeV,
                CutLifeV = biaoCheItem.CutLifeV,
                StartTime = biaoCheItem.StartTime,
                BodyCode = biaoCheItem.BodyCode,
                PicCode = biaoCheItem.PicCode,
                CurrentLifeV = biaoCheItem.CurrentLifeV,
                OwnerRoleName = biaoCheItem.OwnerRoleName
            };
        }

        
        public static void HandleBiaoCheChangMap(GameClient client, int toMapCode, int toPosX, int toPosY, int toDiection)
        {
            BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(client.ClientData.RoleID);
            if (null != biaoCheItem)
            {
                if (Global.InCircle(new Point((double)biaoCheItem.PosX, (double)biaoCheItem.PosY), new Point((double)client.ClientData.PosX, (double)client.ClientData.PosY), 300.0))
                {
                    BiaoCheManager.NotifyOthersHideBiaoChe(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, biaoCheItem);
                    biaoCheItem.MapCode = toMapCode;
                    biaoCheItem.PosX = toPosX;
                    biaoCheItem.PosY = toPosY;
                    biaoCheItem.Direction = toDiection;
                    BiaoCheManager.NotifyOthersShowBiaoChe(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, biaoCheItem);
                }
            }
        }

        
        public static int GetKillBiaoCheNum(GameClient client, BiaoCheItem biaoCheItem)
        {
            int levelNum = (client.ClientData.Level - 40) / 10 + 1;
            int result;
            if (levelNum > biaoCheItem.YaBiaoID)
            {
                result = 6;
            }
            else
            {
                result = 3;
            }
            return result;
        }

        
        public static int IncTotayJieBiaoNum(GameClient client)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (dayID != client.ClientData.JieBiaoDayID)
            {
                client.ClientData.JieBiaoDayID = dayID;
                client.ClientData.JieBiaoDayNum = 1;
            }
            else
            {
                client.ClientData.JieBiaoDayNum++;
            }
            GameManager.DBCmdMgr.AddDBCmd(10079, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.JieBiaoDayID, client.ClientData.JieBiaoDayNum), null, client.ServerId);
            return client.ClientData.JieBiaoDayNum;
        }

        
        public static void AddRoleQueueCmd(GameClient client, QueueCmdIDs queueCmdID, long execTicks)
        {
            QueueCmdItem queueCmdItem = new QueueCmdItem
            {
                CmdID = (int)queueCmdID,
                ExecTicks = execTicks
            };
            lock (client.ClientData.QueueCmdItemList)
            {
                client.ClientData.QueueCmdItemList.Add(queueCmdItem);
            }
        }

        
        public static QueueCmdItem GetRoleQueueCmd(GameClient client)
        {
            long nowTicks = TimeUtil.NOW() * 10000L;
            lock (client.ClientData.QueueCmdItemList)
            {
                for (int i = 0; i < client.ClientData.QueueCmdItemList.Count; i++)
                {
                    QueueCmdItem queueCmdItem = client.ClientData.QueueCmdItemList[i];
                    if (nowTicks >= queueCmdItem.ExecTicks)
                    {
                        client.ClientData.QueueCmdItemList.RemoveAt(i);
                        return queueCmdItem;
                    }
                }
            }
            return null;
        }

        
        public static void ProcessQueueCmds(GameClient client)
        {
            lock (client.ClientData.QueueCmdItemList)
            {
                if (client.ClientData.QueueCmdItemList.Count <= 0)
                {
                    return;
                }
            }
            QueueCmdItem queueCmdItem = Global.GetRoleQueueCmd(client);
            if (null != queueCmdItem)
            {
                QueueCmdIDs cmdID = (QueueCmdIDs)queueCmdItem.CmdID;
                if (cmdID == QueueCmdIDs.NotifyEndJingMai)
                {
                    Global.ProcessEndUpJingMai(client);
                }
            }
        }

        
        public static string NewResPropString(ResLogType type, params object[] list)
        {
            string strProp = string.Format("{0}", (int)type);
            for (int i = 0; i < list.Length; i++)
            {
                strProp += string.Format(":{0}", list[i]);
            }
            return strProp;
        }

        
        public static string AddResPropString(ResLogType type, params object[] list)
        {
            return "@" + Global.NewResPropString(type, list);
        }

        
        public static string NewGoodsDataPropString(GoodsData goodsData)
        {
            string result;
            if (null == goodsData)
            {
                result = "";
            }
            else
            {
                result = string.Format("{0}:{1}_{2}_{3}_{4}_{5}_{6}_{7}", new object[]
                {
                    0,
                    goodsData.Id,
                    goodsData.GoodsID,
                    goodsData.Site,
                    goodsData.GCount,
                    goodsData.Binding,
                    0,
                    0
                });
            }
            return result;
        }

        
        public static string AddGoodsDataPropString(GoodsData goodsData)
        {
            return "@" + Global.NewGoodsDataPropString(goodsData);
        }

        
        public static string MakeGoodsDataIDString(List<int> goodsIDList)
        {
            string strGoodsList = "";
            if (goodsIDList != null)
            {
                foreach (int item in goodsIDList)
                {
                    strGoodsList += item;
                    strGoodsList += "@";
                }
                if (strGoodsList.Length > 0)
                {
                    strGoodsList = strGoodsList.Remove(strGoodsList.Length - 1);
                }
            }
            return strGoodsList;
        }

        
        public static string MakeGoodsDataPropString(List<GoodsData> goodsDataList)
        {
            string strGoodsList = "";
            if (goodsDataList != null)
            {
                foreach (GoodsData item in goodsDataList)
                {
                    strGoodsList += Global.NewGoodsDataPropString(item);
                    strGoodsList += "@";
                }
                if (strGoodsList.Length > 0)
                {
                    strGoodsList = strGoodsList.Remove(strGoodsList.Length - 1);
                }
            }
            return strGoodsList;
        }

        
        public static string AddGoodsDataPropString(List<GoodsData> goodsDataList)
        {
            string result = Global.MakeGoodsDataPropString(goodsDataList);
            return string.IsNullOrEmpty(result) ? "" : ("@" + result);
        }

        
        public static void AddRoleTaskEvent(GameClient client, int completeTaskID)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}" : "{0}\t{1}\t{2}\t{4}\t{5}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                completeTaskID
            });
            GameManager.SystemRoleTaskEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleStoreYinLiangEvent(GameClient client, long oldYinLiang)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket, false).Replace(":", ".");
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldYinLiang,
                client.ClientData.StoreYinLiang
            });
            GameManager.SystemRoleStoreYinLiangEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleStoreMoneyEvent(GameClient client, long oldYinLiang)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket, false).Replace(":", ".");
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldYinLiang,
                client.ClientData.StoreYinLiang
            });
            GameManager.SystemRoleStoreMoneyEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleBuyWithTianDiJingYuanEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetTianDiJingYuanValue(client);
        }

        
        public static void AddRoleBuyWithLieShaZhiEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetLieShaValue(client);
            int moneyType = 20;
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
            });
            GameManager.SystemRoleBuyWithLieShaZhiEvents.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10107, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                moneyType
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithZhuangBeiJiFenEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetZhuangBeiJiFenValue(client);
            int moneyType = 30;
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
            });
            GameManager.SystemRoleBuyWithZhuangBeiJiFenEvents.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10107, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                moneyType
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithZhanHunEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetZhanHunValue(client);
            int moneyType = 90;
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
            });
            GameManager.SystemRoleBuyWithZhanHunEvents.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10107, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                moneyType
            }), null, client.ServerId);
        }

        
        public static void AddRoleConsumeEvent(GameClient client, int value)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                value
            });
            GameManager.SystemRoleConsumeEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleBuyWithJunGongZhiEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetJunGongValue(client);
            int moneyType = 14;
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
            });
            GameManager.SystemRoleBuyWithJunGongZhiEvents.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10107, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                moneyType
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithTongQianEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = client.ClientData.Money1;
            int moneyType = 1;
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}" : "{0}\t{1}\t{2}\t{4}\t{5}\t{6}\t{7}\t{8}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
            });
            GameManager.SystemRoleBuyWithTongQianEvents.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10107, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                moneyType
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithYinLiangEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = client.ClientData.YinLiang;
            int moneyType = 8;
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
            });
            GameManager.SystemRoleBuyWithYinLiangEvents.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10107, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.YinLiang,
                moneyType
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithGlodEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            GameManager.DBCmdMgr.AddDBCmd(10096, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.Gold
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithYinPiaoEvent(GameClient client, int goodsID, int goodsNum, int totalPrice, int yinPiaoGoodsID)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            int leftYinPiaoNum = Global.GetTotalGoodsCountByID(client, yinPiaoGoodsID);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                leftYinPiaoNum
            });
            GameManager.SystemRoleBuyWithYinPiaoEvents.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10067, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                leftYinPiaoNum
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithTianDiJingYuanEvent(GameClient client, int goodsID, int goodsNum, int totalPrice, int tianDiJingYuanGoodsID)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            int leftNum = Global.GetTotalGoodsCountByID(client, tianDiJingYuanGoodsID);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                leftNum
            });
            GameManager.SystemRoleBuyWithTianDiJingYuanEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleBuyWithJunGongEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.BangGong
            });
            GameManager.SystemRoleBuyWithJunGongEvents.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10085, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.BangGong
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithYuanBaoEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            GameManager.DBCmdMgr.AddDBCmd(10060, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithTreasureJiFenEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetTreasureJiFen(client);
            int moneyType = 110;
            GameManager.DBCmdMgr.AddDBCmd(10107, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                moneyType
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithTreasureXueZuanEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetTreasureXueZuan(client);
            int moneyType = 111;
            GameManager.DBCmdMgr.AddDBCmd(10107, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                moneyType
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithZhengBaPointEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = Global.GetRoleParamsInt32FromDB(client, "ZhengBaPoint");
            int moneyType = 117;
            GameManager.DBCmdMgr.AddDBCmd(10107, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                moneyType
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithImpetratePointEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = Global.GetZaJinDanJifen(client);
        }

        
        public static void AddRoleBuyWithZhanGongEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = client.ClientData.BangGong;
            int moneyType = 95;
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
            });
            GameManager.DBCmdMgr.AddDBCmd(10107, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                moneyType
            }), null, client.ServerId);
        }

        
        public static void AddRoleBuyWithPetJiFenEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = Global.GetRoleParamsInt32FromDB(client, "PetJiFen");
        }

        
        public static void AddRoleQiZhenGeBuyWithYuanBaoEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney
            });
            GameManager.SystemRoleQiZhenGeBuyWithYuanBaoEvents.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10078, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                client.ClientData.RoleID,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney
            }), null, client.ServerId);
        }

        
        public static void AddRoleSaleEvent(GameClient client, int goodsID, int goodsNum, int newMoney1, int newYinPiaoNum, int newYuanBaoNum, int yinPiaoGoodsID, int saleOutMoney)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}\t{13}" : "{0}\t{1}\t{2}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}\t{13}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                newMoney1,
                newYinPiaoNum,
                newYuanBaoNum,
                client.ClientData.Money1,
                Global.GetTotalGoodsCountByID(client, yinPiaoGoodsID),
                client.ClientData.UserMoney,
                saleOutMoney
            });
            GameManager.SystemRoleSaleEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleSaleEvent2(string userID, int roleID, string roleName, int roleLevel, int goodsID, int goodsNum, int newMoney1, int newYinPiaoNum, int newYuanBaoNum, int saleOutMoney)
        {
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}" : "{0}\t{1}\t{2}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                roleID,
                roleName,
                roleLevel,
                goodsID,
                goodsNum,
                newMoney1,
                newYinPiaoNum,
                newYuanBaoNum,
                saleOutMoney
            });
            GameManager.SystemRoleSaleEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleExchangeEvent1(GameClient client, int goodsID, int goodsNum, int otherRoleID, string otherRoleName, string result)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}" : "{0}\t{1}\t{2}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                Global.GetTotalGoodsCountByID(client, goodsID),
                otherRoleID,
                otherRoleName,
                result
            });
            GameManager.SystemRoleExchangeEvents1.AddEvent(eventMsg, EventLevels.Important);
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsID);
            if (null != systemGoods)
            {
                GameManager.DBCmdMgr.AddDBCmd(10115, string.Format("{0}:{1}:{2}:{3}:{4}:{5}", new object[]
                {
                    client.ClientData.RoleID,
                    goodsID,
                    goodsNum,
                    Global.GetTotalGoodsCountByID(client, goodsID),
                    otherRoleID,
                    result
                }), null, client.ServerId);
            }
        }

        
        public static void AddRoleExchangeEvent2(GameClient client, int money1, int otherRoleID, string otherRoleName)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}" : "{0}\t{1}\t{2}\t{4}\t{5}\t{6}\t{7}\t{8}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                money1,
                client.ClientData.YinLiang,
                otherRoleID,
                otherRoleName
            });
            GameManager.SystemRoleExchangeEvents2.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleExchangeEvent3(GameClient client, int yuanBao, int otherRoleID, string otherRoleName)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}" : "{0}\t{1}\t{2}\t{4}\t{5}\t{6}\t{7}\t{8}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                yuanBao,
                client.ClientData.UserMoney,
                otherRoleID,
                otherRoleName
            });
            GameManager.SystemRoleExchangeEvents3.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10117, string.Format("{0}:{1}:{2}:{3}", new object[]
            {
                client.ClientData.RoleID,
                yuanBao,
                client.ClientData.UserMoney,
                otherRoleID
            }), null, client.ServerId);
        }

        
        public static void NoDBLogModRoleGoodsEvent(GameClient client, GoodsData goodsData, int AddOrSubGoodsNum, string actionDesc, bool bIsFromMap = false)
        {
            Global.AddRoleGoodsEvent(client, goodsData.Id, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Quality, goodsData.Forge_level, goodsData.Jewellist, goodsData.Site, goodsData.Endtime, AddOrSubGoodsNum, actionDesc, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip);
        }

        
        public static void ModRoleGoodsEvent(GameClient client, GoodsData goodsData, int AddOrSubGoodsNum, string actionDesc, bool bIsFromMap = false)
        {
            if (0 == goodsData.GCount)
            {
                if (bIsFromMap)
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, Global.GetMapName(client.ClientData.MapCode), "系统", "销毁", AddOrSubGoodsNum, client.ClientData.ZoneID, client.strUserID, -1, client.ServerId, goodsData);
                }
                else
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, client.ClientData.RoleName, "系统", "销毁", AddOrSubGoodsNum, client.ClientData.ZoneID, client.strUserID, -1, client.ServerId, goodsData);
                }
            }
            else if (bIsFromMap)
            {
                GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, Global.GetMapName(client.ClientData.MapCode), client.ClientData.RoleName, "修改", AddOrSubGoodsNum, client.ClientData.ZoneID, client.strUserID, -1, client.ServerId, goodsData);
            }
            else
            {
                GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, client.ClientData.RoleName, "系统", "修改", AddOrSubGoodsNum, client.ClientData.ZoneID, client.strUserID, -1, client.ServerId, goodsData);
            }
            Global.AddRoleGoodsEvent(client, goodsData.Id, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Quality, goodsData.Forge_level, goodsData.Jewellist, goodsData.Site, goodsData.Endtime, AddOrSubGoodsNum, actionDesc, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip);
        }

        
        public static void ModRoleGoodsEvent(RoleDataEx client, GoodsData goodsData, int AddOrSubGoodsNum, string actionDesc, bool bIsFromMap = false)
        {
            if (0 == goodsData.GCount)
            {
                if (bIsFromMap)
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, Global.GetMapName(client.MapCode), "系统", "销毁", AddOrSubGoodsNum, client.ZoneID, client.UserID, -1, GameCoreInterface.getinstance().GetLocalServerId(), goodsData);
                }
                else
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, client.RoleName, "系统", "销毁", AddOrSubGoodsNum, client.ZoneID, client.UserID, -1, GameCoreInterface.getinstance().GetLocalServerId(), goodsData);
                }
            }
            else if (bIsFromMap)
            {
                GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, Global.GetMapName(client.MapCode), client.RoleName, "修改", AddOrSubGoodsNum, client.ZoneID, client.UserID, -1, GameCoreInterface.getinstance().GetLocalServerId(), goodsData);
            }
            else
            {
                GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, client.RoleName, "系统", "修改", AddOrSubGoodsNum, client.ZoneID, client.UserID, -1, GameCoreInterface.getinstance().GetLocalServerId(), goodsData);
            }
            Global.AddRoleGoodsEvent(client, goodsData.Id, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Quality, goodsData.Forge_level, goodsData.Jewellist, goodsData.Site, goodsData.Endtime, AddOrSubGoodsNum, actionDesc, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip);
        }

        
        public static void AddRoleGoodsEvent(GameClient client, int goodsDbID, int goodsID, int goodsNum, int binding, int quality, int forgeLevel, string jewelList, int site, string endTime, int addOrSubGoodsNum, string actionDesc, int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nChangeLifeLevForEquip)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            Global.AddRoleGoodsEvent(userID, client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.Level, goodsDbID, goodsID, goodsNum, binding, quality, forgeLevel, jewelList, site, endTime, addOrSubGoodsNum, actionDesc, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nChangeLifeLevForEquip);
        }

        
        public static void AddRoleGoodsEvent(RoleDataEx client, int goodsDbID, int goodsID, int goodsNum, int binding, int quality, int forgeLevel, string jewelList, int site, string endTime, int addOrSubGoodsNum, string actionDesc, int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nChangeLifeLevForEquip)
        {
            string userID = client.UserID;
            Global.AddRoleGoodsEvent(userID, client.RoleID, client.RoleName, client.Level, goodsDbID, goodsID, goodsNum, binding, quality, forgeLevel, jewelList, site, endTime, addOrSubGoodsNum, actionDesc, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nChangeLifeLevForEquip);
        }

        
        public static void AddRoleGoodsEvent(string userID, int roleID, string roleName, int roleLevel, int goodsDbID, int goodsID, int goodsNum, int binding, int quality, int forgeLevel, string jewelList, int site, string endTime, int addOrSubGoodsNum, string actionDesc, int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nChangeLifeLevForEquip)
        {
            string msg = Global.WithRname ? "{0}\t{1}\t{2} {3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}\t{13}\t{14}\t{15}\t{16}\t{17}\t{18}\t{19}\t{20}\t{21}\t{22}" : "{0}\t{1}\t{2}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}\t{13}\t{14}\t{15}\t{16}\t{17}\t{18}\t{19}\t{20}\t{21}\t{22}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                roleID,
                roleName,
                roleLevel,
                goodsDbID,
                goodsID,
                goodsNum,
                binding,
                quality,
                forgeLevel,
                jewelList,
                site,
                endTime,
                addOrSubGoodsNum,
                actionDesc,
                addPropIndex,
                bornIndex,
                lucky,
                strong,
                ExcellenceProperty,
                nAppendPropLev,
                nChangeLifeLevForEquip
            });
            GameManager.SystemRoleGoodsEvents.AddEvent(eventMsg, EventLevels.Important);
            if ("重置背包索引" != actionDesc)
            {
            }
        }

        
        public static void AddRoleHorseUpgradeEvent(GameClient client, int horseDbID, int horseID, int jinJieFailedNum, string jinJieTempTime, int jinJieTempNum, int jinJieFailedDayID, string status)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}\t{11}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                horseDbID,
                horseID,
                jinJieFailedNum,
                jinJieTempTime,
                jinJieTempNum,
                jinJieFailedDayID,
                status
            });
            GameManager.SystemRoleHorseEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleBangGongEvent(GameClient client, int oldBangGong)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket, false).Replace(":", ".");
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}" : "{0}\t{1}\t{2}\t{4}\t{5}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldBangGong,
                client.ClientData.BangGong
            });
            GameManager.SystemRoleBangGongEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleRefreshQiZhenGeEvent(GameClient client, int oldUserMoney)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket, false).Replace(":", ".");
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldUserMoney,
                client.ClientData.UserMoney
            });
            GameManager.SystemRoleRefreshQiZhenGeEvents.AddEvent(eventMsg, EventLevels.Important);
            GameManager.DBCmdMgr.AddDBCmd(10080, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, oldUserMoney, client.ClientData.UserMoney), null, client.ServerId);
        }

        
        public static void AddRoleJingMaiEvent(GameClient client, int jingMaiBodyLevel, int jingMaiID, int oldXueWeiNum, int nowXueWeiNum)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket, false).Replace(":", ".");
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                jingMaiBodyLevel,
                Global.GetJingMaiName(jingMaiID),
                oldXueWeiNum,
                nowXueWeiNum
            });
            GameManager.SystemRoleJingMaiEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddWaBaoGoodsEvent(GameClient client, GoodsData goodsData)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsData.Id,
                goodsData.GoodsID,
                goodsData.GCount,
                goodsData.Binding,
                goodsData.Quality,
                goodsData.Forge_level,
                goodsData.Jewellist,
                goodsData.Site
            });
            GameManager.SystemRoleWaBaoEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddMapEvent(GameClient client)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}" : "{0}\t{1}\t{2}\t{4}\t{5}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode)
            });
            GameManager.SystemRoleMapEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddFuBenAwardEvent(GameClient client, int fuBenID)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                fuBenID
            });
            GameManager.SystemRoleFuBenAwardEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddWuXingAwardEvent(GameClient client, int exp, int horseLucky)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                client.ClientData.HorseDbID,
                Global.GetMapName(client.ClientData.MapCode),
                exp,
                horseLucky
            });
            GameManager.SystemRoleWuXingAwardEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddPaoHuanEvent(GameClient client, int taskClass)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}" : "{0}\t{1}\t{2}\t{4}\t{5}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                taskClass
            });
            GameManager.SystemRolePaoHuanOkEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddYaBiaoEvent(GameClient client, int yaBiaoID, string action)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                yaBiaoID,
                action
            });
            GameManager.SystemRoleYaBiaoEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddLianZhanEvent(GameClient client, int lianZhanNum)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                lianZhanNum
            });
            GameManager.SystemRoleLianZhanEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddHuoDongEvent(GameClient client, int monsterType, string monsterName)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                monsterType,
                monsterName
            });
            GameManager.SystemRoleHuoDongMonsterEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddDigTreasureWithYaoShiEvent(GameClient client, int idYaoShi, int idXiangZi, int needSubYaoShiNum, int needSubXiangZiNum, int subMoney, int oldMoney, int nowMoney, GoodsData goodsData)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10} {11}\t{12}\t{13}\t{14}\t{15}\t{16}\t{17} {18}\t{19} {20}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                idYaoShi,
                idXiangZi,
                needSubYaoShiNum,
                needSubXiangZiNum,
                subMoney,
                oldMoney,
                nowMoney,
                goodsData.Id,
                goodsData.GoodsID,
                goodsData.GCount,
                goodsData.Binding,
                goodsData.Quality,
                goodsData.Forge_level,
                goodsData.Jewellist,
                goodsData.Site
            });
            GameManager.SystemRoleDigTreasureWithYaoShiEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddAutoSubYuanBaoEvent(GameClient client, int GoodsID, int GoodsNum, int price, int subYuanBao, string reason, int oldMoney, int nowMoney)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                GoodsID,
                GoodsNum,
                price,
                subYuanBao,
                reason,
                oldMoney,
                nowMoney
            });
            GameManager.SystemRoleAutoSubYuanBaoEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddAutoSubGoldEvent(GameClient client, int GoodsID, int GoodsNum, int price, int subGold, string reason, int oldMoney, int nowMoney)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                GoodsID,
                GoodsNum,
                price,
                subGold,
                reason,
                oldMoney,
                nowMoney
            });
            GameManager.SystemRoleAutoSubGoldEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddAutoSubEvent(GameClient client, int GoodsID, int GoodsNum, int price, int subGold, int oldGold, int nowGold, int subYuanBao, int oldYuanBao, int nowYuanBao, string reason)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string eventMsg = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}\t{13}\t{14}\t{15}", new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                GoodsID,
                GoodsNum,
                price,
                subGold,
                oldGold,
                nowGold,
                subYuanBao,
                oldYuanBao,
                nowYuanBao,
                reason
            });
            GameManager.SystemRoleAutoSubEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddShengXiaoGuessHistoryToStaticsDB(GameClient client, int roleID, int guessKey, int mortgage, int resultkey, int gainnum, int nowGold)
        {
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
        }

        
        public static void AddRoleFetchMailMoneyEvent(GameClient client, int yuanBao, int yinLiang, int tongQian)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}" : "{0}\t{1}\t{2}\t{4}\t{5}\t{6}\t{7}\t{8}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                yuanBao,
                yinLiang,
                tongQian
            });
            GameManager.SystemRoleFetchMailMoneyEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleFetchVipAwardEvent(GameClient client, int yuanBao, int yinLiang, int tongQian, int lingLi, int priority)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string msg = Global.WithRname ? "{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}" : "{0}\t{1}\t{2}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}";
            string eventMsg = string.Format(msg, new object[]
            {
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                yuanBao,
                yinLiang,
                tongQian,
                lingLi,
                priority
            });
            GameManager.SystemRoleFetchVipAwardEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        
        public static void AddRoleShengXiaoGuessHistoryEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
        }

        
        public static void AddRoleQiangGouBuyWithYuanBaoEvent(GameClient client, int goodsID, int goodsNum, int totalPrice, int qiangGouID)
        {
        }

        
        public static void NotifySelfWaWaExp(GameClient client, int addExp)
        {
            string msg = string.Format(GLang.GetLang(325, new object[0]), addExp);
            GameManager.LuaMgr.NotifyImportantMsg(client, msg, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
        }

        
        public static int GetChongZhiSecondTaskID()
        {
            return (int)GameManager.systemParamsList.GetParamValueIntByName("ChongZhiSecondTaskID", -1);
        }

        
        public static void JugeCompleteChongZhiSecondTask(GameClient client, int taskID)
        {
            if (client.ClientData.CZTaskID != taskID)
            {
                client.ClientData.CZTaskID = taskID;
                GameManager.DBCmdMgr.AddDBCmd(10062, string.Format("{0}:{1}", client.ClientData.RoleID, taskID), null, client.ServerId);
            }
        }

        
        public static bool CanGetFirstChongZhiDaLiByUserID(GameClient client)
        {
            string[] dbRoleFields = Global.ExecuteDBCmd(10110, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
            return dbRoleFields == null || dbRoleFields.Length != 1 || int.Parse(dbRoleFields[0]) <= 0;
        }

        
        public static bool CanGetDayChongZhiDaLi(GameClient client, int nBtnIndex)
        {
            int dayID = 0;
            string strs = Global.GetRoleParamByName(client, "DailyChargeGiftFlags");
            if (!string.IsNullOrEmpty(strs))
            {
                string[] giftlist = strs.Split(new char[]
                {
                    ','
                });
                dayID = Global.SafeConvertToInt32(giftlist[nBtnIndex - 1]);
            }
            return dayID != TimeUtil.NowDateTime().DayOfYear;
        }

        
        public static void CompleteDayChongZhiDaLi(GameClient client, int nBtnIndex)
        {
            string strs = Global.GetRoleParamByName(client, "DailyChargeGiftFlags");
            string ret = "";
            string[] arglist;
            if (string.IsNullOrEmpty(strs))
            {
                int count = ((MeiRiChongZhiActivity)Global.GetActivity(ActivityTypes.MeiRiChongZhiHaoLi)).AwardDict.Count;
                arglist = new string[count];
                for (int i = 0; i < count; i++)
                {
                    arglist[i] = "-1";
                }
            }
            else
            {
                arglist = strs.Split(new char[]
                {
                    ','
                });
            }
            arglist[nBtnIndex - 1] = TimeUtil.NowDateTime().DayOfYear.ToString();
            for (int i = 0; i < arglist.Length; i++)
            {
                if (0 == i)
                {
                    ret = arglist[0];
                }
                else
                {
                    ret = ret + "," + arglist[i];
                }
            }
            Global.SaveRoleParamsStringToDB(client, "DailyChargeGiftFlags", ret, true);
        }

        
        public static bool CanGetChongJiLingQuShenZhuang(GameClient client, int nBtnIndex)
        {
            string strs = Global.GetRoleParamByName(client, "ChongJiGiftList");
            bool result;
            if (string.IsNullOrEmpty(strs))
            {
                KingActivity instActivity = (KingActivity)Global.GetActivity(ActivityTypes.NewZoneUpLevelMadman);
                int count = instActivity.RoleLimit.Count;
                for (int i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        strs = "0";
                    }
                    else
                    {
                        strs += ",0";
                    }
                }
                Global.SaveRoleParamsStringToDB(client, "ChongJiGiftList", strs, true);
                result = true;
            }
            else
            {
                string[] gflist = strs.Split(new char[]
                {
                    ','
                });
                result = (gflist[nBtnIndex - 1] == "0");
            }
            return result;
        }

        
        public static bool CanGetChongJiLingQuShenZhuangUserID(GameClient client, int nBtnIndex, ActivityTypes ActType)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            string[] dbRoleFields = Global.ExecuteDBCmd(10121, string.Format("{0}:{1}:{2}:{3}", new object[]
            {
                client.ClientData.RoleID,
                dayID,
                nBtnIndex,
                ActType
            }), client.ServerId);
            return dbRoleFields == null || dbRoleFields.Length != 1 || int.Parse(dbRoleFields[0]) <= 0;
        }

        
        public static int GetChongJiLingQuShenZhuangQuota(GameClient client, int nBtnIndex)
        {
            string strs = GameManager.GameConfigMgr.GetGameConfigItemStr("ChongJiGiftList", "");
            int result;
            if (string.IsNullOrEmpty(strs))
            {
                KingActivity instact = (KingActivity)Global.GetActivity(ActivityTypes.NewZoneUpLevelMadman);
                strs = "";
                int count = instact.RoleLimit.Count;
                for (int i = 1; i < count + 1; i++)
                {
                    if (i == 1)
                    {
                        strs = "0";
                    }
                    else
                    {
                        strs += ",0";
                    }
                }
                GameManager.GameConfigMgr.SetGameConfigItem("ChongJiGiftList", strs);
                Global.UpdateDBGameConfigg("ChongJiGiftList", strs);
                result = 0;
            }
            else
            {
                int nValue = Global.SafeConvertToInt32(strs.Split(new char[]
                {
                    ','
                })[nBtnIndex - 1]);
                result = nValue;
            }
            return result;
        }

        
        public static void CompleteChongJiLingQuShenZhuang(GameClient client, int nBtnIndex, int nQuota)
        {
            string strs = Global.GetRoleParamByName(client, "ChongJiGiftList");
            string[] strlist = strs.Split(new char[]
            {
                ','
            });
            if (nBtnIndex <= strlist.Length)
            {
                strlist[nBtnIndex - 1] = "1";
                string giftstr = "";
                for (int i = 0; i < strlist.Length; i++)
                {
                    if (i == 0)
                    {
                        giftstr = strlist[i];
                    }
                    else
                    {
                        giftstr = giftstr + "," + strlist[i];
                    }
                }
                Global.SaveRoleParamsStringToDB(client, "ChongJiGiftList", giftstr, true);
                string constrs = GameManager.GameConfigMgr.GetGameConfigItemStr("ChongJiGiftList", "");
                string[] configlist = constrs.Split(new char[]
                {
                    ','
                });
                configlist[nBtnIndex - 1] = nQuota.ToString();
                string ret = "";
                for (int i = 0; i < configlist.Length; i++)
                {
                    if (i == 0)
                    {
                        ret = configlist[0];
                    }
                    else
                    {
                        ret = ret + "," + configlist[i];
                    }
                }
                Global.UpdateDBGameConfigg("ChongJiGiftList", ret);
            }
        }

        
        public static int GetShenZhuangHuiKuiStatus(GameClient client)
        {
            return Global.GetRoleParamsInt32FromDB(client, "ShenZhuangHuiKuiGift");
        }

        
        public static void CompleteShenZhuangHuiKui(GameClient client, int nQuota)
        {
            Global.SaveRoleParamsInt32ValueToDB(client, "ShenZhuangHuiKuiGift", 2, true);
            Global.UpdateDBGameConfigg("ShenZhuangHuiKuiGift", nQuota.ToString());
        }

        
        public static string[] GetXingYunChouJiangInfoUserID(GameClient client, int nTpye, int nYuanBaoValue, string FromDate, string ToDate)
        {
            return Global.ExecuteDBCmd(10123, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                client.ClientData.RoleID,
                nTpye,
                nYuanBaoValue,
                FromDate,
                ToDate
            }), client.ServerId);
        }

        
        public static string[] CompleteXingYunChouJiang(GameClient client, int nTpye, int nHasPlayTime, string FromDate, string ToDate)
        {
            return Global.ExecuteDBCmd(10124, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                client.ClientData.RoleID,
                nTpye,
                nHasPlayTime,
                FromDate,
                ToDate
            }), client.ServerId);
        }

        
        public static void SubmitOnceAwardMaskToDB(GameClient client)
        {
            GameManager.DBCmdMgr.AddDBCmd(10093, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.OnceAwardFlag), null, client.ServerId);
        }

        
        public static SystemXmlItem CanBroadcastOrEventGoods(GoodsData goodsData)
        {
            return Global.CanBroadcastOrEventGoods(goodsData.GoodsID);
        }

        
        public static SystemXmlItem CanBroadcastOrEventGoods(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            SystemXmlItem result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                result = null;
            }
            else
            {
                int infoClass = systemGoods.GetIntValue("InfoClass", -1);
                if (infoClass <= 0)
                {
                    result = null;
                }
                else
                {
                    result = systemGoods;
                }
            }
            return result;
        }

        
        public static void InitDecreaseInjureInfo()
        {
            if (null == Global.AllQualityDecreaseInjurePercents)
            {
                Global.AllQualityDecreaseInjurePercents = GameManager.systemParamsList.GetParamValueDoubleArrayByName("ZhuoYueBuff", ',');
            }
        }

        
        public static double GetAllQualityDecreaseInjurePercent(int allQualityIndex)
        {
            double result;
            if (allQualityIndex < 0 || allQualityIndex >= Global.AllQualityDecreaseInjurePercents.Length)
            {
                result = 0.0;
            }
            else
            {
                result = Global.AllQualityDecreaseInjurePercents[allQualityIndex];
            }
            return result;
        }

        
        public static void InitAllForgeLevelInfo()
        {
            if (null == Global.AllForgeLevelAttackPercents)
            {
            }
            AllThingsCalcItem.InitAllForgeLevelInfo();
        }

        
        public static double GetAllForgeLevelAttackPercent(int allForgeLevelIndex)
        {
            double result;
            if (allForgeLevelIndex < 0 || allForgeLevelIndex >= Global.AllForgeLevelAttackPercents.Length)
            {
                result = 0.0;
            }
            else
            {
                result = Global.AllForgeLevelAttackPercents[allForgeLevelIndex];
            }
            return result;
        }

        
        public static double GetAllForgeLevelMaxLifePercent(int allForgeLevelIndex)
        {
            double result;
            if (allForgeLevelIndex < 0 || allForgeLevelIndex >= Global.AllForgeLeveMaxLifePercents.Length)
            {
                result = 0.0;
            }
            else
            {
                result = Global.AllForgeLeveMaxLifePercents[allForgeLevelIndex];
            }
            return result;
        }

        
        public static int GetAllJewelLevelOccupPercent(int allJewelLevelIndex)
        {
            int result;
            if (allJewelLevelIndex < 0 || allJewelLevelIndex >= Global.AllJewelLevelOccupPercents.Length)
            {
                result = 0;
            }
            else
            {
                result = Global.AllJewelLevelOccupPercents[allJewelLevelIndex];
            }
            return result;
        }

        
        public static ExtPropIndexes GetAllJewelLevelOccupProp(int occupation)
        {
            ExtPropIndexes result;
            if (0 == occupation)
            {
                result = ExtPropIndexes.MaxLifeV;
            }
            else if (1 == occupation)
            {
                result = ExtPropIndexes.MaxMagicV;
            }
            else
            {
                result = ExtPropIndexes.MaxLifeV;
            }
            return result;
        }

        
        public static string GetAllJewelLevelOccupPropName(int occupation)
        {
            string result;
            if (0 == occupation)
            {
                result = "生命上限";
            }
            else if (1 == occupation)
            {
                result = "魔法上限";
            }
            else
            {
                result = "生命上限";
            }
            return result;
        }

        
        public static int GetAllJewelLevelOtherPercent(int allJewelLevelIndex)
        {
            int result;
            if (allJewelLevelIndex < 0 || allJewelLevelIndex >= Global.AllJewelLevelOtherPercents.Length)
            {
                result = 0;
            }
            else
            {
                result = Global.AllJewelLevelOtherPercents[allJewelLevelIndex];
            }
            return result;
        }

        
        public static void CalcAllThingsCalcItem(AllThingsCalcItem item, out int allQualityIndex, out int allForgeLevelIndex, out int allJewelLevelIndex, out int allZhuoYueNum)
        {
            allQualityIndex = 0;
            allForgeLevelIndex = 0;
            allJewelLevelIndex = 0;
            allZhuoYueNum = 0;
            if (item.TotalPurpleZhuoYueNum >= 8)
            {
                allZhuoYueNum = 3;
            }
            else if (item.TotalBlueZhuoYueNum + item.TotalPurpleZhuoYueNum >= 8)
            {
                allZhuoYueNum = 2;
            }
            else if (item.TotalGreenZhuoYueNum + item.TotalBlueZhuoYueNum + item.TotalPurpleZhuoYueNum >= 8)
            {
                allZhuoYueNum = 1;
            }
            if (item.TotalGoldQualityNum >= Global.MaxUsingEquipNum)
            {
                allQualityIndex = 2;
            }
            else if (item.TotalPurpleQualityNum + item.TotalGoldQualityNum >= Global.MaxUsingEquipNum)
            {
                allQualityIndex = 1;
            }
            allForgeLevelIndex = item.GetTotalForgeLevelValidIndex();
            if (item.TotalJewel8LevelNum >= Global.MaxUsingJewelNum)
            {
                allJewelLevelIndex = 8;
            }
            else if (item.TotalJewel7LevelNum + item.TotalJewel8LevelNum >= Global.MaxUsingJewelNum)
            {
                allJewelLevelIndex = 7;
            }
            else if (item.TotalJewel6LevelNum + item.TotalJewel7LevelNum + item.TotalJewel8LevelNum >= Global.MaxUsingJewelNum)
            {
                allJewelLevelIndex = 6;
            }
            else if (item.TotalJewel5LevelNum + item.TotalJewel6LevelNum + item.TotalJewel7LevelNum + item.TotalJewel8LevelNum >= Global.MaxUsingJewelNum)
            {
                allJewelLevelIndex = 5;
            }
            else if (item.TotalJewel4LevelNum + item.TotalJewel5LevelNum + item.TotalJewel6LevelNum + item.TotalJewel7LevelNum + item.TotalJewel8LevelNum >= Global.MaxUsingJewelNum)
            {
                allJewelLevelIndex = 4;
            }
        }

        
        public static void CalcClientAllThingsCalcItem(GameClient client)
        {
            int allQualityIndex = 0;
            int allForgeLevelIndex = 0;
            int allJewelLevelIndex = 0;
            int allZhuoYueNum = 0;
            Global.CalcAllThingsCalcItem(client.ClientData.MyAllThingsCalcItem, out allQualityIndex, out allForgeLevelIndex, out allJewelLevelIndex, out allZhuoYueNum);
            client.ClientData.AllQualityIndex = allQualityIndex;
            client.ClientData.AllForgeLevelIndex = allForgeLevelIndex;
            client.ClientData.AllJewelLevelIndex = allJewelLevelIndex;
            client.ClientData.AllZhuoYueNum = allZhuoYueNum;
            GameManager.ClientMgr.ChangeAllThingAddPropIndexs(client);
        }

        
        public static void CalcClientAllThingsBuffer(GameClient client)
        {
            client.AllThingsMultipliedBuffer.ClearAllTempExtProps();
            double addVal = Global.GetAllQualityDecreaseInjurePercent(client.ClientData.AllZhuoYueNum - 1);
            if (addVal != 0.0)
            {
                client.AllThingsMultipliedBuffer.AddTempExtProp(37, addVal, 0L);
            }
            QiangHuaFuJiaItem qiangHuaFuJiaItem = AllThingsCalcItem.GetQiangHuaFuJiaItem(client.ClientData.AllForgeLevelIndex - 1);
            if (null != qiangHuaFuJiaItem)
            {
                client.AllThingsMultipliedBuffer.AddTempExtProp(26, qiangHuaFuJiaItem.AddAttackInjurePercent, 0L);
                client.AllThingsMultipliedBuffer.AddTempExtProp(14, qiangHuaFuJiaItem.MaxLifePercent, 0L);
            }
        }

        
        public static bool IsAllYinCangOk(GameClient client, string yinCangIDs)
        {
            bool result;
            if (string.IsNullOrEmpty(yinCangIDs))
            {
                result = false;
            }
            else
            {
                int[] yinCangIDList = Global.String2IntArray(yinCangIDs, ',');
                if (yinCangIDList == null || yinCangIDList.Length <= 0)
                {
                    result = false;
                }
                else
                {
                    for (int i = 0; i < yinCangIDList.Length; i++)
                    {
                        if (!Global.IsYinCangOk(client, yinCangIDList[i]))
                        {
                            return false;
                        }
                    }
                    result = true;
                }
            }
            return result;
        }

        
        public static bool IsYinCangOk(GameClient client, int yinCangID)
        {
            bool result = false;
            if (yinCangID <= 10)
            {
                switch (yinCangID)
                {
                    case 1:
                        result = (client.ClientData.AllQualityIndex >= 1);
                        break;
                    case 2:
                        result = (client.ClientData.AllQualityIndex >= 2);
                        break;
                    case 3:
                    case 4:
                    case 6:
                        break;
                    case 5:
                        result = (client.ClientData.AllForgeLevelIndex >= 1);
                        break;
                    case 7:
                        result = (client.ClientData.AllForgeLevelIndex >= 2);
                        break;
                    default:
                        if (yinCangID == 10)
                        {
                            result = (client.ClientData.AllForgeLevelIndex >= 3);
                        }
                        break;
                }
            }
            else
            {
                switch (yinCangID)
                {
                    case 13:
                        result = (client.ClientData.AllForgeLevelIndex >= 4);
                        break;
                    case 14:
                        break;
                    case 15:
                        result = (client.ClientData.AllForgeLevelIndex >= 5);
                        break;
                    default:
                        switch (yinCangID)
                        {
                            case 104:
                                result = (client.ClientData.AllJewelLevelIndex >= 4);
                                break;
                            case 105:
                                result = (client.ClientData.AllJewelLevelIndex >= 5);
                                break;
                            case 106:
                                result = (client.ClientData.AllJewelLevelIndex >= 6);
                                break;
                            case 107:
                                result = (client.ClientData.AllJewelLevelIndex >= 7);
                                break;
                        }
                        break;
                }
            }
            return result;
        }

        
        public static int RecalcNeedYinLiang(int needYinLiang)
        {
            int halfYinLiangPeriod = GameManager.GameConfigMgr.GetGameConfigItemInt("half_yinliang_period", 0);
            int result;
            if (halfYinLiangPeriod <= 0)
            {
                result = needYinLiang;
            }
            else
            {
                result = needYinLiang / 2;
            }
            return result;
        }

        
        public static string FormatRoleName(GameClient client, string roleName)
        {
            return Global.FormatRoleName2(client.ClientData, roleName);
        }

        
        public static string FormatRoleName2(SafeClientData clientData, string roleName)
        {
            return roleName;
        }

        
        public static string FormatRoleName3(int zoneID, string roleName)
        {
            return roleName;
        }

        
        public static string FormatRoleName4(GameClient client)
        {
            return Global.FormatRoleName2(client.ClientData, client.ClientData.RoleName);
        }

        
        public static string FormatRoleNameWithPtName(GameClient client)
        {
            string ptName = Data.GetPtNameByPtID(client.ClientData.UserPTID);
            string result;
            if (Data.ThemeActivityState > 0)
            {
                int KFZoneID = ConstData.ConvertToKuaFuServerID(client.ClientData.ZoneID, client.ClientData.ServerPTID);
                string zoneName = KuaFuManager.getInstance().GetZoneName(KFZoneID);
                if (string.IsNullOrEmpty(zoneName))
                {
                    result = null;
                }
                else
                {
                    result = string.Format("{0}•[{1}]{2}", ptName, zoneName, client.ClientData.RoleName);
                }
            }
            else
            {
                result = StringUtil.substitute(GLang.GetLang(689, new object[0]), new object[]
                {
                    ptName,
                    client.ClientData.ZoneID,
                    client.ClientData.RoleName
                });
            }
            return result;
        }

        
        public static string FormatRoleNameWithZoneId(GameClient client)
        {
            string result;
            if (Data.ThemeActivityState > 0)
            {
                string zoneName = KuaFuManager.getInstance().GetZoneName(client.ClientData.ZoneID);
                if (string.IsNullOrEmpty(zoneName))
                {
                    result = null;
                }
                else
                {
                    result = string.Format("[{0}]{1}", zoneName, client.ClientData.RoleName);
                }
            }
            else
            {
                result = StringUtil.substitute(GLang.GetLang(326, new object[0]), new object[]
                {
                    client.ClientData.ZoneID,
                    client.ClientData.RoleName
                });
            }
            return result;
        }

        
        public static string FormatNameWithZoneId(int zoneID, string name)
        {
            string result;
            if (Data.ThemeActivityState > 0)
            {
                string zoneName = KuaFuManager.getInstance().GetZoneName(zoneID);
                result = string.Format("[{0}]{1}", zoneName, name);
            }
            else
            {
                result = StringUtil.substitute(GLang.GetLang(326, new object[0]), new object[]
                {
                    zoneID,
                    name
                });
            }
            return result;
        }

        
        public static string FormatRoleNameWithZoneId2(GameClient client)
        {
            string result;
            if (Data.ThemeActivityState > 0)
            {
                string zoneName;
                if (KuaFuManager.KuaFuWorldKuaFuGameServer)
                {
                    int KFZoneID = ConstData.ConvertToKuaFuServerID(client.ClientData.ZoneID, client.ClientData.ServerPTID);
                    zoneName = KuaFuManager.getInstance().GetZoneName(KFZoneID);
                }
                else
                {
                    zoneName = KuaFuManager.getInstance().GetZoneName(client.ClientData.ZoneID);
                }
                result = string.Format("[{0}]{1}", zoneName, client.ClientData.RoleName);
            }
            else
            {
                result = StringUtil.substitute(GLang.GetLang(327, new object[0]), new object[]
                {
                    client.ClientData.ZoneID,
                    client.ClientData.RoleName
                });
            }
            return result;
        }

        
        public static string FormatBangHuiName(int zoneID, string bhName)
        {
            return bhName;
        }

        
        public static string FormatBangHuiNameWithZone(int zoneID, string bhName)
        {
            string result;
            if (Data.ThemeActivityState > 0)
            {
                string zoneName = KuaFuManager.getInstance().GetZoneName(zoneID);
                result = string.Format("[{0}]{1}", zoneName, bhName);
            }
            else
            {
                result = string.Format(GLang.GetLang(327, new object[0]), zoneID, bhName);
            }
            return result;
        }

        
        
        public static int CreateBangHuiNeedTongQian
        {
            get
            {
                string Tongqian = Global.MUGetZhanMengParamsAt(2);
                int result;
                if (Tongqian != null)
                {
                    result = int.Parse(Tongqian);
                }
                else
                {
                    result = 50000;
                }
                return result;
            }
        }

        
        
        public static int CreateBangHuiNeedLevel
        {
            get
            {
                string level = Global.MUGetZhanMengParamsAt(1);
                int result;
                if (level != null)
                {
                    result = int.Parse(level);
                }
                else
                {
                    result = 40;
                }
                return result;
            }
        }

        
        
        public static int CreateBangHuiNeedZhuanShengLevel
        {
            get
            {
                string ZhuanShengLevel = Global.MUGetZhanMengParamsAt(0);
                int result;
                if (ZhuanShengLevel != null)
                {
                    result = int.Parse(ZhuanShengLevel);
                }
                else
                {
                    result = 0;
                }
                return result;
            }
        }

        
        
        public static int CreateBangHuiNeedGoodsID
        {
            get
            {
                string DaojuID = Global.MUGetZhanMengParamsAt(3);
                int result;
                if (DaojuID != null)
                {
                    result = int.Parse(DaojuID);
                }
                else
                {
                    result = (int)GameManager.systemParamsList.GetParamValueIntByName("CreateBangHuiGoodsID", -1);
                }
                return result;
            }
        }

        
        public static bool IsHavingBangHui(GameClient client)
        {
            return client.ClientData.Faction > 0 && !string.IsNullOrEmpty(client.ClientData.BHName);
        }

        
        public static BangHuiMiniData GetBangHuiMiniData(int bangHuiID, int serverId = 0)
        {
            BangHuiMiniData bhData = null;
            BangHuiMiniData result;
            if (Global.DictBangHui.TryGetValue(bangHuiID, out bhData))
            {
                result = bhData;
            }
            else
            {
                byte[] bytesData = null;
                if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer3(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10106, string.Format("{0}", bangHuiID), out bytesData, serverId))
                {
                    result = null;
                }
                else if (bytesData == null || bytesData.Length <= 6)
                {
                    result = null;
                }
                else
                {
                    int length = BitConverter.ToInt32(bytesData, 0);
                    bhData = DataHelper.BytesToObject<BangHuiMiniData>(bytesData, 6, length - 2);
                    if (null == bhData)
                    {
                        result = null;
                    }
                    else
                    {
                        lock (Global.DictBangHui)
                        {
                            if (!Global.DictBangHui.ContainsKey(bangHuiID))
                            {
                                Global.DictBangHui.Add(bangHuiID, bhData);
                            }
                        }
                        result = bhData;
                    }
                }
            }
            return result;
        }

        
        public static BangHuiDetailData GetBangHuiDetailData(int roleID, int bhid, int ServerID = 0)
        {
            BangHuiDetailData bhData = null;
            lock (Global.BangHuiDetailDataDict)
            {
                bhData = Global.sendToDB<BangHuiDetailData, string>(297, string.Format("{0}:{1}", roleID, bhid), ServerID);
            }
            return bhData;
        }

        
        public static int GetBangHuiLevel(GameClient client)
        {
            lock (Global.BangHuiDetailDataDict)
            {
                BangHuiDetailData bhData = Global.sendToDB<BangHuiDetailData, string>(297, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.Faction), client.ServerId);
                if (null != bhData)
                {
                    return bhData.QiLevel;
                }
            }
            return 0;
        }

        
        public static void RemoveBangHuiMiniData(int bangHuiID)
        {
            lock (Global.DictBangHui)
            {
                if (Global.DictBangHui.ContainsKey(bangHuiID))
                {
                    Global.DictBangHui.Remove(bangHuiID);
                }
            }
        }

        
        public static void UpdateBangHuiMiniDataName(int banghuiid, string newName)
        {
            lock (Global.DictBangHui)
            {
                BangHuiMiniData miniData = null;
                if (Global.DictBangHui.TryGetValue(banghuiid, out miniData))
                {
                    miniData.BHName = newName;
                }
            }
        }

        
        public static string MUGetZhanMengParamsAt(int idx)
        {
            string strZhanMengParams = GameManager.systemParamsList.GetParamValueByName("ZhanMengNeed");
            if (strZhanMengParams != null)
            {
                string[] aryParams = strZhanMengParams.Split(new char[]
                {
                    '|'
                });
                if (idx < aryParams.Length)
                {
                    return aryParams[idx];
                }
            }
            return null;
        }

        
        public static SystemXmlItem GetZhanMengBuildItem(int buildType, int level)
        {
            SystemXmlItem systemZhanMengBuildItem = null;
            foreach (SystemXmlItem val in GameManager.SystemZhanMengBuild.SystemXmlItemDict.Values)
            {
                if (buildType == val.GetIntValue("Type", -1) && level == val.GetIntValue("Level", -1))
                {
                    systemZhanMengBuildItem = val;
                    break;
                }
            }
            return systemZhanMengBuildItem;
        }

        
        public static int GetZhanMengInitCoin()
        {
            int[] arrZhanMengZiJin = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanMengZiJin", ',');
            int result;
            if (arrZhanMengZiJin != null && arrZhanMengZiJin.Length > 0)
            {
                result = arrZhanMengZiJin[0];
            }
            else
            {
                result = 20000;
            }
            return result;
        }

        
        public static int GetZhanMengConsumptionCoin()
        {
            int[] arrZhanMengZiJin = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanMengZiJin", ',');
            int result;
            if (arrZhanMengZiJin != null && arrZhanMengZiJin.Length > 1)
            {
                result = arrZhanMengZiJin[1];
            }
            else
            {
                result = 10000;
            }
            return result;
        }

        
        public static JunQiData JunQiItem2JunQiData(JunQiItem junQiItem)
        {
            return new JunQiData
            {
                JunQiID = junQiItem.JunQiID,
                QiName = junQiItem.QiName,
                JunQiLevel = junQiItem.JunQiLevel,
                ZoneID = junQiItem.ZoneID,
                BHID = junQiItem.BHID,
                BHName = junQiItem.BHName,
                QiZuoNPC = junQiItem.QiZuoNPC,
                MapCode = junQiItem.MapCode,
                PosX = junQiItem.PosX,
                PosY = junQiItem.PosY,
                Direction = junQiItem.Direction,
                LifeV = junQiItem.LifeV,
                CutLifeV = junQiItem.CutLifeV,
                StartTime = junQiItem.StartTime,
                BodyCode = junQiItem.BodyCode,
                PicCode = junQiItem.PicCode,
                CurrentLifeV = junQiItem.CurrentLifeV
            };
        }

        
        public static void InstallJunQi(GameClient client, int npcID, SceneUIClasses sceneType = SceneUIClasses.Normal)
        {
            if (Global.GetBangHuiFightingLineID() != GameManager.ServerLineID)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(328, new object[0]), new object[]
                {
                    Global.GetBangHuiFightingLineID()
                }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
            }
            else
            {
                if (sceneType == SceneUIClasses.LuoLanChengZhan)
                {
                    if (!LuoLanChengZhanManager.getInstance().OnPreInstallJunQi(client, npcID))
                    {
                        return;
                    }
                }
                else
                {
                    if (!JunQiManager.IsInLingDiZhanFightingTime())
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(329, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                        return;
                    }
                    if (!JunQiManager.CanInstallJunQi(client))
                    {
                        string mapName = Global.GetMapName(client.ClientData.MapCode);
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(330, new object[0]), new object[]
                        {
                            mapName
                        }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                        return;
                    }
                    SystemXmlItem systemQiZuoItem = null;
                    if (!GameManager.systemQiZuoMgr.SystemXmlItemDict.TryGetValue(client.ClientData.MapCode, out systemQiZuoItem))
                    {
                        return;
                    }
                    if (client.ClientData.Faction <= 0)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(45, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                        return;
                    }
                    if (!JunQiManager.CanInstallJunQiNow(client.ClientData.MapCode, npcID - 2130706432, client.ClientData.Faction))
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(46, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                        return;
                    }
                }
                lock (JunQiManager.JunQiMutex)
                {
                    JunQiItem junQiItem = JunQiManager.FindJunQiByNpcID(npcID - 2130706432);
                    if (null != junQiItem)
                    {
                        if (junQiItem.BHID != client.ClientData.Faction)
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(331, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                        }
                    }
                    else if (sceneType == SceneUIClasses.LuoLanChengZhan)
                    {
                        LuoLanChengZhanManager.getInstance().OnInstallJunQi(client, npcID);
                    }
                    else
                    {
                        int bhZoneID = 0;
                        if (!GameManager.ClientMgr.SubBangHuiTongQian(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, Global.InstallJunQiNeedMoney, out bhZoneID))
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(47, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 27);
                        }
                        else
                        {
                            string junQiName = JunQiManager.GetJunQiNameByBHID(client.ClientData.Faction);
                            int junQiLevel = JunQiManager.GetJunQiLevelByBHID(client.ClientData.Faction);
                            JunQiManager.ProcessNewJunQi(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client.ClientData.MapCode, client.ClientData.Faction, bhZoneID, client.ClientData.BHName, npcID - 2130706432, junQiName, junQiLevel, sceneType);
                            JunQiManager.NotifyAllLingDiMapInfoData(client.ClientData.MapCode);
                            Global.BroadcastBangHuiMsg(-1, client.ClientData.Faction, StringUtil.substitute(GLang.GetLang(48, new object[0]), new object[]
                            {
                                Global.FormatRoleName(client, client.ClientData.RoleName),
                                Global.GetServerLineName2(),
                                Global.GetMapName(client.ClientData.MapCode)
                            }), true, GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlySysHint);
                        }
                    }
                }
            }
        }

        
        public static void UpdateLingDiForBH(int lingDiID, int bhid)
        {
            GameManager.DBCmdMgr.AddDBCmd(10075, string.Format("{0}:{1}", lingDiID, bhid), null, 0);
            JunQiManager.NotifySyncBangHuiLingDiItemsDict();
        }

        
        public static void ProcessYangZhouExpAndLingLi(GameClient client, out double addExperience, out double addLingLi)
        {
            addExperience = 0.0;
            addLingLi = 0.0;
            if (client.ClientData.MapCode == GameManager.MainMapCode)
            {
                if (client.ClientData.Faction > 0)
                {
                    int lingDiID = 2;
                    if (client.ClientData.Faction == JunQiManager.GetBHIDByLingDiID(lingDiID))
                    {
                        addExperience = 0.2;
                        addLingLi = 0.3;
                    }
                }
            }
        }

        
        public static double ProcessLingDiMonsterExperience(GameClient client, Monster monster)
        {
            double ret = 0.0;
            double result;
            if (client.ClientData.Faction <= 0)
            {
                result = 0.0;
            }
            else
            {
                int lingDiID = 3;
                if (client.ClientData.Faction != JunQiManager.GetBHIDByLingDiID(lingDiID))
                {
                    result = ret;
                }
                else
                {
                    int junQiLevel = JunQiManager.GetJunQiLevelByBHID(client.ClientData.Faction);
                    if (junQiLevel <= 0)
                    {
                        result = ret;
                    }
                    else
                    {
                        if (1 == junQiLevel)
                        {
                            ret = 0.05;
                        }
                        else if (2 == junQiLevel)
                        {
                            ret = 0.15;
                        }
                        else if (3 == junQiLevel)
                        {
                            ret = 0.3;
                        }
                        else if (4 == junQiLevel)
                        {
                            ret = 0.5;
                        }
                        result = ret;
                    }
                }
            }
            return result;
        }

        
        public static int GetBangHuiFightingLineID()
        {
            return (int)GameManager.systemParamsList.GetParamValueIntByName("BangHuiFightingLineID", -1);
        }

        
        public static void TakeSheLiZhiYuan(GameClient client, int npcID)
        {
            if ((int)GameManager.systemParamsList.GetParamValueIntByName("SheLiZhiYuanNPCID", -1) == npcID - 2130706432)
            {
                if (client.ClientData.Faction <= 0 || client.ClientData.BHZhiWu != 1)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(332, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else if (Global.GetBangHuiFightingLineID() != GameManager.ServerLineID)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(333, new object[0]), new object[]
                    {
                        Global.GetBangHuiFightingLineID()
                    }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else if (!HuangChengManager.IsInHuangChengFightingTime())
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(334, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else if (HuangChengManager.IsHuangChengZhanOver())
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(335, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else if (null == JunQiManager.GetAnyLingDiItemDataByBHID(client.ClientData.Faction))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(336, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else
                {
                    int oldHuangDiRoleID = 0;
                    lock (HuangChengManager.SheLiZhiYuanMutex)
                    {
                        if (!HuangChengManager.CanTakeSheLiZhiYuan())
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(337, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                            return;
                        }
                        int bhZoneID = 0;
                        if (!GameManager.ClientMgr.SubBangHuiTongQian(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, Global.TakeSheLiZhiYuanNeedMoney, out bhZoneID))
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(338, new object[0]), new object[]
                            {
                                Global.TakeSheLiZhiYuanNeedMoney / 10000
                            }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 27);
                            return;
                        }
                        oldHuangDiRoleID = HuangChengManager.ProcessTakeSheLiZhiYuan(client.ClientData.RoleID, Global.FormatRoleName(client, client.ClientData.RoleName), client.ClientData.BHName, true);
                    }
                    GameManager.ClientMgr.NotifyAllChgHuangDiRoleIDMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, oldHuangDiRoleID, HuangChengManager.GetHuangDiRoleID());
                    HuangChengManager.NotifyAllHuangChengMapInfoData();
                }
            }
        }

        
        public static void ResetHuangChengMapCode()
        {
            Global.HuangChengMapCode = -1;
        }

        
        public static int GetHuangChengMapCode()
        {
            if (Global.HuangChengMapCode < 0)
            {
                Global.HuangChengMapCode = (int)GameManager.systemParamsList.GetParamValueIntByName("HuangChengMapCode", -1);
            }
            return Global.HuangChengMapCode;
        }

        
        public static bool IsHuangChengMapCode(int mapCode)
        {
            return Global.GetHuangChengMapCode() == mapCode;
        }

        
        public static void GetHuangChengMapPos(GameClient client, ref int defaultBirthPosX, ref int defaultBirthPosY, ref int defaultBirthRadius)
        {
            if (client.ClientData.Faction > 0)
            {
                BangHuiLingDiItemData bangHuiLingDiItemData = JunQiManager.GetFirstLingDiItemDataByBHID(client.ClientData.Faction);
                if (null != bangHuiLingDiItemData)
                {
                    SystemXmlItem systemHuanChengFuHuoItem = null;
                    if (GameManager.systemHuangChengFuHuoMgr.SystemXmlItemDict.TryGetValue(bangHuiLingDiItemData.LingDiID, out systemHuanChengFuHuoItem))
                    {
                        defaultBirthPosX = systemHuanChengFuHuoItem.GetIntValue("PosX", -1);
                        defaultBirthPosY = systemHuanChengFuHuoItem.GetIntValue("PosY", -1);
                        defaultBirthRadius = systemHuanChengFuHuoItem.GetIntValue("BirthRadius", -1);
                    }
                }
            }
        }

        
        public static bool CanHuangChengAlive(GameClient client)
        {
            bool result;
            if (client.ClientData.Faction <= 0)
            {
                result = false;
            }
            else
            {
                BangHuiLingDiItemData bangHuiLingDiItemData = JunQiManager.GetFirstLingDiItemDataByBHID(client.ClientData.Faction);
                if (null == bangHuiLingDiItemData)
                {
                    result = false;
                }
                else
                {
                    SystemXmlItem systemHuanChengFuHuoItem = null;
                    if (!GameManager.systemHuangChengFuHuoMgr.SystemXmlItemDict.TryGetValue(bangHuiLingDiItemData.LingDiID, out systemHuanChengFuHuoItem))
                    {
                        result = false;
                    }
                    else
                    {
                        int defaultBirthPosX = systemHuanChengFuHuoItem.GetIntValue("PosX", -1);
                        int defaultBirthPosY = systemHuanChengFuHuoItem.GetIntValue("PosY", -1);
                        result = !Global.InCircle(new Point((double)client.ClientData.PosX, (double)client.ClientData.PosY), new Point((double)defaultBirthPosX, (double)defaultBirthPosY), (double)Global.MaxRadiusMustGoToYangZhou);
                    }
                }
            }
            return result;
        }

        
        public static bool CanHuangChengAttack(GameClient client)
        {
            bool result;
            if (client.ClientData.Faction <= 0)
            {
                result = false;
            }
            else
            {
                BangHuiLingDiItemData bangHuiLingDiItemData = JunQiManager.GetAnyLingDiItemDataByBHID(client.ClientData.Faction);
                result = (null != bangHuiLingDiItemData);
            }
            return result;
        }

        
        public static void BroadcastHuangChengBattleStart()
        {
            string broadCastMsg = StringUtil.substitute(GLang.GetLang(339, new object[0]), new object[0]);
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox, 0, 0, 100, 100);
        }

        
        public static bool IsInWangChengBattle(GameClient client)
        {
            int wangChengMapCode = (int)GameManager.systemParamsList.GetParamValueIntByName("WangChengMapCode", -1);
            int palaceMapCode = (int)GameManager.systemParamsList.GetParamValueIntByName("PalaceMapCode", -1);
            return (client.ClientData.MapCode == wangChengMapCode || client.ClientData.MapCode == palaceMapCode) && Global.IsInWangChengBattleTime();
        }

        
        public static bool IsInWangChengBattleTime()
        {
            return true;
        }

        
        public static void ResetHuangGongMapCode()
        {
            Global.HuangGongMapCode = -1;
        }

        
        public static int GetHuangGongMapCode()
        {
            if (Global.HuangGongMapCode < 0)
            {
                Global.HuangGongMapCode = (int)GameManager.systemParamsList.GetParamValueIntByName("PalaceMapCode", -1);
            }
            return Global.HuangGongMapCode;
        }

        
        public static int GetWangChengMapCode()
        {
            return (int)GameManager.systemParamsList.GetParamValueIntByName("WangChengMapCode", -1);
        }

        
        public static bool IsHuangGongMapCode(int mapCode)
        {
            return Global.GetHuangGongMapCode() == mapCode;
        }

        
        public static void UpdateWangChengZhanWeekDays(bool force = false)
        {
            if (Global.LastUpdateDayOfYear != TimeUtil.NowDateTime().DayOfYear || force)
            {
                Global.LastUpdateDayOfYear = TimeUtil.NowDateTime().DayOfYear;
                int day = TimeUtil.NowDateTime().DayOfYear;
                if (WangChengManager.IsExistCityWarToday())
                {
                    WangChengManager.UpdateWangChengZhanWeekDays(new int[]
                    {
                        (int)TimeUtil.NowDateTime().DayOfWeek
                    });
                }
                else
                {
                    HuodongCachingMgr.UpdateHeFuWCKingBHID(WangChengManager.GetWangZuBHid());
                }
            }
        }

        
        public static void UpdateLuoLanChengZhanWeekDays(bool force = false)
        {
            if (Global.LastUpdateLuoLanChengZhanDayOfYear != TimeUtil.NowDateTime().DayOfYear || force)
            {
                Global.LastUpdateLuoLanChengZhanDayOfYear = TimeUtil.NowDateTime().DayOfYear;
                if (!LuoLanChengZhanManager.getInstance().IsExistCityWarToday())
                {
                    HuodongCachingMgr.UpdateHeFuWCKingBHID(LuoLanChengZhanManager.getInstance().GetWangZuBHid());
                }
            }
        }

        
        public static bool IsBattleMap(GameClient client)
        {
            return client.ClientData.MapCode == GameManager.BattleMgr.BattleMapCode;
        }

        
        public static bool InBattling(GameClient client)
        {
            return Global.IsBattleMap(client);
        }

        
        public static bool IsBattleDisableGoodsID(int goodsID)
        {
            string goodsIDStr = goodsID.ToString();
            return -1 != GameManager.BattleMgr.BattleDisableGoodsIDs.IndexOf(goodsIDStr);
        }

        
        public static void AddBattleKilledNum(GameClient client, object victim, int personalJiFen = 5, int zhenYingJiFen = 5)
        {
            if (client.ClientData.MapCode == GameManager.BattleMgr.BattleMapCode)
            {
                client.ClientData.BattleKilledNum += personalJiFen;
                GameManager.BattleMgr.UpdateRolePointInfo(client);
                if (1 == client.ClientData.BattleWhichSide)
                {
                    GameManager.BattleMgr.SuiKilledNum += zhenYingJiFen;
                }
                else if (2 == client.ClientData.BattleWhichSide)
                {
                    GameManager.BattleMgr.TangKilledNum += zhenYingJiFen;
                }
                GameClient theVictimClient = null;
                if (victim != null && null != (theVictimClient = (victim as GameClient)))
                {
                    theVictimClient.ClientData.BattleKilledNum++;
                    GameManager.BattleMgr.UpdateRolePointInfo(theVictimClient);
                    if (theVictimClient.ClientData.BattleKilledNum > theVictimClient.ClientData.CampBattleTotalPoint)
                    {
                        theVictimClient.ClientData.CampBattleTotalPoint = theVictimClient.ClientData.BattleKilledNum;
                    }
                    if (theVictimClient.ClientData.BattleKilledNum > BattleManager.BattleMaxPoint)
                    {
                        BattleManager.SetTotalPointInfo(theVictimClient.ClientData.RoleName, theVictimClient.ClientData.BattleKilledNum);
                    }
                    if (theVictimClient.ClientData.BattleKilledNum > BattleManager.BattleMaxPointNow)
                    {
                        BattleManager.BattleMaxPointNow = theVictimClient.ClientData.BattleKilledNum;
                    }
                }
                if (client.ClientData.BattleKilledNum > client.ClientData.CampBattleTotalPoint)
                {
                    client.ClientData.CampBattleTotalPoint = client.ClientData.BattleKilledNum;
                }
                if (client.ClientData.BattleKilledNum > BattleManager.BattleMaxPoint)
                {
                    BattleManager.SetTotalPointInfo(client.ClientData.RoleName, client.ClientData.BattleKilledNum);
                }
                if (client.ClientData.BattleKilledNum > BattleManager.BattleMaxPointNow)
                {
                    BattleManager.BattleMaxPointNow = client.ClientData.BattleKilledNum;
                }
                if (theVictimClient != null)
                {
                    GameManager.ClientMgr.NotifyBattleKilledNumCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, theVictimClient, GameManager.BattleMgr.TangKilledNum, GameManager.BattleMgr.SuiKilledNum);
                }
                GameManager.ClientMgr.NotifyBattleKilledNumCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, GameManager.BattleMgr.TangKilledNum, GameManager.BattleMgr.SuiKilledNum);
                GameManager.BattleMgr.AllKilledRoleNum++;
            }
        }

        
        public static bool HavingBattleName(GameClient client)
        {
            bool result;
            if (client.ClientData.BattleNameIndex <= 0)
            {
                result = false;
            }
            else
            {
                long ticks = TimeUtil.NOW();
                result = (ticks - client.ClientData.BattleNameStart < Global.MaxBattleNameTicks);
            }
            return result;
        }

        
        public static void ClientEnterBattle(GameClient client)
        {
            if (GameManager.BattleMgr.BattleMapCode < 0)
            {
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -1, 4, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
            }
            else if (GameManager.BattleMgr.BattleServerLineID != GameManager.ServerLineID)
            {
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -1000 - GameManager.BattleMgr.BattleServerLineID, 4, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
            }
            else if (0 != Global.AvalidLevel(client, GameManager.BattleMgr.NeedMinChangeLev, GameManager.BattleMgr.AllowMinLevel, -1, -1))
            {
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -1001 - GameManager.BattleMgr.BattleServerLineID, 4, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
            }
            else if (!GameManager.BattleMgr.AllowEnterMap)
            {
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -2, 4, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
            }
            else if (!GameManager.BattleMgr.ClientEnter())
            {
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -3, 4, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
            }
            else
            {
                Global.GetLastBattleSideInfo(client);
                if (1 == client.ClientData.BattleWhichSide)
                {
                    GameManager.BattleMgr.SuiClientCount++;
                }
                else
                {
                    GameManager.BattleMgr.TangClientCount++;
                }
                GameManager.ClientMgr.NotifyRoleBattleSideInfo(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                client.ClientData.BattleKilledNum = 0;
                int toMapCode = GameManager.BattleMgr.BattleMapCode;
                GameMap gameMap = null;
                if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                {
                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
                    GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0, 4, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
                }
                GameManager.ClientMgr.NotifyRoleBattleSideInfo(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                DailyActiveManager.ProcessCompleteDailyActivityForDailyActive(client, 3);
                Global.UpdateDayActivityEnterCountToDB(client, client.ClientData.RoleID, TimeUtil.NowDateTime().DayOfYear, 3, 1);
            }
        }

        
        public static void GetBattleMapPos(GameClient client, ref int defaultBirthPosX, ref int defaultBirthPosY, ref int defaultBirthRadius)
        {
            int sideID = client.ClientData.BattleWhichSide;
            SystemXmlItem systemXmlItem = null;
            if (GameManager.systemBattleRebirthMgr.SystemXmlItemDict.TryGetValue(sideID, out systemXmlItem))
            {
                defaultBirthPosX = systemXmlItem.GetIntValue("PosX", -1);
                defaultBirthPosY = systemXmlItem.GetIntValue("PosY", -1);
                defaultBirthRadius = systemXmlItem.GetIntValue("BirthRadius", -1);
            }
        }

        
        public static bool CanReEnterBattleMap(int roleID)
        {
            long ticks = TimeUtil.NOW();
            long lastTicks = GameManager.BattleMgr.GetRoleLeaveTicks(roleID);
            return ticks - lastTicks < 12000000L && GameManager.BattleMgr.GetBattlingState() >= 1 && GameManager.BattleMgr.GetBattlingState() < 4;
        }

        
        public static void GetLastBattleSideInfo(GameClient client)
        {
            if (client.ClientData.BattleWhichSide != 1 && client.ClientData.BattleWhichSide != 2)
            {
                int sideID = GameManager.BattleMgr.GetRoleLeaveSideID(client.ClientData.RoleID);
                if (sideID <= 0)
                {
                    lock (GameManager.BattleMgr.ExternalMutex)
                    {
                        if (GameManager.BattleMgr.SuiClientCount == GameManager.BattleMgr.TangClientCount)
                        {
                            if (sideID <= 0)
                            {
                                sideID = Global.GetRandomNumber(1, 3);
                            }
                        }
                        else if (GameManager.BattleMgr.SuiClientCount < GameManager.BattleMgr.TangClientCount)
                        {
                            sideID = 1;
                        }
                        else
                        {
                            sideID = 2;
                        }
                    }
                }
                client.ClientData.BattleWhichSide = sideID;
            }
        }

        
        public static void GetLastBattleInfo(GameClient client)
        {
            if (client.ClientData.MapCode == GameManager.BattleMgr.BattleMapCode)
            {
                int jiFen = GameManager.BattleMgr.GetRoleLeaveJiFen(client.ClientData.RoleID);
                client.ClientData.BattleKilledNum = jiFen;
                if (1 == client.ClientData.BattleWhichSide)
                {
                    GameManager.BattleMgr.SuiClientCount++;
                }
                else
                {
                    GameManager.BattleMgr.TangClientCount++;
                }
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0, 4, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
                GameManager.BattleMgr.UpdateRolePointInfo(client);
                GameManager.BattleMgr.SendScoreInfoListToClient(client);
                GameManager.ClientMgr.NotifyRoleBattleSideInfo(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                GameManager.ClientMgr.NotifyBattleKilledNumCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, GameManager.BattleMgr.TangKilledNum, GameManager.BattleMgr.SuiKilledNum);
            }
        }

        
        public static string GetBattleZhenYing(GameClient client)
        {
            string lang;
            if (1 == client.ClientData.BattleWhichSide)
            {
                lang = GLang.GetLang(340, new object[0]);
            }
            else
            {
                lang = GLang.GetLang(341, new object[0]);
            }
            return lang;
        }

        
        public static List<T> RandomSortList<T>(List<T> ListT)
        {
            List<T> newList = new List<T>();
            foreach (T item in ListT)
            {
                int index = Global.GetRandomNumber(0, newList.Count + 1);
                newList.Insert(index, item);
            }
            return newList;
        }

        
        public static List<T> MerageList<T>(List<T> toListT, List<T> fromListT)
        {
            for (int i = 0; i < fromListT.Count; i++)
            {
                if (toListT.IndexOf(fromListT[i]) < 0)
                {
                    toListT.Add(fromListT[i]);
                }
            }
            return toListT;
        }

        
        public static int CalcNeedKunLungJingNum(int clickNum)
        {
            int result;
            if (clickNum <= 0)
            {
                result = 0;
            }
            else
            {
                result = (int)Math.Pow(2.0, (double)clickNum);
            }
            return result;
        }

        
        public static bool StartQuickEnchance(GameClient client, GoodsData goodsData)
        {
            return true;
        }

        
        public static bool StartQuickForge(GameClient client, GoodsData goodsData)
        {
            return true;
        }

        
        public static void UpdateRoleHuangHou(GameClient client, int huangHou, string huangDiRoleName)
        {
        }

        
        public static bool CanOpenFallBaoXiang(GameClient client, SystemXmlItem systemGoodsItem, int goodsID)
        {
            List<MagicActionItem> magicActionItemList = null;
            bool result;
            if (!GameManager.SystemMagicActionMgr.GoodsActionsDict.TryGetValue(goodsID, out magicActionItemList) || null == magicActionItemList)
            {
                result = true;
            }
            else if (magicActionItemList.Count <= 0)
            {
                result = true;
            }
            else
            {
                MagicActionItem magicActionItem = magicActionItemList[0];
                if (MagicActionIDs.FALL_BAOXIANG != magicActionItem.MagicActionID && MagicActionIDs.FALL_BAOXIANG_2 != magicActionItem.MagicActionID)
                {
                    result = true;
                }
                else
                {
                    int maxFallCount = (int)magicActionItem.MagicActionParams[1];
                    if (MagicActionIDs.FALL_BAOXIANG == magicActionItem.MagicActionID)
                    {
                        if (RebornEquip.IsRebornType(goodsID))
                        {
                            result = RebornEquip.CanAddGoodsNum(client, maxFallCount);
                        }
                        else
                        {
                            result = Global.CanAddGoodsNum(client, maxFallCount);
                        }
                    }
                    else
                    {
                        int num = (int)magicActionItem.MagicActionParams[2];
                        if (num <= 7000)
                        {
                            if (num == 0)
                            {
                                return Global.CanAddGoodsNum(client, maxFallCount);
                            }
                            if (num == 3000)
                            {
                                return ElementhrtsManager.CanAddGoodsNum(client, maxFallCount);
                            }
                            if (num == 7000)
                            {
                                return GameManager.FluorescentGemMgr.CanAddGoodsNum(client, maxFallCount);
                            }
                        }
                        else if (num <= 11000)
                        {
                            if (num == 8000)
                            {
                                return SingletonTemplate<SoulStoneManager>.Instance().CanAddGoodsNum(client, maxFallCount);
                            }
                            if (num == 11000)
                            {
                                return ShenShiManager.CanAddGoodsNum(client, maxFallCount);
                            }
                        }
                        else
                        {
                            if (num == 15000)
                            {
                                return RebornEquip.CanAddGoodsNum(client, maxFallCount);
                            }
                            if (num == 16000)
                            {
                                return MountHolyStampManager.CanAddGoodsNum(client, maxFallCount);
                            }
                        }
                        result = false;
                    }
                }
            }
            return result;
        }

        
        public static bool CanUnPackSimpleGoods(GameClient client, SystemXmlItem systemGoodsItem, int goodsID)
        {
            List<MagicActionItem> magicActionItemList = null;
            bool result;
            if (!GameManager.SystemMagicActionMgr.GoodsActionsDict.TryGetValue(goodsID, out magicActionItemList) || null == magicActionItemList)
            {
                result = true;
            }
            else if (magicActionItemList.Count <= 0)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("CanUnPackSimpleGoods magicActionItemList.Count goodsID={0}", goodsID), null, true);
                result = false;
            }
            else
            {
                MagicActionItem magicActionItem = magicActionItemList[0];
                if (MagicActionIDs.UN_PACK != magicActionItem.MagicActionID)
                {
                    result = true;
                }
                else
                {
                    int maxFallCount = (int)magicActionItem.MagicActionParams[1];
                    int eachGirdNum = Global.GetGoodsGridNumByID((int)magicActionItem.MagicActionParams[0]);
                    eachGirdNum = Math.Max(eachGirdNum, 1);
                    int needGird = maxFallCount / eachGirdNum + ((maxFallCount % eachGirdNum == 0) ? 0 : 1);
                    result = Global.CanAddGoodsNum(client, needGird);
                }
            }
            return result;
        }

        
        public static void LoadLangDict()
        {
            GLang.LoadLangDict();
        }

        
        public static string GetLang(string chineseText)
        {
            return GLang.GetLang(chineseText);
        }

        
        public static void ClientRealive(GameClient client, int posX, int posY, int direction)
        {
            GameManager.ClientMgr.StopClientStoryboard(client, 0L, -1, -1);
            client.TimedActionMgr.RemoveItem(0);
            int oldX = client.ClientData.PosX;
            int oldY = client.ClientData.PosY;
            EventLogManager.AddRoleEvent(client, OpTypes.RoleRealive, OpTags.None, LogRecordType.IntValue6, new object[]
            {
                client.ClientData.MapCode,
                client.ClientData.RoleID,
                oldX,
                oldY,
                posX,
                posY
            });
            client.ClientData.PosX = posX;
            client.ClientData.PosY = posY;
            client.ClientData.ReportPosTicks = 0L;
            client.ClientData.RoleDirection = direction;
            client.ClientData.CurrentLifeV = client.ClientData.LifeV;
            client.ClientData.CurrentMagicV = client.ClientData.MagicV;
            client.ClientData.CurrentAction = 0;
            client.ClientData.MoveAndActionNum = 0;
            if (!GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode].MoveObject(oldX, oldY, client.ClientData.PosX, client.ClientData.PosY, client))
            {
            }
            ClientManager.DoSpriteMapGridMove(client, 0);
            ClientCmdCheck.RecordClientPosition(client);
            GameManager.ClientMgr.NotifyOthersRealive(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, client.ClientData.RoleID, posX, posY, direction);
            GameManager.ClientMgr.NotifyMySelfRealive(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, client.ClientData.RoleID, posX, posY, direction);
            CaiJiLogic.CancelCaiJiState(client);
            ZuoQiManager.getInstance().RoleDisMount(client, true);
            GameManager.ClientMgr.NotifySelfOnHorse(client);
            GameManager.ClientMgr.NotifySelfPetShow(client);
            client.delayExecModule.SetDelayExecProc(new DelayExecProcIds[]
            {
                DelayExecProcIds.RecalcProps,
                DelayExecProcIds.UpdateOtherProps,
                DelayExecProcIds.NotifyRefreshProps
            });
            VideoLogic.getInstance().ClientRelive(client);
        }

        
        public static double GetClientUnitCost(GameClient client)
        {
            return (double)Data.RunUnitCost / client.ClientData.MoveSpeed;
        }

        
        public static Dictionary<int, int> GetYaoShiDiaoLuoForXiangZhi(int idXiangZi)
        {
            Dictionary<int, int> dictYaoShi = new Dictionary<int, int>();
            Dictionary<int, SystemXmlItem> systemXmlItemDict = GameManager.SystemGoods.SystemXmlItemDict;
            Dictionary<int, int> result;
            if (!systemXmlItemDict.Keys.Contains(idXiangZi))
            {
                result = dictYaoShi;
            }
            else
            {
                SystemXmlItem itemXiangZhi = systemXmlItemDict[idXiangZi];
                if (null == itemXiangZhi)
                {
                    result = dictYaoShi;
                }
                else
                {
                    string paramsWabao = itemXiangZhi.GetStringValue("ExecMagic");
                    int leftPos = paramsWabao.IndexOf('(');
                    int rightPos = paramsWabao.IndexOf(')');
                    if (leftPos < 0 || rightPos <= 0 || rightPos - leftPos < 1 || leftPos + 1 >= paramsWabao.Length)
                    {
                        result = dictYaoShi;
                    }
                    else
                    {
                        string[] pairs = paramsWabao.Substring(leftPos + 1, rightPos - leftPos - 1).Split(new char[]
                        {
                            '|'
                        });
                        for (int i = 0; i < pairs.Length; i++)
                        {
                            if (!string.IsNullOrWhiteSpace(pairs[i]))
                            {
                                string[] pair = pairs[i].Split(new char[]
                                {
                                    ','
                                });
                                if (2 == pair.Length)
                                {
                                    dictYaoShi.Add(Convert.ToInt32(pair[1]), Convert.ToInt32(pair[0]));
                                }
                            }
                        }
                        result = dictYaoShi;
                    }
                }
            }
            return result;
        }

        
        public static int SubUserMoneyForGoods(GameClient client, Dictionary<int, int> needGoods, string sReason)
        {
            int needYuanBao = 0;
            foreach (KeyValuePair<int, int> goods in needGoods)
            {
                int price = MallPriceMgr.GetPriceByGoodsID(goods.Key);
                if (price <= 0)
                {
                    return -2000;
                }
                int number = goods.Value;
                if (number <= 0 || number >= 10000)
                {
                    return -2100;
                }
                needYuanBao += price * number;
            }
            int result;
            if (needYuanBao <= 0)
            {
                result = -2200;
            }
            else if (client.ClientData.UserMoney + client.ClientData.Gold < needYuanBao)
            {
                result = -2300;
            }
            else
            {
                foreach (KeyValuePair<int, int> goods in needGoods)
                {
                    int ret = Global.SubUserMoneyForGoods(client, goods.Key, goods.Value, sReason);
                    if (ret <= 0)
                    {
                        return ret;
                    }
                }
                result = needYuanBao;
            }
            return result;
        }

        
        public static int SubUserMoneyForGoods(GameClient client, int needGoodsID, int needGoodsNum, string sReason)
        {
            int priceType = MallPriceMgr.GetPriceTypeByGoodsIDFromCfg(needGoodsID);
            int result;
            if (0 == priceType)
            {
                result = Global.SubUserYuanBaoForGoods(client, needGoodsID, needGoodsNum, sReason);
            }
            else if (1 == priceType)
            {
                result = Global.SubUserGoldForGoods(client, needGoodsID, needGoodsNum, sReason);
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        public static int SubUserYuanBaoForGoods(GameClient client, int needGoodsID, int needGoodsNum, string sReason)
        {
            int price = MallPriceMgr.GetPriceByGoodsID(needGoodsID);
            int result;
            if (price <= 0)
            {
                result = -2000;
            }
            else if (needGoodsNum <= 0 || needGoodsNum >= 10000)
            {
                result = -2100;
            }
            else
            {
                int needYuanBao = price * needGoodsNum;
                if (needYuanBao <= 0)
                {
                    result = -2200;
                }
                else if (client.ClientData.UserMoney < needYuanBao)
                {
                    result = -2300;
                }
                else
                {
                    int oldYuanBao = client.ClientData.UserMoney;
                    string msg = string.Format("物品[{0}]x[{1}]{2}", needGoodsID, needGoodsNum, sReason);
                    if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, msg, true, true, false, DaiBiSySType.None))
                    {
                        result = -2400;
                    }
                    else
                    {
                        int hasSubYuanBao = needYuanBao;
                        Global.AddAutoSubYuanBaoEvent(client, needGoodsID, needGoodsNum, price, hasSubYuanBao, sReason, oldYuanBao, client.ClientData.UserMoney);
                        result = needYuanBao;
                    }
                }
            }
            return result;
        }

        
        public static int SubUserGoldForGoods(GameClient client, int needGoodsID, int needGoodsNum, string sReason)
        {
            int price = MallPriceMgr.GetPriceByGoodsID(needGoodsID);
            int result;
            if (price <= 0)
            {
                result = -2000;
            }
            else if (needGoodsNum <= 0 || needGoodsNum >= 10000)
            {
                result = -2100;
            }
            else
            {
                int needGold = price * needGoodsNum;
                if (needGold <= 0)
                {
                    result = -2200;
                }
                else if (client.ClientData.Gold < needGold)
                {
                    result = -2300;
                }
                else
                {
                    int oldGold = client.ClientData.Gold;
                    if (!GameManager.ClientMgr.SubUserGold(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needGold, "无", false))
                    {
                        result = -2400;
                    }
                    else
                    {
                        int hasSubGold = needGold;
                        Global.AddAutoSubGoldEvent(client, needGoodsID, needGoodsNum, price, hasSubGold, sReason, oldGold, client.ClientData.Gold);
                        result = needGold;
                    }
                }
            }
            return result;
        }

        
        public static void AddCoolDownItem(Dictionary<int, CoolDownItem> coolDownDict, int id, long startTicks, long cdTicks)
        {
            CoolDownItem coolDownItem = null;
            coolDownDict.TryGetValue(id, out coolDownItem);
            if (null == coolDownItem)
            {
                coolDownItem = new CoolDownItem
                {
                    ID = id,
                    StartTicks = startTicks,
                    CDTicks = cdTicks
                };
                coolDownDict[id] = coolDownItem;
            }
            else if (startTicks + cdTicks > coolDownItem.StartTicks + coolDownItem.CDTicks)
            {
                coolDownItem.StartTicks = startTicks;
                coolDownItem.CDTicks = cdTicks;
            }
        }

        
        public static int GetChargeYinLiangForSendMail(bool hasAttachment)
        {
            int needYinLiang;
            if (hasAttachment)
            {
                needYinLiang = Global.GMax(0, (int)GameManager.systemParamsList.GetParamValueIntByName("EmailMoneyWithAttachment", -1));
            }
            else
            {
                needYinLiang = Global.GMax(0, (int)GameManager.systemParamsList.GetParamValueIntByName("EmailMoney", -1));
            }
            return needYinLiang;
        }

        
        public static int GetValueBetweenMinAndMax(int value, int min = 0, int max = 999999999)
        {
            int result;
            if (value < min)
            {
                result = min;
            }
            else if (value > max)
            {
                result = max;
            }
            else
            {
                result = value;
            }
            return result;
        }

        
        public static string GetActivityRequestCmdString(ActivityTypes type, GameClient client, int extTag = 0)
        {
            int roleID = client.ClientData.RoleID;
            string sCmd = "";
            string sCmdFormat = "{0}:{1}:{2}:{3}:{4}";
            KingActivity instanceKing = null;
            switch (type)
            {
                case ActivityTypes.InputFanLi:
                    {
                        InputFanLiActivity instance = HuodongCachingMgr.GetInputFanLiActivity();
                        if (null != instance)
                        {
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance.FromDate.Replace(':', '$'),
                        instance.ToDate.Replace(':', '$'),
                        instance.FanLiPersent,
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.InputJiaSong:
                    {
                        InputSongActivity instance2 = HuodongCachingMgr.GetInputSongActivity();
                        if (null != instance2)
                        {
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance2.FromDate.Replace(':', '$'),
                        instance2.ToDate.Replace(':', '$'),
                        instance2.MyAwardItem.MinAwardCondionValue,
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.InputKing:
                case ActivityTypes.NewZoneRechargeKing:
                    instanceKing = HuodongCachingMgr.GetInputKingActivity();
                    extTag = 4;
                    break;
                case ActivityTypes.LevelKing:
                    instanceKing = HuodongCachingMgr.GetLevelKingActivity();
                    break;
                case ActivityTypes.EquipKing:
                case ActivityTypes.NewZoneBosskillKing:
                    instanceKing = HuodongCachingMgr.GetEquipKingActivity();
                    extTag = 6;
                    break;
                case ActivityTypes.HorseKing:
                    instanceKing = HuodongCachingMgr.GetHorseKingActivity();
                    break;
                case ActivityTypes.JingMaiKing:
                    instanceKing = HuodongCachingMgr.GetJingMaiKingActivity();
                    break;
                case ActivityTypes.JieriDaLiBao:
                    {
                        JieriDaLiBaoActivity instance3 = HuodongCachingMgr.GetJieriDaLiBaoActivity();
                        if (null != instance3)
                        {
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance3.FromDate.Replace(':', '$'),
                        instance3.ToDate.Replace(':', '$'),
                        instance3.MyAwardItem.MinAwardCondionValue,
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.JieriDengLuHaoLi:
                    {
                        JieRiDengLuActivity instance4 = HuodongCachingMgr.GetJieRiDengLuActivity();
                        if (null != instance4)
                        {
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance4.FromDate.Replace(':', '$'),
                        instance4.ToDate.Replace(':', '$'),
                        Global.GetRoleParamsInt32FromDB(client, "JieriLoginNum"),
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.JieriVIP:
                    {
                        JieriVIPActivity instance5 = HuodongCachingMgr.GetJieriVIPActivity();
                        if (null != instance5)
                        {
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance5.FromDate.Replace(':', '$'),
                        instance5.ToDate.Replace(':', '$'),
                        Global.IsVip(client) ? 1 : 0,
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.JieriCZSong:
                    {
                        JieriCZSongActivity instance6 = HuodongCachingMgr.GetJieriCZSongActivity();
                        if (null != instance6)
                        {
                            string FromDate = new DateTime(TimeUtil.NowDateTime().Year, TimeUtil.NowDateTime().Month, TimeUtil.NowDateTime().Day, 0, 0, 0).ToString();
                            string ToDate = new DateTime(TimeUtil.NowDateTime().Year, TimeUtil.NowDateTime().Month, TimeUtil.NowDateTime().Day, 23, 59, 59).ToString();
                            AwardItem myAwardItem = instance6.GetAward(extTag);
                            if (null != myAwardItem)
                            {
                                sCmd = string.Format(sCmdFormat, new object[]
                                {
                            roleID,
                            FromDate.Replace(':', '$'),
                            ToDate.Replace(':', '$'),
                            myAwardItem.MinAwardCondionValue,
                            extTag
                                });
                            }
                            else
                            {
                                sCmd = string.Format(sCmdFormat, new object[]
                                {
                            roleID,
                            FromDate.Replace(':', '$'),
                            ToDate.Replace(':', '$'),
                            0,
                            extTag
                                });
                            }
                        }
                        break;
                    }
                case ActivityTypes.JieriLeiJiCZ:
                    {
                        JieRiLeiJiCZActivity instance7 = HuodongCachingMgr.GetJieRiLeiJiCZActivity();
                        if (null != instance7)
                        {
                            AwardItem myAwardItem = instance7.GetAward(extTag);
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance7.FromDate.Replace(':', '$'),
                        instance7.ToDate.Replace(':', '$'),
                        instance7.GetAwardMinConditionValues(),
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.JieriZiKa:
                    break;
                case ActivityTypes.JieriPTXiaoFeiKing:
                    instanceKing = HuodongCachingMgr.GetJieriXiaoFeiKingActivity();
                    return string.Format(sCmdFormat, new object[]
                    {
                    roleID,
                    instanceKing.FromDate.Replace(':', '$'),
                    instanceKing.ToDate.Replace(':', '$'),
                    instanceKing.GetAwardMinConditionValues(),
                    extTag
                    });
                case ActivityTypes.JieriPTCZKing:
                    instanceKing = HuodongCachingMgr.GetJieRiCZKingActivity();
                    return string.Format(sCmdFormat, new object[]
                    {
                    roleID,
                    instanceKing.FromDate.Replace(':', '$'),
                    instanceKing.ToDate.Replace(':', '$'),
                    instanceKing.GetAwardMinConditionValues(),
                    extTag
                    });
                case ActivityTypes.JieriBossAttack:
                    break;
                case (ActivityTypes)18:
                case (ActivityTypes)19:
                case ActivityTypes.HeFuShopLimit:
                case ActivityTypes.HeFuAwardTime:
                case ActivityTypes.TotalCharge:
                case ActivityTypes.TotalConsume:
                case ActivityTypes.JieriDuoBei:
                case ActivityTypes.JieriQiangGou:
                case ActivityTypes.HeFuLuoLan:
                case ActivityTypes.SpecActivity:
                case ActivityTypes.OneDollarBuy:
                case ActivityTypes.OneDollarChongZhi:
                case ActivityTypes.EverydayActivity:
                case ActivityTypes.InputFanLiNew:
                case ActivityTypes.SpecPriorityActivity:
                case ActivityTypes.JieriGive:
                case ActivityTypes.JieriGiveKing:
                case ActivityTypes.JieriRecvKing:
                case ActivityTypes.JieriLianXuCharge:
                case ActivityTypes.JieriRecv:
                case (ActivityTypes)65:
                case ActivityTypes.JieriFuLi:
                case ActivityTypes.JieriChongZhiQiangGou:
                case ActivityTypes.JieriVIPYouHui:
                case ActivityTypes.JieriSuperInputFanLi:
                case ActivityTypes.JieRiHongBao:
                case ActivityTypes.JieRiChongZhiHongBao:
                case ActivityTypes.JieRiHongBaoKing:
                    break;
                case ActivityTypes.HeFuLogin:
                    {
                        HeFuLoginActivity instance8 = HuodongCachingMgr.GetHeFuLoginActivity();
                        if (null != instance8)
                        {
                        }
                        break;
                    }
                case ActivityTypes.HeFuTotalLogin:
                    {
                        HeFuTotalLoginActivity instance9 = HuodongCachingMgr.GetHeFuTotalLoginActivity();
                        if (null != instance9)
                        {
                        }
                        break;
                    }
                case ActivityTypes.HeFuRecharge:
                    break;
                case ActivityTypes.HeFuPKKing:
                    {
                        HeFuPKKingActivity instance10 = HuodongCachingMgr.GetHeFuPKKingActivity();
                        if (null != instance10)
                        {
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance10.FromDate.Replace(':', '$'),
                        instance10.ToDate.Replace(':', '$'),
                        HuodongCachingMgr.GetHeFuPKKingRoleID(),
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.HeFuBossAttack:
                    break;
                case ActivityTypes.MeiRiChongZhiHaoLi:
                    break;
                case ActivityTypes.ChongJiLingQuShenZhuang:
                case ActivityTypes.NewZoneUpLevelMadman:
                    instanceKing = HuodongCachingMgr.GetChongJiHaoLiActivity();
                    break;
                case ActivityTypes.ShenZhuangJiQingHuiKui:
                    break;
                case ActivityTypes.XinCZFanLi:
                case ActivityTypes.NewZoneFanli:
                    instanceKing = HuodongCachingMgr.GetXinFanLiActivity();
                    break;
                case ActivityTypes.XingYunChouJiang:
                    break;
                case ActivityTypes.YuDuZhuanPanChouJiang:
                    {
                        YueDuZhuanPanActivity instance11 = HuodongCachingMgr.GetYueDuZhuanPanActivity();
                        if (null != instance11)
                        {
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance11.FromDate.Replace(':', '$'),
                        instance11.ToDate.Replace(':', '$'),
                        0,
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.NewZoneConsumeKing:
                    instanceKing = HuodongCachingMgr.GetXinXiaoFeiKingActivity();
                    break;
                case ActivityTypes.JieriTotalConsume:
                    {
                        JieRiTotalConsumeActivity instance12 = HuodongCachingMgr.GetJieRiTotalConsumeActivity();
                        if (null != instance12)
                        {
                            AwardItem myAwardItem = instance12.GetAward(extTag);
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance12.FromDate.Replace(':', '$'),
                        instance12.ToDate.Replace(':', '$'),
                        instance12.GetAwardMinConditionValues(),
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.JieriWing:
                case ActivityTypes.JieriAddon:
                case ActivityTypes.JieriStrengthen:
                case ActivityTypes.JieriAchievement:
                case ActivityTypes.JieriMilitaryRank:
                case ActivityTypes.JieriVIPFanli:
                case ActivityTypes.JieriAmulet:
                case ActivityTypes.JieriArchangel:
                case ActivityTypes.JieriMarriage:
                case ActivityTypes.JieRiHuiJi:
                case ActivityTypes.JieRiFuWen:
                    {
                        JieriFanLiActivity instance13 = HuodongCachingMgr.GetJieriFanLiActivity(type);
                        if (null != instance13)
                        {
                            AwardItem myAwardItem = instance13.GetAward(extTag);
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance13.FromDate.Replace(':', '$'),
                        instance13.ToDate.Replace(':', '$'),
                        (int)type,
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.JieriInputPointsExchg:
                    {
                        JieriIPointsExchgActivity instance14 = HuodongCachingMgr.GetJieriIPointsExchgActivity();
                        if (null != instance14)
                        {
                            AwardItem myAwardItem = instance14.GetAward(extTag);
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance14.FromDate.Replace(':', '$'),
                        instance14.ToDate.Replace(':', '$'),
                        (int)type,
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.DanBiChongZhi:
                    {
                        DanBiChongZhiActivity instance15 = HuodongCachingMgr.GetDanBiChongZhiActivity();
                        if (null != instance15)
                        {
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                        roleID,
                        instance15.FromDate.Replace(':', '$'),
                        instance15.ToDate.Replace(':', '$'),
                        (int)type,
                        extTag
                            });
                        }
                        break;
                    }
                case ActivityTypes.JieRiMeiRiLeiJi:
                    {
                        JieRiMeiRiLeiJiActivity instance16 = HuodongCachingMgr.GetJieriMeiRiLeiJiActivity();
                        if (null != instance16)
                        {
                            DateTime today = DateTime.Parse(instance16.FromDate);
                            int addDay = extTag / 1000;
                            today = today.AddDays((double)addDay);
                            string FromDate = today.AddDays(-1.0).Date.ToString();
                            string ToDate = today.Date.ToString();
                            AwardItem myAwardItem = instance16.GetAward(extTag);
                            if (null != myAwardItem)
                            {
                                sCmd = string.Format(sCmdFormat, new object[]
                                {
                            roleID,
                            FromDate.Replace(':', '$'),
                            ToDate.Replace(':', '$'),
                            myAwardItem.MinAwardCondionValue,
                            extTag % 1000
                                });
                            }
                            else
                            {
                                sCmd = string.Format(sCmdFormat, new object[]
                                {
                            roleID,
                            FromDate.Replace(':', '$'),
                            ToDate.Replace(':', '$'),
                            0,
                            extTag % 1000
                                });
                            }
                        }
                        break;
                    }
                default:
                    if (type == ActivityTypes.ThemeDaLiBao)
                    {
                        ThemeDaLiBaoActivity instance17 = HuodongCachingMgr.GetThemeDaLiBaoActivity();
                        if (null != instance17)
                        {
                            sCmd = string.Format(sCmdFormat, new object[]
                            {
                            roleID,
                            instance17.FromDate.Replace(':', '$'),
                            instance17.ToDate.Replace(':', '$'),
                            instance17.MyAwardItem.MinAwardCondionValue,
                            extTag
                            });
                        }
                    }
                    break;
            }
            if (null != instanceKing)
            {
                sCmd = string.Format(sCmdFormat, new object[]
                {
                    roleID,
                    instanceKing.FromDate.Replace(':', '$'),
                    instanceKing.ToDate.Replace(':', '$'),
                    instanceKing.GetAwardMinConditionValues(),
                    (int)type
                });
            }
            return sCmd;
        }

        
        public static Activity GetActivity(ActivityTypes type)
        {
            Activity instance = null;
            switch (type)
            {
                case ActivityTypes.InputFirst:
                    instance = HuodongCachingMgr.GetFirstChongZhiActivity();
                    break;
                case ActivityTypes.InputFanLi:
                    instance = HuodongCachingMgr.GetInputFanLiActivity();
                    break;
                case ActivityTypes.InputJiaSong:
                    instance = HuodongCachingMgr.GetInputSongActivity();
                    break;
                case ActivityTypes.InputKing:
                case ActivityTypes.NewZoneRechargeKing:
                    instance = HuodongCachingMgr.GetInputKingActivity();
                    break;
                case ActivityTypes.LevelKing:
                    instance = HuodongCachingMgr.GetLevelKingActivity();
                    break;
                case ActivityTypes.EquipKing:
                case ActivityTypes.NewZoneBosskillKing:
                    instance = HuodongCachingMgr.GetEquipKingActivity();
                    break;
                case ActivityTypes.HorseKing:
                    instance = HuodongCachingMgr.GetHorseKingActivity();
                    break;
                case ActivityTypes.JingMaiKing:
                    instance = HuodongCachingMgr.GetJingMaiKingActivity();
                    break;
                case ActivityTypes.JieriDaLiBao:
                    instance = HuodongCachingMgr.GetJieriDaLiBaoActivity();
                    break;
                case ActivityTypes.JieriDengLuHaoLi:
                    instance = HuodongCachingMgr.GetJieRiDengLuActivity();
                    break;
                case ActivityTypes.JieriVIP:
                    instance = HuodongCachingMgr.GetJieriVIPActivity();
                    break;
                case ActivityTypes.JieriCZSong:
                    instance = HuodongCachingMgr.GetJieriCZSongActivity();
                    break;
                case ActivityTypes.JieriLeiJiCZ:
                    instance = HuodongCachingMgr.GetJieRiLeiJiCZActivity();
                    break;
                case ActivityTypes.JieriZiKa:
                    instance = HuodongCachingMgr.GetJieRiZiKaLiaBaoActivity();
                    break;
                case ActivityTypes.JieriPTXiaoFeiKing:
                    instance = HuodongCachingMgr.GetJieriXiaoFeiKingActivity();
                    break;
                case ActivityTypes.JieriPTCZKing:
                    instance = HuodongCachingMgr.GetJieRiCZKingActivity();
                    break;
                case ActivityTypes.JieriBossAttack:
                    break;
                case (ActivityTypes)18:
                case (ActivityTypes)19:
                case ActivityTypes.HeFuShopLimit:
                case ActivityTypes.HeFuAwardTime:
                case ActivityTypes.XingYunChouJiang:
                case ActivityTypes.JieriQiangGou:
                case ActivityTypes.SpecActivity:
                case ActivityTypes.EverydayActivity:
                case ActivityTypes.SpecPriorityActivity:
                case ActivityTypes.JieriGive:
                case ActivityTypes.JieriGiveKing:
                case ActivityTypes.JieriRecvKing:
                case ActivityTypes.JieriLianXuCharge:
                case ActivityTypes.JieriRecv:
                case (ActivityTypes)65:
                case ActivityTypes.JieriFuLi:
                case ActivityTypes.JieriVIPYouHui:
                case ActivityTypes.JieRiHongBao:
                case ActivityTypes.JieRiChongZhiHongBao:
                case ActivityTypes.JieRiHongBaoKing:
                case (ActivityTypes)78:
                case (ActivityTypes)79:
                case (ActivityTypes)80:
                case (ActivityTypes)81:
                case (ActivityTypes)82:
                case (ActivityTypes)83:
                case (ActivityTypes)84:
                case (ActivityTypes)85:
                case (ActivityTypes)86:
                case (ActivityTypes)87:
                case (ActivityTypes)88:
                case (ActivityTypes)89:
                case (ActivityTypes)90:
                case (ActivityTypes)91:
                case (ActivityTypes)92:
                case (ActivityTypes)93:
                case (ActivityTypes)94:
                case (ActivityTypes)95:
                case (ActivityTypes)96:
                case (ActivityTypes)97:
                case (ActivityTypes)98:
                case (ActivityTypes)99:
                case ActivityTypes.JieriPlatChargeKing:
                case (ActivityTypes)101:
                case (ActivityTypes)102:
                case (ActivityTypes)103:
                case (ActivityTypes)104:
                case (ActivityTypes)105:
                case (ActivityTypes)106:
                case (ActivityTypes)107:
                case (ActivityTypes)108:
                case (ActivityTypes)109:
                    break;
                case ActivityTypes.HeFuLogin:
                    instance = HuodongCachingMgr.GetHeFuLoginActivity();
                    break;
                case ActivityTypes.HeFuTotalLogin:
                    instance = HuodongCachingMgr.GetHeFuTotalLoginActivity();
                    break;
                case ActivityTypes.HeFuRecharge:
                    instance = HuodongCachingMgr.GetHeFuRechargeActivity();
                    break;
                case ActivityTypes.HeFuPKKing:
                    instance = HuodongCachingMgr.GetHeFuPKKingActivity();
                    break;
                case ActivityTypes.HeFuBossAttack:
                    break;
                case ActivityTypes.MeiRiChongZhiHaoLi:
                    instance = HuodongCachingMgr.GetMeiRiChongZhiActivity();
                    break;
                case ActivityTypes.ChongJiLingQuShenZhuang:
                case ActivityTypes.NewZoneUpLevelMadman:
                    instance = HuodongCachingMgr.GetChongJiHaoLiActivity();
                    break;
                case ActivityTypes.ShenZhuangJiQingHuiKui:
                    instance = HuodongCachingMgr.GetShenZhuangJiQiHuiKuiHaoLiActivity();
                    break;
                case ActivityTypes.XinCZFanLi:
                case ActivityTypes.NewZoneFanli:
                    instance = HuodongCachingMgr.GetXinFanLiActivity();
                    break;
                case ActivityTypes.YuDuZhuanPanChouJiang:
                    instance = HuodongCachingMgr.GetYueDuZhuanPanActivity();
                    break;
                case ActivityTypes.NewZoneConsumeKing:
                    instance = HuodongCachingMgr.GetXinXiaoFeiKingActivity();
                    break;
                case ActivityTypes.TotalCharge:
                    instance = HuodongCachingMgr.GetTotalChargeActivity();
                    break;
                case ActivityTypes.TotalConsume:
                    instance = HuodongCachingMgr.GetTotalConsumeActivity();
                    break;
                case ActivityTypes.JieriTotalConsume:
                    instance = HuodongCachingMgr.GetJieRiTotalConsumeActivity();
                    break;
                case ActivityTypes.JieriDuoBei:
                    instance = HuodongCachingMgr.GetJieRiMultAwardActivity();
                    break;
                case ActivityTypes.HeFuLuoLan:
                    instance = HuodongCachingMgr.GetHeFuLuoLanActivity();
                    break;
                case ActivityTypes.OneDollarBuy:
                    instance = HuodongCachingMgr.GetOneDollarBuyActivity();
                    break;
                case ActivityTypes.OneDollarChongZhi:
                    instance = HuodongCachingMgr.GetOneDollarChongZhiActivity();
                    break;
                case ActivityTypes.InputFanLiNew:
                    instance = HuodongCachingMgr.GetInputFanLiNewActivity();
                    break;
                case ActivityTypes.JieriWing:
                case ActivityTypes.JieriAddon:
                case ActivityTypes.JieriStrengthen:
                case ActivityTypes.JieriAchievement:
                case ActivityTypes.JieriMilitaryRank:
                case ActivityTypes.JieriVIPFanli:
                case ActivityTypes.JieriAmulet:
                case ActivityTypes.JieriArchangel:
                case ActivityTypes.JieriMarriage:
                case ActivityTypes.JieRiHuiJi:
                case ActivityTypes.JieRiFuWen:
                    instance = HuodongCachingMgr.GetJieriFanLiActivity(type);
                    break;
                case ActivityTypes.JieriInputPointsExchg:
                    instance = HuodongCachingMgr.GetJieriIPointsExchgActivity();
                    break;
                case ActivityTypes.JieriChongZhiQiangGou:
                    instance = HuodongCachingMgr.GetJieRiCZQGActivity();
                    break;
                case ActivityTypes.DanBiChongZhi:
                    instance = HuodongCachingMgr.GetDanBiChongZhiActivity();
                    break;
                case ActivityTypes.JieRiMeiRiLeiJi:
                    instance = HuodongCachingMgr.GetJieriMeiRiLeiJiActivity();
                    break;
                case ActivityTypes.JieriSuperInputFanLi:
                    instance = HuodongCachingMgr.GetJieRiSuperInputActivity();
                    break;
                case ActivityTypes.JieriPCKingEveryDay:
                    instance = HuodongCachingMgr.GetJieriPCKingEveryDayActivity();
                    break;
                case ActivityTypes.TriennialRegressOpen:
                    instance = HuodongCachingMgr.GetRegressActiveOpen();
                    break;
                case ActivityTypes.TriennialRegressSignAward:
                    instance = HuodongCachingMgr.GetRegressActiveSignGift();
                    break;
                case ActivityTypes.TriennialRegressTotalRechargeAward:
                    instance = HuodongCachingMgr.GetRegressActiveTotalRecharge();
                    break;
                case ActivityTypes.TriennialRegressDayBuy:
                    instance = HuodongCachingMgr.GetRegressActiveDayBuy();
                    break;
                case ActivityTypes.TriennialRegressStore:
                    instance = HuodongCachingMgr.GetRegressActiveStore();
                    break;
                default:
                    switch (type)
                    {
                        case ActivityTypes.ThemeZhiGou:
                            instance = HuodongCachingMgr.GetThemeZhiGouActivity();
                            break;
                        case ActivityTypes.ThemeDaLiBao:
                            instance = HuodongCachingMgr.GetThemeDaLiBaoActivity();
                            break;
                        case ActivityTypes.ThemeDuiHuan:
                            instance = HuodongCachingMgr.GetThemeDuiHuanActivity();
                            break;
                    }
                    break;
            }
            return instance;
        }

        
        public static int GetDBServerExecuteActivityAwardCmdID(ActivityTypes type)
        {
            int nID = -1;
            switch (type)
            {
                case ActivityTypes.InputFanLi:
                    nID = 380;
                    break;
                case ActivityTypes.InputJiaSong:
                    nID = 381;
                    break;
                case ActivityTypes.InputKing:
                case ActivityTypes.NewZoneRechargeKing:
                    nID = 382;
                    break;
                case ActivityTypes.LevelKing:
                case ActivityTypes.ChongJiLingQuShenZhuang:
                    nID = 383;
                    break;
                case ActivityTypes.EquipKing:
                    nID = 384;
                    break;
                case ActivityTypes.HorseKing:
                    nID = 385;
                    break;
                case ActivityTypes.JingMaiKing:
                    nID = 386;
                    break;
                case ActivityTypes.JieriDaLiBao:
                    nID = 469;
                    break;
                case ActivityTypes.JieriDengLuHaoLi:
                    nID = 470;
                    break;
                case ActivityTypes.JieriVIP:
                    nID = 471;
                    break;
                case ActivityTypes.JieriCZSong:
                    nID = 472;
                    break;
                case ActivityTypes.JieriLeiJiCZ:
                    nID = 473;
                    break;
                case ActivityTypes.JieriZiKa:
                    nID = 474;
                    break;
                case ActivityTypes.JieriPTXiaoFeiKing:
                    nID = 475;
                    break;
                case ActivityTypes.JieriPTCZKing:
                    nID = 476;
                    break;
                case ActivityTypes.JieriBossAttack:
                case (ActivityTypes)18:
                case (ActivityTypes)19:
                case ActivityTypes.HeFuLogin:
                case ActivityTypes.HeFuTotalLogin:
                case ActivityTypes.HeFuShopLimit:
                case ActivityTypes.HeFuPKKing:
                case ActivityTypes.HeFuAwardTime:
                case ActivityTypes.HeFuBossAttack:
                case ActivityTypes.MeiRiChongZhiHaoLi:
                case ActivityTypes.ShenZhuangJiQingHuiKui:
                case ActivityTypes.XingYunChouJiang:
                case ActivityTypes.YuDuZhuanPanChouJiang:
                case ActivityTypes.NewZoneUpLevelMadman:
                case ActivityTypes.NewZoneConsumeKing:
                case ActivityTypes.NewZoneBosskillKing:
                case ActivityTypes.TotalCharge:
                case ActivityTypes.TotalConsume:
                    break;
                case ActivityTypes.HeFuRecharge:
                    nID = 490;
                    break;
                case ActivityTypes.XinCZFanLi:
                case ActivityTypes.NewZoneFanli:
                    nID = 493;
                    break;
                case ActivityTypes.JieriTotalConsume:
                    nID = 684;
                    break;
                default:
                    switch (type)
                    {
                        case ActivityTypes.JieriWing:
                        case ActivityTypes.JieriAddon:
                        case ActivityTypes.JieriStrengthen:
                        case ActivityTypes.JieriAchievement:
                        case ActivityTypes.JieriMilitaryRank:
                        case ActivityTypes.JieriVIPFanli:
                        case ActivityTypes.JieriAmulet:
                        case ActivityTypes.JieriArchangel:
                        case ActivityTypes.JieriMarriage:
                        case ActivityTypes.JieRiHuiJi:
                        case ActivityTypes.JieRiFuWen:
                            nID = 927;
                            break;
                        case ActivityTypes.JieriLianXuCharge:
                        case ActivityTypes.JieriRecv:
                        case (ActivityTypes)65:
                        case ActivityTypes.JieriFuLi:
                        case ActivityTypes.JieriChongZhiQiangGou:
                        case ActivityTypes.JieriVIPYouHui:
                        case ActivityTypes.JieriSuperInputFanLi:
                        case ActivityTypes.JieRiHongBao:
                        case ActivityTypes.JieRiChongZhiHongBao:
                        case ActivityTypes.JieRiHongBaoKing:
                            break;
                        case ActivityTypes.JieriInputPointsExchg:
                            nID = 13150;
                            break;
                        case ActivityTypes.DanBiChongZhi:
                            nID = 948;
                            break;
                        case ActivityTypes.JieRiMeiRiLeiJi:
                            nID = 1807;
                            break;
                        default:
                            if (type == ActivityTypes.ThemeDaLiBao)
                            {
                                nID = 909;
                            }
                            break;
                    }
                    break;
            }
            return nID;
        }

        
        public static int CanGiveAwardForYangGongBKJifen(GameClient client, int awardNo, int dayID)
        {
            int result;
            if (GameManager.systemLuckyAwardMgr.SystemXmlItemDict.Count > 64)
            {
                result = -10003;
            }
            else if (null == client.ClientData.YangGongBKDailyJiFen)
            {
                result = -10004;
            }
            else
            {
                SystemXmlItem xmlItem = null;
                if (!GameManager.systemLuckyAwardMgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
                {
                    result = -10005;
                }
                else if (dayID != client.ClientData.YangGongBKDailyJiFen.DayID)
                {
                    result = -10006;
                }
                else
                {
                    int minLucky = Global.GMax(0, xmlItem.GetIntValue("MinLucky", -1));
                    if (client.ClientData.YangGongBKDailyJiFen.JiFen < minLucky)
                    {
                        result = -10007;
                    }
                    else
                    {
                        long mask = Global.GetYangGongBKJiFenMaskValue(awardNo);
                        if ((client.ClientData.YangGongBKDailyJiFen.AwardHistory & mask) != 0L)
                        {
                            result = -10008;
                        }
                        else
                        {
                            result = 1;
                        }
                    }
                }
            }
            return result;
        }

        
        public static long GetYangGongBKJiFenMaskValue(int awardNo)
        {
            List<int> ls = GameManager.systemLuckyAwardMgr.SystemXmlItemDict.Keys.ToList<int>();
            ls.Sort();
            int index = ls.IndexOf(awardNo);
            long mask = 1L;
            if (index > 0)
            {
                mask <<= index;
            }
            return mask;
        }

        
        public static int GetYangGongBkAwardGoodsNum(int awardNo)
        {
            SystemXmlItem xmlItem = null;
            int result;
            if (!GameManager.systemLuckyAwardMgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
            {
                result = 0;
            }
            else
            {
                string goodsIDs = xmlItem.GetStringValue("GoodsIDs");
                result = goodsIDs.Split(new char[]
                {
                    '|'
                }).Count<string>();
            }
            return result;
        }

        
        public static bool GiveYangGongBKAwardForDailyJiFen(GameClient client, int awardNo)
        {
            SystemXmlItem xmlItem = null;
            bool result;
            if (!GameManager.systemLuckyAwardMgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
            {
                result = false;
            }
            else
            {
                string goodsIDs = xmlItem.GetStringValue("GoodsIDs");
                List<GoodsData> listGoods = Global.ParseGoodsDataListFromGoodsStr(goodsIDs, "杨公宝库每日积分奖励配置文件");
                string awardReason = "杨公宝库每日积分奖励";
                for (int i = 0; i < listGoods.Count; i++)
                {
                    GoodsData goodsData = listGoods[i];
                    if (null != goodsData)
                    {
                        goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, 0, goodsData.Jewellist, true, 1, awardReason, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, 0, 0, 0, null, null, 0, true);
                    }
                }
                result = true;
            }
            return result;
        }

        
        public static bool UpdateYangGongBKDailyJiFenData(GameClient client, int awardNo = -1)
        {
            bool result;
            if (null == client.ClientData.YangGongBKDailyJiFen)
            {
                result = false;
            }
            else
            {
                if (awardNo >= 0)
                {
                    client.ClientData.YangGongBKDailyJiFen.AwardHistory = (client.ClientData.YangGongBKDailyJiFen.AwardHistory | Global.GetYangGongBKJiFenMaskValue(awardNo));
                }
                string[] dbCmds = Global.ExecuteDBCmd(10092, string.Format("{0}:{1}:{2}:{3}", new object[]
                {
                    client.ClientData.RoleID,
                    client.ClientData.YangGongBKDailyJiFen.DayID,
                    client.ClientData.YangGongBKDailyJiFen.JiFen,
                    client.ClientData.YangGongBKDailyJiFen.AwardHistory
                }), client.ServerId);
                if (dbCmds == null || dbCmds.Length != 3 || 0 != dbCmds[0].CompareTo("1"))
                {
                    result = false;
                }
                else
                {
                    GameManager.ClientMgr.NotifyYangGongBKAwardDailyData(client);
                    result = true;
                }
            }
            return result;
        }

        
        public static int GetZaJinDanJifen(GameClient client)
        {
            return Global.GetRoleParamsInt32FromDB(client, "ZJDJiFen");
        }

        
        public static bool AddZaJinDanJiFen(GameClient client, int addJiFen, string strFrom, bool isGM = false)
        {
            int jiFen = Global.GetRoleParamsInt32FromDB(client, "ZJDJiFen");
            long oldValue = (long)jiFen;
            long targetValue = oldValue + (long)addJiFen;
            bool result;
            if (isGM && (targetValue > 2147483647L || targetValue < -2147483648L))
            {
                result = false;
            }
            else
            {
                int newValue = (int)Global.Clamp(targetValue, -2147483648L, 2147483647L);
                if (addJiFen > 0)
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(-1, "祈福积分", strFrom, "系统", client.ClientData.RoleName, "增加", addJiFen, client.ClientData.ZoneID, client.strUserID, newValue, client.ServerId, null);
                }
                else
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(-1, "祈福积分", strFrom, client.ClientData.RoleName, "系统", "减少", addJiFen, client.ClientData.ZoneID, client.strUserID, newValue, client.ServerId, null);
                }
                Global.SaveRoleParamsInt32ValueToDB(client, "ZJDJiFen", jiFen + addJiFen, true);
                GameManager.ClientMgr.NotifyZaJinDanKAwardDailyData(client);
                result = true;
            }
            return result;
        }

        
        public static int GetZaJinDanJiFenBits(GameClient client)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            int jiFenBits = Global.GetRoleParamsInt32FromDB(client, "ZJDJiFenBits");
            int jiFenDayBitsDayID = Global.GetRoleParamsInt32FromDB(client, "ZJDJiFenBitsDayID");
            int result;
            if (dayID == jiFenDayBitsDayID)
            {
                result = jiFenBits;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        public static void SaveZaJinDanJiFenBits(GameClient client, int bits)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            Global.SaveRoleParamsInt32ValueToDB(client, "ZJDJiFenBits", bits, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "ZJDJiFenBitsDayID", dayID, true);
        }

        
        public static int CanGiveAwardForZaJinDanJifen(GameClient client, int awardNo)
        {
            int result;
            if (GameManager.systemLuckyAward2Mgr.SystemXmlItemDict.Count > 32)
            {
                result = -10003;
            }
            else if (0 >= Global.GetZaJinDanJifen(client))
            {
                result = -10004;
            }
            else
            {
                SystemXmlItem xmlItem = null;
                if (!GameManager.systemLuckyAward2Mgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
                {
                    result = -10005;
                }
                else
                {
                    int minLucky = Global.GMax(0, xmlItem.GetIntValue("MinLucky", -1));
                    if (Global.GetZaJinDanJifen(client) < minLucky)
                    {
                        result = -10007;
                    }
                    else
                    {
                        int mask = Global.GetZaJinDanJiFenMaskValue(awardNo);
                        if ((Global.GetZaJinDanJiFenBits(client) & mask) != 0)
                        {
                            result = -10008;
                        }
                        else
                        {
                            result = 1;
                        }
                    }
                }
            }
            return result;
        }

        
        public static int GetZaJinDanJiFenMaskValue(int awardNo)
        {
            List<int> ls = GameManager.systemLuckyAward2Mgr.SystemXmlItemDict.Keys.ToList<int>();
            ls.Sort();
            int index = ls.IndexOf(awardNo);
            int mask = 1;
            if (index > 0)
            {
                mask <<= index;
            }
            return mask;
        }

        
        public static int GetZaJinDanAwardGoodsNum(int awardNo)
        {
            SystemXmlItem xmlItem = null;
            int result;
            if (!GameManager.systemLuckyAward2Mgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
            {
                result = 0;
            }
            else
            {
                string goodsIDs = xmlItem.GetStringValue("GoodsIDs");
                result = goodsIDs.Split(new char[]
                {
                    '|'
                }).Count<string>();
            }
            return result;
        }

        
        public static bool GiveZaJinDanAwardForDailyJiFen(GameClient client, int awardNo)
        {
            SystemXmlItem xmlItem = null;
            bool result;
            if (!GameManager.systemLuckyAward2Mgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
            {
                result = false;
            }
            else
            {
                string goodsIDs = xmlItem.GetStringValue("GoodsIDs");
                List<GoodsData> listGoods = Global.ParseGoodsDataListFromGoodsStr(goodsIDs, "砸金蛋每日积分奖励配置文件");
                string awardReason = "砸金蛋每日积分奖励";
                for (int i = 0; i < listGoods.Count; i++)
                {
                    GoodsData goodsData = listGoods[i];
                    if (null != goodsData)
                    {
                        goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, 0, goodsData.Jewellist, true, 1, awardReason, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, 0, 0, 0, null, null, 0, true);
                    }
                }
                result = true;
            }
            return result;
        }

        
        public static bool UpdateZaJinDanDailyJiFenData(GameClient client, int awardNo = -1)
        {
            if (awardNo >= 0)
            {
                int mask = Global.GetZaJinDanJiFenBits(client);
                mask |= Global.GetZaJinDanJiFenMaskValue(awardNo);
                Global.SaveZaJinDanJiFenBits(client, mask);
            }
            GameManager.ClientMgr.NotifyZaJinDanKAwardDailyData(client);
            return true;
        }

        
        public static int[] GetRandomGoods(string strGoods)
        {
            int[] result;
            if (string.IsNullOrEmpty(strGoods))
            {
                result = null;
            }
            else
            {
                string[] strFields = strGoods.Split(new char[]
                {
                    '|'
                });
                if (strFields == null || strFields.Length <= 0)
                {
                    result = null;
                }
                else
                {
                    int rnd = Global.GetRandomNumber(0, strFields.Length);
                    result = Global.String2IntArray(strFields[rnd], ',');
                }
            }
            return result;
        }

        
        public static void EnterShiLianTaFuBen(GameClient client, int fuBenID, SystemXmlItem systemFuBenItem, int goodsBinding)
        {
            int toMapCode = systemFuBenItem.GetIntValue("MapCode", -1);
            string[] dbFields = Global.ExecuteDBCmd(10049, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
            if (dbFields == null || dbFields.Length < 2)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(342, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
            }
            else
            {
                int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);
                Global.UpdateFuBenData(client, fuBenID, 1, 0);
                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(343, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else
                {
                    client.ClientData.FuBenSeqID = fuBenSeqID;
                    FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, goodsBinding, fuBenID);
                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
                }
            }
        }

        
        public static ShiLianTaAwardsInfoData GetShiLianTaFuBenAwardsInfoData(GameClient client)
        {
            int fuBenID = FuBenManager.FindFuBenIDByMapCode(client.ClientData.MapCode);
            ShiLianTaAwardsInfoData result;
            if (fuBenID <= 0)
            {
                result = null;
            }
            else if (client.ClientData.FuBenSeqID <= 0)
            {
                result = null;
            }
            else
            {
                FuBenInfoItem fuBenInfoItem = FuBenManager.FindFuBenInfoBySeqID(client.ClientData.FuBenSeqID);
                if (null == fuBenInfoItem)
                {
                    result = null;
                }
                else if (fuBenID != fuBenInfoItem.FuBenID)
                {
                    result = null;
                }
                else
                {
                    FuBenMapItem fuBenMapItem = FuBenManager.FindMapCodeByFuBenID(fuBenID, client.ClientData.MapCode);
                    if (null == fuBenMapItem)
                    {
                        result = null;
                    }
                    else
                    {
                        SystemXmlItem systemItem = Global.FindShiLianTaFuBenItemByMapCode(client);
                        if (null == systemItem)
                        {
                            result = null;
                        }
                        else
                        {
                            int currentFloor = FuBenManager.FindMapCodeIndexByFuBenID(client.ClientData.MapCode);
                            if (currentFloor <= 0)
                            {
                                result = null;
                            }
                            else
                            {
                                int nextFloorExperienceAward = 0;
                                int toNextMapCode = FuBenManager.FindNextMapCodeByFuBenID(client.ClientData.MapCode);
                                if (-1 != toNextMapCode)
                                {
                                    FuBenMapItem fuBenMapItem2 = FuBenManager.FindMapCodeByFuBenID(fuBenID, toNextMapCode);
                                    if (null != fuBenMapItem2)
                                    {
                                        nextFloorExperienceAward = Global.GMax(0, fuBenMapItem2.Experience);
                                    }
                                }
                                ShiLianTaAwardsInfoData shiLianTaData = new ShiLianTaAwardsInfoData
                                {
                                    CurrentFloorTotalMonsterNum = 5,
                                    CurrentFloorExperienceAward = Global.GMax(0, fuBenMapItem.Experience),
                                    NextFloorNeedGoodsID = systemItem.GetIntValue("EnterGoods", -1),
                                    NextFloorNeedGoodsNum = Global.GetShiLianTaNeedGoodsNum(systemItem.GetIntValue("GoodsNumber", -1), currentFloor + 1),
                                    NextFloorExperienceAward = nextFloorExperienceAward
                                };
                                result = shiLianTaData;
                            }
                        }
                    }
                }
            }
            return result;
        }

        
        public static int GetShiLianTaNeedGoodsNum(int baseGoodsNumber, int floor)
        {
            int needNum = baseGoodsNumber * floor;
            if (needNum < 0)
            {
                needNum = 1;
            }
            return needNum;
        }

        
        public static int DeductShiLianTaNextFloorGateGoods(GameClient client, bool allowAutoBuy = false)
        {
            ShiLianTaAwardsInfoData shiLianTaData = Global.GetShiLianTaFuBenAwardsInfoData(client);
            int result;
            if (null == shiLianTaData)
            {
                result = -1000;
            }
            else
            {
                int needSubGoodsNum = shiLianTaData.NextFloorNeedGoodsNum;
                int myTongTianLing = GameManager.ClientMgr.GetShiLianLingValue(client);
                if (needSubGoodsNum <= 0 || myTongTianLing < needSubGoodsNum)
                {
                    result = -1005;
                }
                else
                {
                    GameManager.ClientMgr.ModifyShiLianLingValue(client, -needSubGoodsNum, true, true);
                    result = 1;
                }
            }
            return result;
        }

        
        public static void ClientEnterShengXiaoGuessMap(GameClient client)
        {
            if (GameManager.ShengXiaoGuessMgr.GuessMapCode >= 0)
            {
                if (GameManager.ShengXiaoGuessMgr.GetLegalGuessServerLines().IndexOf(GameManager.ServerLineID) >= 0)
                {
                    int toMapCode = GameManager.ShengXiaoGuessMgr.GuessMapCode;
                    GameMap gameMap = null;
                    if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                    {
                        GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
                        GameManager.ShengXiaoGuessMgr.ClientEnter(client);
                    }
                }
            }
        }

        
        public static string GetShengXiaoNameByCode(int type)
        {
            if (type <= 64)
            {
                if (type <= 8)
                {
                    switch (type)
                    {
                        case 1:
                            return GLang.GetLang(345, new object[0]);
                        case 2:
                            return GLang.GetLang(346, new object[0]);
                        case 3:
                            break;
                        case 4:
                            return GLang.GetLang(347, new object[0]);
                        default:
                            if (type == 8)
                            {
                                return GLang.GetLang(348, new object[0]);
                            }
                            break;
                    }
                }
                else
                {
                    if (type == 16)
                    {
                        return GLang.GetLang(349, new object[0]);
                    }
                    if (type == 32)
                    {
                        return GLang.GetLang(350, new object[0]);
                    }
                    if (type == 64)
                    {
                        return GLang.GetLang(351, new object[0]);
                    }
                }
            }
            else if (type <= 256)
            {
                if (type == 128)
                {
                    return GLang.GetLang(352, new object[0]);
                }
                if (type == 256)
                {
                    return GLang.GetLang(353, new object[0]);
                }
            }
            else
            {
                if (type == 512)
                {
                    return GLang.GetLang(354, new object[0]);
                }
                if (type == 1024)
                {
                    return GLang.GetLang(355, new object[0]);
                }
                if (type == 2048)
                {
                    return GLang.GetLang(356, new object[0]);
                }
            }
            return "";
        }

        
        public static string TransPathToString(List<ANode> path)
        {
            string pathStr = "";
            if (null != path)
            {
                for (int i = 0; i < path.Count; i++)
                {
                    ANode node = path[i];
                    if (pathStr.Length > 0)
                    {
                        pathStr += "|";
                    }
                    pathStr += StringUtil.substitute("{0}_{1}", new object[]
                    {
                        node.x,
                        node.y
                    });
                }
            }
            return pathStr;
        }

        
        public static string TransPathToString(List<Point> path)
        {
            string pathStr = "";
            if (null != path)
            {
                for (int i = 0; i < path.Count; i++)
                {
                    Point node = path[i];
                    if (pathStr.Length > 0)
                    {
                        pathStr += "|";
                    }
                    pathStr += StringUtil.substitute("{0}_{1}", new object[]
                    {
                        node.X,
                        node.Y
                    });
                }
            }
            return pathStr;
        }

        
        public static List<Point> TransStringToPathArr(string pathStr)
        {
            List<Point> path = new List<Point>();
            List<Point> result;
            if (null == pathStr)
            {
                result = path;
            }
            else
            {
                if (pathStr != null && pathStr.Length > 0)
                {
                    foreach (string point in pathStr.Split(new char[]
                    {
                        '|'
                    }))
                    {
                        string[] fields = point.Split(new char[]
                        {
                            '_'
                        });
                        if (fields.Length == 2)
                        {
                            Point p = new Point((double)Global.SafeConvertToInt32(fields[0]), (double)Global.SafeConvertToInt32(fields[1]));
                            path.Add(p);
                        }
                    }
                }
                result = path;
            }
            return result;
        }

        
        public static void ModifyMaxOpenNodeCountForAStar(int maxOpenNodeValue)
        {
            if (maxOpenNodeValue > 8)
            {
                AStar.MaxOpenNodeCount = maxOpenNodeValue;
            }
        }

        
        public static List<Point> CheckPathNode(GameClient client, List<Point> path)
        {
            List<Point> result;
            if (path.Count <= 0)
            {
                result = path;
            }
            else
            {
                Point grid = client.CurrentGrid;
                int findIndex = 0;
                int maxDistance = 100000000;
                for (int i = 0; i < path.Count; i++)
                {
                    int distance = (int)Global.GetTwoPointDistance(path[i], grid);
                    if (distance < maxDistance)
                    {
                        findIndex = i;
                        maxDistance = distance;
                    }
                }
                if (findIndex > 0 && findIndex < path.Count)
                {
                    path.RemoveRange(0, findIndex);
                }
                result = path;
            }
            return result;
        }

        
        public static string GetRoleParamByName(GameClient client, string name)
        {
            string result;
            if (null == client.ClientData.RoleParamsDict)
            {
                result = null;
            }
            else
            {
                lock (client.ClientData.RoleParamsDict)
                {
                    RoleParamsData roleParamsData = null;
                    if (client.ClientData.RoleParamsDict.TryGetValue(name, out roleParamsData))
                    {
                        return roleParamsData.ParamValue;
                    }
                }
                result = null;
            }
            return result;
        }

        
        public static long AddRoleParamByName(GameClient client, string name, long value, bool writeToDB = false)
        {
            long result = -1L;
            if (null == client.ClientData.RoleParamsDict)
            {
                client.ClientData.RoleParamsDict = new Dictionary<string, RoleParamsData>();
            }
            lock (client.ClientData.RoleParamsDict)
            {
                string valueStr = Global.GetRoleParamByName(client, name);
                if (string.IsNullOrEmpty(valueStr))
                {
                    result = 0L;
                }
                else if (!long.TryParse(valueStr, out result))
                {
                    return -1L;
                }
                result += value;
                Global.UpdateRoleParamByName(client, name, result.ToString(), writeToDB);
            }
            return result;
        }

        
        public static void UpdateRoleParamByName(GameClient client, string name, string value, bool writeToDB = false)
        {
            if (null == client.ClientData.RoleParamsDict)
            {
                client.ClientData.RoleParamsDict = new Dictionary<string, RoleParamsData>();
            }
            lock (client.ClientData.RoleParamsDict)
            {
                RoleParamsData roleParamsData = null;
                if (!client.ClientData.RoleParamsDict.TryGetValue(name, out roleParamsData))
                {
                    roleParamsData = new RoleParamsData
                    {
                        ParamName = name,
                        ParamValue = value
                    };
                    client.ClientData.RoleParamsDict[name] = roleParamsData;
                }
                else
                {
                    if (roleParamsData.ParamValue == value && !string.IsNullOrEmpty(value))
                    {
                        return;
                    }
                    roleParamsData.ParamValue = value;
                }
            }
            if (writeToDB)
            {
                GameManager.DBCmdMgr.AddDBCmd(10100, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, name, value), null, client.ServerId);
            }
            else
            {
                Global.SetLastDBRoleParamCmdTicks(client, name, TimeUtil.NOW());
            }
        }

        
        public static void UpdateRoleParamByNameOffline(int roleId, string name, string value, int serverId)
        {
            GameManager.DBCmdMgr.AddDBCmd(10100, string.Format("{0}:{1}:{2}", roleId, name, value), null, serverId);
        }

        
        public static string GetNpcLuaScriptFile(int extensionID)
        {
            string npcLuaScriptFile = "";
            SystemXmlItem systemNPC = null;
            if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(extensionID, out systemNPC))
            {
                npcLuaScriptFile = systemNPC.GetStringValue("LuaScriptFile");
                if (null == npcLuaScriptFile)
                {
                    npcLuaScriptFile = "";
                }
                else
                {
                    npcLuaScriptFile = npcLuaScriptFile.Trim();
                    npcLuaScriptFile = DataHelper.CurrentDirectory + "scripts/npc/" + npcLuaScriptFile;
                }
            }
            return npcLuaScriptFile;
        }

        
        public static string GetRunLuaScriptFile(int fileID)
        {
            return DataHelper.CurrentDirectory + "scripts/run/" + fileID.ToString() + ".lua";
        }

        
        public static string GetTaskPlotLuaScriptFile(int taskPlotID, int startOrEnd)
        {
            SystemXmlItem systemTaskPlotIem = null;
            string result;
            if (!GameManager.SystemTaskPlots.SystemXmlItemDict.TryGetValue(taskPlotID, out systemTaskPlotIem))
            {
                result = "";
            }
            else
            {
                string fileName;
                if (0 == startOrEnd)
                {
                    fileName = systemTaskPlotIem.GetStringValue("StartLuaFile");
                }
                else
                {
                    fileName = systemTaskPlotIem.GetStringValue("EndLuaFile");
                }
                if (string.IsNullOrEmpty(fileName))
                {
                    result = "";
                }
                else
                {
                    result = DataHelper.CurrentDirectory + "scripts/taskplot/" + fileName;
                }
            }
            return result;
        }

        
        public static string GetAreaLuaScriptFile(string fileName)
        {
            return DataHelper.CurrentDirectory + "scripts/area/" + fileName;
        }

        
        public static string GetMapLuaScriptFile(int mapCode, string fileName)
        {
            return string.Concat(new string[]
            {
                DataHelper.CurrentDirectory,
                "scripts/map/",
                mapCode.ToString(),
                "/",
                fileName
            });
        }

        
        public static object[] ExcuteLuaFunction(GameClient client, string luaFile, string luaFunction, object[] luaFuncParams = null, LuaCallResultData luaCallResultData = null)
        {
            object[] values = null;
            try
            {
                if (luaFile.IndexOf(".lua") < 0)
                {
                    return values;
                }
                if (!File.Exists(luaFile))
                {
                    return values;
                }
                LuaGlobal g = LuaExeManager.getInstance().ExeLua(luaFile);
                LuaResult retValue = LuaExeManager.getInstance().ExecLuaFunction(GameManager.LuaMgr, g, luaFunction, client);
                if (null != retValue)
                {
                    values = retValue.Values;
                }
                if (null != luaCallResultData)
                {
                    if (values != null && values.Length > 0 && values[0] != null)
                    {
                        string sResult = values[0].ToString();
                        luaCallResultData.Result = sResult;
                    }
                    else
                    {
                        luaCallResultData.Result = null;
                    }
                    luaCallResultData.IsSuccess = 1;
                    luaCallResultData.LuaFunction = string.Format("{0}()", luaFunction);
                }
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, string.Format("ExcuteLuaFunction roleID[{0}] file[{1}] function[{2}]", client.ClientData.RoleID, luaFile, luaFunction), false, false);
                if (null != luaCallResultData)
                {
                    luaCallResultData.LuaFunction = string.Format("执行脚本{0}() 失败", luaFunction);
                    luaCallResultData.IsSuccess = 0;
                }
            }
            finally
            {
            }
            return values;
        }

        
        public static void ExecNpcTalkText(GameClient client, int mapCode, int npcID, int extensionID, int forceRefresh = 0)
        {
            LuaCallResultData luaCallResultData = new LuaCallResultData
            {
                RoleID = client.ClientData.RoleID,
                MapCode = mapCode,
                NPCID = npcID,
                ExtensionID = extensionID,
                IsSuccess = -1,
                Result = "未执行",
                ForceRefresh = forceRefresh
            };
            string scriptFile;
            if (npcID > 0)
            {
                scriptFile = Global.GetNpcLuaScriptFile(extensionID);
            }
            else
            {
                scriptFile = Global.GetRunLuaScriptFile(extensionID);
            }
            Global.ExcuteLuaFunction(client, scriptFile, "talk", null, luaCallResultData);
            TCPOutPacket tcpOutPacket = DataHelper.ObjectToTCPOutPacket<LuaCallResultData>(luaCallResultData, Global._TCPManager.TcpOutPacketPool, 413);
            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true))
            {
            }
        }

        
        public static Dictionary<string, string> StringToMap(string strValue, char split1 = ';', char split2 = '|')
        {
            Dictionary<string, string> dict = new Dictionary<string, string>();
            Dictionary<string, string> result;
            if (strValue == null || strValue.Length <= 0)
            {
                result = dict;
            }
            else
            {
                string[] reqItems = strValue.Split(new char[]
                {
                    split1
                });
                for (int i = 0; i < reqItems.Length; i++)
                {
                    string[] item = reqItems[i].Split(new char[]
                    {
                        split2
                    });
                    if (item.Length == 2)
                    {
                        dict.Add(item[0], item[1]);
                    }
                }
                result = dict;
            }
            return result;
        }

        
        public static string MapToString(Dictionary<string, string> dict, char split1 = ';', char split2 = '|')
        {
            string strValue = "";
            for (int i = 0; i < dict.Count; i++)
            {
                if (strValue.Length > 0)
                {
                    strValue += split1;
                }
                strValue += string.Format("{0}{1}{2}", dict.ElementAt(i).Key, split2, dict.ElementAt(i).Value);
            }
            return strValue;
        }

        
        public static List<string> StringToList(string strValue, char split1 = ';')
        {
            List<string> ls = new List<string>();
            List<string> result;
            if (strValue == null || strValue.Length <= 0)
            {
                result = ls;
            }
            else
            {
                string[] reqItems = strValue.Split(new char[]
                {
                    split1
                });
                for (int i = 0; i < reqItems.Length; i++)
                {
                    ls.Add(reqItems[i]);
                }
                result = ls;
            }
            return result;
        }

        
        public static string ListToString(List<string> ls, char split1 = ';')
        {
            string strValue = "";
            for (int i = 0; i < ls.Count; i++)
            {
                if (strValue.Length > 0)
                {
                    strValue += split1;
                }
                strValue += ls.ElementAt(i);
            }
            return strValue;
        }

        
        public static string ListToString<T>(List<T> ls, char split1 = '$')
        {
            string result;
            if (null == ls)
            {
                result = "";
            }
            else
            {
                StringBuilder sb = new StringBuilder();
                foreach (T v in ls)
                {
                    sb.Append(v);
                    sb.Append(split1);
                }
                result = sb.ToString().TrimEnd(new char[]
                {
                    split1
                });
            }
            return result;
        }

        
        public static List<int> StringToIntList(string str, char split1 = '$')
        {
            List<int> ls = new List<int>();
            if (str != null && str.Length > 0)
            {
                string[] arr = str.Split(new char[]
                {
                    split1
                });
                foreach (string s in arr)
                {
                    ls.Add(Global.SafeConvertToInt32(s));
                }
            }
            return ls;
        }

        
        public static Point GridToPixel(int mapCode, double gridX, double gridY)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            Point result;
            if (null == gameMap)
            {
                result = new Point(0.0, 0.0);
            }
            else
            {
                Point pixel = new Point(gridX * (double)gameMap.MapGridWidth + (double)(gameMap.MapGridWidth / 2), gridY * (double)gameMap.MapGridHeight + (double)(gameMap.MapGridHeight / 2));
                result = pixel;
            }
            return result;
        }

        
        public static Point GridToPixel(int mapCode, Point grid)
        {
            return Global.GridToPixel(mapCode, grid.X, grid.Y);
        }

        
        public static Point PixelToGrid(int mapCode, double pixelX, double pixelY)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            Point result;
            if (null == gameMap)
            {
                result = new Point(pixelX / 64.0, pixelY / 32.0);
            }
            else
            {
                Point grid = new Point(pixelX / (double)gameMap.MapGridWidth, pixelY / (double)gameMap.MapGridHeight);
                result = grid;
            }
            return result;
        }

        
        public static Point PixelToGrid(int mapCode, Point pixel)
        {
            return Global.PixelToGrid(mapCode, pixel.X, pixel.Y);
        }

        
        public static void SystemKillMonster(Monster monster)
        {
            if (null != monster)
            {
                GameManager.MonsterMgr.DeadMonsterImmediately(monster);
            }
        }

        
        public static void SystemKillSummonMonster(GameClient client, MonsterTypes type)
        {
            for (int i = 0; i < client.ClientData.SummonMonstersList.Count; i++)
            {
                Monster monster = client.ClientData.GetSummonMonster(i);
                if (null != monster)
                {
                    if (type == (MonsterTypes)monster.MonsterType)
                    {
                        Global.SystemKillMonster(monster);
                    }
                }
            }
        }

        
        public static void SystemKillSummonMonster(GameClient client, int monsterID)
        {
            for (int i = 0; i < client.ClientData.SummonMonstersList.Count; i++)
            {
                Monster monster = client.ClientData.GetSummonMonster(i);
                if (null != monster)
                {
                    if (-1 == monsterID || monsterID == monster.MonsterInfo.ExtensionID)
                    {
                        Global.SystemKillMonster(monster);
                    }
                }
            }
        }

        
        public static Monster GetPetMonsterByMonsterByType(GameClient client, MonsterTypes type)
        {
            for (int i = 0; i < client.ClientData.SummonMonstersList.Count; i++)
            {
                Monster monster = client.ClientData.GetSummonMonster(i);
                if (null != monster)
                {
                    if (type == (MonsterTypes)monster.MonsterType && monster.Alive)
                    {
                        return monster;
                    }
                }
            }
            return null;
        }

        
        public static Monster GetPetMonsterByMonsterRoleID(GameClient client, int monsterRoleID)
        {
            for (int i = 0; i < client.ClientData.SummonMonstersList.Count; i++)
            {
                Monster monster = client.ClientData.GetSummonMonster(i);
                if (null != monster)
                {
                    if (monsterRoleID == monster.RoleID)
                    {
                        return monster;
                    }
                }
            }
            return null;
        }

        
        public static void RecalcDSMonsterProps(GameClient client, Monster monster, int magicLevel, int SurvivalTime)
        {
            double[] props;
            if ((long)monster.MonsterInfo.ExtensionID == GameManager.systemParamsList.GetParamValueIntByName("DSMonsterKuLouID", -1))
            {
                props = GameManager.systemParamsList.GetParamValueDoubleArrayByName("DSMonsterKuLouProps", ',');
            }
            else
            {
                if ((long)monster.MonsterInfo.ExtensionID != GameManager.systemParamsList.GetParamValueIntByName("DSMonsterShenShouID", -1))
                {
                    return;
                }
                props = GameManager.systemParamsList.GetParamValueDoubleArrayByName("DSMonsterShenShouProps", ',');
            }
            double[] propsOwner = GameManager.systemParamsList.GetParamValueDoubleArrayByName("DSMonsterKuLouPropsTwo", ',');
            if (propsOwner != null && props != null && propsOwner.Length == 18 && props.Length == 18)
            {
                int levelParam = (int)Math.Pow((double)(client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level), 1.8);
                monster.MonsterInfo.Defense = (int)(props[0] * (double)levelParam) + (int)(propsOwner[0] * RoleAlgorithm.GetMaxADefenseV(client));
                monster.MonsterInfo.MDefense = (int)(props[1] * (double)levelParam) + (int)(propsOwner[1] * RoleAlgorithm.GetMaxMDefenseV(client));
                monster.MonsterInfo.MinAttack = (int)(props[2] * (double)levelParam) + (int)(propsOwner[2] * Math.Max(RoleAlgorithm.GetMaxAttackV(client), RoleAlgorithm.GetMaxMagicAttackV(client)));
                monster.MonsterInfo.MaxAttack = (int)(props[3] * (double)levelParam) + (int)(propsOwner[3] * Math.Max(RoleAlgorithm.GetMaxAttackV(client), RoleAlgorithm.GetMaxMagicAttackV(client)));
                monster.MonsterInfo.VLifeMax = (double)((int)(props[4] * (double)levelParam) + (int)(propsOwner[4] * RoleAlgorithm.GetMaxLifeV(client)));
                monster.MonsterInfo.HitV = (double)((int)(props[5] * (double)levelParam) + (int)(propsOwner[5] * RoleAlgorithm.GetHitV(client)));
                monster.MonsterInfo.Dodge = (double)((int)(props[6] * (double)levelParam) + (int)(propsOwner[6] * RoleAlgorithm.GetDodgeV(client)));
                monster.MonsterInfo.MonsterSubAttackInjurePercent = props[7] * (double)levelParam + propsOwner[7] * RoleAlgorithm.GetExtProp(client, 24);
                monster.MonsterInfo.ExtProps[122] = props[8] * (double)levelParam + propsOwner[8] * RoleAlgorithm.GetExtProp(client, 122);
                monster.MonsterInfo.ExtProps[123] = props[9] * (double)levelParam + propsOwner[9] * RoleAlgorithm.GetExtProp(client, 123);
                monster.MonsterInfo.ExtProps[129] = props[10] * (double)levelParam + propsOwner[10] * RoleAlgorithm.GetExtProp(client, 129);
                monster.MonsterInfo.ExtProps[130] = props[11] * (double)levelParam + propsOwner[11] * RoleAlgorithm.GetExtProp(client, 130);
                monster.MonsterInfo.ExtProps[136] = props[12] * (double)levelParam + propsOwner[12] * RoleAlgorithm.GetExtProp(client, 136);
                monster.MonsterInfo.ExtProps[137] = props[13] * (double)levelParam + propsOwner[13] * RoleAlgorithm.GetExtProp(client, 137);
                monster.MonsterInfo.ExtProps[143] = props[14] * (double)levelParam + propsOwner[14] * RoleAlgorithm.GetExtProp(client, 143);
                monster.MonsterInfo.ExtProps[144] = props[15] * (double)levelParam + propsOwner[15] * RoleAlgorithm.GetExtProp(client, 144);
                monster.MonsterInfo.ExtProps[150] = props[16] * (double)levelParam + propsOwner[16] * RoleAlgorithm.GetExtProp(client, 150);
                monster.MonsterInfo.ExtProps[151] = props[17] * (double)levelParam + propsOwner[17] * RoleAlgorithm.GetExtProp(client, 151);
                if (monster.MonsterInfo != null && monster.MonsterInfo.ExtProps != null)
                {
                    Array.Copy(monster.MonsterInfo.ExtProps, monster.DynamicData.ExtProps, 177);
                }
                monster.VLife = monster.MonsterInfo.VLifeMax;
                monster.CurrentMagicLevel = magicLevel;
                monster.SurvivalTime = SurvivalTime * 1000;
                monster.SurvivalTick = TimeUtil.NOW() + (long)monster.SurvivalTime;
            }
        }

        
        public static void RecalcDSMonsterProps(Monster owner, Monster monster, int magicLevel, int SurvivalTime)
        {
            double[] props;
            if ((long)monster.MonsterInfo.ExtensionID == GameManager.systemParamsList.GetParamValueIntByName("DSMonsterKuLouID", -1))
            {
                props = GameManager.systemParamsList.GetParamValueDoubleArrayByName("DSMonsterKuLouProps", ',');
            }
            else
            {
                if ((long)monster.MonsterInfo.ExtensionID != GameManager.systemParamsList.GetParamValueIntByName("DSMonsterShenShouID", -1))
                {
                    return;
                }
                props = GameManager.systemParamsList.GetParamValueDoubleArrayByName("DSMonsterShenShouProps", ',');
            }
            double[] propsOwner = GameManager.systemParamsList.GetParamValueDoubleArrayByName("DSMonsterKuLouPropsTwo", ',');
            if (propsOwner != null && props != null && propsOwner.Length == 18 && props.Length == 18)
            {
                int levelParam = (int)Math.Pow((double)(owner.MonsterInfo.ChangeLifeCount * 100 + owner.MonsterInfo.VLevel), 1.8);
                monster.MonsterInfo.Defense = (int)(props[0] * (double)levelParam) + (int)(propsOwner[0] * (double)owner.MonsterInfo.Defense);
                monster.MonsterInfo.MDefense = (int)(props[1] * (double)levelParam) + (int)(propsOwner[1] * (double)owner.MonsterInfo.MDefense);
                monster.MonsterInfo.MinAttack = (int)(props[2] * (double)levelParam) + (int)(propsOwner[2] * (double)owner.MonsterInfo.MaxAttack);
                monster.MonsterInfo.MaxAttack = (int)(props[3] * (double)levelParam) + (int)(propsOwner[3] * (double)owner.MonsterInfo.MaxAttack);
                monster.MonsterInfo.VLifeMax = (double)((int)(props[4] * (double)levelParam) + (int)(propsOwner[4] * owner.MonsterInfo.VLifeMax));
                monster.MonsterInfo.HitV = double.MaxValue;
                monster.MonsterInfo.Dodge = (double)((int)(props[6] * (double)levelParam) + (int)(propsOwner[6] * owner.MonsterInfo.Dodge));
                monster.MonsterInfo.MonsterSubAttackInjurePercent = props[7] * (double)levelParam + propsOwner[7] * owner.MonsterInfo.MonsterSubAttackInjurePercent;
                monster.MonsterInfo.ExtProps[122] = props[8] * (double)levelParam + propsOwner[8] * owner.DynamicData.ExtProps[122];
                monster.MonsterInfo.ExtProps[123] = props[9] * (double)levelParam + propsOwner[9] * owner.DynamicData.ExtProps[123];
                monster.MonsterInfo.ExtProps[129] = props[10] * (double)levelParam + propsOwner[10] * owner.DynamicData.ExtProps[129];
                monster.MonsterInfo.ExtProps[130] = props[11] * (double)levelParam + propsOwner[11] * owner.DynamicData.ExtProps[130];
                monster.MonsterInfo.ExtProps[136] = props[12] * (double)levelParam + propsOwner[12] * owner.DynamicData.ExtProps[136];
                monster.MonsterInfo.ExtProps[137] = props[13] * (double)levelParam + propsOwner[13] * owner.DynamicData.ExtProps[137];
                monster.MonsterInfo.ExtProps[143] = props[14] * (double)levelParam + propsOwner[14] * owner.DynamicData.ExtProps[143];
                monster.MonsterInfo.ExtProps[144] = props[15] * (double)levelParam + propsOwner[15] * owner.DynamicData.ExtProps[144];
                monster.MonsterInfo.ExtProps[150] = props[16] * (double)levelParam + propsOwner[16] * owner.DynamicData.ExtProps[150];
                monster.MonsterInfo.ExtProps[151] = props[17] * (double)levelParam + propsOwner[17] * owner.DynamicData.ExtProps[151];
                if (monster.MonsterInfo != null && monster.MonsterInfo.ExtProps != null)
                {
                    Array.Copy(monster.MonsterInfo.ExtProps, monster.DynamicData.ExtProps, 177);
                }
                monster.VLife = monster.MonsterInfo.VLifeMax;
                monster.CurrentMagicLevel = magicLevel;
                monster.SurvivalTime = SurvivalTime * 1000;
                monster.SurvivalTick = TimeUtil.NOW() + (long)monster.SurvivalTime;
            }
        }

        
        public static GameClient MakeGameClientForGetRoleParams(RoleDataEx roleDataEx)
        {
            SafeClientData clientData = new SafeClientData
            {
                RoleData = roleDataEx
            };
            return new GameClient
            {
                ClientData = clientData
            };
        }

        
        public static int GetRoleParamsInt32FromDB(GameClient client, string roleParamsKey)
        {
            string valueString = Global.GetRoleParamByName(client, roleParamsKey);
            int result;
            if (string.IsNullOrEmpty(valueString))
            {
                result = 0;
            }
            else
            {
                result = Global.SafeConvertToInt32(valueString);
            }
            return result;
        }

        
        public static string GetRoleParamsFromDBByRoleID(int roleID, string name, int serverid = 0)
        {
            if (0 == serverid)
            {
                serverid = GameCoreInterface.getinstance().GetLocalServerId();
            }
            string cmd = string.Format("{0}:{1}", roleID, name);
            string[] ret = Global.SendToDB<string>(20304, cmd, serverid);
            string result;
            if (ret != null)
            {
                result = ret[0];
            }
            else
            {
                result = "";
            }
            return result;
        }

        
        public static long GetRoleParamsInt64FromDB(GameClient client, string roleParamsKey)
        {
            string valueString = Global.GetRoleParamByName(client, roleParamsKey);
            long result;
            if (string.IsNullOrEmpty(valueString))
            {
                result = 0L;
            }
            else
            {
                result = Global.SafeConvertToInt64(valueString);
            }
            return result;
        }

        
        public static DateTime GetRoleParamsDateTimeFromDB(GameClient client, string roleParamsKey)
        {
            long ticks = 0L;
            string valueString = Global.GetRoleParamByName(client, roleParamsKey);
            if (!string.IsNullOrEmpty(valueString))
            {
                ticks = Global.SafeConvertToInt64(valueString);
                if (ticks == 0L && valueString != "0")
                {
                    ticks = 1L;
                }
            }
            return new DateTime(ticks);
        }

        
        public static string GetRoleParamsStringWithNullFromDBOffline(int rid, string roleParamsKey, int serverid)
        {
            string valueString = Global.GetRoleParamsFromDBByRoleID(rid, roleParamsKey, serverid);
            string result;
            if (string.IsNullOrEmpty(valueString))
            {
                result = valueString;
            }
            else
            {
                byte[] bytes = Convert.FromBase64String(valueString);
                valueString = Encoding.GetEncoding("latin1").GetString(bytes);
                result = valueString;
            }
            return result;
        }

        
        public static string GetRoleParamsStringWithNullFromDB(GameClient client, string roleParamsKey)
        {
            string valueString = Global.GetRoleParamByName(client, roleParamsKey);
            string result;
            if (string.IsNullOrEmpty(valueString))
            {
                result = valueString;
            }
            else
            {
                byte[] bytes = Convert.FromBase64String(valueString);
                valueString = Encoding.GetEncoding("latin1").GetString(bytes);
                result = valueString;
            }
            return result;
        }

        
        public static List<ulong> GetRoleParamsUlongListFromDB(GameClient client, string roleParamsKey)
        {
            List<ulong> lsValues = new List<ulong>();
            string valueString = Global.GetRoleParamsStringWithNullFromDB(client, roleParamsKey);
            List<ulong> result;
            if (string.IsNullOrEmpty(valueString))
            {
                result = lsValues;
            }
            else
            {
                int pos = 0;
                for (int usedLenght = 0; usedLenght < valueString.Length; usedLenght += 8)
                {
                    byte[] bytes_8 = Encoding.GetEncoding("latin1").GetBytes(valueString.Substring(pos, 8));
                    lsValues.Add(BitConverter.ToUInt64(bytes_8, 0));
                    pos += 8;
                }
                result = lsValues;
            }
            return result;
        }

        
        public static List<int> GetRoleParamsIntListFromDBOffline(int rid, string roleParamsKey, int serverid)
        {
            List<int> lsValues = new List<int>();
            string valueString = Global.GetRoleParamsStringWithNullFromDBOffline(rid, roleParamsKey, serverid);
            List<int> result;
            if (string.IsNullOrEmpty(valueString))
            {
                result = lsValues;
            }
            else
            {
                int pos = 0;
                for (int usedLenght = 0; usedLenght < valueString.Length; usedLenght += 4)
                {
                    byte[] bytes_4 = Encoding.GetEncoding("latin1").GetBytes(valueString.Substring(pos, 4));
                    lsValues.Add(BitConverter.ToInt32(bytes_4, 0));
                    pos += 4;
                }
                result = lsValues;
            }
            return result;
        }

        
        public static List<int> GetRoleParamsIntListFromDB(GameClient client, string roleParamsKey)
        {
            List<int> lsValues = new List<int>();
            string valueString = Global.GetRoleParamsStringWithNullFromDB(client, roleParamsKey);
            List<int> result;
            if (string.IsNullOrEmpty(valueString))
            {
                result = lsValues;
            }
            else
            {
                int pos = 0;
                for (int usedLenght = 0; usedLenght < valueString.Length; usedLenght += 4)
                {
                    byte[] bytes_4 = Encoding.GetEncoding("latin1").GetBytes(valueString.Substring(pos, 4));
                    lsValues.Add(BitConverter.ToInt32(bytes_4, 0));
                    pos += 4;
                }
                result = lsValues;
            }
            return result;
        }

        
        public static List<int> GetRoleParamsIntListFromDBOffline(GameClient client, string roleParamsKey)
        {
            return Global.GetRoleParamsIntListFromDBOffline(client.ClientData.RoleID, roleParamsKey, client.ServerId);
        }

        
        public static List<uint> GetRoleParamsUIntListFromDB(GameClient client, string roleParamsKey)
        {
            List<uint> lsValues = new List<uint>();
            string valueString = Global.GetRoleParamsStringWithNullFromDB(client, roleParamsKey);
            List<uint> result;
            if (string.IsNullOrEmpty(valueString))
            {
                result = lsValues;
            }
            else
            {
                int pos = 0;
                for (int usedLenght = 0; usedLenght < valueString.Length; usedLenght += 4)
                {
                    byte[] bytes_4 = Encoding.GetEncoding("latin1").GetBytes(valueString.Substring(pos, 4));
                    lsValues.Add(BitConverter.ToUInt32(bytes_4, 0));
                    pos += 4;
                }
                result = lsValues;
            }
            return result;
        }

        
        public static List<ushort> GetRoleParamsUshortListFromDB(GameClient client, string roleParamsKey)
        {
            List<ushort> lsValues = new List<ushort>();
            string valueString = Global.GetRoleParamsStringWithNullFromDB(client, roleParamsKey);
            List<ushort> result;
            if (string.IsNullOrEmpty(valueString))
            {
                result = lsValues;
            }
            else
            {
                int pos = 0;
                for (int usedLenght = 0; usedLenght < valueString.Length; usedLenght += 2)
                {
                    byte[] bytes_2 = Encoding.GetEncoding("latin1").GetBytes(valueString.Substring(pos, 2));
                    lsValues.Add(BitConverter.ToUInt16(bytes_2, 0));
                    pos += 2;
                }
                result = lsValues;
            }
            return result;
        }

        
        public static void SaveRoleParamsInt32ValueWithTimeStampToDB(GameClient client, string roleParamsKey, int nValue, bool writeToDB = false, string refTime = "2020-12-12 12:12:12")
        {
            DateTime referenceTime = DateTime.Parse(refTime);
            TimeSpan ts = TimeUtil.NowDateTime() - referenceTime;
            Global.UpdateRoleParamByName(client, roleParamsKey, nValue.ToString(), writeToDB);
        }

        
        public static int GetRoleParamsInt32ValueWithTimeStampFromDB(GameClient client, string roleParamsKey, string refTime = "2020-12-12 12:12:12")
        {
            string sValue = Global.GetRoleParamByName(client, roleParamsKey);
            int result;
            if (string.IsNullOrEmpty(sValue))
            {
                result = 0;
            }
            else
            {
                string[] sArr = sValue.Split(new char[]
                {
                    '_'
                });
                result = Global.SafeConvertToInt32(sArr[0]);
            }
            return result;
        }

        
        public static void SaveRoleParamsInt32ValueToDB(GameClient client, string roleParamsKey, int nValue, bool writeToDB)
        {
            Global.UpdateRoleParamByName(client, roleParamsKey, nValue.ToString(), writeToDB);
        }

        
        public static void SaveRoleParamsInt64ValueToDB(GameClient client, string roleParamsKey, long nValue, bool writeToDB)
        {
            Global.UpdateRoleParamByName(client, roleParamsKey, nValue.ToString(), writeToDB);
        }

        
        public static void SaveRoleParamsStringToDB(GameClient client, string roleParamsKey, string valueString, bool writeToDB)
        {
            Global.UpdateRoleParamByName(client, roleParamsKey, valueString, writeToDB);
        }

        
        public static void SaveRoleParamsStringWithNullToDBOffline(int rid, string roleParamsKey, string valueString, int serverid)
        {
            byte[] bytes = Encoding.GetEncoding("latin1").GetBytes(valueString);
            Global.UpdateRoleParamByNameOffline(rid, roleParamsKey, Convert.ToBase64String(bytes), serverid);
        }

        
        public static void SaveRoleParamsStringWithNullToDB(GameClient client, string roleParamsKey, string valueString, bool writeToDB)
        {
            byte[] bytes = Encoding.GetEncoding("latin1").GetBytes(valueString);
            Global.UpdateRoleParamByName(client, roleParamsKey, Convert.ToBase64String(bytes), writeToDB);
        }

        
        public static void SaveRoleParamsDateTimeToDB(GameClient client, string roleParamsKey, DateTime dateTime, bool writeToDB)
        {
            Global.UpdateRoleParamByName(client, roleParamsKey, dateTime.Ticks.ToString(), writeToDB);
        }

        
        public static void SaveRoleParamsUshortListToDB(GameClient client, List<ushort> lsUshort, string roleParamsKey, bool writeToDB = false)
        {
            string newStringValue = "";
            for (int i = 0; i < lsUshort.Count; i++)
            {
                byte[] bytes = BitConverter.GetBytes(lsUshort[i]);
                newStringValue += Encoding.GetEncoding("latin1").GetString(bytes);
            }
            Global.SaveRoleParamsStringWithNullToDB(client, roleParamsKey, newStringValue, writeToDB);
        }

        
        public static void SaveRoleParamsIntListToDBOffline(int rid, List<int> lsInt, string roleParamsKey, int serverid)
        {
            string newStringValue = "";
            for (int i = 0; i < lsInt.Count; i++)
            {
                byte[] bytes = BitConverter.GetBytes(lsInt[i]);
                newStringValue += Encoding.GetEncoding("latin1").GetString(bytes);
            }
            Global.SaveRoleParamsStringWithNullToDBOffline(rid, roleParamsKey, newStringValue, serverid);
        }

        
        public static void SaveRoleParamsIntListToDB(GameClient client, List<int> lsInt, string roleParamsKey, bool writeToDB = false)
        {
            string newStringValue = "";
            for (int i = 0; i < lsInt.Count; i++)
            {
                byte[] bytes = BitConverter.GetBytes(lsInt[i]);
                newStringValue += Encoding.GetEncoding("latin1").GetString(bytes);
            }
            Global.SaveRoleParamsStringWithNullToDB(client, roleParamsKey, newStringValue, writeToDB);
        }

        
        public static void SaveRoleParamsUintListToDB(GameClient client, List<uint> lsUint, string roleParamsKey, bool writeToDB = false)
        {
            string newStringValue = "";
            for (int i = 0; i < lsUint.Count; i++)
            {
                byte[] bytes = BitConverter.GetBytes(lsUint[i]);
                newStringValue += Encoding.GetEncoding("latin1").GetString(bytes);
            }
            Global.SaveRoleParamsStringWithNullToDB(client, roleParamsKey, newStringValue, writeToDB);
        }

        
        public static void SaveRoleParamsUlongListToDB(GameClient client, List<ulong> lsUlong, string roleParamsKey, bool writeToDB = false)
        {
            string newStringValue = "";
            for (int i = 0; i < lsUlong.Count; i++)
            {
                byte[] bytes = BitConverter.GetBytes(lsUlong[i]);
                newStringValue += Encoding.GetEncoding("latin1").GetString(bytes);
            }
            Global.SaveRoleParamsStringWithNullToDB(client, roleParamsKey, newStringValue, writeToDB);
        }

        
        public static bool GetMapRecordDataByField(GameClient client, int indexRecord, out int mapCode, out int x, out int y)
        {
            mapCode = 0;
            x = 0;
            y = 0;
            List<ushort> lsUshort = Global.GetRoleParamsUshortListFromDB(client, "MapPosRecord");
            int realIndex = indexRecord * 3;
            bool result;
            if (realIndex + 2 >= lsUshort.Count)
            {
                result = false;
            }
            else
            {
                mapCode = (int)lsUshort[realIndex++];
                x = (int)lsUshort[realIndex++];
                y = (int)lsUshort[realIndex];
                result = (mapCode != 0 || x != 0 || 0 != y);
            }
            return result;
        }

        
        public static void ModifyMapRecordData(GameClient client, ushort mapCode, ushort x, ushort y, int indexRecord)
        {
            List<ushort> lsUshort = Global.GetRoleParamsUshortListFromDB(client, "MapPosRecord");
            int realIndex = indexRecord * 3;
            while (lsUshort.Count < realIndex + 3)
            {
                lsUshort.Add(0);
                lsUshort.Add(0);
                lsUshort.Add(0);
            }
            lsUshort[realIndex++] = mapCode;
            lsUshort[realIndex++] = x;
            lsUshort[realIndex] = y;
            Global.SaveRoleParamsUshortListToDB(client, lsUshort, "MapPosRecord", true);
        }

        
        public static SceneUIClasses GetMapSceneType(int mapCode)
        {
            SceneUIClasses sceneType;
            SceneUIClasses result;
            if (!Global.MapCodeSceneTypeDict.TryGetValue(mapCode, out sceneType))
            {
                result = SceneUIClasses.Normal;
            }
            else
            {
                result = sceneType;
            }
            return result;
        }

        
        public static void InitMapSceneTypeDict()
        {
            if (null != Global.XmlInfo["ConfigSettings"])
            {
                IEnumerable<XElement> mapList = null;
                try
                {
                    XElement xmlRoot = Global.GetSafeXElement(Global.XmlInfo["ConfigSettings"], "Maps");
                    if (null != xmlRoot)
                    {
                        mapList = xmlRoot.Elements("Map");
                    }
                    if (null != mapList)
                    {
                        foreach (XElement xmlItem in mapList)
                        {
                            int mapCode = (int)Global.GetSafeAttributeLong(xmlItem, "Code");
                            int sceneType = (int)Global.GetSafeAttributeLong(xmlItem, "MapType");
                            Global.MapCodeSceneTypeDict[mapCode] = (SceneUIClasses)sceneType;
                        }
                    }
                }
                catch (Exception ex)
                {
                    LogManager.WriteLog(LogTypes.Fatal, "读取Settings.xml初始化地图类型映射时失败" + ex.ToString(), ex, true);
                }
            }
        }

        
        public static int GetLuckyGoodsIndex(int goodsID)
        {
            int[] goodsArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeLuckyGoodsIDs", ',');
            if (goodsArr.Length > 0)
            {
                for (int i = 0; i < goodsArr.Length; i++)
                {
                    if (goodsID == goodsArr[i])
                    {
                        return i;
                    }
                }
            }
            return -1;
        }

        
        public static int GetLuckyValue(int luckyGoodsID)
        {
            int luckIndex = Global.GetLuckyGoodsIndex(luckyGoodsID);
            int result;
            if (luckIndex < 0)
            {
                result = 0;
            }
            else
            {
                int[] luckyArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeLuckyGoodsRate", ',');
                if (luckIndex < luckyArr.Length)
                {
                    result = luckyArr[luckIndex];
                }
                else
                {
                    result = 0;
                }
            }
            return result;
        }

        
        public static int GetDayLimitSecsByMapCode(int mapCode)
        {
            GameMap gameMap = null;
            int result;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap) || null == gameMap)
            {
                LogManager.WriteLog(LogTypes.Error, "错误的地图编号：" + mapCode, null, true);
                result = 0;
            }
            else
            {
                result = gameMap.DayLimitSecs;
            }
            return result;
        }

        
        public static void ParseDayLimitSecsByMapCode(GameClient client, int mapCode, out int oldDayID, out int oldStayingSecs, out int oldRoleAddedSecs)
        {
            oldDayID = -1;
            oldStayingSecs = 0;
            oldRoleAddedSecs = 0;
            string paramName = string.Format("{0}{1}", "MapLimitSecs_", mapCode);
            string paramValue = Global.GetRoleParamByName(client, paramName);
            if (!string.IsNullOrEmpty(paramValue))
            {
                string[] fields = paramValue.Split(new char[]
                {
                    ','
                });
                if (fields.Length == 3)
                {
                    oldDayID = Global.SafeConvertToInt32(fields[0]);
                    oldStayingSecs = Global.SafeConvertToInt32(fields[1]);
                    oldRoleAddedSecs = Global.SafeConvertToInt32(fields[2]);
                }
            }
        }

        
        public static void UpdateDayLimitSecsByMapCode(GameClient client, int mapCode, int oldDayID, int oldStayingSecs, int oldRoleAddedSecs)
        {
            string paramName = string.Format("{0}{1}", "MapLimitSecs_", mapCode);
            string paramValue = string.Format("{0},{1},{2}", oldDayID, oldStayingSecs, oldRoleAddedSecs);
            Global.UpdateRoleParamByName(client, paramName, paramValue, false);
        }

        
        public static bool AddStayingSecsByMapCode(GameClient client, int mapCode, int elapsedSecs)
        {
            int dayLimitSecs = Global.GetDayLimitSecsByMapCode(mapCode);
            bool result;
            if (dayLimitSecs <= 0)
            {
                result = false;
            }
            else
            {
                int oldDayID = -1;
                int oldStayingSecs = 0;
                int oldRoleAddedSecs = 0;
                Global.ParseDayLimitSecsByMapCode(client, mapCode, out oldDayID, out oldStayingSecs, out oldRoleAddedSecs);
                int dayID = TimeUtil.NowDateTime().DayOfYear;
                if (dayID != oldDayID)
                {
                    oldDayID = dayID;
                    oldStayingSecs = 0;
                    oldRoleAddedSecs = 0;
                }
                oldStayingSecs += elapsedSecs;
                Global.UpdateDayLimitSecsByMapCode(client, mapCode, oldDayID, oldStayingSecs, oldRoleAddedSecs);
                GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
                dayLimitSecs = gameMap.DayLimitSecs + oldRoleAddedSecs;
                result = (oldStayingSecs >= dayLimitSecs);
            }
            return result;
        }

        
        public static int AddExtLimitSecsByMapCode(GameClient client, int mapCode, int limitSecs)
        {
            int dayLimitSecs = Global.GetDayLimitSecsByMapCode(mapCode);
            int result;
            if (dayLimitSecs <= 0)
            {
                result = 0;
            }
            else
            {
                int oldDayID = -1;
                int oldStayingSecs = 0;
                int oldRoleAddedSecs = 0;
                Global.ParseDayLimitSecsByMapCode(client, mapCode, out oldDayID, out oldStayingSecs, out oldRoleAddedSecs);
                int dayID = TimeUtil.NowDateTime().DayOfYear;
                if (dayID != oldDayID)
                {
                    oldDayID = dayID;
                    oldStayingSecs = 0;
                    oldRoleAddedSecs = 0;
                }
                oldRoleAddedSecs += limitSecs;
                Global.UpdateDayLimitSecsByMapCode(client, mapCode, oldDayID, oldStayingSecs, oldRoleAddedSecs);
                result = oldRoleAddedSecs;
            }
            return result;
        }

        
        public static void ProcessDayLimitSecsByClient(GameClient client, int elapsedSecs)
        {
            if (Global.AddStayingSecsByMapCode(client, client.ClientData.MapCode, elapsedSecs))
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(90, new object[0]), new object[]
                {
                    Global.GetMapName(client.ClientData.MapCode)
                }), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, GameManager.DefaultMapCode, -1, -1, -1, 0);
            }
        }

        
        public static bool CanUseTongLing(GameClient client, SystemXmlItem systemGoodsItem, int goodsID)
        {
            string execMagic = systemGoodsItem.GetStringValue("ExecMagic");
            bool result;
            if (-1 == execMagic.IndexOf("FALL_XINGYUN") && -1 == execMagic.IndexOf("ADD_XINGYUN"))
            {
                result = true;
            }
            else
            {
                List<GoodsData> weaponGoodsData = Global.GetUsingWeaponGoods(client);
                if (weaponGoodsData == null || weaponGoodsData.Count<GoodsData>() == 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(357, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                    result = false;
                }
                else
                {
                    for (int i = 0; i < weaponGoodsData.Count<GoodsData>(); i++)
                    {
                        if (weaponGoodsData[i].Lucky >= 9)
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(358, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                        }
                    }
                    result = true;
                }
            }
            return result;
        }

        
        public static void ProcessWeaponTongLing(GameClient client)
        {
        }

        
        public static void AddWeaponLucky(GameClient client, int lucky)
        {
        }

        
        public static bool UpdateGoodsLucyToDB(GameClient client, GoodsData goodsData)
        {
            string[] dbFields = null;
            string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
            {
                client.ClientData.RoleID,
                goodsData.Id,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                goodsData.Lucky,
                "*",
                "*",
                "*",
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10006, strDbCmd, out dbFields, client.ServerId);
            return dbRequestResult != TCPProcessCmdResults.RESULT_FAILED && dbFields.Length > 0 && Convert.ToInt32(dbFields[1]) >= 0;
        }

        
        public static bool UpdateGoodsSiteAndUsingToDB(GameClient client, GoodsData goodsData)
        {
            string[] dbFields = null;
            string strDbCmd = Global.FormatUpdateDBGoodsStr(new object[]
            {
                client.ClientData.RoleID,
                goodsData.Id,
                goodsData.Using,
                "*",
                "*",
                "*",
                goodsData.Site,
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*",
                "*"
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10006, strDbCmd, out dbFields, client.ServerId);
            return dbRequestResult != TCPProcessCmdResults.RESULT_FAILED && dbFields.Length > 0 && Convert.ToInt32(dbFields[1]) >= 0;
        }

        
        public static void TryToActivateSpecialZuanHuangLevel(GameClient client, bool notifyPropsChanged = true)
        {
            int oldZuanHuangLevel = GameManager.ClientMgr.GetZuanHuangLevelValue(client);
            for (int i = 0; i < 10; i++)
            {
                int curZuanHuangLevel = GameManager.ClientMgr.GetZuanHuangLevelValue(client);
                int nextZuanHuangLevel = curZuanHuangLevel + 1;
                if (nextZuanHuangLevel > GameManager.SystemZuanHuangLevel.SystemXmlItemDict.Count)
                {
                    break;
                }
                SystemXmlItem xmlItem = null;
                if (!GameManager.SystemZuanHuangLevel.SystemXmlItemDict.TryGetValue(nextZuanHuangLevel, out xmlItem) || null == xmlItem)
                {
                    break;
                }
                int needMinYuanBao = xmlItem.GetIntValue("MinYuanBao", -1);
                if ((long)needMinYuanBao > Global.GetUserInputAllYuanBao(client))
                {
                    break;
                }
                GameManager.ClientMgr.ModifyZuanHuangLevelValue(client, 1, true, true);
            }
            int newZuanHuangLevel = GameManager.ClientMgr.GetZuanHuangLevelValue(client);
            Global.BroadcastZuanHuangLevelOk(client, oldZuanHuangLevel, newZuanHuangLevel);
            Global.ActiveZuanHuangBuffer(client, notifyPropsChanged);
        }

        
        public static bool ActiveZuanHuangBuffer(GameClient client, bool notifyPropsChanged)
        {
            int nNewBufferGoodsIndexID = GameManager.ClientMgr.GetZuanHuangLevelValue(client) - 1;
            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, 49);
            if (bufferData != null && !Global.IsBufferDataOver(bufferData, 0L))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }
            bool result;
            if (nOldBufferGoodsIndexID == nNewBufferGoodsIndexID)
            {
                result = false;
            }
            else
            {
                Global.UpdateBufferData(client, BufferItemTypes.ZuanHuang, new double[]
                {
                    (double)nNewBufferGoodsIndexID
                }, 1, notifyPropsChanged);
                if (notifyPropsChanged)
                {
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                    GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
                }
                result = true;
            }
            return result;
        }

        
        public static int TryToGiveZuanHuangWeekAward(GameClient client, bool isJustCheck)
        {
            int curZuanHuangLevel = GameManager.ClientMgr.GetZuanHuangLevelValue(client);
            int result;
            if (curZuanHuangLevel <= 0)
            {
                result = -100;
            }
            else
            {
                SystemXmlItem xmlItem = null;
                if (!GameManager.SystemZuanHuangLevel.SystemXmlItemDict.TryGetValue(curZuanHuangLevel, out xmlItem) || null == xmlItem)
                {
                    result = -1;
                }
                else
                {
                    string valueString = Global.GetRoleParamByName(client, "ZHAwardTime");
                    if (valueString != null && valueString.Length > 0)
                    {
                        long lastAwardTime = -1L;
                        try
                        {
                            long.TryParse(valueString, out lastAwardTime);
                        }
                        finally
                        {
                        }
                        if (lastAwardTime <= 0L)
                        {
                            return -2;
                        }
                        DateTime dateTime = new DateTime(lastAwardTime * 10000L);
                        if (Global.IsInSameWeek(dateTime, TimeUtil.NowDateTime()))
                        {
                            return -3;
                        }
                    }
                    if (isJustCheck)
                    {
                        result = 1680;
                    }
                    else
                    {
                        string goodsIDs = xmlItem.GetStringValue("WeekGoods");
                        int bindYuanBao = xmlItem.GetIntValue("WeekBindYuanBao", -1);
                        List<GoodsData> listGoods = Global.ParseGoodsDataListFromGoodsStr(goodsIDs, "钻皇配置文件");
                        if (!Global.CanAddGoodsNum(client, listGoods.Count))
                        {
                            result = -31;
                        }
                        else
                        {
                            Global.UpdateRoleParamByName(client, "ZHAwardTime", string.Format("{0}", TimeUtil.NOW()), true);
                            if (bindYuanBao > 0)
                            {
                                GameManager.ClientMgr.AddUserGold(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, bindYuanBao, "钻皇周奖励");
                                GameManager.SystemServerEvents.AddEvent(string.Format("使用钻皇等级领取绑定元宝, roleID={0}({1}), Money={2}, newMoney={3}, zuanhuanglevel={4}", new object[]
                                {
                                    client.ClientData.RoleID,
                                    client.ClientData.RoleName,
                                    client.ClientData.UserMoney,
                                    bindYuanBao,
                                    curZuanHuangLevel
                                }), EventLevels.Record);
                                Global.BroadcastVipFetchBindYuanBaoAwardMsg(client, bindYuanBao);
                            }
                            string awardReason = string.Format("使用钻皇等级{0}获取", curZuanHuangLevel);
                            for (int i = 0; i < listGoods.Count; i++)
                            {
                                GoodsData goodsData = listGoods[i];
                                if (null != goodsData)
                                {
                                    goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, 0, goodsData.Jewellist, true, 1, awardReason, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, 0, 0, 0, null, null, 0, true);
                                }
                            }
                            result = 1;
                        }
                    }
                }
            }
            return result;
        }

        
        public static bool IsInSameWeek(DateTime dtmS, DateTime dtmE)
        {
            double dbl = (dtmE - dtmS).TotalDays;
            int intDow = Convert.ToInt32(dtmE.DayOfWeek);
            if (0 == intDow)
            {
                intDow = 7;
            }
            return dbl < 7.0 && dbl < (double)intDow;
        }

        
        public static long GetUserInputAllYuanBao(GameClient client)
        {
            return client.ClientData.VipExp = Global.GetUserInputAllYuanBao(client.ClientData.RoleID, client.ClientData.RoleName, client.ServerId);
        }

        
        public static long GetUserInputAllYuanBao(int roleId, string roleName, int serverId)
        {
            string[] dbFields = Global.ExecuteDBCmd(10069, string.Format("{0}:{1}", roleId, roleName), serverId);
            long result;
            if (dbFields == null || dbFields.Length < 4)
            {
                result = 0L;
            }
            else
            {
                string userID = dbFields[1];
                int userMoney = Global.SafeConvertToInt32(dbFields[2]);
                int realMoney = Global.SafeConvertToInt32(dbFields[3]);
                result = (long)Global.TransMoneyToYuanBao(realMoney);
            }
            return result;
        }

        
        public static int TransMoneyToYuanBao(int money)
        {
            int moneyToYuanBao = GameManager.GameConfigMgr.GetGameConfigItemInt("money-to-yuanbao", 10);
            return money * moneyToYuanBao;
        }

        
        public static bool TryToDeActivateSpecialWuXueLevel(GameClient client)
        {
            int curWuXueLevel = GameManager.ClientMgr.GetWuXueLevelValue(client);
            int preWuXueLevel = curWuXueLevel - 1;
            int[] wuXueBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("WuXueBufferGoodsIDs", ',');
            bool result;
            if (preWuXueLevel > wuXueBufferGoods.Length || preWuXueLevel < 0)
            {
                result = false;
            }
            else
            {
                SystemXmlItem wuXueXmlItem = null;
                if (!GameManager.SystemWuXueLevel.SystemXmlItemDict.TryGetValue(curWuXueLevel, out wuXueXmlItem) || null == wuXueXmlItem)
                {
                    result = false;
                }
                else
                {
                    int needRoleLevel = wuXueXmlItem.GetIntValue("LevelLimit", -1);
                    int needWuXing = wuXueXmlItem.GetIntValue("WuXing", -1);
                    bool autoActivate = 0 == wuXueXmlItem.GetIntValue("Select", -1);
                    double dayXiaoHao = wuXueXmlItem.GetDoubleValue("DayXiaoHao");
                    if (!autoActivate)
                    {
                        result = false;
                    }
                    else
                    {
                        int curRoleWuXing = GameManager.ClientMgr.GetWuXingValue(client);
                        if (curRoleWuXing < needWuXing)
                        {
                        }
                        result = true;
                    }
                }
            }
            return result;
        }

        
        public static bool TryToActivateSpecialWuXueLevel(GameClient client)
        {
            int curWuXueLevel = GameManager.ClientMgr.GetWuXueLevelValue(client);
            int nextWuXueLevel = curWuXueLevel + 1;
            int[] wuXueBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("WuXueBufferGoodsIDs", ',');
            bool result;
            if (nextWuXueLevel > wuXueBufferGoods.Length)
            {
                result = false;
            }
            else
            {
                SystemXmlItem wuXueXmlItem = null;
                if (!GameManager.SystemWuXueLevel.SystemXmlItemDict.TryGetValue(nextWuXueLevel, out wuXueXmlItem) || null == wuXueXmlItem)
                {
                    result = false;
                }
                else
                {
                    int needRoleLevel = wuXueXmlItem.GetIntValue("LevelLimit", -1);
                    int needWuXing = wuXueXmlItem.GetIntValue("WuXing", -1);
                    bool autoActivate = 0 == wuXueXmlItem.GetIntValue("Select", -1);
                    double dayXiaoHao = wuXueXmlItem.GetDoubleValue("DayXiaoHao");
                    if (!autoActivate)
                    {
                        result = false;
                    }
                    else if (needRoleLevel > client.ClientData.Level)
                    {
                        result = false;
                    }
                    else
                    {
                        int curRoleWuXing = GameManager.ClientMgr.GetWuXingValue(client);
                        result = (curRoleWuXing >= needWuXing);
                    }
                }
            }
            return result;
        }

        
        public static bool TryToActiveNewWuXueBuffer(GameClient client, bool notifyPropsChanged)
        {
            double dayXiaoHao = 0.0;
            int nNewBufferGoodsIndexID = Global.GetNewWuXueBufferGoodsIndexIDAndDayXiaoHao(client, GameManager.ClientMgr.GetWuXueLevelValue(client), out dayXiaoHao);
            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, 33);
            if (bufferData != null && !Global.IsBufferDataOver(bufferData, 0L))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }
            bool result;
            if (nOldBufferGoodsIndexID == nNewBufferGoodsIndexID)
            {
                result = false;
            }
            else
            {
                Global.UpdateBufferData(client, BufferItemTypes.WuXue, new double[]
                {
                    (double)nNewBufferGoodsIndexID
                }, 0, true);
                if (notifyPropsChanged)
                {
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                    GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
                }
                int subWuXing = (int)((double)GameManager.ClientMgr.GetWuXingValue(client) * dayXiaoHao);
                GameManager.ClientMgr.ModifyWuXingValue(client, -subWuXing, true, true, false);
                Global.BroadcastClientChuanQiWuXue(client, nNewBufferGoodsIndexID);
                result = true;
            }
            return result;
        }

        
        public static int GetNewWuXueBufferGoodsIndexIDAndDayXiaoHao(GameClient client, int wuXueLevel, out double dayXiaoHao)
        {
            int nNewBufferGoodsIndexID = wuXueLevel - 1;
            dayXiaoHao = 0.0;
            for (int i = 0; i < GameManager.SystemWuXueLevel.SystemXmlItemDict.Count; i++)
            {
                SystemXmlItem item = GameManager.SystemWuXueLevel.SystemXmlItemDict.ElementAt(i).Value;
                int level = item.GetIntValue("ID", -1);
                if (level == wuXueLevel)
                {
                    dayXiaoHao = item.GetDoubleValue("DayXiaoHao");
                }
            }
            if (nNewBufferGoodsIndexID < 0)
            {
                nNewBufferGoodsIndexID = -1;
            }
            return nNewBufferGoodsIndexID;
        }

        
        public static bool ActiveJinMaiBuffer(GameClient client, bool notifyPropsChanged)
        {
            int nNewBufferGoodsIndexID = GameManager.ClientMgr.GetJingMaiLevelValue(client) - 1;
            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, 32);
            if (bufferData != null && !Global.IsBufferDataOver(bufferData, 0L))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }
            bool result;
            if (nOldBufferGoodsIndexID == nNewBufferGoodsIndexID)
            {
                result = false;
            }
            else
            {
                Global.UpdateBufferData(client, BufferItemTypes.JingMai, new double[]
                {
                    (double)nNewBufferGoodsIndexID
                }, 1, notifyPropsChanged);
                if (notifyPropsChanged)
                {
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                    GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
                }
                result = true;
            }
            return result;
        }

        
        public static bool ActiveZhanHunBuffer(GameClient client, bool notifyPropsChanged)
        {
            int nNewBufferGoodsIndexID = GameManager.ClientMgr.GetZhanHunLevelValue(client) - 1;
            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, 50);
            if (bufferData != null && !Global.IsBufferDataOver(bufferData, 0L))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }
            bool result;
            if (nOldBufferGoodsIndexID == nNewBufferGoodsIndexID)
            {
                result = false;
            }
            else
            {
                Global.UpdateBufferData(client, BufferItemTypes.ZhanHun, new double[]
                {
                    (double)nNewBufferGoodsIndexID
                }, 1, notifyPropsChanged);
                if (notifyPropsChanged)
                {
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                    GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
                }
                result = true;
            }
            return result;
        }

        
        public static bool ActiveRongYuBuffer(GameClient client, bool notifyPropsChanged)
        {
            int nNewBufferGoodsIndexID = GameManager.ClientMgr.GetRongYuLevelValue(client) - 1;
            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, 51);
            if (bufferData != null && !Global.IsBufferDataOver(bufferData, 0L))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }
            bool result;
            if (nOldBufferGoodsIndexID == nNewBufferGoodsIndexID)
            {
                result = false;
            }
            else
            {
                Global.UpdateBufferData(client, BufferItemTypes.RongYu, new double[]
                {
                    120.0,
                    (double)nNewBufferGoodsIndexID
                }, 0, notifyPropsChanged);
                if (notifyPropsChanged)
                {
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                    GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
                }
                result = true;
            }
            return result;
        }

        
        public static void AddFlushIconStateForAll(ushort nIconOrder, bool bIconState)
        {
            int count = GameManager.ClientMgr.GetMaxClientCount();
            for (int i = 0; i < count; i++)
            {
                GameClient client = GameManager.ClientMgr.FindClientByNid(i);
                if (null != client)
                {
                    client._IconStateMgr.AddFlushIconState(nIconOrder, bIconState);
                    client._IconStateMgr.SendIconStateToClient(client);
                }
            }
        }

        
        public static DateTime GetKaiFuTime()
        {
            string sTimeString = GameManager.GameConfigMgr.GetGameConfigItemStr("kaifutime", "2013-02-12 01:01:01");
            DateTime dateTime;
            DateTime.TryParse(sTimeString, out dateTime);
            return dateTime;
        }

        
        public static DateTime GetAddDaysDataTime(DateTime dateTime, int addDays, bool roundDay = true)
        {
            if (roundDay)
            {
                dateTime = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0);
            }
            return new DateTime(dateTime.Ticks + (long)addDays * 10000L * 1000L * 24L * 60L * 60L);
        }

        
        public static int GetDaysSpanNum(DateTime left, DateTime right, bool roundDay = true)
        {
            int result;
            if (roundDay)
            {
                DateTime left2 = new DateTime(left.Year, left.Month, left.Day);
                DateTime right2 = new DateTime(right.Year, right.Month, right.Day);
                result = (int)((left2.Ticks / 10000000L - right2.Ticks / 10000000L) / 86400L);
            }
            else
            {
                result = (int)((left.Ticks / 10000000L - right.Ticks / 10000000L) / 86400L);
            }
            return result;
        }

        
        public static string GetHuoDongTimeByKaiFu(int addDays, int hours, int minutes, int seconds)
        {
            DateTime dateTime = Global.GetAddDaysDataTime(Global.GetKaiFuTime(), addDays, true);
            DateTime newDateTime = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, hours, minutes, seconds);
            return newDateTime.ToString("yyyy-MM-dd HH:mm:ss");
        }

        
        public static bool isDoubleXinFu(int activityID)
        {
            bool result;
            try
            {
                string[] timeArr = GameManager.systemParamsList.GetParamValueByName("DoubleXinFu").Split(new char[]
                {
                    '|'
                });
                DateTime beginTime = DateTime.Parse(timeArr[0]);
                DateTime endTime = DateTime.Parse(timeArr[1]);
                DateTime now = Global.GetKaiFuTime();
                if (now < beginTime || now > endTime)
                {
                    result = false;
                }
                else
                {
                    string[] activityArr = GameManager.systemParamsList.GetParamValueByName("DoubleXinFuID").Split(new char[]
                    {
                        ','
                    });
                    foreach (string item in activityArr)
                    {
                        if (activityID == Convert.ToInt32(item))
                        {
                            return true;
                        }
                    }
                    result = false;
                }
            }
            catch
            {
                result = false;
            }
            return result;
        }

        
        public static DateTime GetRegTime(SafeClientData clientData)
        {
            DateTime dateTime = new DateTime(clientData.RegTime * 10000L);
            return dateTime;
        }

        
        public static DateTime GetJieriStartDay()
        {
            string sTimeString = GameManager.GameConfigMgr.GetGameConfigItemStr("jieristartday", "2000-01-01 01:01:01");
            DateTime dateTime;
            DateTime.TryParse(sTimeString, out dateTime);
            return dateTime;
        }

        
        public static int GetJieriDaysNum()
        {
            return GameManager.GameConfigMgr.GetGameConfigItemInt("jieridaysnum", 0);
        }

        
        public static int GetOffsetHour(DateTime now)
        {
            double temp = (now - DateTime.Parse("2011-11-11")).TotalMilliseconds;
            return (int)(temp / 1000.0 / 60.0 / 60.0);
        }

        
        public static int GetOffsetMiniteNow()
        {
            return Global.GetOffsetMinite(TimeUtil.NowDateTime());
        }

        
        public static int GetOffsetMinite(DateTime now)
        {
            double temp = (now - DateTime.Parse("2011-11-11")).TotalMilliseconds;
            return (int)(temp / 1000.0 / 60.0);
        }

        
        public static double GetOffsetSecond(DateTime date)
        {
            double temp = (date - DateTime.Parse("2011-11-11")).TotalMilliseconds;
            return temp / 1000.0;
        }

        
        public static int GetOffsetDay(DateTime now)
        {
            double temp = (now - DateTime.Parse("2011-11-11")).TotalMilliseconds;
            return (int)(temp / 1000.0 / 60.0 / 60.0 / 24.0);
        }

        
        public static int GetOffsetDayNow()
        {
            return Global.GetOffsetDay(TimeUtil.NowDateTime());
        }

        
        public static DateTime GetRealDate(int day)
        {
            DateTime startDay = DateTime.Parse("2011-11-11");
            return Global.GetAddDaysDataTime(startDay, day, true);
        }

        
        public static int BeginOfWeek(DateTime date)
        {
            int dayofweek = (int)date.DayOfWeek;
            if (dayofweek == 0)
            {
                dayofweek = 7;
            }
            dayofweek--;
            int currday = Global.GetOffsetDay(date);
            return currday - dayofweek;
        }

        
        public static DateTime GetHefuStartDay()
        {
            string sTimeString = GameManager.GameConfigMgr.GetGameConfigItemStr("hefutime", "2000-01-01 01:01:01");
            DateTime dateTime;
            DateTime.TryParse(sTimeString, out dateTime);
            return dateTime;
        }

        
        public static string GetHuoDongTimeByHeFu(int addDays, int hours, int minutes, int seconds)
        {
            DateTime dateTime = Global.GetAddDaysDataTime(Global.GetHefuStartDay(), addDays, true);
            DateTime newDateTime = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, hours, minutes, seconds);
            return newDateTime.ToString("yyyy-MM-dd HH:mm:ss");
        }

        
        public static DateTime GetBuChangStartDay()
        {
            string sTimeString = GameManager.GameConfigMgr.GetGameConfigItemStr("buchangtime", "2000-01-01 01:01:01");
            DateTime dateTime;
            DateTime.TryParse(sTimeString, out dateTime);
            return dateTime;
        }

        
        public static string GetTimeByBuChang(int addDays, int hours, int minutes, int seconds)
        {
            DateTime dateTime = Global.GetAddDaysDataTime(Global.GetBuChangStartDay(), addDays, true);
            DateTime newDateTime = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, hours, minutes, seconds);
            return newDateTime.ToString("yyyy-MM-dd HH:mm:ss");
        }

        
        public static MallSaleData GetMallSaleData(GameClient client = null)
        {
            MallSaleData oldMallSaleData;
            if (null == Global._MallSaleData)
            {
                oldMallSaleData = Global.LoadMallSaleData();
                Global._MallSaleData = oldMallSaleData;
            }
            else
            {
                oldMallSaleData = Global._MallSaleData;
            }
            MallSaleData result;
            if (null != client)
            {
                result = new MallSaleData
                {
                    MallTabXmlString = oldMallSaleData.MallTabXmlString,
                    MallXmlString = oldMallSaleData.MallXmlString,
                    QiangGouXmlString = Global.GetQiangGouXmlString(client)
                };
            }
            else
            {
                result = oldMallSaleData;
            }
            return result;
        }

        
        public static MallSaleData LoadMallSaleData()
        {
            MallSaleData mallData = new MallSaleData();
            string fullPathFileName = Global.IsolateResPath("Config/Mall.xml");
            mallData.MallXmlString = File.ReadAllText(fullPathFileName);
            fullPathFileName = Global.IsolateResPath("Config/MallTab.xml");
            mallData.MallTabXmlString = File.ReadAllText(fullPathFileName);
            return mallData;
        }

        
        public static bool IsGmStopQiangGou()
        {
            return "1" == GameManager.GameConfigMgr.GetGameConfigItemStr("isstopqg", "0");
        }

        
        public static bool QueryQiangGouItemInfo(int roleID, int qiangGouID, int goodsID, int random, int actStartDay, int serverId, out int singleHasPurchase, out int fullHasPurchase)
        {
            singleHasPurchase = 0;
            fullHasPurchase = 0;
            string[] dbFields = Global.ExecuteDBCmd(10109, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                roleID,
                goodsID,
                qiangGouID,
                random,
                actStartDay
            }), serverId);
            bool result;
            if (dbFields == null || dbFields.Length < 3)
            {
                result = false;
            }
            else
            {
                singleHasPurchase = Global.SafeConvertToInt32(dbFields[1]);
                fullHasPurchase = Global.SafeConvertToInt32(dbFields[2]);
                result = true;
            }
            return result;
        }

        
        public static string GetQiangGouXmlString(GameClient client)
        {
            List<QiangGouItemData> qiangGouItemList = Global.GetQiangGouItemList();
            string result;
            if (qiangGouItemList == null || qiangGouItemList.Count <= 0)
            {
                result = "";
            }
            else
            {
                client.ClientData.QiangGouItemList = qiangGouItemList;
                StringBuilder qiangGouBuilder = new StringBuilder();
                qiangGouBuilder.AppendLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
                qiangGouBuilder.AppendLine("<Config>");
                qiangGouBuilder.AppendLine("<Mall>");
                if (null != qiangGouItemList)
                {
                    SystemXmlItem xmlItem = new SystemXmlItem();
                    xmlItem.XMLNode = new XElement("Item");
                    int singleHasPurchase = 0;
                    int fullHasPurchase = 0;
                    for (int i = 0; i < qiangGouItemList.Count; i++)
                    {
                        QiangGouItemData itemData = qiangGouItemList[i];
                        int actStartDay;
                        switch (itemData.Type)
                        {
                            case 1:
                                actStartDay = Global.GetOffsetDay(Global.GetHefuStartDay());
                                break;
                            case 2:
                                actStartDay = Global.GetOffsetDay(Global.GetJieriStartDay());
                                break;
                            default:
                                actStartDay = 0;
                                break;
                        }
                        if (Global.QueryQiangGouItemInfo(client.ClientData.RoleID, itemData.QiangGouID, itemData.GoodsID, itemData.Random, actStartDay, client.ServerId, out singleHasPurchase, out fullHasPurchase))
                        {
                            xmlItem.XMLNode.SetAttributeValue("CurrentRoleID", client.ClientData.RoleID);
                            xmlItem.XMLNode.SetAttributeValue("SingleHasPurchase", singleHasPurchase);
                            if (Global.IsGmStopQiangGou())
                            {
                                xmlItem.XMLNode.SetAttributeValue("FullHasPurchase", itemData.FullPurchase);
                            }
                            else
                            {
                                xmlItem.XMLNode.SetAttributeValue("FullHasPurchase", fullHasPurchase);
                            }
                            xmlItem.XMLNode.SetAttributeValue("QiangGouID", itemData.QiangGouID);
                            xmlItem.XMLNode.SetAttributeValue("GoodsID", itemData.GoodsID);
                            xmlItem.XMLNode.SetAttributeValue("OrigPrice", itemData.OrigPrice);
                            xmlItem.XMLNode.SetAttributeValue("Price", itemData.Price);
                            xmlItem.XMLNode.SetAttributeValue("SinglePurchase", itemData.SinglePurchase);
                            xmlItem.XMLNode.SetAttributeValue("FullPurchase", itemData.FullPurchase);
                            xmlItem.XMLNode.SetAttributeValue("DaysTime", itemData.DaysTime);
                            xmlItem.XMLNode.SetAttributeValue("StartTime", itemData.StartTime);
                            xmlItem.XMLNode.SetAttributeValue("Type", itemData.Type);
                            qiangGouBuilder.AppendLine(xmlItem.XMLNode.ToString());
                        }
                    }
                }
                qiangGouBuilder.AppendLine("</Mall>");
                qiangGouBuilder.AppendLine("</Config>");
                result = qiangGouBuilder.ToString();
            }
            return result;
        }

        
        public static List<QiangGouItemData> GetQiangGouItemList()
        {
            int elapseDays = Global.GetDaysSpanNum(TimeUtil.NowDateTime(), Global.GetKaiFuTime(), true);
            int timeOverDays = 0;
            Dictionary<int, bool> groupDealedDict = new Dictionary<int, bool>();
            List<QiangGouItemData> qiangGouItemDataList = null;
            Dictionary<int, SystemXmlItem> systemXmlItemDict = GameManager.SystemQiangGou.SystemXmlItemDict;
            for (int i = 0; i < systemXmlItemDict.Count; i++)
            {
                SystemXmlItem xmlItem = systemXmlItemDict.ElementAt(i).Value;
                int group = xmlItem.GetIntValue("Group", -1);
                int dayTime = xmlItem.GetIntValue("DaysTime", -1);
                int random = xmlItem.GetIntValue("Random", -1);
                if (!groupDealedDict.ContainsKey(group))
                {
                    groupDealedDict.Add(group, true);
                    if (0 == random)
                    {
                        int oldTimeOverDays = timeOverDays;
                        timeOverDays += dayTime;
                        if (elapseDays < timeOverDays)
                        {
                            string startTime = Global.GetAddDaysDataTime(Global.GetKaiFuTime(), oldTimeOverDays, true).ToString("yyyy-MM-dd HH:mm:ss");
                            qiangGouItemDataList = Global.CreateQiangGouItems(group, random, startTime);
                            if (null != qiangGouItemDataList)
                            {
                                break;
                            }
                        }
                    }
                }
            }
            if (null == qiangGouItemDataList)
            {
                lock (Global.CachingQiangGouItemDataListMutex)
                {
                    if (Global.CachingQiangGouItemDataList != null && TimeUtil.NowDateTime().DayOfYear == Global.CachingQiangGouItemDataListDayID)
                    {
                        qiangGouItemDataList = Global.CachingQiangGouItemDataList;
                    }
                    else
                    {
                        string startTime = Global.GetAddDaysDataTime(TimeUtil.NowDateTime(), 0, true).ToString("yyyy-MM-dd HH:mm:ss");
                        qiangGouItemDataList = Global.CreateQiangGouItems(100, 1, startTime);
                        Global.CachingQiangGouItemDataList = qiangGouItemDataList;
                        Global.CachingQiangGouItemDataListDayID = TimeUtil.NowDateTime().DayOfYear;
                    }
                }
            }
            List<QiangGouItemData> listHeFuQiangGou = Global.GetHeFuQiangGouItemList();
            if (null == qiangGouItemDataList)
            {
                qiangGouItemDataList = listHeFuQiangGou;
            }
            else if (null != listHeFuQiangGou)
            {
                qiangGouItemDataList.AddRange(listHeFuQiangGou);
            }
            List<QiangGouItemData> listJieRiQiangGou = Global.GetJieRiQiangGouItemList();
            if (null == qiangGouItemDataList)
            {
                qiangGouItemDataList = listJieRiQiangGou;
            }
            else if (null != listJieRiQiangGou)
            {
                qiangGouItemDataList.AddRange(listJieRiQiangGou);
            }
            return qiangGouItemDataList;
        }

        
        public static List<QiangGouItemData> CreateQiangGouItems(int groupID, int random, string startTime)
        {
            List<SystemXmlItem> lsXmlItem = new List<SystemXmlItem>();
            for (int i = 0; i < GameManager.SystemQiangGou.SystemXmlItemDict.Count; i++)
            {
                SystemXmlItem xmlItem = GameManager.SystemQiangGou.SystemXmlItemDict.ElementAt(i).Value;
                int group = xmlItem.GetIntValue("Group", -1);
                int myRandom = xmlItem.GetIntValue("Random", -1);
                if (group == groupID && random == myRandom)
                {
                    lsXmlItem.Add(xmlItem);
                }
            }
            List<QiangGouItemData> result;
            if (lsXmlItem.Count < 4)
            {
                result = null;
            }
            else
            {
                if (4 == lsXmlItem.Count || 0 == random)
                {
                    lsXmlItem = lsXmlItem.GetRange(0, 4);
                }
                else
                {
                    lsXmlItem = Global.RandomSortList<SystemXmlItem>(lsXmlItem);
                    lsXmlItem = lsXmlItem.GetRange(0, 4);
                }
                List<QiangGouItemData> qiangGouItemDataList = new List<QiangGouItemData>();
                for (int i = 0; i < lsXmlItem.Count; i++)
                {
                    qiangGouItemDataList.Add(new QiangGouItemData
                    {
                        QiangGouID = lsXmlItem[i].GetIntValue("ID", -1),
                        Group = lsXmlItem[i].GetIntValue("Group", -1),
                        ItemID = lsXmlItem[i].GetIntValue("ID", -1),
                        GoodsID = lsXmlItem[i].GetIntValue("GoodsID", -1),
                        StartTime = startTime,
                        EndTime = "",
                        IsTimeOver = 0,
                        SinglePurchase = lsXmlItem[i].GetIntValue("SinglePurchase", -1),
                        FullPurchase = lsXmlItem[i].GetIntValue("FullPurchase", -1),
                        FullHasPurchase = 0,
                        SingleHasPurchase = 0,
                        CurrentRoleID = 0,
                        DaysTime = lsXmlItem[i].GetIntValue("DaysTime", -1),
                        Price = lsXmlItem[i].GetIntValue("Price", -1),
                        Random = lsXmlItem[i].GetIntValue("Random", -1),
                        OrigPrice = lsXmlItem[i].GetIntValue("OrigPrice", -1),
                        Type = 0
                    });
                }
                result = qiangGouItemDataList;
            }
            return result;
        }

        
        public static QiangGouItemData GetQiangGouItemData(GameClient client, int qiangGouID, int goodsID)
        {
            List<QiangGouItemData> qiangGouItemList = client.ClientData.QiangGouItemList;
            if (null == qiangGouItemList)
            {
                qiangGouItemList = Global.GetQiangGouItemList();
                if (qiangGouItemList == null || qiangGouItemList.Count <= 0)
                {
                    return null;
                }
                client.ClientData.QiangGouItemList = qiangGouItemList;
            }
            QiangGouItemData itemData = null;
            for (int i = 0; i < qiangGouItemList.Count; i++)
            {
                if (qiangGouItemList[i].QiangGouID == qiangGouID && qiangGouItemList[i].GoodsID == goodsID)
                {
                    itemData = qiangGouItemList[i];
                    break;
                }
            }
            return itemData;
        }

        
        public static int CheckQiangGou(GameClient client, int singleHasPurchase, int fullHasPurchase, int qiangGouID, int buyNum, int goodsID, out int price)
        {
            price = 100000;
            int result2;
            if (buyNum <= 0 || buyNum > 10000)
            {
                result2 = -20001;
            }
            else
            {
                List<QiangGouItemData> qiangGouItemList = client.ClientData.QiangGouItemList;
                QiangGouItemData itemData = null;
                for (int i = 0; i < qiangGouItemList.Count; i++)
                {
                    if (qiangGouItemList[i].QiangGouID == qiangGouID && qiangGouItemList[i].GoodsID == goodsID)
                    {
                        itemData = qiangGouItemList[i];
                        break;
                    }
                }
                if (null == itemData)
                {
                    result2 = -20002;
                }
                else
                {
                    SystemXmlItem findXmlItem = null;
                    bool result = GameManager.SystemQiangGou.SystemXmlItemDict.TryGetValue(itemData.QiangGouID, out findXmlItem);
                    if (!result)
                    {
                        result = GameManager.SystemHeFuQiangGou.SystemXmlItemDict.TryGetValue(itemData.QiangGouID, out findXmlItem);
                    }
                    if (!result)
                    {
                        result = GameManager.SystemJieRiQiangGou.SystemXmlItemDict.TryGetValue(itemData.QiangGouID, out findXmlItem);
                    }
                    if (!result || findXmlItem.GetIntValue("GoodsID", -1) != goodsID)
                    {
                        result2 = -20002;
                    }
                    else if (fullHasPurchase >= itemData.FullPurchase)
                    {
                        result2 = -20003;
                    }
                    else if (fullHasPurchase + buyNum > itemData.FullPurchase)
                    {
                        result2 = -20004;
                    }
                    else if (singleHasPurchase >= itemData.SinglePurchase)
                    {
                        result2 = -20005;
                    }
                    else if (singleHasPurchase + buyNum > itemData.SinglePurchase)
                    {
                        result2 = -20006;
                    }
                    else
                    {
                        int elapseDays = Global.GetDaysSpanNum(TimeUtil.NowDateTime(), DateTime.Parse(itemData.StartTime), true);
                        if (elapseDays >= itemData.DaysTime)
                        {
                            result2 = -20007;
                        }
                        else
                        {
                            price = itemData.Price;
                            if (price <= 0)
                            {
                                result2 = -20008;
                            }
                            else
                            {
                                result2 = 1;
                            }
                        }
                    }
                }
            }
            return result2;
        }

        
        public static List<QiangGouItemData> GetHeFuQiangGouItemList()
        {
            HeFuActivityConfig config = HuodongCachingMgr.GetHeFuActivityConfing();
            List<QiangGouItemData> result;
            if (null == config)
            {
                result = null;
            }
            else if (!config.InList(22))
            {
                result = null;
            }
            else
            {
                int elapseDays = Global.GetDaysSpanNum(TimeUtil.NowDateTime(), Global.GetHefuStartDay(), true);
                int timeOverDays = 0;
                Dictionary<int, bool> groupDealedDict = new Dictionary<int, bool>();
                List<QiangGouItemData> qiangGouItemDataList = null;
                Dictionary<int, SystemXmlItem> systemXmlItemDict = GameManager.SystemHeFuQiangGou.SystemXmlItemDict;
                for (int i = 0; i < systemXmlItemDict.Count; i++)
                {
                    SystemXmlItem xmlItem = systemXmlItemDict.ElementAt(i).Value;
                    int group = xmlItem.GetIntValue("Group", -1);
                    int dayTime = xmlItem.GetIntValue("DaysTime", -1);
                    int random = xmlItem.GetIntValue("Random", -1);
                    if (!groupDealedDict.ContainsKey(group))
                    {
                        groupDealedDict.Add(group, true);
                        if (0 == random)
                        {
                            int oldTimeOverDays = timeOverDays;
                            timeOverDays += dayTime;
                            if (elapseDays < timeOverDays)
                            {
                                string startTime = Global.GetAddDaysDataTime(Global.GetHefuStartDay(), oldTimeOverDays, true).ToString("yyyy-MM-dd HH:mm:ss");
                                qiangGouItemDataList = Global.CreateHeFuQiangGouItems(group, random, startTime);
                                if (null != qiangGouItemDataList)
                                {
                                    break;
                                }
                            }
                        }
                    }
                }
                if (null == qiangGouItemDataList)
                {
                    lock (Global.CachingHeFuQiangGouItemDataListMutex)
                    {
                        if (Global.CachingHeFuQiangGouItemDataList != null && TimeUtil.NowDateTime().DayOfYear == Global.CachingHeFuQiangGouItemDataListDayID)
                        {
                            qiangGouItemDataList = Global.CachingHeFuQiangGouItemDataList;
                        }
                        else
                        {
                            string startTime = Global.GetAddDaysDataTime(TimeUtil.NowDateTime(), 0, true).ToString("yyyy-MM-dd HH:mm:ss");
                            qiangGouItemDataList = Global.CreateHeFuQiangGouItems(100, 1, startTime);
                            Global.CachingHeFuQiangGouItemDataList = qiangGouItemDataList;
                            Global.CachingHeFuQiangGouItemDataListDayID = TimeUtil.NowDateTime().DayOfYear;
                        }
                    }
                }
                result = qiangGouItemDataList;
            }
            return result;
        }

        
        public static List<QiangGouItemData> CreateHeFuQiangGouItems(int groupID, int random, string startTime)
        {
            List<SystemXmlItem> lsXmlItem = new List<SystemXmlItem>();
            for (int i = 0; i < GameManager.SystemHeFuQiangGou.SystemXmlItemDict.Count; i++)
            {
                SystemXmlItem xmlItem = GameManager.SystemHeFuQiangGou.SystemXmlItemDict.ElementAt(i).Value;
                int group = xmlItem.GetIntValue("Group", -1);
                int myRandom = xmlItem.GetIntValue("Random", -1);
                if (group == groupID && random == myRandom)
                {
                    lsXmlItem.Add(xmlItem);
                }
            }
            List<QiangGouItemData> result;
            if (lsXmlItem.Count < 4)
            {
                result = null;
            }
            else
            {
                if (4 == lsXmlItem.Count || 0 == random)
                {
                    lsXmlItem = lsXmlItem.GetRange(0, 4);
                }
                else
                {
                    lsXmlItem = Global.RandomSortList<SystemXmlItem>(lsXmlItem);
                    lsXmlItem = lsXmlItem.GetRange(0, 4);
                }
                List<QiangGouItemData> qiangGouItemDataList = new List<QiangGouItemData>();
                for (int i = 0; i < lsXmlItem.Count; i++)
                {
                    qiangGouItemDataList.Add(new QiangGouItemData
                    {
                        QiangGouID = lsXmlItem[i].GetIntValue("ID", -1),
                        Group = lsXmlItem[i].GetIntValue("Group", -1),
                        ItemID = lsXmlItem[i].GetIntValue("ID", -1),
                        GoodsID = lsXmlItem[i].GetIntValue("GoodsID", -1),
                        StartTime = startTime,
                        EndTime = "",
                        IsTimeOver = 0,
                        SinglePurchase = lsXmlItem[i].GetIntValue("SinglePurchase", -1),
                        FullPurchase = lsXmlItem[i].GetIntValue("FullPurchase", -1),
                        FullHasPurchase = 0,
                        SingleHasPurchase = 0,
                        CurrentRoleID = 0,
                        DaysTime = lsXmlItem[i].GetIntValue("DaysTime", -1),
                        Price = lsXmlItem[i].GetIntValue("Price", -1),
                        Random = lsXmlItem[i].GetIntValue("Random", -1),
                        OrigPrice = lsXmlItem[i].GetIntValue("OrigPrice", -1),
                        Type = 1
                    });
                }
                result = qiangGouItemDataList;
            }
            return result;
        }

        
        public static List<QiangGouItemData> GetJieRiQiangGouItemList()
        {
            JieriActivityConfig config = HuodongCachingMgr.GetJieriActivityConfig();
            List<QiangGouItemData> result;
            if (null == config)
            {
                result = null;
            }
            else if (!config.InList(42))
            {
                result = null;
            }
            else
            {
                int elapseDays = Global.GetDaysSpanNum(TimeUtil.NowDateTime(), Global.GetJieriStartDay(), true);
                int timeOverDays = 0;
                Dictionary<int, bool> groupDealedDict = new Dictionary<int, bool>();
                List<QiangGouItemData> qiangGouItemDataList = null;
                Dictionary<int, SystemXmlItem> systemXmlItemDict = GameManager.SystemJieRiQiangGou.SystemXmlItemDict;
                for (int i = 0; i < systemXmlItemDict.Count; i++)
                {
                    SystemXmlItem xmlItem = systemXmlItemDict.ElementAt(i).Value;
                    int group = xmlItem.GetIntValue("Group", -1);
                    int dayTime = xmlItem.GetIntValue("DaysTime", -1);
                    int random = xmlItem.GetIntValue("Random", -1);
                    if (!groupDealedDict.ContainsKey(group))
                    {
                        groupDealedDict.Add(group, true);
                        if (0 == random)
                        {
                            int oldTimeOverDays = timeOverDays;
                            timeOverDays += dayTime;
                            if (elapseDays < timeOverDays)
                            {
                                string startTime = Global.GetAddDaysDataTime(Global.GetJieriStartDay(), oldTimeOverDays, true).ToString("yyyy-MM-dd HH:mm:ss");
                                qiangGouItemDataList = Global.CreateJieRiQiangGouItems(group, random, startTime);
                                if (null != qiangGouItemDataList)
                                {
                                    break;
                                }
                            }
                        }
                    }
                }
                if (null == qiangGouItemDataList)
                {
                    lock (Global.CachingJieRiQiangGouItemDataListMutex)
                    {
                        if (Global.CachingJieRiQiangGouItemDataList != null && TimeUtil.NowDateTime().DayOfYear == Global.CachingJieRiQiangGouItemDataListDayID)
                        {
                            qiangGouItemDataList = Global.CachingJieRiQiangGouItemDataList;
                        }
                        else
                        {
                            string startTime = Global.GetAddDaysDataTime(TimeUtil.NowDateTime(), 0, true).ToString("yyyy-MM-dd HH:mm:ss");
                            qiangGouItemDataList = Global.CreateJieRiQiangGouItems(100, 1, startTime);
                            Global.CachingJieRiQiangGouItemDataList = qiangGouItemDataList;
                            Global.CachingJieRiQiangGouItemDataListDayID = TimeUtil.NowDateTime().DayOfYear;
                        }
                    }
                }
                result = qiangGouItemDataList;
            }
            return result;
        }

        
        public static List<QiangGouItemData> CreateJieRiQiangGouItems(int groupID, int random, string startTime)
        {
            List<SystemXmlItem> lsXmlItem = new List<SystemXmlItem>();
            for (int i = 0; i < GameManager.SystemJieRiQiangGou.SystemXmlItemDict.Count; i++)
            {
                SystemXmlItem xmlItem = GameManager.SystemJieRiQiangGou.SystemXmlItemDict.ElementAt(i).Value;
                int group = xmlItem.GetIntValue("Group", -1);
                int myRandom = xmlItem.GetIntValue("Random", -1);
                if (group == groupID && random == myRandom)
                {
                    lsXmlItem.Add(xmlItem);
                }
            }
            List<QiangGouItemData> result;
            if (lsXmlItem.Count < 4)
            {
                result = null;
            }
            else
            {
                if (4 == lsXmlItem.Count || 0 == random)
                {
                    lsXmlItem = lsXmlItem.GetRange(0, 4);
                }
                else
                {
                    lsXmlItem = Global.RandomSortList<SystemXmlItem>(lsXmlItem);
                    lsXmlItem = lsXmlItem.GetRange(0, 4);
                }
                List<QiangGouItemData> qiangGouItemDataList = new List<QiangGouItemData>();
                for (int i = 0; i < lsXmlItem.Count; i++)
                {
                    qiangGouItemDataList.Add(new QiangGouItemData
                    {
                        QiangGouID = lsXmlItem[i].GetIntValue("ID", -1),
                        Group = lsXmlItem[i].GetIntValue("Group", -1),
                        ItemID = lsXmlItem[i].GetIntValue("ID", -1),
                        GoodsID = lsXmlItem[i].GetIntValue("GoodsID", -1),
                        StartTime = startTime,
                        EndTime = "",
                        IsTimeOver = 0,
                        SinglePurchase = lsXmlItem[i].GetIntValue("SinglePurchase", -1),
                        FullPurchase = lsXmlItem[i].GetIntValue("FullPurchase", -1),
                        FullHasPurchase = 0,
                        SingleHasPurchase = 0,
                        CurrentRoleID = 0,
                        DaysTime = lsXmlItem[i].GetIntValue("DaysTime", -1),
                        Price = lsXmlItem[i].GetIntValue("Price", -1),
                        Random = lsXmlItem[i].GetIntValue("Random", -1),
                        OrigPrice = lsXmlItem[i].GetIntValue("OrigPrice", -1),
                        Type = 2
                    });
                }
                result = qiangGouItemDataList;
            }
            return result;
        }

        
        public static int IsRoleHasEnoughMoney(GameClient client, int totalNeedMoney, int moneyType)
        {
            int result;
            if (totalNeedMoney <= 0)
            {
                result = -20000;
            }
            else
            {
                int roleHasMoneyNum = 0;
                if (moneyType <= 30)
                {
                    if (moneyType <= 8)
                    {
                        if (moneyType != 1)
                        {
                            if (moneyType == 8)
                            {
                                roleHasMoneyNum = client.ClientData.YinLiang;
                            }
                        }
                        else
                        {
                            roleHasMoneyNum = client.ClientData.Money1;
                        }
                    }
                    else
                    {
                        switch (moneyType)
                        {
                            case 13:
                                roleHasMoneyNum = GameManager.ClientMgr.GetTianDiJingYuanValue(client);
                                break;
                            case 14:
                                roleHasMoneyNum = GameManager.ClientMgr.GetJunGongValue(client);
                                break;
                            default:
                                if (moneyType != 20)
                                {
                                    if (moneyType == 30)
                                    {
                                        roleHasMoneyNum = GameManager.ClientMgr.GetZhuangBeiJiFenValue(client);
                                    }
                                }
                                else
                                {
                                    roleHasMoneyNum = GameManager.ClientMgr.GetLieShaValue(client);
                                }
                                break;
                        }
                    }
                }
                else if (moneyType <= 90)
                {
                    if (moneyType != 40)
                    {
                        if (moneyType == 90)
                        {
                            roleHasMoneyNum = GameManager.ClientMgr.GetZhanHunValue(client);
                        }
                    }
                    else
                    {
                        roleHasMoneyNum = client.ClientData.UserMoney;
                    }
                }
                else if (moneyType != 101)
                {
                    switch (moneyType)
                    {
                        case 110:
                            roleHasMoneyNum = GameManager.ClientMgr.GetTreasureJiFen(client);
                            break;
                        case 111:
                            roleHasMoneyNum = GameManager.ClientMgr.GetTreasureXueZuan(client);
                            break;
                        default:
                            switch (moneyType)
                            {
                                case 160:
                                    roleHasMoneyNum = client.ClientData.TeamRongYao;
                                    break;
                                case 162:
                                    roleHasMoneyNum = client.ClientData.TeamPoint;
                                    break;
                                case 163:
                                    roleHasMoneyNum = client.ClientData.LuckStar;
                                    break;
                            }
                            break;
                    }
                }
                else
                {
                    roleHasMoneyNum = GameManager.ClientMgr.GetZaiZaoValue(client);
                }
                if (roleHasMoneyNum < totalNeedMoney)
                {
                    result = -moneyType;
                }
                else
                {
                    result = 1;
                }
            }
            return result;
        }

        
        public static int SubRoleMoneyForGoods(GameClient client, int totalNeedMoney, int moneyType, string strFrom)
        {
            int result2;
            if (totalNeedMoney <= 0)
            {
                result2 = -20000;
            }
            else
            {
                bool result = true;
                if (moneyType <= 20)
                {
                    if (moneyType <= 8)
                    {
                        if (moneyType == 1)
                        {
                            result = GameManager.ClientMgr.SubMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, totalNeedMoney, strFrom);
                            goto IL_1E4;
                        }
                        if (moneyType == 8)
                        {
                            result = GameManager.ClientMgr.SubUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, totalNeedMoney, strFrom, false);
                            goto IL_1E4;
                        }
                    }
                    else
                    {
                        switch (moneyType)
                        {
                            case 13:
                                GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, -totalNeedMoney, strFrom, true, true, false);
                                goto IL_1E4;
                            case 14:
                                GameManager.ClientMgr.ModifyJunGongValue(client, -totalNeedMoney, true, true);
                                goto IL_1E4;
                            default:
                                if (moneyType == 20)
                                {
                                    GameManager.ClientMgr.ModifyLieShaValue(client, -totalNeedMoney, true, true);
                                    goto IL_1E4;
                                }
                                break;
                        }
                    }
                }
                else if (moneyType <= 40)
                {
                    if (moneyType == 30)
                    {
                        GameManager.ClientMgr.ModifyZhuangBeiJiFenValue(client, -totalNeedMoney, true, true);
                        goto IL_1E4;
                    }
                    if (moneyType == 40)
                    {
                        GameManager.ClientMgr.SubUserMoney(client, -totalNeedMoney, strFrom, true, true, true, true, DaiBiSySType.None);
                        goto IL_1E4;
                    }
                }
                else
                {
                    if (moneyType == 90)
                    {
                        GameManager.ClientMgr.ModifyZhanHunValue(client, -totalNeedMoney, true, true);
                        goto IL_1E4;
                    }
                    switch (moneyType)
                    {
                        case 110:
                            GameManager.ClientMgr.ModifyTreasureJiFenValue(client, -totalNeedMoney, strFrom, true);
                            goto IL_1E4;
                        case 111:
                            GameManager.ClientMgr.ModifyTreasureXueZuanValue(client, -totalNeedMoney, true, true);
                            goto IL_1E4;
                        default:
                            switch (moneyType)
                            {
                                case 160:
                                    GameManager.ClientMgr.ModifyTeamRongYaoValue(client, -totalNeedMoney, strFrom, false);
                                    goto IL_1E4;
                                case 162:
                                    GameManager.ClientMgr.ModifyTeamPointValue(client, -totalNeedMoney, strFrom, false);
                                    goto IL_1E4;
                                case 163:
                                    GameManager.ClientMgr.ModifyLuckStarValue(client, -totalNeedMoney, strFrom, false, DaiBiSySType.None);
                                    goto IL_1E4;
                            }
                            break;
                    }
                }
                result = false;
                IL_1E4:
                if (!result)
                {
                    result2 = -moneyType - 10000;
                }
                else
                {
                    result2 = 1;
                }
            }
            return result2;
        }

        
        public static bool IsGuWuMap(int mapCode)
        {
            bool result;
            lock (Global.GuWuMapSet)
            {
                if (Global.GuWuMapSet.Count == 0)
                {
                    Global.LoadGuWuMaps();
                }
                result = Global.GuWuMapSet.Contains(mapCode);
            }
            return result;
        }

        
        public static void LoadGuWuMaps()
        {
            lock (Global.GuWuMapSet)
            {
                Global.GuWuMapSet.Clear();
                int[] guWuMapArray = GameManager.systemParamsList.GetParamValueIntArrayByName("GuWuMap", ',');
                if (guWuMapArray == null || guWuMapArray.Length == 0)
                {
                    Global.GuWuMapSet.Add(int.MaxValue);
                }
                else
                {
                    foreach (int code in guWuMapArray)
                    {
                        Global.GuWuMapSet.Add(code);
                    }
                }
            }
        }

        
        public static void LoadAutoReviveMaps()
        {
            lock (Global.AutoReviveMapSet)
            {
                Global.AutoReviveMapSet.Clear();
                int[] AutoReviveMapArray = GameManager.systemParamsList.GetParamValueIntArrayByName("ChongShengMap", ',');
                if (AutoReviveMapArray == null || AutoReviveMapArray.Length == 0)
                {
                    Global.AutoReviveMapSet.Add(int.MaxValue);
                }
                else
                {
                    foreach (int code in AutoReviveMapArray)
                    {
                        Global.AutoReviveMapSet.Add(code);
                    }
                }
            }
        }

        
        public static bool IsAutoReviveMap(int nMapCode)
        {
            bool result;
            lock (Global.AutoReviveMapSet)
            {
                if (Global.AutoReviveMapSet.Count == 0)
                {
                    Global.LoadAutoReviveMaps();
                }
                result = Global.AutoReviveMapSet.Contains(nMapCode);
            }
            return result;
        }

        
        public static void InitGuMuMapCodes()
        {
            List<string> lsLevelMap = GameManager.systemParamsList.GetParamValueStringListByName("GuMuLevelMapList", ',');
            if (null != lsLevelMap)
            {
                for (int i = 0; i < lsLevelMap.Count; i++)
                {
                    string levelsMap = lsLevelMap[i];
                    int[] arr = Global.String2IntArray(levelsMap, '_');
                    if (3 == arr.Length)
                    {
                        Global.AddGuMuMapCode(arr[2]);
                    }
                }
            }
        }

        
        public static void AddGuMuMapCode(int mapID)
        {
            lock (Global.ListGuMuMap)
            {
                if (Global.ListGuMuMap.IndexOf(mapID) < 0)
                {
                    Global.ListGuMuMap.Add(mapID);
                }
            }
        }

        
        public static void ProcessGuMuMapTimeLimit(GameClient client, long elapseTicks)
        {
            if (Global.IsInGuMuMap(client))
            {
                DBRoleBufferManager.ProcessGuMu(client, elapseTicks);
            }
        }

        
        public static bool IsInGuMuMap(GameClient client)
        {
            return Global.ListGuMuMap.IndexOf(client.ClientData.MapCode) >= 0;
        }

        
        public static int GetAutoGiveGuMuTime(GameClient client)
        {
            BufferData bufferData = Global.GetBufferDataByID(client, 34);
            if (bufferData != null)
            {
                if (bufferData.StartTime == (long)TimeUtil.NowDateTime().DayOfYear)
                {
                    return (int)Math.Max(0L, bufferData.BufferVal);
                }
            }
            return 0;
        }

        
        public static void AddGuMuMapTime(GameClient client, int autoGiveSeconds, int goodsGiveSeconds)
        {
            Global.UpdateBufferData(client, BufferItemTypes.GuMuTimeLimit, new double[]
            {
                (double)autoGiveSeconds / 60.0,
                (double)goodsGiveSeconds / 60.0
            }, 0, true);
            if (autoGiveSeconds > 0 || goodsGiveSeconds > 0)
            {
                BufferData bufferData = Global.GetBufferDataByID(client, 34);
                if (bufferData != null)
                {
                    int totalHasMinutes = (int)((bufferData.BufferVal + (long)bufferData.BufferSecs) / 60L);
                }
            }
        }

        
        public static int GetGuMuMapCodeByRoleLevel(int roleLevel)
        {
            List<string> lsLevelMap = GameManager.systemParamsList.GetParamValueStringListByName("GuMuLevelMapList", ',');
            for (int i = 0; i < lsLevelMap.Count; i++)
            {
                string levelsMap = lsLevelMap[i];
                int[] arr = Global.String2IntArray(levelsMap, '_');
                if (3 == arr.Length && roleLevel >= arr[0] && roleLevel <= arr[1])
                {
                    return arr[2];
                }
            }
            return -1;
        }

        
        public static void GiveGuMuTimeLimitAward(GameClient client)
        {
            int todayID = TimeUtil.NowDateTime().DayOfYear;
            int lastGiveDayID = Global.GetRoleParamsInt32FromDB(client, "GuMuAwardDayID");
            if (todayID != lastGiveDayID)
            {
                int[] arrAward = GameManager.systemParamsList.GetParamValueIntArrayByName("GuMuTimeLimitAward", ',');
                if (null != arrAward)
                {
                    if (3 == arrAward.Length)
                    {
                        int awardMinutes = arrAward[1];
                        if (Global.IsVip(client))
                        {
                            awardMinutes = arrAward[2];
                        }
                        double awardmuti = 0.0;
                        JieRiMultAwardActivity activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
                        if (null != activity)
                        {
                            JieRiMultConfig config = activity.GetConfig(4);
                            if (null != config)
                            {
                                awardmuti += config.GetMult();
                            }
                        }
                        awardmuti = Math.Max(1.0, awardmuti);
                        Global.AddGuMuMapTime(client, (int)((double)(awardMinutes * 60) * awardmuti), 0);
                        Global.SaveRoleParamsInt32ValueToDB(client, "GuMuAwardDayID", todayID, true);
                        SpecPriorityActivity spAct = HuodongCachingMgr.GetSpecPriorityActivity();
                        if (null != spAct)
                        {
                            spAct.AutoGiveSpecialAward(client, false);
                        }
                    }
                }
            }
        }

        
        public static void TryGiveGuMuTimeLimitAwardOnLevelUpTo30(GameClient client, int oldLevel)
        {
            int[] arrAward = GameManager.systemParamsList.GetParamValueIntArrayByName("GuMuTimeLimitAward", ',');
            if (null != arrAward)
            {
                if (3 == arrAward.Length)
                {
                    if (oldLevel + 1 == arrAward[0] && client.ClientData.Level == arrAward[0])
                    {
                        Global.GiveGuMuTimeLimitAward(client);
                    }
                }
            }
        }

        
        public static void TryGiveGuMuTimeLimitAwardOnBecomeVip(GameClient client, bool isVipBefore)
        {
            if (!isVipBefore && Global.IsVip(client))
            {
                int[] arrAward = GameManager.systemParamsList.GetParamValueIntArrayByName("GuMuTimeLimitAward", ',');
                if (3 == arrAward.Length)
                {
                    int awardMinutes = arrAward[2] - arrAward[1];
                    if (awardMinutes > 0)
                    {
                        int secs = Global.GetAutoGiveGuMuTime(client) + awardMinutes * 60;
                        Global.AddGuMuMapTime(client, secs, 0);
                    }
                }
            }
        }

        
        public static bool CanEnterIfMapIsGuMu(GameClient client, int mapCode)
        {
            bool result;
            if (Global.ListGuMuMap.IndexOf(mapCode) < 0)
            {
                result = true;
            }
            else if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.GuZhanChang, true))
            {
                result = false;
            }
            else
            {
                BufferData bufferData = Global.GetBufferDataByID(client, 34);
                if (bufferData == null || Global.IsBufferDataOver(bufferData, 0L))
                {
                    GameManager.LuaMgr.Error(client, GLang.GetLang(361, new object[0]), 0);
                    result = false;
                }
                else
                {
                    result = true;
                }
            }
            return result;
        }

        
        public static void InitVipGumuExpMultiple()
        {
            double[] expRateArr = GameManager.systemParamsList.GetParamValueDoubleArrayByName("GuMuVipExpMultiple", ',');
            if (null != expRateArr)
            {
                int i = 0;
                while (i < expRateArr.Length && i < 3)
                {
                    Global._VipGumuExpMultiple[i] = expRateArr[i];
                    i++;
                }
            }
        }

        
        public static double GetVipGuMuExperienceMultiple(GameClient client)
        {
            double ret = 0.0;
            if (Global.IsInGuMuMap(client))
            {
                int vipType = Global.GetVipType(client);
                if (1 == vipType)
                {
                    ret = Global._VipGumuExpMultiple[0];
                }
                if (3 == vipType)
                {
                    ret = Global._VipGumuExpMultiple[1];
                }
                if (6 == vipType)
                {
                    ret = Global._VipGumuExpMultiple[2];
                }
            }
            ret -= 1.0;
            return Global.GMax(0.0, ret);
        }

        
        public static int GotoGuMuMap(GameClient client)
        {
            int ret = -1;
            int mapCode = Global.GetGuMuMapCodeByRoleLevel(client.ClientData.ChangeLifeCount);
            if (mapCode > 0)
            {
                GameManager.LuaMgr.GotoMap(client, mapCode, -1, -1, -1);
                ret = 1;
            }
            return ret;
        }

        
        public static void ProcessLeaveGuMuMap(GameClient client)
        {
            if (Global.IsInGuMuMap(client))
            {
                BufferData bufferData = Global.GetBufferDataByID(client, 34);
                if (bufferData != null)
                {
                    GameManager.ClientMgr.NotifyBufferData(client, bufferData);
                }
            }
        }

        
        public static bool IsGuMuTimeOver(GameClient client)
        {
            int todayID = TimeUtil.NowDateTime().DayOfYear;
            int lastGiveDayID = Global.GetRoleParamsInt32FromDB(client, "GuMuAwardDayID");
            if (todayID != lastGiveDayID)
            {
                Global.GiveGuMuTimeLimitAward(client);
            }
            BufferData bufferData = Global.GetBufferDataByID(client, 34);
            return bufferData == null || Global.IsBufferDataOver(bufferData, 0L);
        }

        
        public static bool IsMingJieMap(int mapCode)
        {
            return Global.ListMingJieMap.IndexOf(mapCode) >= 0;
        }

        
        public static void InitMingJieMapCodeList()
        {
            int[] mapCodeArr = GameManager.systemParamsList.GetParamValueIntArrayByName("MingJieMapList", ',');
            if (null != mapCodeArr)
            {
                for (int i = 0; i < mapCodeArr.Length; i++)
                {
                    Global.AddMingJieMapCode(mapCodeArr[i]);
                }
            }
        }

        
        public static void AddMingJieMapCode(int mapID)
        {
            lock (Global.ListMingJieMap)
            {
                if (Global.ListMingJieMap.IndexOf(mapID) < 0)
                {
                    Global.ListMingJieMap.Add(mapID);
                }
            }
        }

        
        public static void GotoMingJieTimeLimitMap(GameClient client, int mapCode, int addSeconds)
        {
            if (addSeconds > 0 && mapCode > 0 && Global.ListMingJieMap.IndexOf(mapCode) >= 0)
            {
                Global.UpdateBufferData(client, BufferItemTypes.MingJieMapLimit, new double[]
                {
                    (double)addSeconds / 60.0
                }, 1, true);
                GameManager.LuaMgr.GotoMap(client, mapCode, -1, -1, -1);
            }
        }

        
        public static void ProcessMingJieMapTimeLimit(GameClient client, long elapseTicks)
        {
            if (Global.ListMingJieMap.IndexOf(client.ClientData.MapCode) >= 0)
            {
                DBRoleBufferManager.ProcessMingJieBuffer(client, elapseTicks);
            }
        }

        
        public static int GetBossFuBenCanFreeEnterNum(GameClient client)
        {
            int fuBenID = Global.FindBossFuBenIDByRoleLevel(client.ClientData.Level);
            int result;
            if (fuBenID <= 0)
            {
                result = 0;
            }
            else
            {
                SystemXmlItem systemFuBenItem = null;
                if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
                {
                    result = 0;
                }
                else
                {
                    int freeEnterNumber = systemFuBenItem.GetIntValue("EnterNumber", -1);
                    if (Global.IsVip(client))
                    {
                        freeEnterNumber += 2;
                    }
                    result = freeEnterNumber;
                }
            }
            return result;
        }

        
        public static int GetBossFuBenCanExtEnterNum(GameClient client)
        {
            int bossFuBenExtraEnterNum = Math.Max(0, Global.GetRoleParamsInt32FromDB(client, "BossFuBenNum"));
            return Math.Max(0, bossFuBenExtraEnterNum);
        }

        
        public static int EnterBossFuBen(GameClient client)
        {
            int fuBenID = Global.FindBossFuBenIDByRoleLevel(client.ClientData.Level);
            int result;
            if (fuBenID <= 0)
            {
                result = -1;
            }
            else
            {
                SystemXmlItem systemFuBenItem = null;
                if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
                {
                    result = -2;
                }
                else
                {
                    int minLevel = systemFuBenItem.GetIntValue("MinLevel", -1);
                    int maxLevel = systemFuBenItem.GetIntValue("MaxLevel", -1);
                    if (maxLevel <= 0)
                    {
                        maxLevel = 1000;
                    }
                    int copyType = systemFuBenItem.GetIntValue("CopyType", -1);
                    int freeEnterNumber = systemFuBenItem.GetIntValue("EnterNumber", -1);
                    int finishNumber = systemFuBenItem.GetIntValue("FinishNumber", -1);
                    int toMapCode = systemFuBenItem.GetIntValue("MapCode", -1);
                    if (client.ClientData.Level < minLevel || client.ClientData.Level > maxLevel)
                    {
                        result = -3;
                    }
                    else
                    {
                        FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
                        int haveFinishNum = 0;
                        int haveEnterNum = Global.GetFuBenEnterNum(fuBenData, out haveFinishNum);
                        int canFreeEnterNumber = Global.GetBossFuBenCanFreeEnterNum(client);
                        int canExtEnterNumber = Global.GetBossFuBenCanExtEnterNum(client);
                        if (haveEnterNum >= canFreeEnterNumber)
                        {
                            if (canExtEnterNumber <= 0)
                            {
                                return -4;
                            }
                        }
                        if (haveEnterNum >= canFreeEnterNumber)
                        {
                            Global.UpdateBossFuBenExtraEnterNum(client, -1);
                        }
                        string[] dbFields = Global.ExecuteDBCmd(10049, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
                        if (dbFields == null || dbFields.Length < 2)
                        {
                            result = -5;
                        }
                        else
                        {
                            int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);
                            if (0 == copyType)
                            {
                                Global.UpdateFuBenData(client, fuBenID, 1, 0);
                                GameMap gameMap = null;
                                if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                                {
                                    result = -6;
                                }
                                else
                                {
                                    client.ClientData.FuBenSeqID = fuBenSeqID;
                                    FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, 0, fuBenID);
                                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
                                    result = 1;
                                }
                            }
                            else
                            {
                                result = -7;
                            }
                        }
                    }
                }
            }
            return result;
        }

        
        public static void UpdateBossFuBenExtraEnterNum(GameClient client, int addNum)
        {
            int oldNum = Global.GetRoleParamsInt32FromDB(client, "BossFuBenNum");
            int nowNum = Math.Max(0, oldNum + addNum);
            Global.SaveRoleParamsInt32ValueToDB(client, "BossFuBenNum", nowNum, true);
        }

        
        public static void SwitchBossFuBenEnterNum(GameClient client)
        {
            if (client.ClientData.Level >= 2)
            {
                int preBossFuBenID = Global.FindBossFuBenIDByRoleLevel(client.ClientData.Level - 1);
                int curBossFuBenID = Global.FindBossFuBenIDByRoleLevel(client.ClientData.Level);
                if (preBossFuBenID > 0 && curBossFuBenID > 0 && preBossFuBenID != curBossFuBenID)
                {
                    FuBenData preFubenData = Global.GetFuBenData(client, preBossFuBenID);
                    FuBenData curFubenData = Global.GetFuBenData(client, curBossFuBenID);
                    if (null != preFubenData)
                    {
                        int nFinishNum;
                        int haveEnterNum = Global.GetFuBenEnterNum(preFubenData, out nFinishNum);
                        Global.UpdateFuBenData(client, curBossFuBenID, Math.Max(0, haveEnterNum), 0);
                    }
                }
            }
        }

        
        public static int FindBossFuBenIDByRoleLevel(int roleLevel)
        {
            int[] jingYanTaFuBenIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("BossFuBenIDs", ',');
            int result;
            if (jingYanTaFuBenIDs == null || jingYanTaFuBenIDs.Length <= 0)
            {
                result = 0;
            }
            else
            {
                SystemXmlItem systemFuBenItem = null;
                for (int i = 0; i < jingYanTaFuBenIDs.Length; i++)
                {
                    if (GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(jingYanTaFuBenIDs[i], out systemFuBenItem))
                    {
                        int minLevel = systemFuBenItem.GetIntValue("MinLevel", -1);
                        int maxLevel = systemFuBenItem.GetIntValue("MaxLevel", -1);
                        if (maxLevel <= 0)
                        {
                            maxLevel = 1000;
                        }
                        if (roleLevel >= minLevel && roleLevel <= maxLevel)
                        {
                            return systemFuBenItem.GetIntValue("ID", -1);
                        }
                    }
                }
                result = 0;
            }
            return result;
        }

        
        public static int GetBossFuBenMinLevel()
        {
            int myMinLevel = 9999;
            int[] jingYanTaFuBenIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("BossFuBenIDs", ',');
            int result;
            if (jingYanTaFuBenIDs == null || jingYanTaFuBenIDs.Length <= 0)
            {
                result = 0;
            }
            else
            {
                SystemXmlItem systemFuBenItem = null;
                for (int i = 0; i < jingYanTaFuBenIDs.Length; i++)
                {
                    if (GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(jingYanTaFuBenIDs[i], out systemFuBenItem))
                    {
                        int minLevel = systemFuBenItem.GetIntValue("MinLevel", -1);
                        myMinLevel = Math.Min(myMinLevel, minLevel);
                    }
                }
                result = myMinLevel;
            }
            return result;
        }

        
        public static void NotifySelfAddKaoHuoTime(GameClient client, int addMinutes)
        {
            if (addMinutes > 0)
            {
                string msg = string.Format("恭喜您获得{0}分钟烤火时间,在龙城火堆旁可收获大量经验", addMinutes);
                GameManager.LuaMgr.NotifyImportantMsg(client, msg, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
            }
        }

        
        public static int GetRoleReliveType(GameClient client)
        {
            GameMap gameMap;
            int result;
            if (GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap) && null != gameMap)
            {
                result = gameMap.RealiveMode;
            }
            else
            {
                result = -1;
            }
            return result;
        }

        
        public static int GetRoleReliveWaitingSecs(GameClient client)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];
            int result;
            if (null != gameMap)
            {
                if (gameMap.RealiveMode <= 0)
                {
                    result = 30;
                }
                else
                {
                    result = gameMap.RealiveTime;
                }
            }
            else
            {
                result = 0;
            }
            return result;
        }

        
        private static List<int> GetManuLearnSkill(GameClient client)
        {
            List<int> lsManuSkill = new List<int>();
            for (int i = 0; i < GameManager.SystemMagicsMgr.SystemXmlItemDict.Count; i++)
            {
                SystemXmlItem systemMagic = GameManager.SystemMagicsMgr.SystemXmlItemDict.Values.ElementAt(i);
                if (null != systemMagic)
                {
                    int autoStart = systemMagic.GetIntValue("AutoStart", -1);
                    if (0 == autoStart)
                    {
                        int toOcuupation = systemMagic.GetIntValue("ToOcuupation", -1);
                        int nOcc = Global.CalcOriginalOccupationID(client);
                        if (nOcc == toOcuupation)
                        {
                            lsManuSkill.Add(systemMagic.GetIntValue("ID", -1));
                        }
                    }
                }
            }
            return lsManuSkill;
        }

        
        public static bool HasNotLearnManuSkill(GameClient client)
        {
            List<int> lsSkill = Global.GetManuLearnSkill(client);
            for (int i = 0; i < lsSkill.Count; i++)
            {
                if (null == Global.GetSkillDataByID(client, lsSkill[i]))
                {
                    return true;
                }
            }
            return false;
        }

        
        public static bool CanLearnManuSkill(GameClient client)
        {
            List<int> lsSkill = Global.GetManuLearnSkill(client);
            for (int i = 0; i < lsSkill.Count; i++)
            {
                if (null == Global.GetSkillDataByID(client, lsSkill[i]))
                {
                    if (Global.CanLearnSkill(client, lsSkill[i]))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        
        public static bool LearnAllManuSkills(GameClient client)
        {
            List<int> lsSkill = Global.GetManuLearnSkill(client);
            for (int i = 0; i < lsSkill.Count; i++)
            {
                if (null == Global.GetSkillDataByID(client, lsSkill[i]))
                {
                    return Global.LearnCareerSkill(client, lsSkill[i], 1);
                }
            }
            return false;
        }

        
        public static bool CanLearnSkill(GameClient client, int skillID)
        {
            if (null == Global.GetSkillDataByID(client, skillID))
            {
                SystemXmlItem systemMagic = null;
                if (GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
                {
                    if (Global.MU_GetUpSkillLearnCondition(client, skillID, systemMagic))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        
        private static bool LearnCareerSkill(GameClient client, int skillID, int skillLevel = 1)
        {
            skillLevel = Global.GMax(1, skillLevel);
            skillLevel = Global.GMin(3, skillLevel);
            if (null == Global.GetSkillDataByID(client, skillID))
            {
                SystemXmlItem systemMagic = null;
                if (GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
                {
                    if (Global.MU_GetUpSkillLearnCondition(client, skillID, systemMagic))
                    {
                        string skillName = Global.GetSkillNameByID(skillID);
                        int nOcc = Global.CalcOriginalOccupationID(client);
                        if (nOcc == systemMagic.GetIntValue("ToOcuupation", -1))
                        {
                            Global.AddSkillDBCommand(Global._TCPManager.TcpOutPacketPool, client, skillID, skillLevel);
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(362, new object[0]), new object[]
                            {
                                skillName
                            }), GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlyChatBox, 0);
                            return true;
                        }
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(363, new object[0]), new object[]
                        {
                            skillName
                        }), GameInfoTypeIndexes.Normal, ShowGameInfoTypes.ErrAndBox, 0);
                    }
                }
            }
            return false;
        }

        
        public static bool IsPkKing(GameClient client)
        {
            BufferData bufferData = Global.GetBufferDataByID(client, 39);
            return bufferData != null && !Global.IsBufferDataOver(bufferData, 0L);
        }

        
        public static JieriXmlData LoadEverydayActXmlData()
        {
            JieriXmlData result;
            if (null != Global.CachingEverydayActXmlData)
            {
                result = Global.CachingEverydayActXmlData;
            }
            else
            {
                JieriXmlData jieriXmlData = new JieriXmlData();
                jieriXmlData.Version = Global.CachingEverydayActXmlVersion++;
                jieriXmlData.XmlList = new List<string>();
                string fullPathFileName = Global.GameResPath("Config/EveryDayActivity/EveryDayActivity.xml");
                string xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                Global.CachingEverydayActXmlData = jieriXmlData;
                result = jieriXmlData;
            }
            return result;
        }

        
        public static JieriXmlData LoadSpecActXmlData()
        {
            JieriXmlData result;
            if (null != Global.CachingSpecActXmlData)
            {
                result = Global.CachingSpecActXmlData;
            }
            else
            {
                JieriXmlData jieriXmlData = new JieriXmlData();
                jieriXmlData.Version = Global.CachingSpecActXmlVersion++;
                jieriXmlData.XmlList = new List<string>();
                string fullPathFileName = Global.GameResPath("Config/SpecialActivity/SpecialActivityTime.xml");
                string xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                fullPathFileName = Global.GameResPath("Config/SpecialActivity/SpecialActivity.xml");
                xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                Global.CachingSpecActXmlData = jieriXmlData;
                result = jieriXmlData;
            }
            return result;
        }

        
        public static JieriXmlData LoadSpecPriorityActXmlData()
        {
            JieriXmlData result;
            if (null != Global.CachingSpecPriorityActXmlData)
            {
                result = Global.CachingSpecPriorityActXmlData;
            }
            else
            {
                JieriXmlData jieriXmlData = new JieriXmlData();
                jieriXmlData.Version = Global.CachingSpecPriorityActXmlVersion++;
                jieriXmlData.XmlList = new List<string>();
                string fullPathFileName = Global.GameResPath("Config/TeQuanTiaoJian.xml");
                string xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                fullPathFileName = Global.GameResPath("Config/TeQuanJiHuo.xml");
                xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                fullPathFileName = Global.GameResPath("Config/TeQuanBoss.xml");
                xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                fullPathFileName = Global.GameResPath("Config/TeQuanJiangLi.xml");
                xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                fullPathFileName = Global.GameResPath("Config/TeQuanZhiGou.xml");
                xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                fullPathFileName = Global.GameResPath("Config/TeQuanShangCheng.xml");
                xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                fullPathFileName = Global.GameResPath("Config/TeQuanBuff.xml");
                xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                fullPathFileName = Global.GameResPath("Config/TeQuanHongBao.xml");
                xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                fullPathFileName = Global.GameResPath("Config/TeQuanChouJiang.xml");
                xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                Global.CachingSpecPriorityActXmlData = jieriXmlData;
                result = jieriXmlData;
            }
            return result;
        }

        
        public static JieriXmlData LoadThemeActXmlData()
        {
            JieriXmlData result;
            if (null != Global.CachingThemeActXmlData)
            {
                result = Global.CachingThemeActXmlData;
            }
            else
            {
                JieriXmlData ThemeXmlData = new JieriXmlData();
                ThemeXmlData.Version = Global.CachingThemeActXmlVersion++;
                ThemeXmlData.XmlList = new List<string>();
                string fullPathFileName = Global.GameResPath("Config/ThemeActivityType.xml");
                ThemeActivityConfig config = HuodongCachingMgr.GetThemeActivityConfig();
                if (null == config)
                {
                    result = null;
                }
                else
                {
                    XElement xml = config.GetFilterXElement();
                    if (null == xml)
                    {
                        result = null;
                    }
                    else
                    {
                        ThemeXmlData.XmlList.Add(xml.ToString());
                        foreach (int item in config.openList)
                        {
                            int endData = config.GetEndData(item);
                            if (endData <= 0 || !(TimeUtil.NowDateTime() > Global.GetKaiFuTime().AddDays((double)endData)))
                            {
                                fullPathFileName = Global.GameResPath("Config/" + config.GetFileName(item));
                                ThemeXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));
                            }
                        }
                        Global.CachingThemeActXmlData = ThemeXmlData;
                        result = ThemeXmlData;
                    }
                }
            }
            return result;
        }

        
        public static JieriXmlData LoadJieriXmlData()
        {
            JieriXmlData result;
            if (null != Global.CachingJieriXmlData)
            {
                result = Global.CachingJieriXmlData;
            }
            else
            {
                JieriXmlData jieriXmlData = new JieriXmlData();
                jieriXmlData.Version = Global.CachingJieriXmlVersion++;
                jieriXmlData.XmlList = new List<string>();
                string fullPathFileName = Global.GameResPath("Config/JieRiGifts/MuJieRiType.xml");
                string xmlstr = File.ReadAllText(fullPathFileName);
                jieriXmlData.XmlList.Add(xmlstr);
                JieriActivityConfig config = HuodongCachingMgr.GetJieriActivityConfig();
                if (null == config)
                {
                    result = null;
                }
                else
                {
                    foreach (int item in config.openList)
                    {
                        if (item == 67)
                        {
                            JieRiCZQGActivity act = HuodongCachingMgr.GetJieRiCZQGActivity();
                            if (act == null || UserMoneyMgr.getInstance().PlatformOpenStateVavle == 0)
                            {
                                jieriXmlData.XmlList.Add("");
                                continue;
                            }
                        }
                        else if (item == 71)
                        {
                            JieriSuperInputActivity act2 = HuodongCachingMgr.GetJieRiSuperInputActivity();
                            if (act2 == null || act2.PlatformOpenStateVavle == 0)
                            {
                                jieriXmlData.XmlList.Add("");
                                continue;
                            }
                        }
                        fullPathFileName = Global.GameResPath("Config/JieRiGifts/" + config.GetFileName(item));
                        fullPathFileName = WorldLevelManager.getInstance().GetJieRiConfigFileName(fullPathFileName);
                        jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));
                    }
                    Global.CachingJieriXmlData = jieriXmlData;
                    result = jieriXmlData;
                }
            }
            return result;
        }

        
        public static void InitJieriChengHao(GameClient client, bool notifyClient = false)
        {
            int jieriChengHao = 0;
            BufferData bufferData = Global.GetBufferDataByID(client, 47);
            if (null != bufferData)
            {
                if (!Global.IsBufferDataOver(bufferData, 0L))
                {
                    jieriChengHao = 1;
                }
            }
            client.ClientData.JieriChengHao = jieriChengHao;
            if (notifyClient)
            {
                GameManager.ClientMgr.BroadcastJieriChengHao(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }
        }

        
        public static void RefreshJieriChengHao(GameClient client)
        {
            if (client.ClientData.JieriChengHao > 0)
            {
                BufferData bufferData = Global.GetBufferDataByID(client, 47);
                if (null != bufferData)
                {
                    if (!Global.IsBufferDataOver(bufferData, 0L))
                    {
                        return;
                    }
                }
                client.ClientData.JieriChengHao = 0;
                GameManager.ClientMgr.BroadcastJieriChengHao(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }
        }

        
        public static ActivitiesData GetActivitiesData(GameClient client = null)
        {
            ActivitiesData oldactivitiesData;
            if (null == Global._activitiesData)
            {
                oldactivitiesData = Global.LoadActivitiesFileData();
                Global._activitiesData = oldactivitiesData;
            }
            else
            {
                oldactivitiesData = Global._activitiesData;
            }
            ActivitiesData result;
            if (null != client)
            {
                result = new ActivitiesData
                {
                    ActivitiesXmlString = oldactivitiesData.ActivitiesXmlString
                };
            }
            else
            {
                result = oldactivitiesData;
            }
            return result;
        }

        
        public static string GetGiftExchangeFileName()
        {
            string placeholder = string.Empty;
            return Global.GetGiftExchangeFileName(out placeholder);
        }

        
        public static string GetGiftExchangeFileName(out string sectionKey)
        {
            sectionKey = "dl_app";
            string strPlat = GameManager.GameConfigMgr.GetGameConfigItemStr("platformtype", "app");
            strPlat = strPlat.ToLower();
            if (strPlat == "app")
            {
                sectionKey = "dl_app";
            }
            else if (strPlat == "yueyu")
            {
                sectionKey = "dl_yueyu";
            }
            else if (strPlat == "andrid" || strPlat == "android" || strPlat == "yyb")
            {
                sectionKey = "dl_android";
            }
            return "Config/Gifts/MU_Activities.xml";
        }

        
        public static ActivitiesData LoadActivitiesFileData()
        {
            string sectionKey = string.Empty;
            string fileName = Global.GetGiftExchangeFileName(out sectionKey);
            XElement root = new XElement("config");
            XDocument doc = new XDocument(new XDeclaration("1.0", "UTF-8", null), new object[]
            {
                root
            });
            XElement xml = XElement.Load(Global.IsolateResPath(fileName));
            IEnumerable<XElement> content = xml.Elements().First((XElement _xml) => _xml.Attribute("TypeID").Value.ToString().ToLower() == sectionKey).Elements();
            root.Add(content);
            return new ActivitiesData
            {
                ActivitiesXmlString = doc.Declaration.ToString() + doc.ToString()
            };
        }

        
        public static int GetTotalBindTongQianAndTongQianVal(GameClient client)
        {
            return Math.Max(0, client.ClientData.Money1 + client.ClientData.YinLiang);
        }

        
        public static bool SubBindTongQianAndTongQian(GameClient client, int money, string strFrom)
        {
            bool result;
            if (client.ClientData.Money1 + client.ClientData.YinLiang < money)
            {
                result = false;
            }
            else
            {
                int subMoney = Math.Min(client.ClientData.Money1, money);
                if (subMoney > 0)
                {
                    if (!GameManager.ClientMgr.SubMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, subMoney, strFrom))
                    {
                        return false;
                    }
                }
                if (subMoney >= money)
                {
                    result = true;
                }
                else
                {
                    subMoney = Math.Max(0, money - subMoney);
                    if (subMoney > 0)
                    {
                        if (client.ClientData.YinLiang < subMoney)
                        {
                            return false;
                        }
                        if (!GameManager.ClientMgr.SubUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, subMoney, strFrom, false))
                        {
                            return false;
                        }
                    }
                    result = true;
                }
            }
            return result;
        }

        
        public static int CalcFixAllEquipsStrongMoney(GameClient client)
        {
            int result;
            if (null == client.ClientData.GoodsDataList)
            {
                result = 0;
            }
            else if (client.ClientData.GoodsDataList.Count <= 0)
            {
                result = 0;
            }
            else
            {
                List<GoodsData> goodsDataList = null;
                lock (client.ClientData.GoodsDataList)
                {
                    goodsDataList = client.ClientData.GoodsDataList.GetRange(0, client.ClientData.GoodsDataList.Count);
                }
                int totalYinLiang = 0;
                for (int i = 0; i < goodsDataList.Count; i++)
                {
                    GoodsData goodsData = goodsDataList[i];
                    if (goodsData.Using > 0)
                    {
                        int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                        if (category >= 0 && category <= 49)
                        {
                            SystemXmlItem systemGoods = null;
                            if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods) && null != systemGoods)
                            {
                                int priceTwo = systemGoods.GetIntValue("PriceTwo", -1);
                                int[] equipProps = systemGoods.GetIntArrayValue("EquipProps", ',');
                                if (equipProps != null && equipProps.Length >= 2 && priceTwo > 0)
                                {
                                    double fMaxStrong = (double)equipProps[0];
                                    if (fMaxStrong > 0.0 && (double)goodsData.Strong > 0.0)
                                    {
                                        int needYinLiang = (int)((double)priceTwo / 3.0 * (double)goodsData.Strong / fMaxStrong);
                                        needYinLiang = Global.RecalcNeedYinLiang(needYinLiang);
                                        totalYinLiang += needYinLiang;
                                    }
                                }
                            }
                        }
                    }
                }
                result = totalYinLiang;
            }
            return result;
        }

        
        public static int OneKeyFixAllEquips(GameClient client)
        {
            int totalYinLiang = 0;
            int totalFixed = 0;
            int errCode = 0;
            int needTotalYinLiang = Global.CalcFixAllEquipsStrongMoney(client);
            if (needTotalYinLiang <= 0)
            {
                errCode = -50;
            }
            else if (!Global.SubBindTongQianAndTongQian(client, needTotalYinLiang, "一键修理普通装备"))
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(365, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 27);
                errCode = -51;
            }
            else if (null == client.ClientData.GoodsDataList)
            {
                errCode = -50;
            }
            else if (client.ClientData.GoodsDataList.Count <= 0)
            {
                errCode = -50;
            }
            else
            {
                List<GoodsData> goodsDataList = null;
                lock (client.ClientData.GoodsDataList)
                {
                    goodsDataList = client.ClientData.GoodsDataList.GetRange(0, client.ClientData.GoodsDataList.Count);
                }
                int totalFixedEquipNum = 0;
                for (int i = 0; i < goodsDataList.Count; i++)
                {
                    GoodsData goodsData = goodsDataList[i];
                    if (goodsData.Using > 0)
                    {
                        int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                        if (category >= 0 && category <= 49)
                        {
                            if (goodsData.Strong > 0)
                            {
                                GameManager.ClientMgr.SubEquipStrong(client, goodsData, goodsData.Strong);
                                totalFixedEquipNum++;
                            }
                        }
                    }
                }
                totalYinLiang += needTotalYinLiang;
                totalFixed += totalFixedEquipNum;
            }
            int RebornErrCode = 0;
            int needRebornYinLiang = RebornEquip.CalcFixAllEquipsStrongMoney(client);
            if (needRebornYinLiang <= 0)
            {
                RebornErrCode = -50;
            }
            else if (!Global.SubBindTongQianAndTongQian(client, needRebornYinLiang, "一键修理重生装备"))
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(365, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 27);
                RebornErrCode = -51;
            }
            else if (null == client.ClientData.RebornGoodsDataList)
            {
                RebornErrCode = -50;
            }
            else if (client.ClientData.RebornGoodsDataList.Count <= 0)
            {
                RebornErrCode = -50;
            }
            else
            {
                List<GoodsData> RebornGoodsDataList = null;
                lock (client.ClientData.RebornGoodsDataList)
                {
                    RebornGoodsDataList = client.ClientData.RebornGoodsDataList.GetRange(0, client.ClientData.RebornGoodsDataList.Count);
                }
                int totalFixedEquipNumTemp = 0;
                for (int i = 0; i < RebornGoodsDataList.Count; i++)
                {
                    GoodsData goodsData = RebornGoodsDataList[i];
                    if (goodsData.Using > 0)
                    {
                        int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                        if (category >= 30 && category <= 38)
                        {
                            if (goodsData.Strong > 0)
                            {
                                GameManager.ClientMgr.SubEquipStrong(client, goodsData, goodsData.Strong);
                                totalFixedEquipNumTemp++;
                            }
                        }
                    }
                }
                totalYinLiang += needRebornYinLiang;
                totalFixed += totalFixedEquipNumTemp;
            }
            bool baseflag = false;
            bool rebornflag = false;
            if (RebornErrCode < 0)
            {
                rebornflag = true;
            }
            if (errCode < 0)
            {
                baseflag = true;
            }
            if (rebornflag && baseflag)
            {
                if (baseflag)
                {
                    return errCode;
                }
                if (rebornflag)
                {
                    return RebornErrCode;
                }
            }
            Global.RefreshEquipPropAndNotify(client);
            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(366, new object[0]), new object[]
            {
                totalFixed,
                totalYinLiang
            }), GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
            return 1;
        }

        
        public static SystemXmlItem GetQualityUpXmlNode(int categoriy, int suitID, int qualityID)
        {
            string fileName = string.Format("Config/QualityUp.xml", new object[0]);
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(fileName));
            SystemXmlItem result;
            if (null == xml)
            {
                result = null;
            }
            else
            {
                XElement xmlNode = Global.GetXElement(xml, "Equip", "Categoriy", categoriy.ToString());
                if (null == xmlNode)
                {
                    result = null;
                }
                else
                {
                    IEnumerable<XElement> items = xmlNode.Elements("Item");
                    foreach (XElement item in items)
                    {
                        if (Convert.ToInt32((string)item.Attribute("ShouShiSuitID")) == suitID && Convert.ToInt32((string)item.Attribute("QualityID")) == qualityID)
                        {
                            return new SystemXmlItem
                            {
                                XMLNode = item
                            };
                        }
                    }
                    result = null;
                }
            }
            return result;
        }

        
        public static SystemXmlItem GetGoodsXmlNodeByQualityUp(int categoriy, int suitID, int qualityID, int occ)
        {
            foreach (SystemXmlItem item in GameManager.SystemGoods.SystemXmlItemDict.Values)
            {
                int nGoodsID = item.GetIntValue("ID", -1);
                if (categoriy == item.GetIntValue("Categoriy", -1) && suitID == item.GetIntValue("ShouShiSuitID", -1) && qualityID == item.GetIntValue("QualityID", -1) && Global.IsRoleOccupationMatchGoods(occ, nGoodsID))
                {
                    return item;
                }
            }
            return null;
        }

        
        public static bool IsLingDiZhanMapCode(GameClient client)
        {
            int lingDiID = JunQiManager.GetLingDiIDBy2MapCode(client.ClientData.MapCode);
            return lingDiID == 3;
        }

        
        public static int GetIntSomeBit(int resource, int mask)
        {
            return resource >> mask & 1;
        }

        
        public static int SetIntSomeBit(int mask, int resource, bool flag)
        {
            if (flag)
            {
                resource |= 1 << mask;
            }
            else
            {
                resource &= ~(1 << mask);
            }
            return resource;
        }

        
        public static long GetLongSomeBit(long resource, int mask)
        {
            return resource >> mask & 1L;
        }

        
        public static long SetLongSomeBit(int mask, long resource, bool flag)
        {
            if (flag)
            {
                resource |= 1L << mask;
            }
            else
            {
                resource &= ~(1L << mask);
            }
            return resource;
        }

        
        public static int GetBitValue(int whichOne)
        {
            return (int)Math.Pow(2.0, (double)(whichOne - 1));
        }

        
        public static int GetBitValue(List<int> values, int whichOne)
        {
            int index = whichOne / 32;
            int bitIndex = whichOne % 32;
            int result;
            if (values.Count <= index)
            {
                result = 0;
            }
            else
            {
                int value = values[index];
                if ((value & 1 << bitIndex) != 0)
                {
                    result = 1;
                }
                else
                {
                    result = 0;
                }
            }
            return result;
        }

        
        public static void SetBitValue(ref List<int> values, int whichOne, int toValue)
        {
            int index = whichOne / 32;
            int bitIndex = whichOne % 32;
            while (values.Count <= index)
            {
                values.Add(0);
            }
            int value = values[index];
            if (toValue == 0)
            {
                value &= ~(1 << bitIndex);
            }
            else
            {
                value |= 1 << bitIndex;
            }
            values[index] = value;
        }

        
        public static DateTime GetYueDuChouJiangStartDay()
        {
            string sTimeString = GameManager.GameConfigMgr.GetGameConfigItemStr("yueduchoujiangstartday", "2000-01-01 01:01:01");
            DateTime dateTime;
            DateTime.TryParse(sTimeString, out dateTime);
            return dateTime;
        }

        
        public static int GetYueDuChouJiangDaysNum()
        {
            return GameManager.GameConfigMgr.GetGameConfigItemInt("yueduchoujiangdaysnum", 0);
        }

        
        public static int GetRoleTotalPointFromLevelUp(GameClient client)
        {
            int totalPoint = 0;
            int changeLifeCount = client.ClientData.ChangeLifeCount;
            for (int i = 0; i <= changeLifeCount; i++)
            {
                ChangeLifeAddPointInfo tmpChangeAddPointInfo = null;
                if (Data.ChangeLifeAddPointInfoList.TryGetValue(i, out tmpChangeAddPointInfo) && tmpChangeAddPointInfo != null)
                {
                    if (i < changeLifeCount)
                    {
                        totalPoint += 99 * tmpChangeAddPointInfo.AddPoint;
                    }
                    else
                    {
                        totalPoint += (client.ClientData.Level - 1) * tmpChangeAddPointInfo.AddPoint;
                    }
                }
            }
            return totalPoint;
        }

        
        public static void InitRoleParamsInfo(GameClient client)
        {
            client.ClientData.MountPoint = (long)Global.GetRoleParamsInt32FromDB(client, "10209");
            client.ClientData.HunJing = (long)Global.GetRoleParamsInt32FromDB(client, "10208");
            client.ClientData.JueXingZhiChen = (long)Global.GetRoleParamsInt32FromDB(client, "10194");
            client.ClientData.JueXingPoint = Global.GetRoleParamsInt32FromDB(client, "10198");
            client.ClientData.KuaFuLueDuoEnterNum = Global.GetRoleParamsInt32FromDB(client, "10200");
            client.ClientData.MoBi = Global.GetRoleParamsInt32FromDB(client, "10212");
            long lval = (long)Global.GetRoleParamsInt32FromDB(client, "10201");
            client.ClientData.KuaFuLueDuoEnterNumBuyNum = (int)(lval / 100000000L);
            client.ClientData.KuaFuLueDuoEnterNumDayID = (int)(lval % 100000000L);
            client.ClientData.MoneyData[137] = (long)((ulong)client.ClientData.TotalDayLoginNum);
            client.ClientData.MoneyData[138] = (long)Global.GetRoleParamsInt32FromDB(client, "10204");
            client.ClientData.MoneyData[143] = (long)Global.GetRoleParamsInt32FromDB(client, "10159");
            client.ClientData.MoneyData[144] = (long)Global.GetRoleParamsInt32FromDB(client, "10214");
            client.ClientData.MoneyData[146] = (long)Global.GetRoleParamsInt32FromDB(client, "10217");
            client.ClientData.MoneyData[145] = (long)Global.GetRoleParamsInt32FromDB(client, "10215");
            client.ClientData.MoneyData[147] = (long)Global.GetRoleParamsInt32FromDB(client, "10216");
            client.ClientData.MoneyData[160] = (long)Global.GetRoleParamsInt32FromDB(client, "10218");
            client.ClientData.MoneyData[162] = (long)Global.GetRoleParamsInt32FromDB(client, "10223");
            client.ClientData.MoneyData[163] = (long)Global.GetRoleParamsInt32FromDB(client, "10224");
            client.ClientData.RebornCount = Global.GetRoleParamsInt32FromDB(client, "10240");
            client.ClientData.RebornLevel = Global.GetRoleParamsInt32FromDB(client, "10241");
            client.ClientData.RebornExperience = Global.GetRoleParamsInt64FromDB(client, "10242");
            client.ClientData.MoneyData[148] = RebornManager.getInstance().GetRebornExpMaxValueLeft(client, MoneyTypes.RebornExpMonster);
            client.ClientData.MoneyData[149] = RebornManager.getInstance().GetRebornExpMaxValueLeft(client, MoneyTypes.RebornExpSale);
            client.ClientData.MoneyData[158] = RebornManager.getInstance().GetRebornExpMaxValue(client, MoneyTypes.RebornExpMonster);
            client.ClientData.MoneyData[159] = RebornManager.getInstance().GetRebornExpMaxValue(client, MoneyTypes.RebornExpSale);
            client.ClientData.MoneyData[151] = (long)Global.GetRoleParamsInt32FromDB(client, "10246");
            client.ClientData.MoneyData[152] = (long)Global.GetRoleParamsInt32FromDB(client, "10249");
            client.ClientData.MoneyData[153] = (long)Global.GetRoleParamsInt32FromDB(client, "10250");
            client.ClientData.MoneyData[154] = (long)Global.GetRoleParamsInt32FromDB(client, "10251");
            client.ClientData.MoneyData[155] = (long)Global.GetRoleParamsInt32FromDB(client, "10252");
            client.ClientData.MoneyData[156] = (long)Global.GetRoleParamsInt32FromDB(client, "10253");
            client.ClientData.MoneyData[157] = (long)Global.GetRoleParamsInt32FromDB(client, "10254");
            client.ClientData.MoneyData[161] = (long)Global.GetRoleParamsInt32FromDB(client, "10255");
            client.ClientData.SpecialEquipLastUseTicks = Global.GetRoleParamsInt64FromDB(client, "FuHuoJieZhiCD");
            client.ClientData.IsMainOccupation = (client.ClientData.OccupationList[0] == client.ClientData.Occupation);
            int nCurVal = Global.GetRoleParamsInt32FromDB(client, "CurHP");
            int maxV = (int)RoleAlgorithm.GetMaxLifeV(client);
            if (nCurVal <= 0 || nCurVal > maxV)
            {
                client.ClientData.CurrentLifeV = maxV;
            }
            else
            {
                client.ClientData.CurrentLifeV = nCurVal;
            }
            nCurVal = Global.GetRoleParamsInt32FromDB(client, "CurMP");
            maxV = (int)RoleAlgorithm.GetMaxMagicV(client);
            if (nCurVal <= 0 || nCurVal > maxV)
            {
                client.ClientData.CurrentMagicV = maxV;
            }
            else
            {
                client.ClientData.CurrentMagicV = nCurVal;
            }
            lock (client.ClientData.PropPointMutex)
            {
                if (client.ClientData.IsFlashPlayer == 1)
                {
                    Global.SaveRoleParamsInt32ValueToDB(client, "PropStrength", 0, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, "PropIntelligence", 0, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, "PropDexterity", 0, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, "PropConstitution", 0, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, "TotalPropPoint", 0, true);
                    client.ClientData.PropStrength = 0;
                    client.ClientData.PropIntelligence = 0;
                    client.ClientData.PropDexterity = 0;
                    client.ClientData.PropConstitution = 0;
                    client.ClientData.TotalPropPoint = 0;
                }
                else if (!GameManager.TestGamePerformanceMode)
                {
                    client.ClientData.TotalPropPoint = Global.GetRoleParamsInt32FromDB(client, "TotalPropPoint");
                    client.ClientData.PropStrength = Global.GetRoleParamsInt32FromDB(client, "PropStrength");
                    client.ClientData.PropIntelligence = Global.GetRoleParamsInt32FromDB(client, "PropIntelligence");
                    client.ClientData.PropDexterity = Global.GetRoleParamsInt32FromDB(client, "PropDexterity");
                    client.ClientData.PropConstitution = Global.GetRoleParamsInt32FromDB(client, "PropConstitution");
                    int nVerifyBuffProp = Global.GetRoleParamsInt32FromDB(client, "VerifyBuffProp");
                    int nVerifyStrength = 0;
                    int nVerifyIntelligence = 0;
                    int nVerifyDexterity = 0;
                    int nVerifyConstitution = 0;
                    if (0 == nVerifyBuffProp)
                    {
                        nVerifyStrength = DBRoleBufferManager.GetBuffAddProp(client, BufferItemTypes.ADDTEMPStrength);
                        nVerifyIntelligence = DBRoleBufferManager.GetBuffAddProp(client, BufferItemTypes.ADDTEMPIntelligsence);
                        nVerifyDexterity = DBRoleBufferManager.GetBuffAddProp(client, BufferItemTypes.ADDTEMPDexterity);
                        nVerifyConstitution = DBRoleBufferManager.GetBuffAddProp(client, BufferItemTypes.ADDTEMPConstitution);
                        client.ClientData.PropStrength -= nVerifyStrength;
                        client.ClientData.PropIntelligence -= nVerifyIntelligence;
                        client.ClientData.PropDexterity -= nVerifyDexterity;
                        client.ClientData.PropConstitution -= nVerifyConstitution;
                    }
                    int PropStrengthChangeless = Global.GetRoleParamsInt32FromDB(client, "PropStrengthChangeless") - nVerifyStrength;
                    if (PropStrengthChangeless < 0 && PropStrengthChangeless + 500 <= UseFruitVerify.GetFruitAddPropLimit(client, "Strength"))
                    {
                        if (PropStrengthChangeless < 0)
                        {
                            PropStrengthChangeless += 500;
                        }
                        Global.SaveRoleParamsInt32ValueToDB(client, "PropStrengthChangeless", PropStrengthChangeless, true);
                        LogManager.WriteLog(LogTypes.SQL, string.Format("果实力量属性值异常,{0}(RoleID={1}),修正为{2}", Global.FormatRoleName4(client), client.ClientData.RoleID, PropStrengthChangeless), null, true);
                    }
                    else if (nVerifyStrength > 0)
                    {
                        Global.SaveRoleParamsInt32ValueToDB(client, "PropStrengthChangeless", PropStrengthChangeless, true);
                    }
                    int PropIntelligenceChangeless = Global.GetRoleParamsInt32FromDB(client, "PropIntelligenceChangeless") - nVerifyIntelligence;
                    if (PropIntelligenceChangeless < 0 && PropStrengthChangeless + 500 <= UseFruitVerify.GetFruitAddPropLimit(client, "Intelligence"))
                    {
                        if (PropIntelligenceChangeless < 0)
                        {
                            PropIntelligenceChangeless += 500;
                        }
                        Global.SaveRoleParamsInt32ValueToDB(client, "PropIntelligenceChangeless", PropIntelligenceChangeless, true);
                        LogManager.WriteLog(LogTypes.SQL, string.Format("果实智力属性值异常,{0}(RoleID={1}),修正为{2}", Global.FormatRoleName4(client), client.ClientData.RoleID, PropIntelligenceChangeless), null, true);
                    }
                    else if (nVerifyIntelligence > 0)
                    {
                        Global.SaveRoleParamsInt32ValueToDB(client, "PropIntelligenceChangeless", PropIntelligenceChangeless, true);
                    }
                    int PropDexterityChangeless = Global.GetRoleParamsInt32FromDB(client, "PropDexterityChangeless") - nVerifyDexterity;
                    if (PropDexterityChangeless < 0 && PropStrengthChangeless + 500 <= UseFruitVerify.GetFruitAddPropLimit(client, "Dexterity"))
                    {
                        if (PropDexterityChangeless < 0)
                        {
                            PropDexterityChangeless += 500;
                        }
                        Global.SaveRoleParamsInt32ValueToDB(client, "PropDexterityChangeless", PropDexterityChangeless, true);
                        LogManager.WriteLog(LogTypes.SQL, string.Format("果实敏捷属性值异常,{0}(RoleID={1}),修正为{2}", Global.FormatRoleName4(client), client.ClientData.RoleID, PropDexterityChangeless), null, true);
                    }
                    else if (nVerifyDexterity > 0)
                    {
                        Global.SaveRoleParamsInt32ValueToDB(client, "PropDexterityChangeless", PropDexterityChangeless, true);
                    }
                    int PropConstitutionChangeless = Global.GetRoleParamsInt32FromDB(client, "PropConstitutionChangeless") - nVerifyConstitution;
                    if (PropConstitutionChangeless < 0 && PropStrengthChangeless + 500 <= UseFruitVerify.GetFruitAddPropLimit(client, "Constitution"))
                    {
                        if (PropConstitutionChangeless < 0)
                        {
                            PropConstitutionChangeless += 500;
                        }
                        Global.SaveRoleParamsInt32ValueToDB(client, "PropConstitutionChangeless", PropConstitutionChangeless, true);
                        LogManager.WriteLog(LogTypes.SQL, string.Format("果实体力属性值异常,{0}(RoleID={1}),修正为{2}", Global.FormatRoleName4(client), client.ClientData.RoleID, PropConstitutionChangeless), null, true);
                    }
                    else if (nVerifyConstitution > 0)
                    {
                        Global.SaveRoleParamsInt32ValueToDB(client, "PropConstitutionChangeless", PropConstitutionChangeless, true);
                    }
                    int totalPointFormLevelUp = Global.GetRoleTotalPointFromLevelUp(client);
                    int totalPoint = totalPointFormLevelUp + PropStrengthChangeless + PropIntelligenceChangeless + PropDexterityChangeless + PropConstitutionChangeless;
                    if (client.ClientData.TotalPropPoint != totalPoint)
                    {
                        LogManager.WriteLog(LogTypes.SQL, string.Format("总属性值异常,{0}(RoleID={1}),从{2}修正为{3}", new object[]
                        {
                            Global.FormatRoleName4(client),
                            client.ClientData.RoleID,
                            client.ClientData.TotalPropPoint,
                            totalPoint
                        }), null, true);
                        client.ClientData.TotalPropPoint = totalPoint;
                        Global.SaveRoleParamsInt32ValueToDB(client, "TotalPropPoint", client.ClientData.TotalPropPoint, true);
                    }
                    if (client.ClientData.PropStrength < 0)
                    {
                        client.ClientData.PropStrength = PropStrengthChangeless;
                    }
                    if (client.ClientData.PropIntelligence < 0)
                    {
                        client.ClientData.PropIntelligence = PropIntelligenceChangeless;
                    }
                    if (client.ClientData.PropDexterity < 0)
                    {
                        client.ClientData.PropDexterity = PropDexterityChangeless;
                    }
                    if (client.ClientData.PropConstitution < 0)
                    {
                        client.ClientData.PropConstitution = PropConstitutionChangeless;
                    }
                    int t2 = client.ClientData.PropStrength + client.ClientData.PropIntelligence + client.ClientData.PropDexterity + client.ClientData.PropConstitution;
                    int lastt2 = t2;
                    while (t2 > totalPoint)
                    {
                        if (client.ClientData.PropStrength > PropStrengthChangeless)
                        {
                            client.ClientData.PropStrength--;
                            t2--;
                        }
                        if (client.ClientData.PropIntelligence > PropIntelligenceChangeless)
                        {
                            client.ClientData.PropIntelligence--;
                            t2--;
                        }
                        if (client.ClientData.PropDexterity > PropDexterityChangeless)
                        {
                            client.ClientData.PropDexterity--;
                            t2--;
                        }
                        if (client.ClientData.PropConstitution > PropConstitutionChangeless)
                        {
                            client.ClientData.PropConstitution--;
                            t2--;
                        }
                        if (t2 == lastt2)
                        {
                            break;
                        }
                        lastt2 = t2;
                    }
                    if (nVerifyBuffProp == 0)
                    {
                        Global.SaveRoleParamsInt32ValueToDB(client, "VerifyBuffProp", 1, true);
                    }
                    Global.SaveRoleParamsInt32ValueToDB(client, "PropStrength", client.ClientData.PropStrength, false);
                    Global.SaveRoleParamsInt32ValueToDB(client, "PropIntelligence", client.ClientData.PropIntelligence, false);
                    Global.SaveRoleParamsInt32ValueToDB(client, "PropDexterity", client.ClientData.PropDexterity, false);
                    Global.SaveRoleParamsInt32ValueToDB(client, "PropConstitution", client.ClientData.PropConstitution, false);
                }
            }
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, "AdmireDayID");
            int nCount = Global.GetRoleParamsInt32FromDB(client, "AdmireCount");
            if (nDay == nToday)
            {
                client.ClientData.AdorationCount = nCount;
            }
            else
            {
                client.ClientData.AdorationCount = 0;
                Global.SaveRoleParamsInt32ValueToDB(client, "AdmireDayID", nToday, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "AdmireCount", client.ClientData.AdorationCount, true);
            }
            nDay = Global.GetRoleParamsInt32FromDB(client, "PKKingAdmireDayID");
            nCount = Global.GetRoleParamsInt32FromDB(client, "PKKingAdmireCount");
            if (nDay == nToday)
            {
                client.ClientData.PKKingAdorationCount = nCount;
            }
            else
            {
                client.ClientData.PKKingAdorationCount = 0;
                Global.SaveRoleParamsInt32ValueToDB(client, "PKKingAdmireDayID", nToday, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PKKingAdmireCount", client.ClientData.PKKingAdorationCount, true);
            }
            client.ClientData.DayOnlineSecond = Global.GetRoleParamsInt32FromDB(client, "DayOnlineSecond");
            client.ClientData.BakDayOnlineSecond = client.ClientData.DayOnlineSecond;
            client.ClientData.DayOnlineRecSecond = TimeUtil.NOW();
            client.ClientData.SeriesLoginNum = Global.GetRoleParamsInt32FromDB(client, "SeriesLoginCount");
            client.ClientData.AutoFightGetThings = Global.GetRoleParamsInt32FromDB(client, "FightGetThings");
            client.ClientData.BloodCastleAwardPoint = Global.GetRoleParamsInt32FromDB(client, "BloodCastlePlayerPoint");
            client.ClientData.DaimonSquarePoint = Global.GetRoleParamsInt32FromDB(client, "DaimonSquarePlayerPoint");
            client.ClientData.DefaultSkillLev = Global.GetRoleParamsInt32FromDB(client, "DefaultSkillLev");
            if (client.ClientData.DefaultSkillLev == 0)
            {
                client.ClientData.DefaultSkillLev = 1;
            }
            client.ClientData.DefaultSkillUseNum = Global.GetRoleParamsInt32FromDB(client, "DefaultSkillUseNum");
            client.ClientData.OpenGridTime = Global.GetRoleParamsInt32FromDB(client, "OpenGridTick");
            client.ClientData.OpenPortableGridTime = Global.GetRoleParamsInt32FromDB(client, "OpenPortableGridTick");
            client.ClientData.MeditateTime = Global.GetRoleParamsInt32FromDB(client, "MeditateTime");
            client.ClientData.StarSoul = Global.GetRoleParamsInt32FromDB(client, "StarSoul");
            client.ClientData.YKDetail.ParseFrom(Global.GetRoleParamByName(client, "YueKaInfo"));
            client.ClientData.NextCombatForceGiftVal = HuodongCachingMgr.GetNextCombatGiftNeedVal(client);
        }

        
        public static void FixRoleSomeData(GameClient client)
        {
            ChengJiuManager.ProcessCompleteMainTaskForChengJiu(client, client.ClientData.MainTaskID);
        }

        
        public static void AutoAddRolePoint(GameClient client)
        {
            int nTotalPoint = Global.GetRoleParamsInt32FromDB(client, "TotalPropPoint");
            int nStrengthPoint = Global.GetRoleParamsInt32FromDB(client, "PropStrength");
            int nIntelligencePoint = Global.GetRoleParamsInt32FromDB(client, "PropIntelligence");
            int nDexterityPoint = Global.GetRoleParamsInt32FromDB(client, "PropDexterity");
            int nConstitutionPoint = Global.GetRoleParamsInt32FromDB(client, "PropConstitution");
            int nUsedPoint = nStrengthPoint + nIntelligencePoint + nDexterityPoint + nConstitutionPoint;
            int nRemainPoint = nTotalPoint - nUsedPoint;
            int addStrengthPoint = 0;
            int addIntelligencePoint = 0;
            int addDexterityPoint = 0;
            int addConstitutionPoint = 0;
            float addStrength = 0f;
            float addIntelligence = 0f;
            float addDexterity = 2f;
            float addConstitution = 1f;
            switch (Global.CalcOriginalOccupationID(client))
            {
                case 0:
                    addStrength = 2f;
                    break;
                case 1:
                    addIntelligence = 2f;
                    break;
                case 2:
                    addStrength = 2f;
                    break;
            }
            int total;
            for (; ; )
            {
                total = nRemainPoint;
                if (addStrength > 0f)
                {
                    total += nStrengthPoint;
                }
                if (addIntelligence > 0f)
                {
                    total += nIntelligencePoint;
                }
                if (addDexterity > 0f)
                {
                    total += nDexterityPoint;
                }
                if (addConstitution > 0f)
                {
                    total += nConstitutionPoint;
                }
                if (addConstitution > 0f && (float)total * addConstitution / (addConstitution + addStrength + addIntelligence + addDexterity) <= (float)nConstitutionPoint)
                {
                    addConstitution = 0f;
                }
                else if (addStrength > 0f && (float)total * addStrength / (addConstitution + addStrength + addIntelligence + addDexterity) <= (float)nStrengthPoint)
                {
                    addStrength = 0f;
                }
                else if (addIntelligence > 0f && (float)total * addIntelligence / (addConstitution + addStrength + addIntelligence + addDexterity) <= (float)nIntelligencePoint)
                {
                    addIntelligence = 0f;
                }
                else
                {
                    if (addDexterity <= 0f || (float)total * addDexterity / (addConstitution + addStrength + addIntelligence + addDexterity) > (float)nDexterityPoint)
                    {
                        break;
                    }
                    addDexterity = 0f;
                }
            }
            if (addStrength > 0f)
            {
                addStrengthPoint = (int)((float)total * addStrength / (addConstitution + addStrength + addIntelligence + addDexterity) - (float)nStrengthPoint);
            }
            if (addIntelligence > 0f)
            {
                addIntelligencePoint = (int)((float)total * addIntelligence / (addConstitution + addStrength + addIntelligence + addDexterity) - (float)nIntelligencePoint);
            }
            if (addDexterity > 0f)
            {
                addDexterityPoint = (int)((float)total * addDexterity / (addConstitution + addStrength + addIntelligence + addDexterity) - (float)nDexterityPoint);
            }
            if (addConstitution > 0f)
            {
                addConstitutionPoint = (int)((float)total * addConstitution / (addConstitution + addStrength + addIntelligence + addDexterity) - (float)nConstitutionPoint);
            }
            int remain = nRemainPoint - (addStrengthPoint + addIntelligencePoint + addDexterityPoint + addConstitutionPoint);
            if (addConstitution > 0f)
            {
                addConstitutionPoint += remain;
            }
            else if (addStrength > 0f)
            {
                addStrengthPoint += remain;
            }
            else if (addIntelligence > 0f)
            {
                addIntelligencePoint += remain;
            }
            else if (addDexterity > 0f)
            {
                addDexterityPoint += remain;
            }
        }

        
        public static void UpdateRoleParamsInfo(GameClient client)
        {
            if (client.ClientData.SpecialEquipLastUseTicks > 0L)
            {
                Global.SaveRoleParamsInt64ValueToDB(client, "FuHuoJieZhiCD", client.ClientData.SpecialEquipLastUseTicks, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "CurHP", client.ClientData.CurrentLifeV, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "CurMP", client.ClientData.CurrentMagicV, true);
            lock (client.ClientData.PropPointMutex)
            {
                Global.SaveRoleParamsInt32ValueToDB(client, "TotalPropPoint", client.ClientData.TotalPropPoint, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PropStrength", client.ClientData.PropStrength, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PropIntelligence", client.ClientData.PropIntelligence, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PropDexterity", client.ClientData.PropDexterity, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PropConstitution", client.ClientData.PropConstitution, true);
            }
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, "AdmireDayID");
            if (nDay != nToday)
            {
                client.ClientData.AdorationCount = 0;
                Global.SaveRoleParamsInt32ValueToDB(client, "AdmireDayID", nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "AdmireCount", client.ClientData.AdorationCount, true);
            nDay = Global.GetRoleParamsInt32FromDB(client, "PKKingAdmireDayID");
            if (nDay != nToday)
            {
                client.ClientData.PKKingAdorationCount = 0;
                Global.SaveRoleParamsInt32ValueToDB(client, "PKKingAdmireDayID", nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "PKKingAdmireCount", client.ClientData.PKKingAdorationCount, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "DayOnlineSecond", client.ClientData.DayOnlineSecond, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "SeriesLoginCount", client.ClientData.SeriesLoginNum, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "DefaultSkillLev", client.ClientData.DefaultSkillLev, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "DefaultSkillUseNum", client.ClientData.DefaultSkillUseNum, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "MeditateTime", client.ClientData.MeditateTime, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "OpenGridTick", client.ClientData.OpenGridTime, true);
            Global.SaveRoleParamsInt32ValueToDB(client, "OpenPortableGridTick", client.ClientData.OpenPortableGridTime, true);
        }

        
        public static int GetSprOffLineMin(int nRid)
        {
            GameClient client = GameManager.ClientMgr.FindClient(nRid);
            int result;
            if (null != client)
            {
                result = 0;
            }
            else
            {
                RoleBaseInfo pRoleInfo = GameManager.ClientMgr.QueryRoleBaseInfoFromDB(nRid, -1);
                if (null == pRoleInfo)
                {
                    result = 1800;
                }
                else if (pRoleInfo.LoginTime >= pRoleInfo.LogoutTime)
                {
                    result = 0;
                }
                else
                {
                    result = (int)Math.Floor((double)(Global.GMax(0L, TimeUtil.NOW() - pRoleInfo.LogoutTime) / 60000L) * 1.0);
                }
            }
            return result;
        }

        
        public static int CalcOriginalOccupationID(GameClient client)
        {
            return Global.CalcOriginalOccupationID(client.ClientData);
        }

        
        public static int CalcOriginalOccupationID(SafeClientData clientData)
        {
            return Global.CalcOriginalOccupationID(clientData.Occupation);
        }

        
        public static int CalcOriginalOccupationID(int nOccupation)
        {
            int result;
            if (nOccupation < 10)
            {
                result = nOccupation;
            }
            else
            {
                int nCount = nOccupation % 10;
                result = (nOccupation - nCount) / 10 - 1;
            }
            return result;
        }

        
        public static void CalcAttackType(GameClient client)
        {
            switch (client.ClientData.Occupation)
            {
                case 0:
                case 2:
                    client.ClientData.AttackType = 0;
                    return;
                case 1:
                case 5:
                    client.ClientData.AttackType = 1;
                    return;
            }
            if (client.ClientData.PropStrength >= client.ClientData.PropIntelligence)
            {
                client.ClientData.AttackType = 0;
            }
            else
            {
                client.ClientData.AttackType = 1;
            }
        }

        
        public static int GetAttackType(GameClient client)
        {
            return client.ClientData.AttackType;
        }

        
        public static int CalcChangeOccupationID(GameClient client)
        {
            int nCurOcc = client.ClientData.Occupation;
            int result;
            if (nCurOcc > 10)
            {
                nCurOcc++;
                result = nCurOcc;
            }
            else
            {
                nCurOcc = (nCurOcc + 1) * 10 + 1;
                result = nCurOcc;
            }
            return result;
        }

        
        public static List<GoodsData> LoadChangeOccupationNeedGoodsInfo(string sGoods, string fileName = "")
        {
            return Global.ParseGoodsDataListFromGoodsStr(sGoods, fileName);
        }

        
        public static void SetBuffDataForProp(GameClient client)
        {
            client.RoleBuffer.ClearAllTempProps();
            BufferData bufferData = Global.GetBufferDataByID(client, 52);
            if (null != bufferData)
            {
                long nowTicks = TimeUtil.NOW();
                if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                {
                    client.RoleBuffer.AddTempBaseProp(0, (double)bufferData.BufferVal, nowTicks);
                }
            }
            bufferData = Global.GetBufferDataByID(client, 53);
            if (null != bufferData)
            {
                long nowTicks = TimeUtil.NOW();
                if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                {
                    client.RoleBuffer.AddTempBaseProp(1, (double)bufferData.BufferVal, nowTicks);
                }
            }
            bufferData = Global.GetBufferDataByID(client, 54);
            if (null != bufferData)
            {
                long nowTicks = TimeUtil.NOW();
                if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                {
                    client.RoleBuffer.AddTempBaseProp(2, (double)bufferData.BufferVal, nowTicks);
                }
            }
            bufferData = Global.GetBufferDataByID(client, 55);
            if (null != bufferData)
            {
                long nowTicks = TimeUtil.NOW();
                if (nowTicks - bufferData.StartTime < (long)bufferData.BufferSecs * 1000L)
                {
                    client.RoleBuffer.AddTempBaseProp(3, (double)bufferData.BufferVal, nowTicks);
                }
            }
        }

        
        public static void SetUintProp(GameClient client, RoleData roleData)
        {
            roleData.RoleStrength = (int)RoleAlgorithm.GetStrength(client, true);
            roleData.RoleIntelligence = (int)RoleAlgorithm.GetIntelligence(client, true);
            roleData.RoleDexterity = (int)RoleAlgorithm.GetDexterity(client, true);
            roleData.RoleConstitution = (int)RoleAlgorithm.GetConstitution(client, true);
        }

        
        public static bool IsBloodCastleSceneID(int nMapID)
        {
            SceneUIClasses sceneType = Global.GetMapSceneType(nMapID);
            return sceneType == SceneUIClasses.BloodCastle;
        }

        
        public static int GetBloodCastleCopySceneIDForRole(GameClient client)
        {
            int nChangeLifeCount = client.ClientData.ChangeLifeCount;
            int nLev = client.ClientData.Level;
            foreach (BloodCastleDataInfo bcInfo in Data.BloodCastleDataInfoList.Values)
            {
                int nMin = bcInfo.MinChangeLifeNum;
                int nMax = bcInfo.MaxChangeLifeNum;
                int nMinLev = bcInfo.MinLevel;
                int nMaxLev = bcInfo.MaxLevel;
                if (nChangeLifeCount > nMin && nChangeLifeCount < nMax)
                {
                    return bcInfo.MapCode;
                }
                if (nChangeLifeCount == nMin || nChangeLifeCount == nMax)
                {
                    if (nLev >= nMinLev && nLev <= nMaxLev)
                    {
                        return bcInfo.MapCode;
                    }
                }
            }
            return -1;
        }

        
        public static bool CanEnterBloodCastleOnTime(List<string> BeginTime, int nPrepareTime)
        {
            DateTime now = TimeUtil.NowDateTime();
            string nowTime = TimeUtil.NowDateTime().ToString("HH:mm");
            bool result;
            if (null == BeginTime)
            {
                result = false;
            }
            else
            {
                for (int i = 0; i < BeginTime.Count; i++)
                {
                    DateTime staticTime = DateTime.Parse(BeginTime[i]);
                    DateTime perpareTime = staticTime.AddMinutes((double)(nPrepareTime / 60));
                    if (BeginTime[i] == nowTime || (now > staticTime && now <= perpareTime))
                    {
                        return true;
                    }
                }
                result = false;
            }
            return result;
        }

        
        public static bool CanEnterBloodCastleCopySceneOnTime(List<string> BeginTime, int nPrepareTime, out int nTimer, out string strTimer)
        {
            strTimer = null;
            nTimer = 0;
            DateTime now = TimeUtil.NowDateTime();
            string nowTime = TimeUtil.NowDateTime().ToString("HH:mm");
            bool result;
            if (null == BeginTime)
            {
                result = false;
            }
            else
            {
                for (int i = 0; i < BeginTime.Count; i++)
                {
                    DateTime staticTime = DateTime.Parse(BeginTime[i]);
                    DateTime perpareTime = staticTime.AddMinutes((double)(nPrepareTime / 60));
                    if (BeginTime[i] == nowTime || (now > staticTime && now <= perpareTime))
                    {
                        TimeSpan time = now - DateTime.Parse(BeginTime[i]);
                        strTimer = BeginTime[i];
                        nTimer = time.Minutes * 60 + time.Seconds;
                        return true;
                    }
                }
                result = false;
            }
            return result;
        }

        
        public static int QueryDayActivityEnterCountToDB(GameClient client, int nRoleID, int nDate, int nType)
        {
            int nRet = -1;
            string[] dbFields = null;
            string strDbCmd = string.Format("{0}:{1}:{2}", nRoleID, nDate, nType);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10127, strDbCmd, out dbFields, client.ServerId);
            int result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(367, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                result = nRet;
            }
            else if (dbFields.Length != 2 || Convert.ToInt32(dbFields[0]) < 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(368, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                result = nRet;
            }
            else
            {
                nRet = Global.SafeConvertToInt32(dbFields[1]);
                result = nRet;
            }
            return result;
        }

        
        public static int UpdateDayActivityEnterCountToDB(GameClient client, int nRoleID, int nDate, int nType, int nCount)
        {
            int nRet = -1;
            string[] sDBFields = null;
            string strDbCmd = string.Format("{0}:{1}:{2}", nRoleID, nDate, nType);
            string strDbCmds = string.Format("{0}:{1}:{2}:{3}", new object[]
            {
                client.ClientData.RoleID,
                nDate,
                nType,
                nCount
            });
            TCPProcessCmdResults dbRequestResultInfo = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10128, strDbCmds, out sDBFields, client.ServerId);
            int result;
            if (dbRequestResultInfo == TCPProcessCmdResults.RESULT_FAILED)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(369, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                result = nRet;
            }
            else if (sDBFields.Length != 2 || Convert.ToInt32(sDBFields[0]) < 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(370, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                result = nRet;
            }
            else
            {
                nRet = Global.SafeConvertToInt32(sDBFields[1]);
                result = nRet;
            }
            return result;
        }

        
        public static void UpdateRoleEnterActivityCount(GameClient client, SpecialActivityTypes nType)
        {
            int nDate = TimeUtil.NowDateTime().DayOfYear;
            int count = Global.QueryDayActivityEnterCountToDB(client, client.ClientData.RoleID, nDate, (int)nType);
            DailyActiveManager.ProcessCompleteDailyActivityForDailyActive(client, (int)nType);
            Global.UpdateDayActivityEnterCountToDB(client, client.ClientData.RoleID, nDate, (int)nType, count + 1);
        }

        
        public static void QueryDayActivityTotalPointInfoToDB(SpecialActivityTypes nType)
        {
            string[] dbFields = null;
            string strDbCmd = string.Format("{0}", (int)nType);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10134, strDbCmd, out dbFields, 0);
            if (dbRequestResult != TCPProcessCmdResults.RESULT_FAILED)
            {
                if (dbFields.Length == 2)
                {
                    int nPoint = Global.SafeConvertToInt32(dbFields[0]);
                    string sName = dbFields[1];
                    if (nType == SpecialActivityTypes.BloodCastle)
                    {
                        GameManager.BloodCastleCopySceneMgr.SetBloodCastleCopySceneTotalPoint(sName, nPoint);
                    }
                    if (nType == SpecialActivityTypes.DemoSque)
                    {
                        GameManager.DaimonSquareCopySceneMgr.SetDaimonSquareCopySceneTotalPoint(sName, nPoint);
                    }
                    else if (nType == SpecialActivityTypes.CampBattle)
                    {
                        BattleManager.SetTotalPointInfo(sName, nPoint);
                    }
                    else if (nType == SpecialActivityTypes.TheKingOfPK)
                    {
                        GameManager.ArenaBattleMgr.SetTotalPointInfo(sName, nPoint);
                    }
                    else if (nType == SpecialActivityTypes.AngelTemple)
                    {
                        GameManager.AngelTempleMgr.SetTotalPointInfo(sName, (long)nPoint);
                    }
                }
            }
        }

        
        public static void EnterFreshPlayerScene(GameClient client, int mapID)
        {
            SystemXmlItem systemFuBenItem = null;
            GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(mapID, out systemFuBenItem);
            int toMapCode = systemFuBenItem.GetIntValue("MapCode", -1);
            string[] dbFields = Global.ExecuteDBCmd(10049, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
            if (dbFields == null || dbFields.Length < 2)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(342, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
            }
            else
            {
                int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);
                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(343, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                }
                else
                {
                    client.ClientData.FuBenSeqID = fuBenSeqID;
                    FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, 1, mapID);
                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1, 0);
                }
            }
        }

        
        public static int GetEnterFreshPlayerScene(RoleDataEx roleData, int mapID)
        {
            SystemXmlItem systemFuBenItem = null;
            GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(mapID, out systemFuBenItem);
            int toMapCode = systemFuBenItem.GetIntValue("MapCode", -1);
            string[] dbFields = Global.ExecuteDBCmd(10049, string.Format("{0}", roleData.RoleID), 0);
            int result;
            if (dbFields == null || dbFields.Length < 2)
            {
                result = -1;
            }
            else
            {
                roleData.MapCode = toMapCode;
                if (!GameManager.TestGamePerformanceMode)
                {
                    roleData.PosX = 0;
                    roleData.PosY = 0;
                }
                else if (GameManager.TestGamePerformanceMapMode == 1)
                {
                    roleData.MapCode = 6090;
                    roleData.IsFlashPlayer = 1;
                    roleData.PosX = 5378;
                    roleData.PosY = 6256;
                }
                else
                {
                    roleData.MapCode = GameManager.TestGamePerformanceMapCode;
                    roleData.PosX = 0;
                    roleData.PosY = 0;
                }
                int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);
                result = fuBenSeqID;
            }
            return result;
        }

        
        public static void FinishFreshPlayerStatus(GameClient client)
        {
            lock (client.ClientData.PropPointMutex)
            {
                Global.SaveRoleParamsInt32ValueToDB(client, "PropStrength", 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PropIntelligence", 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PropDexterity", 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PropConstitution", 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "TotalPropPoint", 0, true);
                client.ClientData.PropStrength = 0;
                client.ClientData.PropIntelligence = 0;
                client.ClientData.PropDexterity = 0;
                client.ClientData.PropConstitution = 0;
                client.ClientData.TotalPropPoint = 0;
            }
            string[] dbRoleFields = Global.ExecuteDBCmd(10131, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
            if (dbRoleFields != null && dbRoleFields.Length == 2 && int.Parse(dbRoleFields[1]) == 1)
            {
                client.ClientData.Experience = 0L;
                client.ClientData.Level = 1;
                GameManager.ClientMgr.NotifySelfExperience(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0L);
            }
            Global.RemoveAllBufferData(client);
            Global.ProcessVipSpecialBuffer(client);
            Global.SaveRoleParamsInt32ValueToDB(client, "GuMuAwardDayID", 0, true);
            Global.GiveGuMuTimeLimitAward(client);
            Global.CalculateCombatForce(client);
            GameManager.DBCmdMgr.AddDBCmd(10133, string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
            {
                client.ClientData.RoleID,
                client.ClientData.CombatForce,
                client.ClientData.Level,
                client.ClientData.ChangeLifeCount,
                client.ClientData.YinLiang
            }), null, client.ServerId);
        }

        
        public static void ProcessLogOutWhenINFreshPlayerStatus(GameClient client)
        {
            lock (client.ClientData.PropPointMutex)
            {
                Global.SaveRoleParamsInt32ValueToDB(client, "PropStrength", 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PropIntelligence", 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PropDexterity", 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "PropConstitution", 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "TotalPropPoint", 0, true);
                client.ClientData.PropStrength = 0;
                client.ClientData.PropIntelligence = 0;
                client.ClientData.PropDexterity = 0;
                client.ClientData.PropConstitution = 0;
                client.ClientData.TotalPropPoint = 0;
            }
            Global.ExecuteDBCmd(10130, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
        }

        
        public static bool ActiveFreshPlayerBuffer(GameClient client, bool notifyPropsChanged)
        {
            int nIndex = 0;
            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, 70);
            if (bufferData != null && !Global.IsBufferDataOver(bufferData, 0L))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }
            bool result;
            if (nOldBufferGoodsIndexID == nIndex)
            {
                result = false;
            }
            else
            {
                Global.UpdateBufferData(client, BufferItemTypes.MU_FRESHPLAYERBUFF, new double[]
                {
                    (double)nIndex
                }, 1, notifyPropsChanged);
                if (notifyPropsChanged)
                {
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                    GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, false, true, 7);
                }
                result = true;
            }
            return result;
        }

        
        public static int GetDailyCircleTaskAddAward(GameClient client)
        {
            int nRet = -1;
            int nChangeLifeLev = client.ClientData.ChangeLifeCount;
            int nLev = client.ClientData.Level;
            for (int i = 0; i < Data.DailyCircleTaskAward.Count; i++)
            {
                if (nChangeLifeLev >= Data.DailyCircleTaskAward[i].MinChangeLifeLev && nChangeLifeLev <= Data.DailyCircleTaskAward[i].MaxChangeLifeLev)
                {
                    if (nChangeLifeLev != Data.DailyCircleTaskAward[i].MinChangeLifeLev || nLev >= Data.DailyCircleTaskAward[i].MinLev)
                    {
                        if (nChangeLifeLev != Data.DailyCircleTaskAward[i].MaxChangeLifeLev || nLev <= Data.DailyCircleTaskAward[i].MaxLev)
                        {
                            return i;
                        }
                    }
                }
            }
            return nRet;
        }

        
        public static int GetDailyCircleTaskIDBaseChangeLifeLev(GameClient client)
        {
            int nRet = -1;
            int nChangeLifeLev = client.ClientData.ChangeLifeCount;
            int nLevel = client.ClientData.Level;
            string sDailyCircleTaskInfo = GameManager.systemParamsList.GetParamValueByName("DailyCircleTaskInfo");
            string[] arr = sDailyCircleTaskInfo.Split(new char[]
            {
                '|'
            });
            int result;
            if (arr.Length < 0)
            {
                result = nRet;
            }
            else
            {
                for (int i = 0; i < arr.Length; i++)
                {
                    string[] sData = arr[i].Split(new char[]
                    {
                        ','
                    });
                    if (sData.Length != 6)
                    {
                        return nRet;
                    }
                    int nMin = -1;
                    if (!int.TryParse(sData[0], out nMin))
                    {
                        return nRet;
                    }
                    int minLevel = -1;
                    if (!int.TryParse(sData[1], out minLevel))
                    {
                        return nRet;
                    }
                    int nMax = -1;
                    if (!int.TryParse(sData[2], out nMax))
                    {
                        return nRet;
                    }
                    int maxLevel = -1;
                    if (!int.TryParse(sData[3], out maxLevel))
                    {
                        return nRet;
                    }
                    if (nChangeLifeLev >= nMin && nChangeLifeLev <= nMax)
                    {
                        if (nChangeLifeLev != nMin || nLevel >= minLevel)
                        {
                            if (nChangeLifeLev != nMax || nLevel <= maxLevel)
                            {
                                int nBeginNum = -1;
                                if (!int.TryParse(sData[4], out nBeginNum))
                                {
                                    return nRet;
                                }
                                int nEndNum = -1;
                                if (!int.TryParse(sData[5], out nEndNum))
                                {
                                    return nRet;
                                }
                                return Global.GetRandomNumber(nBeginNum, nEndNum + 1);
                            }
                        }
                    }
                }
                result = nRet;
            }
            return result;
        }

        
        public static TaskData TakeNewTaskForDailyCircleTask(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, GameClient client, int taskID, int nNPCID, int nID)
        {
            TaskData taskData = new TaskData
            {
                DbID = -1,
                DoingTaskID = taskID
            };
            SystemXmlItem systemTask = null;
            TaskData result;
            if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 任务不存在, 一键完成日常跑环任务失败 CMD={0}, Client={1}, RoleID={2}, TaskID={3}", new object[]
                {
                    (TCPGameServerCmds)nID,
                    Global.GetSocketRemoteEndPoint(socket, false),
                    client.ClientData.RoleID,
                    taskID
                }), null, true);
                result = taskData;
            }
            else if (!Global.CanTakeNewTask(client, taskID, systemTask))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 任务不能再接, 一键完成日常跑环任务失败 CMD={0}, Client={1}, RoleID={2}, TaskID={3}", new object[]
                {
                    (TCPGameServerCmds)nID,
                    Global.GetSocketRemoteEndPoint(socket, false),
                    client.ClientData.RoleID,
                    taskID
                }), null, true);
                result = taskData;
            }
            else
            {
                int focus = 1;
                if (Global.GetFocusTaskCount(client) >= Data.TaskMaxFocusCount)
                {
                    focus = 0;
                }
                int nStar = 5;
                string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", new object[]
                {
                    client.ClientData.RoleID,
                    nNPCID,
                    taskID,
                    focus,
                    nStar
                });
                string[] fieldsData = null;
                if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer(tcpClientPool, pool, nID, strcmd, out fieldsData, client.ServerId))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID), null, true);
                    result = taskData;
                }
                else if (Convert.ToInt32(fieldsData[3]) < 0)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer报错！！！, CMD={0}", (TCPGameServerCmds)nID), null, true);
                    result = taskData;
                }
                else
                {
                    if (null == client.ClientData.TaskDataList)
                    {
                        client.ClientData.TaskDataList = new List<TaskData>();
                    }
                    taskData.DbID = Convert.ToInt32(fieldsData[3]);
                    taskData.DoingTaskVal1 = 0;
                    taskData.DoingTaskVal2 = 0;
                    taskData.DoingTaskFocus = focus;
                    taskData.AddDateTime = Convert.ToInt64(fieldsData[2]);
                    taskData.DoneCount = 0;
                    taskData.StarLevel = nStar;
                    OldTaskData oldTaskData = Global.FindOldTaskByTaskID(client, taskID);
                    if (null != oldTaskData)
                    {
                        taskData.DoneCount = oldTaskData.DoCount;
                    }
                    Global.ProcessTaskData(client, taskData);
                    lock (client.ClientData.TaskDataList)
                    {
                        client.ClientData.TaskDataList.Add(taskData);
                    }
                    TCPOutPacket tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskData>(taskData, pool, nID);
                    tcpMgr.MySocketListener.SendData(client.ClientSocket, tcpOutPacket, true);
                    int sourceNPC = systemTask.GetIntValue("SourceNPC", -1);
                    if (sourceNPC >= 0)
                    {
                        int state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, sourceNPC, 0);
                        GameManager.ClientMgr.NotifyUpdateNPCTaskSate(tcpMgr.MySocketListener, pool, client, sourceNPC + 2130706432, state);
                    }
                    ProcessTask.Process(tcpMgr.MySocketListener, pool, client, nNPCID, nNPCID - 2130706432, -1, TaskTypes.GetSomething, null, 0, -1L, null);
                    systemTask = null;
                    if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                    {
                        int destNPC = systemTask.GetIntValue("DestNPC", -1);
                        if (-1 != destNPC && destNPC != nNPCID - 2130706432)
                        {
                            int state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, destNPC, 0);
                            GameManager.ClientMgr.NotifyUpdateNPCTaskSate(tcpMgr.MySocketListener, pool, client, destNPC + 2130706432, state);
                        }
                        string goodsName = systemTask.GetStringValue("PropsName1");
                        string goodsName2 = systemTask.GetStringValue("PropsName2");
                        int goodsID = ("" != goodsName) ? Global.GetGoodsByName(goodsName) : -1;
                        int goodsID2 = ("" != goodsName2) ? Global.GetGoodsByName(goodsName2) : -1;
                        if (goodsID >= 0)
                        {
                            ProcessTask.Process(tcpMgr.MySocketListener, pool, client, -1, -1, goodsID, TaskTypes.BuySomething, null, 0, -1L, null);
                        }
                        if (goodsID2 >= 0)
                        {
                            ProcessTask.Process(tcpMgr.MySocketListener, pool, client, -1, -1, goodsID2, TaskTypes.BuySomething, null, 0, -1L, null);
                        }
                    }
                    result = taskData;
                }
            }
            return result;
        }

        
        public static int GetTaofaTaskIDBaseChangeLifeLev(GameClient client)
        {
            int nRet = -1;
            int nChangeLifeLev = client.ClientData.ChangeLifeCount;
            int nLevel = client.ClientData.Level;
            string sDailyCircleTaskInfo = GameManager.systemParamsList.GetParamValueByName("PriceTaskInfo");
            string[] arr = sDailyCircleTaskInfo.Split(new char[]
            {
                '|'
            });
            int result;
            if (arr.Length < 0)
            {
                result = nRet;
            }
            else
            {
                for (int i = 0; i < arr.Length; i++)
                {
                    string[] sData = arr[i].Split(new char[]
                    {
                        ','
                    });
                    if (sData.Length != 6)
                    {
                        return nRet;
                    }
                    int nMin = -1;
                    if (!int.TryParse(sData[0], out nMin))
                    {
                        return nRet;
                    }
                    int minLevel = -1;
                    if (!int.TryParse(sData[1], out minLevel))
                    {
                        return nRet;
                    }
                    int nMax = -1;
                    if (!int.TryParse(sData[2], out nMax))
                    {
                        return nRet;
                    }
                    int maxLevel = -1;
                    if (!int.TryParse(sData[3], out maxLevel))
                    {
                        return nRet;
                    }
                    if (nChangeLifeLev >= nMin && nChangeLifeLev <= nMax)
                    {
                        if (nChangeLifeLev != nMin || nLevel >= minLevel)
                        {
                            if (nChangeLifeLev != nMax || nLevel <= maxLevel)
                            {
                                int nBeginNum = -1;
                                if (!int.TryParse(sData[4], out nBeginNum))
                                {
                                    return nRet;
                                }
                                int nEndNum = -1;
                                if (!int.TryParse(sData[5], out nEndNum))
                                {
                                    return nRet;
                                }
                                return Global.GetRandomNumber(nBeginNum, nEndNum + 1);
                            }
                        }
                    }
                }
                result = nRet;
            }
            return result;
        }

        
        public static int GetAdmireCount(GameClient client)
        {
            int nCount = 0;
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, "AdmireDayID");
            if (nDay == nToday)
            {
                nCount = client.ClientData.AdorationCount;
            }
            return nCount;
        }

        
        public static void ProcessIncreaseAdmireCount(GameClient client)
        {
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, "AdmireDayID");
            int nCount = Global.GetRoleParamsInt32FromDB(client, "AdmireCount");
            if (nDay == nToday)
            {
                client.ClientData.AdorationCount = nCount + 1;
            }
            else
            {
                client.ClientData.AdorationCount = 1;
                Global.SaveRoleParamsInt32ValueToDB(client, "AdmireDayID", nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "AdmireCount", client.ClientData.AdorationCount, true);
        }

        
        public static string GetForgeNeedStoneGoodsList(GoodsData goodsData)
        {
            string sNeedGoodsList = GameManager.systemParamsList.GetParamValueByName("ForgeNeedGoodsIDs");
            string[] arrNeedID = sNeedGoodsList.Split(new char[]
            {
                '|'
            });
            string result;
            if (arrNeedID.Length < 0)
            {
                result = null;
            }
            else
            {
                int nForgeLev = goodsData.Forge_level + 1;
                if (nForgeLev > 20)
                {
                    result = null;
                }
                else
                {
                    result = arrNeedID[nForgeLev];
                }
            }
            return result;
        }

        
        public static string GetForgeNeedStoneGoodsNum(GoodsData goodsData)
        {
            string sNeedGoodsList = GameManager.systemParamsList.GetParamValueByName("ForgeNeedGoodsNum");
            string[] arrNeedNum = sNeedGoodsList.Split(new char[]
            {
                '|'
            });
            string result;
            if (arrNeedNum.Length < 0)
            {
                result = null;
            }
            else
            {
                int nForgeLev = goodsData.Forge_level + 1;
                if (nForgeLev > 20)
                {
                    result = null;
                }
                else
                {
                    result = arrNeedNum[nForgeLev];
                }
            }
            return result;
        }

        
        public static int GetProtectStoneGoodsIndexForEquipAppendProp(int goodsID)
        {
            int goodsid = (int)GameManager.systemParamsList.GetParamValueIntByName("ZhuiJiaForgeLuckyGoodsIDs", -1);
            int result;
            if (goodsid == goodsID)
            {
                result = 1;
            }
            else
            {
                result = -1;
            }
            return result;
        }

        
        public static int GetEquipAppendPropNeedStoneGoodsList(GoodsData goodsData)
        {
            int[] nNeedGoodsList = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaForgeGoodsIDs", ',');
            int result;
            if (nNeedGoodsList.Length < 0 || nNeedGoodsList.Length > 81)
            {
                result = -1;
            }
            else
            {
                int AppendPropLev = goodsData.AppendPropLev + 1;
                if (AppendPropLev > 80)
                {
                    result = -1;
                }
                else
                {
                    result = nNeedGoodsList[AppendPropLev];
                }
            }
            return result;
        }

        
        public static int GetEquipAppendPropNeedStoneGoodsNum(GoodsData goodsData)
        {
            int[] nNeedGoodsNum = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaForgeGoodsNum", ',');
            int result;
            if (nNeedGoodsNum.Length < 0 || nNeedGoodsNum.Length > 81)
            {
                result = -1;
            }
            else
            {
                int AppendPropLev = goodsData.AppendPropLev + 1;
                if (AppendPropLev > 80)
                {
                    result = -1;
                }
                else
                {
                    result = nNeedGoodsNum[AppendPropLev];
                }
            }
            return result;
        }

        
        public static int GetEquipAppendPropNextLevelYinLiang(GoodsData goodsData)
        {
            int[] sNeedGoodsList = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaXiaoHaoJinBi", ',');
            int nEquipAppendProp = goodsData.AppendPropLev + 1;
            int result;
            if (nEquipAppendProp > 80)
            {
                result = 0;
            }
            else
            {
                result = sNeedGoodsList[nEquipAppendProp];
            }
            return result;
        }

        
        public static bool StartEquipAppendProp(GameClient client, GoodsData goodsData)
        {
            int percent = Global.GetEquipAppendPropPercent(client, goodsData) * 100;
            int rndNum = Global.GetRandomNumber(0, 10001);
            return rndNum <= percent;
        }

        
        public static int GetEquipAppendPropPercent(GameClient client, GoodsData goodsData)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                result = 0;
            }
            else if (null == systemGoods)
            {
                result = 0;
            }
            else if (goodsData.AppendPropLev >= 80)
            {
                result = 0;
            }
            else
            {
                if (null == Global.AppendPropLevelRocksPercent)
                {
                    Global.AppendPropLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaGoodsRate", ',');
                }
                int percent = Math.Abs(Global.AppendPropLevelRocksPercent[goodsData.AppendPropLev + 1]);
                int nVipLev = client.ClientData.VipLevel;
                int[] nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPZhuiJiaAdd", ',');
                if (nVipLev > 0 && nArry != null && nArry[nVipLev] > 0)
                {
                    percent += nArry[nVipLev];
                }
                result = Global.GMin(100, percent);
            }
            return result;
        }

        
        public static void BroadcastEquipAppendPropOk(GameClient client, GoodsData goodsData)
        {
            if (goodsData.AppendPropLev == 20 || goodsData.AppendPropLev == 30 || goodsData.AppendPropLev == 40 || goodsData.AppendPropLev == 50 || goodsData.AppendPropLev == 60 || goodsData.AppendPropLev == 70 || goodsData.AppendPropLev == 80)
            {
                string broadCastMsg = StringUtil.substitute(GLang.GetLang(371, new object[0]), new object[]
                {
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetGoodsNameByID(goodsData.GoodsID),
                    goodsData.AppendPropLev
                });
                Global.BroadcastRoleActionMsg(client, (goodsData.AppendPropLev >= 6) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint, 0, 0, 100, 100);
            }
        }

        
        public static int GetEquipInheritNeedYinLiang(GoodsData goodsData)
        {
            int[] nNeedMoney = GameManager.systemParamsList.GetParamValueIntArrayByName("ChuanChengXiaoHaoJinBi", ',');
            int nForge = goodsData.Forge_level;
            int result;
            if (nForge > 20 || nNeedMoney.Length > 21)
            {
                result = 0;
            }
            else
            {
                result = nNeedMoney[nForge];
            }
            return result;
        }

        
        public static int GetEquipInheritNeedYuanBao(GoodsData goodsData)
        {
            int[] nNeedMoney = GameManager.systemParamsList.GetParamValueIntArrayByName("ChuanChengXiaoHaoZhuanShi", ',');
            int nForge = goodsData.Forge_level;
            int result;
            if (nForge > 20 || nNeedMoney.Length > 21)
            {
                result = 0;
            }
            else
            {
                result = nNeedMoney[nForge];
            }
            return result;
        }

        
        public static int GetEquipAppendInheritNeedMoney(GoodsData goodsData, int nType)
        {
            int[] nNeedMoney;
            if (nType == 1)
            {
                nNeedMoney = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaChuanChengXiaoHaoJinBi", ',');
            }
            else
            {
                nNeedMoney = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaChuanChengXiaoHaoZhuanShi", ',');
            }
            int nAppendPropLev = goodsData.AppendPropLev;
            return nNeedMoney[nAppendPropLev];
        }

        
        public static bool SendMail(GameClient client, string sContent, string sSubject)
        {
            return Global.UseMailGivePlayerAward(client, null, sContent, sSubject, 1.0);
        }

        
        public static bool UseMailGivePlayerAward(GameClient client, GoodsData goodsData, string sContent, string sSubject, double goodsRate = 1.0)
        {
            string mailGoodsString = "";
            if (goodsData != null)
            {
                int useCount = (int)((double)goodsData.GCount * goodsRate);
                mailGoodsString += string.Format("{0}_{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}_{9}_{10}_{11}_{12}_{13}_{14}_{15}", new object[]
                {
                    goodsData.GoodsID,
                    goodsData.Forge_level,
                    goodsData.Quality,
                    goodsData.Props,
                    useCount,
                    0,
                    0,
                    goodsData.Jewellist,
                    goodsData.AddPropIndex,
                    goodsData.Binding,
                    goodsData.BornIndex,
                    goodsData.Lucky,
                    goodsData.Strong,
                    goodsData.ExcellenceInfo,
                    goodsData.AppendPropLev,
                    goodsData.ChangeLifeLevForEquip
                });
                if (mailGoodsString.Length > 0)
                {
                    mailGoodsString += "|";
                }
            }
            string strDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", new object[]
            {
                -1,
                GLang.GetLang(112, new object[0]),
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                Global.GetLang(sContent),
                Global.GetLang(sSubject),
                0,
                0,
                0,
                mailGoodsString
            });
            string[] fieldsData = Global.ExecuteDBCmd(10086, strDbCmd, client.ServerId);
            client._IconStateMgr.CheckEmailCount(client, true);
            return fieldsData != null && fieldsData.Length == 3 && Convert.ToInt32(fieldsData[1]) > 0;
        }

        
        public static int UseMailGivePlayerAward2(GameClient client, List<AwardsItemData> awardItemDataList, string sContent, string sSubject, int Yinliang = 0, int Tongqian = 0, int Yuanbao = 0)
        {
            List<GoodsData> list = new List<GoodsData>();
            if (null != awardItemDataList)
            {
                foreach (AwardsItemData item in awardItemDataList)
                {
                    GoodsData goodsData = new GoodsData
                    {
                        Id = -1,
                        GoodsID = item.GoodsID,
                        Using = 0,
                        Forge_level = item.Level,
                        Starttime = "1900-01-01 12:00:00",
                        Endtime = "1900-01-01 12:00:00",
                        Site = 0,
                        Quality = item.Quality,
                        GCount = item.GoodsNum,
                        Binding = item.Binding,
                        BagIndex = 0,
                        BornIndex = item.BornIndex,
                        Lucky = item.IsHaveLuckyProp,
                        ExcellenceInfo = item.ExcellencePorpValue,
                        AppendPropLev = item.AppendLev
                    };
                    list.Add(goodsData);
                }
            }
            return Global.UseMailGivePlayerAward2(client, list, sContent, sSubject, Yinliang, Tongqian, Yuanbao);
        }

        
        public static int UseMailGivePlayerAward2(GameClient client, List<GoodsData> goodsData, string sContent, string sSubject, int Yinliang = 0, int Tongqian = 0, int Yuanbao = 0)
        {
            string mailGoodsString = "";
            if (null != goodsData)
            {
                foreach (GoodsData goods in goodsData)
                {
                    int useCount = goods.GCount;
                    mailGoodsString += string.Format("{0}_{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}_{9}_{10}_{11}_{12}_{13}_{14}_{15}", new object[]
                    {
                        goods.GoodsID,
                        goods.Forge_level,
                        goods.Quality,
                        goods.Props,
                        useCount,
                        0,
                        0,
                        goods.Jewellist,
                        goods.AddPropIndex,
                        goods.Binding,
                        goods.BornIndex,
                        goods.Lucky,
                        goods.Strong,
                        goods.ExcellenceInfo,
                        goods.AppendPropLev,
                        goods.ChangeLifeLevForEquip
                    });
                    if (mailGoodsString.Length > 0)
                    {
                        mailGoodsString += "|";
                    }
                }
            }
            string strDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", new object[]
            {
                -1,
                GLang.GetLang(112, new object[0]),
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                sContent,
                sSubject,
                Yinliang,
                Tongqian,
                Yuanbao,
                mailGoodsString
            });
            string[] fieldsData = Global.ExecuteDBCmd(10086, strDbCmd, client.ServerId);
            client._IconStateMgr.CheckEmailCount(client, true);
            int result;
            if (fieldsData == null || fieldsData.Length != 3)
            {
                result = 0;
            }
            else
            {
                result = Convert.ToInt32(fieldsData[1]);
            }
            return result;
        }

        
        public static bool UseMailGivePlayerAward3(int nRoleID, List<GoodsData> goodsData, string sSubject, string sContent, int yuanbao, int checkReceiverExist = 0, int serverID = 0)
        {
            string mailGoodsString = "";
            if (null != goodsData)
            {
                foreach (GoodsData goods in goodsData)
                {
                    int useCount = goods.GCount;
                    mailGoodsString += string.Format("{0}_{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}_{9}_{10}_{11}_{12}_{13}_{14}_{15}", new object[]
                    {
                        goods.GoodsID,
                        goods.Forge_level,
                        goods.Quality,
                        goods.Props,
                        useCount,
                        0,
                        0,
                        goods.Jewellist,
                        goods.AddPropIndex,
                        goods.Binding,
                        goods.BornIndex,
                        goods.Lucky,
                        goods.Strong,
                        goods.ExcellenceInfo,
                        goods.AppendPropLev,
                        goods.ChangeLifeLevForEquip
                    });
                    if (mailGoodsString.Length > 0)
                    {
                        mailGoodsString += "|";
                    }
                }
            }
            string strDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", new object[]
            {
                -1,
                GLang.GetLang(112, new object[0]),
                nRoleID,
                "",
                sSubject,
                sContent,
                0,
                0,
                yuanbao,
                mailGoodsString,
                checkReceiverExist
            });
            string[] fieldsData = Global.ExecuteDBCmd(10086, strDbCmd, (serverID > 0) ? serverID : 0);
            GameClient client = GameManager.ClientMgr.FindClient(nRoleID);
            if (null != client)
            {
                client._IconStateMgr.CheckEmailCount(client, true);
            }
            return fieldsData != null && fieldsData.Length == 3 && Convert.ToInt32(fieldsData[1]) > 0;
        }

        
        public static void ProcessCampBattlePoint(GameClient client)
        {
            if (client.ClientData.BattleKilledNum > client.ClientData.CampBattleTotalPoint)
            {
                client.ClientData.CampBattleTotalPoint = client.ClientData.BattleKilledNum;
            }
        }

        
        public static void InitRoleDayActivityPoint(GameClient client)
        {
            Global.QueryRoleDayActivityPoint(client, 0);
        }

        
        public static void QueryRoleDayActivityPoint(GameClient client, int nTpye)
        {
            string[] dbFields = null;
            string strDbCmd = string.Format("{0}:{1}", client.ClientData.RoleID, nTpye);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10135, strDbCmd, out dbFields, client.ServerId);
            if (dbRequestResult != TCPProcessCmdResults.RESULT_FAILED)
            {
                if (dbFields.Length == 5)
                {
                    if (nTpye == 0)
                    {
                        client.ClientData.BloodCastleAwardTotalPoint = Global.SafeConvertToInt32(dbFields[0]);
                        client.ClientData.DaimonSquarePointTotalPoint = Global.SafeConvertToInt32(dbFields[1]);
                        client.ClientData.CampBattleTotalPoint = Global.SafeConvertToInt32(dbFields[2]);
                        client.ClientData.KingOfPkTopPoint = Global.SafeConvertToInt32(dbFields[3]);
                        client.ClientData.AngelTempleTopPoint = Global.SafeConvertToInt64(dbFields[4]);
                    }
                    else if (nTpye == 1)
                    {
                        client.ClientData.BloodCastleAwardTotalPoint = Global.SafeConvertToInt32(dbFields[0]);
                    }
                    else if (nTpye == 2)
                    {
                        client.ClientData.DaimonSquarePointTotalPoint = Global.SafeConvertToInt32(dbFields[1]);
                    }
                    else if (nTpye == 3)
                    {
                        client.ClientData.CampBattleTotalPoint = Global.SafeConvertToInt32(dbFields[2]);
                    }
                    else if (nTpye == 4)
                    {
                        client.ClientData.KingOfPkTopPoint = Global.SafeConvertToInt32(dbFields[3]);
                    }
                    else if (nTpye == 5)
                    {
                        client.ClientData.AngelTempleTopPoint = (long)Global.SafeConvertToInt32(dbFields[4]);
                    }
                }
            }
        }

        
        public static void UpdateRoleDayActivityInfo(GameClient client, int nType)
        {
            string[] dbFields = null;
            int nDate = TimeUtil.NowDateTime().DayOfYear;
            string strDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", new object[]
            {
                client.ClientData.RoleID,
                nType,
                nDate,
                client.ClientData.BloodCastleAwardTotalPoint,
                client.ClientData.DaimonSquarePointTotalPoint,
                client.ClientData.CampBattleTotalPoint,
                client.ClientData.KingOfPkTopPoint,
                client.ClientData.AngelTempleTopPoint
            });
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10136, strDbCmd, out dbFields, client.ServerId);
        }

        
        public static bool IsDaimonSquareSceneID(int nMapID)
        {
            SceneUIClasses sceneType = Global.GetMapSceneType(nMapID);
            return sceneType == SceneUIClasses.Demon;
        }

        
        public static int GetDaimonSquareCopySceneIDForRole(GameClient client)
        {
            int nLev = client.ClientData.Level;
            int nChangeLifeCount = client.ClientData.ChangeLifeCount;
            foreach (DaimonSquareDataInfo sceneInfo in Data.DaimonSquareDataInfoList.Values)
            {
                int nMin = sceneInfo.MinChangeLifeNum;
                int nMax = sceneInfo.MaxChangeLifeNum;
                int nMinLev = sceneInfo.MinLevel;
                int nMaxLev = sceneInfo.MaxLevel;
                if (nChangeLifeCount > nMin && nChangeLifeCount < nMax)
                {
                    return sceneInfo.MapCode;
                }
                if (nChangeLifeCount == nMin || nChangeLifeCount == nMax)
                {
                    if (nLev >= nMinLev && nLev <= nMaxLev)
                    {
                        return sceneInfo.MapCode;
                    }
                }
            }
            return -1;
        }

        
        public static bool CanEnterDaimonSquareOnTime(List<string> BeginTime, int nPrepareTime)
        {
            DateTime now = TimeUtil.NowDateTime();
            string nowTime = TimeUtil.NowDateTime().ToString("HH:mm");
            bool result;
            if (null == BeginTime)
            {
                result = false;
            }
            else
            {
                for (int i = 0; i < BeginTime.Count; i++)
                {
                    DateTime staticTime = DateTime.Parse(BeginTime[i]);
                    DateTime perpareTime = staticTime.AddMinutes((double)(nPrepareTime / 60));
                    if (BeginTime[i] == nowTime || (now > staticTime && now <= perpareTime))
                    {
                        return true;
                    }
                }
                result = false;
            }
            return result;
        }

        
        public static bool CanEnterDaimonSquareCopySceneOnTime(List<string> BeginTime, int nPrepareTime, out int nSecond, out string strTimer)
        {
            nSecond = 0;
            strTimer = null;
            DateTime now = TimeUtil.NowDateTime();
            string nowTime = TimeUtil.NowDateTime().ToString("HH:mm");
            bool result;
            if (null == BeginTime)
            {
                result = false;
            }
            else
            {
                for (int i = 0; i < BeginTime.Count; i++)
                {
                    DateTime staticTime = DateTime.Parse(BeginTime[i]);
                    DateTime perpareTime = staticTime.AddMinutes((double)(nPrepareTime / 60));
                    if (BeginTime[i] == nowTime || (now > staticTime && now <= perpareTime))
                    {
                        TimeSpan time = now - DateTime.Parse(BeginTime[i]);
                        nSecond = time.Minutes * 60 + time.Seconds;
                        strTimer = BeginTime[i];
                        return true;
                    }
                }
                result = false;
            }
            return result;
        }

        
        public static void ProcessRoleDieForRoleAttack(SocketListener sl, TCPOutPacketPool pool, GameClient Attacker, GameClient DeadRole)
        {
            DeadRole.TimedActionMgr.RemoveItem(0);
            GlobalEventSource.getInstance().fireEvent(new PlayerDeadEventObject(DeadRole, Attacker));
            if (Data.IgnoreClientPos)
            {
                GameManager.ClientMgr.StopClientStoryboard(DeadRole, ClientCmdCheck.GetClientTicks(DeadRole, 0L), -1, -1);
            }
            else
            {
                GameManager.ClientMgr.StopClientStoryboard(DeadRole, -1);
            }
            ClientCmdCheck.RecordClientPosition(DeadRole);
            GameManager.ClientMgr.AddToEnemyList(Global._TCPManager, Global._TCPManager.tcpClientPool, pool, Attacker, DeadRole.ClientData.RoleID);
            string strDropList = "";
            GameManager.GoodsPackMgr.ProcessRole(sl, pool, Attacker, DeadRole, Attacker.ClientData.RoleName, out strDropList);
            GameManager.ClientMgr.ChangeRolePKValueAndPKPoint(sl, pool, Attacker, DeadRole);
            Global.AddBattleKilledNum(Attacker, DeadRole, 5, 5);
            GameManager.ArenaBattleMgr.AddArenaBattleKilledNum(Attacker, DeadRole);
            Global.BroadcastXKilledY(Attacker, DeadRole);
            Global.RemoveBufferData(DeadRole, 86);
            Global.RemoveBufferData(DeadRole, 85);
            EventLogManager.AddRoleDeathEvent(DeadRole, DeadRole.ClientData.MapCode, ObjectTypes.OT_CLIENT, Attacker.ClientData.RoleID, strDropList);
            DeadRole.ClientData.LastRoleDeadTicks = TimeUtil.NOW();
            if (2 > DeadRole.ClientData.MapCode)
            {
                GameManager.logDBCmdMgr.AddDBLogInfo(-1, "领地打架死人", "角色击杀角色", Attacker.ClientData.RoleName, DeadRole.ClientData.RoleName, "击杀", 1, DeadRole.ClientData.ZoneID, DeadRole.strUserID, 0, DeadRole.ServerId, null);
            }
            ProcessTask.Process(sl, pool, Attacker, -1, -1, -1, TaskTypes.KillRoleOtherComp, null, 0, -1L, DeadRole);
            ProcessTask.Process(sl, pool, Attacker, -1, -1, -1, TaskTypes.KillRoleOtherCompTop, null, 0, -1L, DeadRole);
        }

        
        public static void ProcessMonsterDieForRoleAttack(SocketListener sl, TCPOutPacketPool pool, GameClient Attacker, Monster DeadMonster, int nInjure)
        {
            int enemyExperience = DeadMonster.MonsterInfo.VExperience;
            int nMoney = DeadMonster.MonsterInfo.VMoney;
            GameManager.MonsterMgr.LoseTarget(DeadMonster);
            GameManager.MonsterMgr.ProcessMonsterDead(sl, pool, Attacker, DeadMonster, enemyExperience, DeadMonster.MonsterInfo.VMoney, nInjure);
            GameManager.MonsterMgr.AddDelayDeadMonster(DeadMonster);
            if (GameManager.FlaDisablegFilterMonsterDeadEvent || GameManager.MonsterMgr.AddKilledMonsterFirst(DeadMonster.UniqueID))
            {
                GlobalEventSource.getInstance().fireEvent(new MonsterDeadEventObject(DeadMonster, Attacker));
            }
        }

        
        public static void ProcessRoleDieForMonsterAttack(SocketListener sl, TCPOutPacketPool pool, Monster Attacker, GameClient DeadRole)
        {
            DeadRole.TimedActionMgr.RemoveItem(0);
            GlobalEventSource.getInstance().fireEvent(new PlayerDeadEventObject(DeadRole, Attacker));
            if (Data.IgnoreClientPos)
            {
                GameManager.ClientMgr.StopClientStoryboard(DeadRole, ClientCmdCheck.GetClientTicks(DeadRole, 0L), -1, -1);
            }
            else
            {
                GameManager.ClientMgr.StopClientStoryboard(DeadRole, -1);
            }
            ClientCmdCheck.RecordClientPosition(DeadRole);
            if (1201 == Attacker.MonsterType)
            {
                if (-1 != Attacker.LockObject)
                {
                    Attacker.RemoveAttacker(Attacker.LockObject);
                }
            }
            GameManager.MonsterMgr.LoseTarget(Attacker);
            string strDropList = "";
            GameManager.GoodsPackMgr.ProcessRole(sl, pool, DeadRole, DeadRole, Attacker.MonsterInfo.VSName, out strDropList);
            EventLogManager.AddRoleDeathEvent(DeadRole, DeadRole.ClientData.MapCode, ObjectTypes.OT_MONSTER, Attacker.MonsterInfo.ExtensionID, strDropList);
            DeadRole.ClientData.LastRoleDeadTicks = TimeUtil.NOW();
            if (DeadRole.ClientData.CopyMapID > 0 && DeadRole.ClientData.FuBenSeqID > 0)
            {
                FuBenInfoItem fuBenInfoItem = FuBenManager.FindFuBenInfoBySeqID(DeadRole.ClientData.FuBenSeqID);
                if (null != fuBenInfoItem)
                {
                    fuBenInfoItem.nDieCount++;
                }
            }
            Global.RemoveBufferData(DeadRole, 86);
            Global.RemoveBufferData(DeadRole, 85);
            if (2 > DeadRole.ClientData.MapCode)
            {
                LingDiShouWeiMonsterItem tag = Attacker.Tag as LingDiShouWeiMonsterItem;
                if (tag != null)
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(-1, "领地守卫", "守卫击杀角色", DeadRole.ClientData.MapCode + ":" + tag.ID, DeadRole.ClientData.RoleName, "击杀", 1, DeadRole.ClientData.ZoneID, DeadRole.strUserID, 0, DeadRole.ServerId, null);
                }
            }
        }

        
        public static void ProcessMonsterDieForMonsterAttack(SocketListener sl, TCPOutPacketPool pool, Monster Attacker, Monster DeadMonster)
        {
            if (GameManager.FlaDisablegFilterMonsterDeadEvent || GameManager.MonsterMgr.AddKilledMonsterFirst(DeadMonster.UniqueID))
            {
                GlobalEventSource.getInstance().fireEvent(new MonsterToMonsterDeadEventObject(DeadMonster, Attacker));
            }
        }

        
        public static void ProcessDamageThorn(SocketListener sl, TCPOutPacketPool pool, GameClient Attacker, GameClient Enemy, int nInjure)
        {
            if (Attacker.ClientData.CurrentLifeV > 0)
            {
                double nDamageThorn = RoleAlgorithm.GetDamageThornPercent(Enemy);
                nDamageThorn += PassiveEffectManager.GetPassiveEffectAddPercent(Enemy, 5, 4);
                if (nDamageThorn > 0.0)
                {
                    nDamageThorn = Math.Max(nDamageThorn - RoleAlgorithm.GetExtProp(Attacker, 164), 0.0);
                }
                nInjure = (int)((double)nInjure * nDamageThorn);
                nDamageThorn = RoleAlgorithm.GetDamageThorn(Enemy);
                nInjure += (int)nDamageThorn;
                if (nInjure >= 1)
                {
                    Attacker.ClientData.CurrentLifeV -= Global.GMax(0, nInjure);
                    Attacker.ClientData.CurrentLifeV = Global.GMax(Attacker.ClientData.CurrentLifeV, 0);
                    GameManager.ClientMgr.NotifySpriteInjured(sl, pool, Enemy, Enemy.ClientData.MapCode, Enemy.ClientData.RoleID, Attacker.ClientData.RoleID, 5, nInjure, (double)Attacker.ClientData.CurrentLifeV, Enemy.ClientData.Level, new Point(-1.0, -1.0), 0, EMerlinSecretAttrType.EMSAT_None, 0);
                    ClientManager.NotifySelfEnemyInjured(sl, pool, Enemy, Enemy.ClientData.RoleID, Attacker.ClientData.RoleID, 5, nInjure, (double)Attacker.ClientData.CurrentLifeV, 0L, 0, EMerlinSecretAttrType.EMSAT_None, 0);
                    if (Attacker.ClientData.CurrentLifeV <= 0)
                    {
                        Global.ProcessRoleDieForRoleAttack(sl, pool, Enemy, Attacker);
                    }
                    GameManager.ClientMgr.ChangeRolePurpleName(sl, pool, Attacker, Enemy);
                }
            }
        }

        
        public static void ProcessDamageThorn(SocketListener sl, TCPOutPacketPool pool, Monster Attacker, GameClient client, int nInjure)
        {
            if (Attacker.VLife > 0.0 && Attacker.MonsterType != 1301 && Attacker.MonsterType != 1302 && Attacker.MonsterType != 1303 && Attacker.MonsterType != 2101 && Attacker.MonsterType != 2102)
            {
                double nDamageThorn = RoleAlgorithm.GetDamageThornPercent(client);
                nDamageThorn += PassiveEffectManager.GetPassiveEffectAddPercent(client, 5, 4);
                if (nDamageThorn > 0.0)
                {
                    nDamageThorn = Math.Max(nDamageThorn - Attacker.DynamicData.ExtProps[164], 0.0);
                }
                nInjure = (int)((double)nInjure * nDamageThorn);
                nDamageThorn = RoleAlgorithm.GetDamageThorn(client);
                nInjure += (int)nDamageThorn;
                if (nInjure >= 1)
                {
                    Attacker.VLife -= (double)Global.GMax(0, nInjure);
                    Attacker.VLife = Global.GMax(Attacker.VLife, 0.0);
                    GameManager.ClientMgr.NotifySpriteInjured(sl, pool, client, client.ClientData.MapCode, client.ClientData.RoleID, Attacker.RoleID, 5, nInjure, Attacker.VLife, client.ClientData.Level, new Point(-1.0, -1.0), 0, EMerlinSecretAttrType.EMSAT_None, 0);
                    ClientManager.NotifySelfEnemyInjured(sl, pool, client, client.ClientData.RoleID, Attacker.RoleID, 5, nInjure, Attacker.VLife, 0L, 0, EMerlinSecretAttrType.EMSAT_None, 0);
                    if (Attacker.VLife <= 0.0)
                    {
                        Global.ProcessMonsterDieForRoleAttack(sl, pool, client, Attacker, nInjure);
                    }
                }
            }
        }

        
        public static void ProcessDamageThorn(SocketListener sl, TCPOutPacketPool pool, GameClient Attacker, Monster Enemy, int nInjure)
        {
            if (Attacker.ClientData.CurrentLifeV > 0)
            {
                double nDamageThorn = RoleAlgorithm.GetDamageThornPercent(Enemy);
                nDamageThorn += PassiveEffectManager.GetPassiveEffectAddPercent(Enemy, 5, 4);
                if (nDamageThorn > 0.0)
                {
                    nDamageThorn = Math.Max(nDamageThorn - RoleAlgorithm.GetExtProp(Attacker, 164), 0.0);
                }
                nInjure = (int)((double)nInjure * nDamageThorn);
                nDamageThorn = RoleAlgorithm.GetDamageThorn(Enemy);
                nInjure += (int)nDamageThorn;
                if (nInjure >= 1)
                {
                    Attacker.ClientData.CurrentLifeV -= Global.GMax(0, nInjure);
                    Attacker.ClientData.CurrentLifeV = Global.GMax(Attacker.ClientData.CurrentLifeV, 0);
                    GameManager.ClientMgr.NotifySpriteInjured(sl, pool, Enemy, Attacker.ClientData.MapCode, Enemy.RoleID, Attacker.ClientData.RoleID, 5, nInjure, (double)Attacker.ClientData.CurrentLifeV, 0, new Point(-1.0, -1.0), 0, EMerlinSecretAttrType.EMSAT_None, 0);
                    if (Attacker.ClientData.CurrentLifeV <= 0)
                    {
                        Global.ProcessRoleDieForMonsterAttack(sl, pool, Enemy, Attacker);
                    }
                }
            }
        }

        
        public static List<int> QueryEveryDayOnLineAwardGiftInfoToDB(GameClient client)
        {
            List<int> lList = new List<int>();
            string[] dbFields = null;
            string strDbCmd = string.Format("{0}", client.ClientData.RoleID);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10137, strDbCmd, out dbFields, client.ServerId);
            List<int> result;
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(372, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                result = null;
            }
            else if (dbFields.Length != 3 || Convert.ToInt32(dbFields[0]) < 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(GLang.GetLang(373, new object[0]), new object[0]), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, 0);
                result = null;
            }
            else
            {
                lList.Add(Global.SafeConvertToInt32(dbFields[0]));
                lList.Add(Global.SafeConvertToInt32(dbFields[1]));
                result = lList;
            }
            return result;
        }

        
        public static bool UpdateSeriesLoginInfo(GameClient client)
        {
            client.ClientData.MyHuodongData.EveryDayOnLineAwardStep = 0;
            client.ClientData.MyHuodongData.SeriesLoginGetAwardStep = 0;
            client.ClientData.MyHuodongData.EveryDayOnLineAwardGoodsID = "";
            client.ClientData.MyHuodongData.SeriesLoginAwardGoodsID = "";
            client.ClientData.DayOnlineSecond = 1;
            client.ClientData.BakDayOnlineSecond = client.ClientData.DayOnlineSecond;
            client.ClientData.DayOnlineRecSecond = TimeUtil.NOW();
            Global.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, client);
            return true;
        }

        
        public static bool EquipChangeLifeStart(GameClient client, GoodsData goodsData, int luckyValue, int nType = 1)
        {
            int percent = Global.GetEquipChangeLifePercent(client, goodsData, luckyValue, nType) * 100;
            int rndNum = Global.GetRandomNumber(0, 10001);
            return rndNum <= percent;
        }

        
        public static int GetEquipChangeLifePercent(GameClient client, GoodsData goodsData, int luckyValue, int nTpye)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                result = 0;
            }
            else if (null == systemGoods)
            {
                result = 0;
            }
            else if (goodsData.ChangeLifeLevForEquip >= Global.EquipChangeLifeMaxLevel)
            {
                result = 0;
            }
            else
            {
                int percent = 0;
                if (nTpye == 1)
                {
                    int[] EquipChangeLifePercent = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengRate", ',');
                    percent = Math.Abs(EquipChangeLifePercent[goodsData.ChangeLifeLevForEquip + 1]);
                }
                else if (nTpye == 2)
                {
                    int[] EquipChangeLifePercent = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengBoLiRates", ',');
                    percent = Math.Abs(EquipChangeLifePercent[goodsData.ChangeLifeLevForEquip]);
                }
                percent += luckyValue;
                result = Global.GMin(100, percent);
            }
            return result;
        }

        
        public static int GetFlakeOffEquipChangeLifePercent(GameClient client, GoodsData goodsData, int luckyValue)
        {
            SystemXmlItem systemGoods = null;
            int result;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                result = 0;
            }
            else if (null == systemGoods)
            {
                result = 0;
            }
            else if (goodsData.ChangeLifeLevForEquip >= Global.EquipChangeLifeMaxLevel)
            {
                result = 0;
            }
            else
            {
                int[] ForgeLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengRate", ',');
                int percent = Math.Abs(ForgeLevelRocksPercent[goodsData.ChangeLifeLevForEquip + 1]);
                if (Global.CanUseVipPriority(client))
                {
                    percent += 5;
                }
                percent += luckyValue;
                result = Global.GMin(100, percent);
            }
            return result;
        }

        
        public static int GetChangeLifeChuanChenNeedYinLiang(GoodsData leftGoods)
        {
            int result;
            if (leftGoods.ChangeLifeLevForEquip <= 0)
            {
                result = 0;
            }
            else
            {
                int[] chuanChengYinLiangArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuanShengChuanchengXiaohaoMoney", ',');
                if (chuanChengYinLiangArr == null || leftGoods.ChangeLifeLevForEquip > chuanChengYinLiangArr.Length)
                {
                    result = 0;
                }
                else
                {
                    result = chuanChengYinLiangArr[leftGoods.ChangeLifeLevForEquip - 1];
                }
            }
            return result;
        }

        
        public static bool IsChangeLifeChuanChenSuccess(GoodsData leftGoods)
        {
            bool result;
            if (leftGoods.ChangeLifeLevForEquip <= 0)
            {
                result = false;
            }
            else
            {
                int[] chuanChengDiaoJiArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuanShengChuanchengDiaojilv", ',');
                if (chuanChengDiaoJiArr == null || leftGoods.ChangeLifeLevForEquip > chuanChengDiaoJiArr.Length)
                {
                    result = false;
                }
                else
                {
                    int rate = 100 - chuanChengDiaoJiArr[leftGoods.ChangeLifeLevForEquip];
                    result = (rate > 0 && (rate >= 100 || Global.GetRandomNumber(0, 10001) < rate * 100));
                }
            }
            return result;
        }

        
        public static bool IsShengYouFuCanBeenUsedForChangeLifeChuanCheng(int shenYouGoodsID, GoodsData leftGoods)
        {
            bool result;
            if (leftGoods.ChangeLifeLevForEquip <= 0)
            {
                result = false;
            }
            else
            {
                int[] chuanChengChangeLifeLevelArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ShengyoufuZhuanShengDengji", ',');
                int[] chuanChengShenYouGoodsArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ShenyoufuGoodsIDs", ',');
                if (chuanChengChangeLifeLevelArr == null || chuanChengShenYouGoodsArr == null || chuanChengShenYouGoodsArr.Length != chuanChengChangeLifeLevelArr.Length)
                {
                    result = false;
                }
                else
                {
                    int goodsIndex = -1;
                    for (int i = 0; i < chuanChengShenYouGoodsArr.Length; i++)
                    {
                        if (shenYouGoodsID == chuanChengShenYouGoodsArr[i])
                        {
                            goodsIndex = i;
                            break;
                        }
                    }
                    if (goodsIndex < 0)
                    {
                        result = false;
                    }
                    else
                    {
                        int ChangeLifeLevelIndex = -1;
                        for (int i = 0; i < chuanChengChangeLifeLevelArr.Length; i++)
                        {
                            if (leftGoods.ChangeLifeLevForEquip <= chuanChengChangeLifeLevelArr[i])
                            {
                                ChangeLifeLevelIndex = i;
                                break;
                            }
                        }
                        result = (ChangeLifeLevelIndex >= 0 && goodsIndex >= ChangeLifeLevelIndex);
                    }
                }
            }
            return result;
        }

        
        public static int AvalidLevel(int zhuanSheng, int level, int minZhuanSheng, int minLevel, int maxZhuanSheng = -1, int maxLevel = -1)
        {
            minLevel = ((minLevel == -1) ? 0 : minLevel);
            maxLevel = ((maxLevel == -1) ? 4095 : maxLevel);
            minZhuanSheng = ((minZhuanSheng == -1) ? 0 : minZhuanSheng);
            maxZhuanSheng = ((maxZhuanSheng == -1) ? 4095 : maxZhuanSheng);
            int min = minLevel + minZhuanSheng * 65536;
            int max = maxLevel + maxZhuanSheng * 65536;
            int val = level + zhuanSheng * 65536;
            int result;
            if (min <= val && val <= max)
            {
                result = 0;
            }
            else if (val < min)
            {
                result = -1;
            }
            else
            {
                result = 1;
            }
            return result;
        }

        
        public static int AvalidLevel(GameClient client, int minZhuanSheng, int minLevel, int maxZhuanSheng = -1, int maxLevel = -1)
        {
            return Global.AvalidLevel(client.ClientData.ChangeLifeCount, client.ClientData.Level, minZhuanSheng, minLevel, maxZhuanSheng, maxLevel);
        }

        
        public static int GetUnionLevel(int zhuanSheng, int level, bool upBound = false)
        {
            if (zhuanSheng < 0)
            {
                zhuanSheng = (upBound ? 4095 : 0);
            }
            return zhuanSheng * 65536 + level;
        }

        
        public static int GetUnionLevel(GameClient client, bool upBound = false)
        {
            return Global.GetUnionLevel(client.ClientData.ChangeLifeCount, client.ClientData.Level, false);
        }

        
        public static int GetUnionLevel2(int zhuansheng, int level)
        {
            return zhuansheng * 100 + level;
        }

        
        public static int GetUnionLevel2(GameClient client)
        {
            return Global.GetUnionLevel2(client.ClientData.ChangeLifeCount, client.ClientData.Level);
        }

        
        public static long GetMingXiangExpr(int zhuanSheng, int level, out int nStarSoul)
        {
            nStarSoul = 0;
            long expr = 0L;
            long result;
            if (null == Data.MeditateInfoList)
            {
                result = 0L;
            }
            else
            {
                IEnumerable<MeditateData> query = from info in Data.MeditateInfoList.Values
                                                  where Global.AvalidLevel(zhuanSheng, level, info.MinZhuanSheng, info.MinLevel, info.MaxZhuanSheng, info.MaxLevel) == 0
                                                  select info;
                if (query != null && query.Any<MeditateData>())
                {
                    expr = (long)query.First<MeditateData>().Experience;
                    nStarSoul = query.First<MeditateData>().StarSoul;
                }
                result = Global.GMax(0L, expr);
            }
            return result;
        }

        
        public static int GetMingXiangGoodsInterval(GameClient client)
        {
            int result;
            if (null == Data.MeditateInfoList)
            {
                result = 0;
            }
            else
            {
                IEnumerable<MeditateData> query = from info in Data.MeditateInfoList.Values
                                                  where Global.AvalidLevel(client, info.MinZhuanSheng, info.MinLevel, info.MaxZhuanSheng, info.MaxLevel) == 0
                                                  select info;
                if (query != null && query.Any<MeditateData>())
                {
                    int interval = query.First<MeditateData>().GetRewardTime;
                    result = ((interval <= 0) ? 86400000 : interval);
                }
                else
                {
                    result = 86400000;
                }
            }
            return result;
        }

        
        public static int GetMingXiangPackageID(GameClient client)
        {
            int result;
            if (null == Data.MeditateInfoList)
            {
                result = 0;
            }
            else
            {
                IEnumerable<MeditateData> query = from info in Data.MeditateInfoList.Values
                                                  where Global.AvalidLevel(client, info.MinZhuanSheng, info.MinLevel, info.MaxZhuanSheng, info.MaxLevel) == 0
                                                  select info;
                if (query != null && query.Any<MeditateData>())
                {
                    int[] item = query.First<MeditateData>().MediateRewardTuple;
                    if (item != null && item.Length > client.ClientData.Occupation)
                    {
                        return item[client.ClientData.Occupation];
                    }
                }
                result = 0;
            }
            return result;
        }

        
        public static void EndMeditate(GameClient client)
        {
            client.ClientData.Last10sPosX = 0;
            client.ClientData.Last10sPosY = 0;
            client.ClientData.LastMovePosTicks = 0L;
            if (client.ClientData.StartMeditate > 0)
            {
                client.ClientData.StartMeditate = 0;
                GameManager.ClientMgr.NotifySpriteMeditate(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0);
            }
        }

        
        public static void StartMeditate(GameClient client)
        {
            client.ClientData.BiGuanTime = TimeUtil.NOW();
            client.ClientData.MeditateTicks = TimeUtil.NOW();
            client.ClientData.GiveMeditateAwardOffsetTicks = GoodsUtil.GetLastGiveMeditateTime(client);
            client.ClientData.GiveMeditateGoodsInterval = Global.GetMingXiangGoodsInterval(client);
            client.ClientData.StartMeditate = 1;
            GameManager.ClientMgr.NotifySpriteMeditate(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 1);
        }

        
        public static void UpdateMeditateTime(GameClient client, long nowTicks)
        {
            int nTime = Global.GetRoleParamsInt32FromDB(client, "MeditateTime");
            int nTime2 = 0;
            if (nTime + nTime2 < 43200000)
            {
                long msecs = Math.Max(nowTicks - client.ClientData.BiGuanTime, 0L);
                msecs = Math.Min(msecs + (long)nTime, (long)(43200000 - nTime2));
                client.ClientData.MeditateTime = (int)msecs;
                Global.SaveRoleParamsInt32ValueToDB(client, "MeditateTime", (int)msecs, false);
            }
            client.ClientData.BiGuanTime = nowTicks;
            GameManager.DBCmdMgr.AddDBCmd(10035, string.Format("{0}:{1}", client.ClientData.RoleID, nowTicks), null, client.ServerId);
        }

        
        public static void ResetMeditateTime(GameClient client, long nowTicks, bool clearTime)
        {
            client.ClientData.BiGuanTime = nowTicks;
            client.ClientData.MeditateTicks = nowTicks;
            if (clearTime)
            {
                client.ClientData.MeditateTime = 0;
                Global.SaveRoleParamsInt32ValueToDB(client, "MeditateTime", client.ClientData.MeditateTime, true);
            }
            GameManager.DBCmdMgr.AddDBCmd(10035, string.Format("{0}:{1}", client.ClientData.RoleID, nowTicks), null, client.ServerId);
        }

        
        public static int GetVipDailyAward(GameClient client, VIPDataInfo tmpVipData, int nIndex)
        {
            int nRet = 1;
            List<GoodsData> goodsIDs = tmpVipData.AwardGoods;
            int nJinBi = tmpVipData.JinBi;
            int nBindJinBi = tmpVipData.BindJinBi;
            int nZuanShi = tmpVipData.ZuanShi;
            int nBindZuanShi = tmpVipData.BindZuanShi;
            int nXiHongMing = tmpVipData.XiHongMing;
            int[] bufferGoodsIDs = tmpVipData.BufferGoods;
            int nXiuLi = tmpVipData.XiuLi;
            if (nZuanShi > 0)
            {
                GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nZuanShi, string.Format("{0}特权领取", Global.GetVipTypeNameString(client)), ActivityTypes.None, "");
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取钻石, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", new object[]
                {
                    Global.GetVipTypeNameString(client),
                    client.ClientData.RoleID,
                    client.ClientData.RoleName,
                    client.ClientData.UserMoney,
                    nZuanShi,
                    nIndex
                }), EventLevels.Record);
                Global.BroadcastVipFetchYuanBaoAwardMsg(client, nZuanShi);
            }
            if (nBindZuanShi > 0)
            {
                GameManager.ClientMgr.AddUserGold(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nBindZuanShi, "领取VIP日奖励");
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取绑定钻石, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", new object[]
                {
                    Global.GetVipTypeNameString(client),
                    client.ClientData.RoleID,
                    client.ClientData.RoleName,
                    client.ClientData.UserMoney,
                    nBindZuanShi,
                    nIndex
                }), EventLevels.Record);
                Global.BroadcastVipFetchBindYuanBaoAwardMsg(client, nBindZuanShi);
            }
            if (nJinBi > 0)
            {
                GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nJinBi, "领取VIP日奖励", false);
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取金币, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", new object[]
                {
                    Global.GetVipTypeNameString(client),
                    client.ClientData.RoleID,
                    client.ClientData.RoleName,
                    client.ClientData.YinLiang,
                    nJinBi,
                    nIndex
                }), EventLevels.Record);
            }
            if (nBindJinBi > 0)
            {
                GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nBindJinBi, "领取VIP日奖励", false);
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取绑定金币, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", new object[]
                {
                    Global.GetVipTypeNameString(client),
                    client.ClientData.RoleID,
                    client.ClientData.RoleName,
                    client.ClientData.Money1,
                    nBindJinBi,
                    nIndex
                }), EventLevels.Record);
            }
            string awardReason = string.Format("VIP使用特权{0}获取", nIndex);
            if (goodsIDs != null)
            {
                for (int i = 0; i < goodsIDs.Count; i++)
                {
                    GoodsData goodsData = goodsIDs[i];
                    if (null != goodsData)
                    {
                        goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, 0, goodsData.Jewellist, true, 1, awardReason, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, 0, 0, 0, null, null, 0, true);
                    }
                }
            }
            if (bufferGoodsIDs != null && bufferGoodsIDs.Length > 0)
            {
                for (int i = 0; i < bufferGoodsIDs.Length; i++)
                {
                    Global.AddBufferByGoodsID(client, bufferGoodsIDs[i]);
                }
            }
            if (1 == nXiHongMing)
            {
                GameManager.ClientMgr.SetRolePKValuePoint(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0, 0, true);
            }
            if (1 == nXiuLi)
            {
                int nVipLev = client.ClientData.VipLevel;
                if (nVipLev >= 0)
                {
                    nRet = Global.OneKeyFixAllEquips(client);
                }
            }
            Global.AddRoleFetchVipAwardEvent(client, nZuanShi, nJinBi, nBindJinBi, 0, nIndex);
            return nRet;
        }

        
        public static bool ProcessVipLevelUp(GameClient client)
        {
            long nDiamond = Global.GetUserInputAllYuanBao(client);
            if (nDiamond > 0L && Data.DiamondToVipExpValue > 0)
            {
                nDiamond /= (long)Data.DiamondToVipExpValue;
            }
            nDiamond += (long)Global.GetRoleParamsInt32FromDB(client, "VIPExp");
            int nLev = Global.CalcVipLevelByZuanShi(nDiamond);
            int nOldLev = client.ClientData.VipLevel;
            bool result;
            if (nOldLev == nLev)
            {
                result = true;
            }
            else
            {
                client.ClientData.VipLevel = nLev;
                if (client._IconStateMgr.CheckVIPLevelAwardState(client) || client._IconStateMgr.CheckSpecialActivity(client) || client._IconStateMgr.CheckEverydayActivity(client))
                {
                    client._IconStateMgr.SendIconStateToClient(client);
                }
                if (client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriVIPFanli))
                {
                    client._IconStateMgr.AddFlushIconState(14000, client._IconStateMgr.IsAnyJieRiTipActived());
                    client._IconStateMgr.SendIconStateToClient(client);
                }
                Global.ProcessVipSpecialBuffer(client);
                string strcmd = string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.VipLevel);
                GameManager.ClientMgr.SendToClient(client, strcmd, 595);
                SpreadManager.getInstance().SpreadIsVip(client);
                FundManager.FundVip(client);
                UserReturnManager.getInstance().VipChange(client);
                SingletonTemplate<TradeBlackManager>.Instance().UpdateObjectExtData(client);
                VideoLogic.getInstance().GetOrSendPlayerVideoStatus(client, client.ClientData.RoleCommonUseIntPamams);
                try
                {
                    string analysis = string.Format("vipchange server={0} account={1} player={2} viplevel={3}", new object[]
                    {
                        GameManager.ServerId,
                        client.strUserID,
                        client.ClientData.LocalRoleID,
                        client.ClientData.VipLevel
                    });
                    LogManager.WriteLog(LogTypes.Analysis, analysis, null, true);
                }
                catch
                {
                }
                result = true;
            }
            return result;
        }

        
        public static int CalcVipLevelByZuanShi(long zuanshi)
        {
            int nLev = 0;
            for (int i = 1; i <= VIPEumValue.VIPENUMVALUE_MAXLEVEL; i++)
            {
                if (Data.VIPLevAwardAndExpInfoList[i].NeedExp <= 0 || zuanshi < (long)Data.VIPLevAwardAndExpInfoList[i].NeedExp)
                {
                    break;
                }
                nLev = Data.VIPLevAwardAndExpInfoList[i].VipLev;
            }
            return nLev;
        }

        
        public static bool GMSetVipLevel(GameClient client, int vipLevel)
        {
            vipLevel = Math.Min(vipLevel, VIPEumValue.VIPENUMVALUE_MAXLEVEL);
            long nDiamond = Global.GetUserInputAllYuanBao(client);
            if (nDiamond > 0L && Data.DiamondToVipExpValue > 0)
            {
                nDiamond /= (long)Data.DiamondToVipExpValue;
            }
            int needExp = (int)(-(int)nDiamond);
            if (Data.VIPLevAwardAndExpInfoList.ContainsKey(vipLevel))
            {
                needExp = Data.VIPLevAwardAndExpInfoList[vipLevel].NeedExp - (int)nDiamond;
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "VIPExp", needExp, true);
            return Global.ProcessVipLevelUp(client);
        }

        
        public static bool ProcessVipSpecialBuffer(GameClient client)
        {
            bool result;
            if (client.ClientData.VipLevel <= 0)
            {
                result = false;
            }
            else
            {
                if (client.ClientData.VipLevel > VIPEumValue.VIPENUMVALUE_MAXLEVEL)
                {
                    client.ClientData.VipLevel = VIPEumValue.VIPENUMVALUE_MAXLEVEL;
                }
                int nVipLev = client.ClientData.VipLevel;
                VIPLevAwardAndExpInfo tmpVipExp = null;
                if (!Data.VIPLevAwardAndExpInfoList.TryGetValue(nVipLev, out tmpVipExp) || tmpVipExp == null)
                {
                    result = false;
                }
                else
                {
                    int[] nBuffGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuanhuangBufferGoodsIDs", ',');
                    if (nBuffGoods == null || nBuffGoods.Count<int>() != VIPEumValue.VIPENUMVALUE_MAXLEVEL + 1 || nBuffGoods[nVipLev] < 0)
                    {
                        result = false;
                    }
                    else
                    {
                        int nOldBufferGoodsIndexID = -1;
                        BufferData bufferData = Global.GetBufferDataByID(client, 49);
                        if (bufferData != null && !Global.IsBufferDataOver(bufferData, 0L))
                        {
                            nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
                        }
                        if (nOldBufferGoodsIndexID == nBuffGoods[nVipLev])
                        {
                            result = false;
                        }
                        else
                        {
                            Global.UpdateBufferData(client, BufferItemTypes.ZuanHuang, new double[]
                            {
                                (double)nBuffGoods[nVipLev]
                            }, 1, true);
                            GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
                            result = true;
                        }
                    }
                }
            }
            return result;
        }

        
        public static void QueryVipAwardFlagToDB(GameClient client)
        {
            TCPOutPacket tcpOutPacket = null;
            string strDbCmd = string.Format("{0}", client.ClientData.RoleID);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10168, strDbCmd, out tcpOutPacket, client.ServerId);
            if (TCPProcessCmdResults.RESULT_FAILED != dbRequestResult)
            {
                string strData = new UTF8Encoding().GetString(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
                string[] fields = strData.Split(new char[]
                {
                    ':'
                });
                if (fields.Length == 1)
                {
                    client.ClientData.VipAwardFlag = Convert.ToInt32(fields[0]);
                }
            }
            Global.PushBackTcpOutPacket(tcpOutPacket);
        }

        
        public static void UpdateVipAwardFlagToDB(GameClient client, int nFlag)
        {
            Global.ExecuteDBCmd(10169, string.Format("{0}:{1}", client.ClientData.RoleID, nFlag), client.ServerId);
        }

        
        public static string ProcessIsolateResPath(string strPath)
        {
            return string.Format("{0}/GameRes/IsolateRes/{1}", Global.RealAbsoluteGameResPath, strPath);
        }

        
        public static string ProcessGameResPath(string strPath)
        {
            return string.Format("{0}/GameRes/GameRes/{1}", Global.RealAbsoluteGameResPath, strPath);
        }

        
        public static bool IsInExperienceCopyScene(int nMapID)
        {
            int[] nMapcode = GameManager.systemParamsList.GetParamValueIntArrayByName("ExperienceCopyMapCodeIds", ',');
            for (int i = 0; i < nMapcode.Length; i++)
            {
                if (nMapcode[i] == nMapID)
                {
                    return true;
                }
            }
            return false;
        }

        
        public static bool IsInTeamCopyScene(int mapcode)
        {
            return SingletonTemplate<CopyTeamManager>.Instance().IsTeamCopyMapCode(mapcode);
        }

        
        public static int GetMapRealiveInfoByCode(int mapCode)
        {
            int result;
            if (null == Global.XmlInfo["ConfigSettings"])
            {
                result = -1;
            }
            else
            {
                XElement xmlItem = Global.GetXElement(Global.XmlInfo["ConfigSettings"], "Map", "Code", mapCode.ToString());
                if (null == xmlItem)
                {
                    result = -1;
                }
                else
                {
                    int nRet = (int)Global.GetSafeAttributeLong(xmlItem, "RealiveType");
                    result = nRet;
                }
            }
            return result;
        }

        
        public static int GetBHMatchAdmireCount(GameClient client)
        {
            int nCount = Global.GetRoleParamsInt32FromDB(client, "10188");
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, "10189");
            int result;
            if (nDay != nToday)
            {
                result = 0;
            }
            else
            {
                result = nCount;
            }
            return result;
        }

        
        public static void ProcessIncreaseBHMatchAdmireCount(GameClient client)
        {
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nCount = Global.GetRoleParamsInt32FromDB(client, "10188");
            int nDay = Global.GetRoleParamsInt32FromDB(client, "10189");
            if (nDay == nToday)
            {
                nCount++;
            }
            else
            {
                nCount = 1;
                Global.SaveRoleParamsInt32ValueToDB(client, "10189", nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "10188", nCount, true);
        }

        
        public static int GetCompAdmireCount(GameClient client)
        {
            int nCount = Global.GetRoleParamsInt32FromDB(client, "10210");
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, "10211");
            int result;
            if (nDay != nToday)
            {
                result = 0;
            }
            else
            {
                result = nCount;
            }
            return result;
        }

        
        public static void ProcessIncreaseCompAdmireCount(GameClient client)
        {
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nCount = Global.GetRoleParamsInt32FromDB(client, "10210");
            int nDay = Global.GetRoleParamsInt32FromDB(client, "10211");
            if (nDay == nToday)
            {
                nCount++;
            }
            else
            {
                nCount = 1;
                Global.SaveRoleParamsInt32ValueToDB(client, "10211", nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "10210", nCount, true);
        }

        
        public static int GetLHLYAdmireCount(GameClient client)
        {
            int nCount = Global.GetRoleParamsInt32FromDB(client, "LHLYAdmireCount");
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, "LHLYAdmireDayID");
            int result;
            if (nDay != nToday)
            {
                result = 0;
            }
            else
            {
                result = nCount;
            }
            return result;
        }

        
        public static void ProcessIncreaseLHLYAdmireCount(GameClient client)
        {
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nCount = Global.GetRoleParamsInt32FromDB(client, "LHLYAdmireCount");
            int nDay = Global.GetRoleParamsInt32FromDB(client, "LHLYAdmireDayID");
            if (nDay == nToday)
            {
                nCount++;
            }
            else
            {
                nCount = 1;
                Global.SaveRoleParamsInt32ValueToDB(client, "LHLYAdmireDayID", nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "LHLYAdmireCount", nCount, true);
        }

        
        public static int GetPKKingAdmireCount(GameClient client)
        {
            int nCount = 0;
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, "PKKingAdmireDayID");
            if (nDay == nToday)
            {
                nCount = client.ClientData.PKKingAdorationCount;
            }
            return nCount;
        }

        
        public static void ProcessIncreasePKKingAdmireCount(GameClient client)
        {
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nCount = Global.GetRoleParamsInt32FromDB(client, "PKKingAdmireCount");
            int nDay = Global.GetRoleParamsInt32FromDB(client, "PKKingAdmireDayID");
            if (nDay == nToday)
            {
                client.ClientData.PKKingAdorationCount = nCount + 1;
            }
            else
            {
                client.ClientData.PKKingAdorationCount = 1;
                Global.SaveRoleParamsInt32ValueToDB(client, "PKKingAdmireDayID", nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "PKKingAdmireCount", client.ClientData.PKKingAdorationCount, true);
        }

        
        public static void ProcessIncreaseLAdmireCount(GameClient client)
        {
            int nToday = TimeUtil.NowDateTime().DayOfYear;
            int nCount = Global.GetRoleParamsInt32FromDB(client, "LHLYAdmireCount");
            int nDay = Global.GetRoleParamsInt32FromDB(client, "LHLYAdmireDayID");
            if (nDay == nToday)
            {
                nCount++;
            }
            else
            {
                nCount = 1;
                Global.SaveRoleParamsInt32ValueToDB(client, "LHLYAdmireDayID", nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, "LHLYAdmireCount", nCount, true);
        }

        
        public static FakeRoleData FakeRoleItem2FakeRoleData(FakeRoleItem fakeRoleItem)
        {
            return fakeRoleItem.GetFakeRoleData();
        }

        
        public static bool AllowOpenMarket(GameClient client)
        {
            bool result;
            if (client.ClientData.MapCode != GameManager.MainMapCode)
            {
                result = false;
            }
            else
            {
                GameMap gameMap = null;
                result = (GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap) && gameMap.InSafeRegionList(client.CurrentGrid));
            }
            return result;
        }

        
        public static void CloseMarket(GameClient client)
        {
            if (client.ClientData.AllowMarketBuy)
            {
                client.ClientData.AllowMarketBuy = false;
                client.ClientData.MarketName = "";
                GameManager.ClientMgr.NotifySpriteMarketName(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, "", 0);
            }
        }

        
        public static bool CanOpenMarketByPos(int mapCode, Point grid)
        {
            bool result;
            if (mapCode != GameManager.MainMapCode)
            {
                result = false;
            }
            else
            {
                MapGrid mapGrid = null;
                if (!GameManager.MapGridMgr.DictGrids.TryGetValue(mapCode, out mapGrid))
                {
                    result = false;
                }
                else
                {
                    List<object> objsList = mapGrid.FindObjects((int)grid.X, (int)grid.Y);
                    if (objsList == null || objsList.Count <= 0)
                    {
                        result = true;
                    }
                    else
                    {
                        for (int i = 0; i < objsList.Count; i++)
                        {
                            if (objsList[i] is GameClient)
                            {
                                if ((objsList[i] as GameClient).ClientData.AllowMarketBuy)
                                {
                                    return false;
                                }
                            }
                        }
                        int roleCount = LiXianBaiTanManager.GetLiXianRoleCountByPoint(grid);
                        result = (roleCount <= 0);
                    }
                }
            }
            return result;
        }

        
        public static void AddMarketBuyLog(int rid, int otherRoleID, string otherName, int goodsID, int goodsNum, int forgeLevel, int totalPrice, int leftYuanBao, int saleMoney1, int Money1, int tax, int excellenceinfo, string warhprops)
        {
            string cmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}", new object[]
            {
                rid,
                otherRoleID,
                otherName,
                goodsID,
                goodsNum,
                forgeLevel,
                totalPrice,
                leftYuanBao,
                saleMoney1,
                Money1,
                tax,
                excellenceinfo,
                warhprops
            });
            Global.sendToDB<string, string>(10150, cmd, 0);
        }

        
        public static void ProcessRedNamePunishForDebuff(GameClient client)
        {
            if (client.ClientData.PKPoint != client.ClientData.LastPKPoint)
            {
                client.ClientData.LastPKPoint = client.ClientData.PKPoint;
                BufferData bufferData = Global.GetBufferDataByID(client, 92);
                double debuffPercent = Math.Ceiling((double)client.ClientData.PKPoint / 100.0 - 1.0);
                if (debuffPercent >= 0.0)
                {
                    debuffPercent = debuffPercent * (debuffPercent + 1.0) / 2.0;
                    client.ClientData.PropsCacheManager.SetExtPropsSingle(new object[]
                    {
                        PropsSystemTypes.RedNameDebuff,
                        ExtPropIndexes.AddAttackPercent,
                        -Data.RedNameDebuffInfo[0] * debuffPercent
                    });
                    client.ClientData.PropsCacheManager.SetExtPropsSingle(new object[]
                    {
                        PropsSystemTypes.RedNameDebuff,
                        ExtPropIndexes.AddDefensePercent,
                        -Data.RedNameDebuffInfo[1] * debuffPercent
                    });
                    client.ClientData.PropsCacheManager.SetExtPropsSingle(new object[]
                    {
                        PropsSystemTypes.RedNameDebuff,
                        ExtPropIndexes.MaxLifePercent,
                        -Data.RedNameDebuffInfo[2] * debuffPercent
                    });
                }
                else
                {
                    debuffPercent = 0.0;
                    client.ClientData.PropsCacheManager.SetExtPropsSingle(new object[]
                    {
                        PropsSystemTypes.RedNameDebuff,
                        ExtPropIndexes.AddAttackPercent,
                        0
                    });
                    client.ClientData.PropsCacheManager.SetExtPropsSingle(new object[]
                    {
                        PropsSystemTypes.RedNameDebuff,
                        ExtPropIndexes.AddDefensePercent,
                        0
                    });
                    client.ClientData.PropsCacheManager.SetExtPropsSingle(new object[]
                    {
                        PropsSystemTypes.RedNameDebuff,
                        ExtPropIndexes.MaxLifePercent,
                        0
                    });
                }
                double[] actionParams = new double[]
                {
                    Data.RedNameDebuffInfo[3],
                    (double)(client.ClientData.PKPoint - 200) / 10.0,
                    debuffPercent
                };
                if (null != bufferData)
                {
                    long min0 = (long)bufferData.BufferSecs - (TimeUtil.NOW() - bufferData.StartTime) / 60000L;
                    long min = (long)actionParams[1];
                    if (min0 == min)
                    {
                        return;
                    }
                }
                Global.UpdateBufferData(client, BufferItemTypes.MU_REDNAME_DEBUFF, actionParams, 1, true);
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, false, 7);
            }
        }

        
        public static void UpdatePushMessageInfo(GameClient client, string strPushMsgID)
        {
            string strDbCmd = string.Format("{0}:{1}", client.ClientData.RoleID, strPushMsgID);
            string[] dbFields = null;
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10151, strDbCmd, out dbFields, client.ServerId);
            if (dbRequestResult != TCPProcessCmdResults.RESULT_FAILED && Convert.ToInt32(dbFields[1]) == 1)
            {
                client.ClientData.PushMessageID = strPushMsgID;
            }
        }

        
        public static int CalculateCombatForce(GameClient client)
        {
            double nMinAttack = RoleAlgorithm.GetMinAttackV(client);
            double nMaxAttack = RoleAlgorithm.GetMaxAttackV(client);
            double nMinDefense = RoleAlgorithm.GetMinADefenseV(client);
            double nMaxDefense = RoleAlgorithm.GetMaxADefenseV(client);
            double nMinMAttack = RoleAlgorithm.GetMinMagicAttackV(client);
            double nMaxMAttack = RoleAlgorithm.GetMaxMagicAttackV(client);
            double nMinMDefense = RoleAlgorithm.GetMinMDefenseV(client);
            double nMaxMDefense = RoleAlgorithm.GetMaxMDefenseV(client);
            double nHit = RoleAlgorithm.GetHitV(client);
            double nDodge = RoleAlgorithm.GetDodgeV(client);
            double addAttackInjure = RoleAlgorithm.GetAddAttackInjureValue(client);
            double decreaseInjure = RoleAlgorithm.GetDecreaseInjureValue(client);
            double nMaxHP = RoleAlgorithm.GetMaxLifeV(client);
            double nMaxMP = RoleAlgorithm.GetMaxMagicV(client);
            double nLifeSteal = RoleAlgorithm.GetLifeStealV(client);
            double dFireAttack = (double)GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Fire);
            double dWaterAttack = (double)GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Water);
            double dLightningAttack = (double)GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Lightning);
            double dSoilAttack = (double)GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Soil);
            double dIceAttack = (double)GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Ice);
            double dWindAttack = (double)GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Wind);
            double HolyAttack = RoleAlgorithm.GetExtProp(client, 122);
            double HolyDefense = RoleAlgorithm.GetExtProp(client, 123);
            double ShadowAttack = RoleAlgorithm.GetExtProp(client, 129);
            double ShadowDefense = RoleAlgorithm.GetExtProp(client, 130);
            double NatureAttack = RoleAlgorithm.GetExtProp(client, 136);
            double NatureDefense = RoleAlgorithm.GetExtProp(client, 137);
            double ChaosAttack = RoleAlgorithm.GetExtProp(client, 143);
            double ChaosDefense = RoleAlgorithm.GetExtProp(client, 144);
            double IncubusAttack = RoleAlgorithm.GetExtProp(client, 150);
            double IncubusDefense = RoleAlgorithm.GetExtProp(client, 151);
            CombatForceInfo CombatForce = Data.CombatForceDataInfo[1];
            if (CombatForce != null)
            {
                double nValue = (nMinAttack / CombatForce.MinPhysicsAttackModulus + nMaxAttack / CombatForce.MaxPhysicsAttackModulus) / 2.0 + (nMinDefense / CombatForce.MinPhysicsDefenseModulus + nMaxDefense / CombatForce.MaxPhysicsDefenseModulus) / 2.0 + (nMinMAttack / CombatForce.MinMagicAttackModulus + nMaxMAttack / CombatForce.MaxMagicAttackModulus) / 2.0 + (nMinMDefense / CombatForce.MinMagicDefenseModulus + nMaxMDefense / CombatForce.MaxMagicDefenseModulus) / 2.0 + addAttackInjure / CombatForce.AddAttackInjureModulus + decreaseInjure / CombatForce.DecreaseInjureModulus + nHit / CombatForce.HitValueModulus + nDodge / CombatForce.DodgeModulus + nMaxHP / CombatForce.MaxHPModulus + nMaxMP / CombatForce.MaxMPModulus + nLifeSteal / CombatForce.LifeStealModulus;
                nValue += dFireAttack / CombatForce.FireAttack + dWaterAttack / CombatForce.WaterAttack + dLightningAttack / CombatForce.LightningAttack + dSoilAttack / CombatForce.SoilAttack + dIceAttack / CombatForce.IceAttack + dWindAttack / CombatForce.WindAttack;
                nValue += HolyAttack / CombatForce.HolyAttack + HolyDefense / CombatForce.HolyDefense + ShadowAttack / CombatForce.ShadowAttack + ShadowDefense / CombatForce.ShadowDefense + NatureAttack / CombatForce.NatureAttack + NatureDefense / CombatForce.NatureDefense + ChaosAttack / CombatForce.ChaosAttack + ChaosDefense / CombatForce.ChaosDefense + IncubusAttack / CombatForce.IncubusAttack + IncubusDefense / CombatForce.IncubusDefense;
                client.ClientData.CombatForce = (int)nValue;
            }
            RebornManager.getInstance().CalculateCombatForce(client);
            HuodongCachingMgr.ProcessCombatGift(client, false);
            return client.ClientData.CombatForce;
        }

        
        public static void QueryToDBRoleMoJingExchangeInfo(GameClient client)
        {
            TCPOutPacket tcpOutPacket = null;
            int nDayId = Global.GetOffsetDayNow();
            if (nDayId != client.ClientData.MoJingExchangeDayID)
            {
                string strDbCmd = string.Format("{0}:{1}", client.ClientData.RoleID, nDayId);
                try
                {
                    TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10156, strDbCmd, out tcpOutPacket, client.ServerId);
                    if (TCPProcessCmdResults.RESULT_FAILED != dbRequestResult)
                    {
                        client.ClientData.MoJingExchangeInfo = DataHelper.BytesToObject<Dictionary<int, int>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
                        client.ClientData.MoJingExchangeDayID = nDayId;
                    }
                }
                finally
                {
                    if (null != tcpOutPacket)
                    {
                        Global.PushBackTcpOutPacket(tcpOutPacket);
                    }
                }
            }
        }

        
        public static void PushBackTcpOutPacket(TCPOutPacket tcpOutPacket)
        {
            if (null != tcpOutPacket)
            {
                Global._TCPManager.TcpOutPacketPool.Push(tcpOutPacket);
            }
        }

        
        public static void EquipExchangeToMoJing(GameClient client, List<GoodsData> GoodsList)
        {
            int totalJingYuan = 0;
            for (int i = GoodsList.Count - 1; i >= 0; i--)
            {
                GoodsData idsList = GoodsList[i];
                SystemXmlItem xmlItem = null;
                if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(idsList.GoodsID, out xmlItem) && null != xmlItem)
                {
                    int category = Global.GetGoodsCatetoriy(idsList.GoodsID);
                    bool bCanExchange = false;
                    if (category >= 0 && category <= 49)
                    {
                        bCanExchange = true;
                    }
                    else if (xmlItem.GetIntValue("ChangeJinYuan", -1) > 0)
                    {
                        bCanExchange = true;
                    }
                    if (bCanExchange)
                    {
                        double nModulus = 1.0;
                        if (idsList.ExcellenceInfo != 0)
                        {
                            int nCount = Global.GetEquipExcellencePropNum(idsList);
                            if (nCount != 0)
                            {
                                double[] nValue = GameManager.systemParamsList.GetParamValueDoubleArrayByName("ZhuoYueHuiShouXiShu", ',');
                                if (nValue != null && nValue.Length >= nCount)
                                {
                                    nModulus = nValue[nCount - 1];
                                }
                            }
                        }
                        int nCanExchangedJingYuan = (int)((double)xmlItem.GetIntValue("ChangeJinYuan", -1) * nModulus);
                        if (nCanExchangedJingYuan > 0)
                        {
                            totalJingYuan += nCanExchangedJingYuan;
                            GoodsList.RemoveAt(i);
                        }
                    }
                }
            }
            if (totalJingYuan > 0)
            {
                GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, totalJingYuan, "副本扫荡装备回收", true, true, false);
                SevenDayGoalEventObject evObj = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.RecoverMoJing);
                evObj.Arg1 = totalJingYuan;
                GlobalEventSource.getInstance().fireEvent(evObj);
            }
        }

        
        public static int GetBossAnimationCheckCode(int monsterID, int mapCode, int toX, int toY, int effectX, int effectY, long ticks)
        {
            CRC32 crc32 = new CRC32();
            crc32.update(BitConverter.GetBytes(monsterID));
            crc32.update(BitConverter.GetBytes(mapCode));
            crc32.update(BitConverter.GetBytes(toX));
            crc32.update(BitConverter.GetBytes(toY));
            crc32.update(BitConverter.GetBytes(effectX));
            crc32.update(BitConverter.GetBytes(effectY));
            crc32.update(BitConverter.GetBytes(ticks));
            return (int)(crc32.getValue() % 255U);
        }

        
        public static bool IsStoryCopyMapScene(int nMapID)
        {
            bool result;
            if (Data.StoryCopyMapID == null || Data.StoryCopyMapID.Length < 0)
            {
                result = false;
            }
            else
            {
                for (int i = 0; i < Data.StoryCopyMapID.Length; i++)
                {
                    if (Data.StoryCopyMapID[i] == nMapID)
                    {
                        return true;
                    }
                }
                result = false;
            }
            return result;
        }

        
        public static void NotifyClientStoryCopyMapInfo(int nCopyMap, int nInfo)
        {
            CopyMap MapInfo = GameManager.CopyMapMgr.FindCopyMap(nCopyMap);
            if (MapInfo != null)
            {
                List<GameClient> objsList = MapInfo.GetClientsList();
                if (null != objsList)
                {
                    string strcmd = string.Format("{0}", nInfo);
                    for (int i = 0; i < objsList.Count; i++)
                    {
                        GameManager.ClientMgr.SendToClient(objsList[i], strcmd, 648);
                    }
                }
            }
        }

        
        public static void SaveConsumeLog(GameClient client, int money)
        {
            try
            {
                string dbCmds = client.ClientData.RoleID + ":" + money;
                string[] dbFields = null;
                Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 10167, dbCmds, out dbFields, client.ServerId);
                Global.AddRoleConsumeEvent(client, money);
            }
            catch (Exception e)
            {
                LogManager.WriteException(e.ToString());
            }
        }

        
        public static int GetImpetrateTypeIDByLevel(GameClient Client)
        {
            int nRet = -1;
            int nChangeLife = Client.ClientData.ChangeLifeCount;
            int nLevel = Client.ClientData.Level;
            Dictionary<int, SystemXmlItem> dict = GameManager.systemImpetrateByLevelMgr.SystemXmlItemDict;
            foreach (SystemXmlItem vItem in dict.Values)
            {
                if (nChangeLife >= vItem.GetIntValue("MinZhuanSheng", -1) && nChangeLife <= vItem.GetIntValue("MaxZhuanSheng", -1))
                {
                    if (nLevel >= vItem.GetIntValue("MinLevel", -1) && nLevel <= vItem.GetIntValue("MaxLevel", -1))
                    {
                        nRet = vItem.GetIntValue("ID", -1);
                        break;
                    }
                }
            }
            return nRet;
        }

        
        public static TCPProcessCmdResults ProcessScoreBoxCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;
            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false)), null, true);
                return TCPProcessCmdResults.RESULT_FAILED;
            }
            try
            {
                string[] fields = cmdData.Split(new char[]
                {
                    ':'
                });
                int roleID = Convert.ToInt32(fields[0]);
                GameClient client = GameManager.ClientMgr.FindClient(socket);
                if (KuaFuManager.getInstance().ClientCmdCheckFaild(nID, client, ref roleID))
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket, false), roleID), null, true);
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                if (GameManager.PlatConfigMgr.GetGameConfigItemStr("PingFenGift", "0") != "1")
                {
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                int nOpen = GameManager.ClientMgr.GetScoreBoxState(client);
                if (2 == nOpen)
                {
                    return TCPProcessCmdResults.RESULT_OK;
                }
                if (1 == Convert.ToInt32(fields[1]))
                {
                    if (client.ClientData.Level < 31 && client.ClientData.ChangeLifeCount == 0)
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                    int tmpOpen = nOpen;
                    GameManager.ClientMgr.ModifyScoreBoxState(client, 2);
                    if (!GameManager.ClientMgr.AddUserGold(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, 150, "评分领取绑钻"))
                    {
                        GameManager.ClientMgr.ModifyScoreBoxState(client, tmpOpen);
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "0", nID);
                        return TCPProcessCmdResults.RESULT_DATA;
                    }
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "1", nID);
                }
                else if (0 == Convert.ToInt32(fields[1]))
                {
                    if (1 == nOpen)
                    {
                        GameManager.ClientMgr.ModifyScoreBoxState(client, 2);
                    }
                    else
                    {
                        GameManager.ClientMgr.ModifyScoreBoxState(client, 1);
                    }
                    tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, "1", nID);
                }
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "ProcessGetFirstChargeInfoCMD", false, false);
            }
            return TCPProcessCmdResults.RESULT_DATA;
        }

        
        public static void UpdateHeFuLoginFlag(GameClient client)
        {
            HeFuLoginActivity LoginActivity = HuodongCachingMgr.GetHeFuLoginActivity();
            if (LoginActivity != null && LoginActivity.InActivityTime())
            {
                int nFlag = Global.GetRoleParamsInt32FromDB(client, "HeFuLoginFlag");
                int nValue = Global.GetIntSomeBit(nFlag, 1);
                if (0 == nValue)
                {
                    nFlag = Global.SetIntSomeBit(1, nFlag, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, "HeFuLoginFlag", nFlag, true);
                }
            }
        }

        
        public static string GetLocalAddressIPs()
        {
            string addressIP = "";
            try
            {
                foreach (IPAddress _IPAddress in Dns.GetHostEntry(Dns.GetHostName()).AddressList)
                {
                    if (_IPAddress.AddressFamily.ToString() == "InterNetwork")
                    {
                        if (addressIP == "")
                        {
                            addressIP = _IPAddress.ToString();
                        }
                        else
                        {
                            addressIP = addressIP + "_" + _IPAddress.ToString();
                        }
                    }
                }
            }
            catch
            {
            }
            return addressIP;
        }

        
        public static void UpdateHeFuTotalLoginFlag(GameClient client)
        {
            HeFuTotalLoginActivity TLActivity = HuodongCachingMgr.GetHeFuTotalLoginActivity();
            if (TLActivity != null && TLActivity.InActivityTime())
            {
                int lastloginday = Global.GetRoleParamsInt32FromDB(client, "HeFuTotalLoginDay");
                int currday = Global.GetOffsetDay(TimeUtil.NowDateTime());
                if (currday == Global.GetOffsetDay(Global.GetHefuStartDay()))
                {
                    Global.SaveRoleParamsInt32ValueToDB(client, "HeFuTotalLoginNum", 1, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, "HeFuTotalLoginDay", currday, true);
                }
                else if (lastloginday < currday)
                {
                    int Num = Global.GetRoleParamsInt32FromDB(client, "HeFuTotalLoginNum");
                    Global.SaveRoleParamsInt32ValueToDB(client, "HeFuTotalLoginNum", Num + 1, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, "HeFuTotalLoginDay", currday, true);
                }
            }
        }

        
        public static bool IsKingCityLeader(GameClient client)
        {
            BangHuiLingDiItemData lingdiItemData = JunQiManager.GetItemByLingDiID(7);
            if (null != lingdiItemData)
            {
                if (lingdiItemData.BHID == client.ClientData.Faction && client.ClientData.BHZhiWu == 1)
                {
                    return true;
                }
            }
            return false;
        }

        
        public static void LoadSpecialMachineConfig()
        {
            lock (Global._SpecMachineMutex)
            {
                Global.SpecMachineDict.Clear();
                string strParam = GameManager.systemParamsList.GetParamValueByName("SheBeiExp");
                if (null != strParam)
                {
                    string[] fields = strParam.Split(new char[]
                    {
                        '|'
                    });
                    for (int i = 0; i < fields.Length; i++)
                    {
                        Global.SpecMachineDict[fields[i].ToUpper()] = 1;
                    }
                    string strParam2 = GameManager.systemParamsList.GetParamValueByName("PingBanBuff");
                    if (null != strParam2)
                    {
                        fields = strParam2.Split(new char[]
                        {
                            ','
                        });
                        if (fields.Length >= 2)
                        {
                            Global.SpecMachineExp = Convert.ToInt32(fields[1]);
                        }
                    }
                }
            }
        }

        
        public static bool IsSpecialMachine(string key)
        {
            bool result;
            lock (Global._SpecMachineMutex)
            {
                result = Global.SpecMachineDict.ContainsKey(key.ToUpper());
            }
            return result;
        }

        
        public static int GetSpecialMachineExp()
        {
            int specMachineExp;
            lock (Global._SpecMachineMutex)
            {
                specMachineExp = Global.SpecMachineExp;
            }
            return specMachineExp;
        }

        
        public static int UseGoodsBindOrNot(GameClient client, int needID, int needCount, bool useBindFirst, out bool useBind, out bool useTimeLimit)
        {
            useBind = false;
            useTimeLimit = false;
            int nBindGoodNum = 0;
            int nNotBindGoodNum = 0;
            GoodsData goodsBind = Global.GetBindGoodsByID(client, needID);
            GoodsData goodsBindNo = Global.GetNotBindGoodsByID(client, needID);
            int result;
            if (goodsBind == null && goodsBindNo == null)
            {
                result = -1;
            }
            else
            {
                int allCount = 0;
                if (goodsBind != null)
                {
                    nBindGoodNum = Global.GetTotalBindGoodsCountByID(client, goodsBind.GoodsID);
                    allCount += nBindGoodNum;
                }
                if (goodsBindNo != null)
                {
                    nNotBindGoodNum = Global.GetTotalNotBindGoodsCountByID(client, goodsBindNo.GoodsID);
                    allCount += nNotBindGoodNum;
                }
                if (allCount < needCount)
                {
                    result = -1;
                }
                else
                {
                    int nNowSub = 0;
                    if (useBindFirst && nBindGoodNum > 0)
                    {
                        int nSubTmp;
                        if (nBindGoodNum < needCount)
                        {
                            nSubTmp = needCount - nBindGoodNum;
                            nNowSub = nBindGoodNum;
                        }
                        else
                        {
                            nSubTmp = 0;
                            nNowSub = needCount;
                        }
                        if (goodsBind != null && !GameManager.ClientMgr.NotifyUseBindGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsBind.GoodsID, nNowSub, false, out useBind, out useTimeLimit, false))
                        {
                            return -2;
                        }
                        if (nSubTmp > 0 && goodsBindNo != null && !GameManager.ClientMgr.NotifyUseNotBindGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsBindNo.GoodsID, nSubTmp, false, out useBind, out useTimeLimit, false))
                        {
                            return -2;
                        }
                        useBind = true;
                    }
                    else
                    {
                        int nSubTmp;
                        if (nNotBindGoodNum > 0)
                        {
                            if (nNotBindGoodNum < needCount)
                            {
                                nSubTmp = needCount - nNotBindGoodNum;
                                nNowSub = nNotBindGoodNum;
                            }
                            else
                            {
                                nSubTmp = 0;
                                nNowSub = needCount;
                            }
                        }
                        else if (nBindGoodNum > needCount)
                        {
                            nSubTmp = needCount;
                        }
                        else
                        {
                            nSubTmp = nBindGoodNum;
                        }
                        if (nNowSub > 0 && goodsBindNo != null && !GameManager.ClientMgr.NotifyUseNotBindGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsBindNo.GoodsID, nNowSub, false, out useBind, out useTimeLimit, false))
                        {
                            return -2;
                        }
                        if (nSubTmp > 0)
                        {
                            if (goodsBind != null && !GameManager.ClientMgr.NotifyUseBindGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsBind.GoodsID, nSubTmp, false, out useBind, out useTimeLimit, false))
                            {
                                return -2;
                            }
                            useBind = true;
                        }
                    }
                    result = 1;
                }
            }
            return result;
        }

        
        public static int IncreaseTradeCount(GameClient client, string strDayID, string strCount, int addCount = 1)
        {
            int currDayID = Global.GetOffsetDayNow();
            int dayID = Global.GetRoleParamsInt32FromDB(client, strDayID);
            int currCount = Global.GetRoleParamsInt32FromDB(client, strCount);
            if (dayID != currDayID)
            {
                currCount = 1;
            }
            else
            {
                currCount += addCount;
            }
            Global.SaveRoleParamsStringToDB(client, strDayID, currDayID.ToString(), true);
            Global.SaveRoleParamsStringToDB(client, strCount, currCount.ToString(), true);
            return currCount;
        }

        
        public static int GetTradeCount(GameClient client, string strDayID, string strCount)
        {
            int currDayID = Global.GetOffsetDayNow();
            int dayID = Global.GetRoleParamsInt32FromDB(client, strDayID);
            int currCount = Global.GetRoleParamsInt32FromDB(client, strCount);
            int result;
            if (dayID != currDayID)
            {
                result = 0;
            }
            else
            {
                result = currCount;
            }
            return result;
        }

        
        public static string GetJson(Dictionary<string, string> jsonDict)
        {
            string result;
            if (jsonDict == null || jsonDict.Count <= 0)
            {
                result = "";
            }
            else
            {
                string strResult = "{";
                bool bFrist = true;
                foreach (KeyValuePair<string, string> item in jsonDict)
                {
                    if (!bFrist)
                    {
                        strResult += ",";
                    }
                    strResult += string.Format("\"{0}\":\"{1}\"", item.Key, item.Value);
                    bFrist = false;
                }
                strResult += "}";
                result = strResult;
            }
            return result;
        }

        
        public static string doPost(string url, string body, int timeout = 0)
        {
            string encodingName = "utf-8";
            string str = "";
            string result;
            if (url == null || url == "")
            {
                result = null;
            }
            else
            {
                WebRequest request = WebRequest.Create(url);
                request.Method = "POST";
                request.ContentType = "application/x-www-form-urlencoded";
                if (timeout > 0)
                {
                    request.Timeout = timeout;
                }
                if (body == null)
                {
                    request.ContentLength = 0L;
                }
                else
                {
                    try
                    {
                        byte[] bytes = Encoding.Default.GetBytes(body);
                        request.ContentLength = (long)bytes.Length;
                        Stream requestStream = request.GetRequestStream();
                        requestStream.Write(bytes, 0, bytes.Length);
                        requestStream.Close();
                    }
                    catch (Exception e)
                    {
                        DataHelper.WriteFormatExceptionLog(e, "doPost", false, false);
                        return null;
                    }
                }
                try
                {
                    Stream responseStream = request.GetResponse().GetResponseStream();
                    byte[] buffer = new byte[512];
                    for (int i = responseStream.Read(buffer, 0, 512); i > 0; i = responseStream.Read(buffer, 0, 512))
                    {
                        Encoding encoding = Encoding.GetEncoding(encodingName);
                        str += encoding.GetString(buffer, 0, i);
                    }
                    result = str;
                }
                catch (Exception exception2)
                {
                    DataHelper.WriteFormatExceptionLog(exception2, "doPost", false, false);
                    result = null;
                }
            }
            return result;
        }

        
        public static bool IsCanGiveRewardByOccupation(GameClient client, int goodsId)
        {
            bool result;
            if (null == client)
            {
                result = false;
            }
            else
            {
                SystemXmlItem systemGoods = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsId, out systemGoods))
                {
                    result = false;
                }
                else
                {
                    int nOccu = Global.CalcOriginalOccupationID(client.ClientData.Occupation);
                    int nGoodsOccu = Global.GetMainOccupationByGoodsID(goodsId);
                    if (nGoodsOccu == -1)
                    {
                        result = true;
                    }
                    else if (Global.IsRoleOccupationMatchGoods(nOccu, goodsId))
                    {
                        result = (!GameManager.MagicSwordMgr.IsMagicSword(nOccu) || GameManager.MagicSwordMgr.IsCanAward2MagicSword(client, goodsId));
                    }
                    else
                    {
                        if (GameManager.MagicSwordMgr.IsMagicSword(nOccu))
                        {
                            if (GameManager.MagicSwordMgr.IsMagicSwordAngelWeapon(client, goodsId))
                            {
                                return true;
                            }
                        }
                        else if (GameManager.SummonerMgr.IsSummoner(nOccu))
                        {
                            if (GameManager.SummonerMgr.IsSummonerWeapon(client, goodsId))
                            {
                                return true;
                            }
                        }
                        result = false;
                    }
                }
            }
            return result;
        }

        
        public static KuaFuServerLoginData GetClientKuaFuServerLoginData(GameClient client)
        {
            TMSKSocket clientSocket = client.ClientSocket;
            if (null != clientSocket)
            {
                if (null != clientSocket.ClientKuaFuServerLoginData)
                {
                    return clientSocket.ClientKuaFuServerLoginData;
                }
            }
            return new KuaFuServerLoginData();
        }

        
        public static KuaFuServerLoginData GetClientKuaFuServerLoginData(TMSKSocket clientSocket)
        {
            if (null != clientSocket)
            {
                if (null != clientSocket.ClientKuaFuServerLoginData)
                {
                    return clientSocket.ClientKuaFuServerLoginData;
                }
            }
            return new KuaFuServerLoginData();
        }

        
        public static void UpdateRoleLoginRecord(GameClient client)
        {
            int currDayID = Global.GetOffsetDayNow();
            string strParam = Global.GetRoleParamByName(client, "RoleLoginRecorde");
            int recordDayID = 0;
            string strRecord = "";
            string[] strFields = (strParam == null) ? null : strParam.Split(new char[]
            {
                ','
            });
            if (strFields != null && strFields.Length == 2)
            {
                recordDayID = Convert.ToInt32(strFields[0]);
                strRecord = strFields[1];
            }
            if (recordDayID >= currDayID)
            {
                LingDiCaiJiManager.getInstance().InitRoleLingDiCaiJiData(client, false);
                YaoSaiBossManager.getInstance().OnLogin(client, false);
                YaoSaiMissionManager.getInstance().OnLogin(client, false);
            }
            else
            {
                if (recordDayID > 0)
                {
                    for (int i = recordDayID + 1; i < currDayID; i++)
                    {
                        strRecord = "0" + strRecord;
                    }
                }
                strRecord = "1" + strRecord;
                if (strRecord.Length > Global.RoleLoginRecordDayCount)
                {
                    strRecord = strRecord.Substring(0, Global.RoleLoginRecordDayCount);
                }
                string result = string.Format("{0},{1}", currDayID, strRecord);
                LingDiCaiJiManager.getInstance().InitRoleLingDiCaiJiData(client, true);
                YaoSaiBossManager.getInstance().OnLogin(client, true);
                YaoSaiMissionManager.getInstance().OnLogin(client, true);
                Global.SaveRoleParamsStringToDB(client, "RoleLoginRecorde", result, true);
                Global.SaveRoleParamsInt32ValueToDB(client, "10175", 0, true);
                int check = Global.GetRoleParamsInt32FromDB(client, "10167");
                int ten = (check > 10) ? 10 : 0;
                check %= 10;
                if (check == 3)
                {
                    Global.SaveRoleParamsInt32ValueToDB(client, "10167", 2 + ten, true);
                }
            }
        }

        
        public static bool CheckRoleIsLoginByTime(GameClient client, DateTime beginTime, DateTime endTime)
        {
            int beginDayID = Global.GetOffsetDay(beginTime);
            int endDayID = Global.GetOffsetDay(endTime);
            int startDayID = Global.GetOffsetDay(Global.GetKaiFuTime());
            string strParam = Global.GetRoleParamByName(client, "RoleLoginRecorde");
            int recordDayID = 0;
            string strRecord = "";
            string[] strFields = (strParam == null) ? null : strParam.Split(new char[]
            {
                ','
            });
            if (strFields != null && strFields.Length == 2)
            {
                recordDayID = Convert.ToInt32(strFields[0]);
                strRecord = strFields[1];
            }
            int recordDayCount = strRecord.Length;
            bool result;
            if (recordDayCount <= 0)
            {
                result = false;
            }
            else
            {
                int i = beginDayID;
                while (i <= endDayID && i <= recordDayID)
                {
                    if (i < startDayID)
                    {
                        return true;
                    }
                    int index = recordDayID - i;
                    if (index < recordDayCount)
                    {
                        if ('1' == strRecord[index])
                        {
                            return true;
                        }
                    }
                    i++;
                }
                result = false;
            }
            return result;
        }

        
        public static GoodsData ParseGoodsFromStr_7(string[] szFields, int start)
        {
            GoodsData result;
            if (szFields == null)
            {
                result = null;
            }
            else if (szFields.Length - start != 7)
            {
                result = null;
            }
            else
            {
                int[] iArray = Global.StringArray2IntArray(szFields, start, 7);
                if (iArray == null)
                {
                    result = null;
                }
                else
                {
                    result = Global.GetNewGoodsData(iArray[0], iArray[1], 0, iArray[3], iArray[2], 0, iArray[5], 0, iArray[6], iArray[4], 0);
                }
            }
            return result;
        }

        
        public static void RefreshSecondSkillLevel(GameClient client, int magicCode)
        {
            SkillData skillData = Global.GetSkillDataByID(client, magicCode);
            if (null != skillData)
            {
                for (int i = 0; i < 5; i++)
                {
                    SystemXmlItem systemMagic = null;
                    if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(magicCode, out systemMagic))
                    {
                        break;
                    }
                    int nNextMagicID = systemMagic.GetIntValue("NextMagicID", -1);
                    if (nNextMagicID <= 0)
                    {
                        break;
                    }
                    SkillData NextSkillData = Global.GetSkillDataByID(client, nNextMagicID);
                    if (null != NextSkillData)
                    {
                        NextSkillData.SkillLevel = skillData.SkillLevel;
                    }
                    magicCode = nNextMagicID;
                }
            }
        }

        
        public static bool AutoRevive(GameClient client)
        {
            bool result;
            if (null == client)
            {
                result = false;
            }
            else
            {
                long lNowTicks = TimeUtil.NOW();
                long lLastTicks = Global.GetRoleParamsInt64FromDB(client, "LastAutoReviveTicks");
                if (lLastTicks > 0L && lNowTicks - lLastTicks < (long)(MerlinSystemParamsConfigData._ReviveCDTime * 1000))
                {
                    result = false;
                }
                else
                {
                    int nRevivePercent = (int)(RoleAlgorithm.GetAutoRevivePercent(client) * 10000.0);
                    if (nRevivePercent <= 0)
                    {
                        result = false;
                    }
                    else
                    {
                        int nRandom = Global.GetRandomNumber(0, 10001);
                        if (nRandom > nRevivePercent)
                        {
                            result = false;
                        }
                        else if (!Global.IsAutoReviveMap(client.ClientData.MapCode))
                        {
                            result = false;
                        }
                        else
                        {
                            Global.SaveRoleParamsInt64ValueToDB(client, "LastAutoReviveTicks", lNowTicks, true);
                            Global.ClientRealive(client, client.ClientData.PosX, client.ClientData.PosY, client.ClientData.RoleDirection);
                            result = true;
                        }
                    }
                }
            }
            return result;
        }

        
        public static bool CancelTask(GameClient client, int dbID, int taskID)
        {
            string cmd2db = StringUtil.substitute("{0}:{1}:{2}", new object[]
            {
                client.ClientData.RoleID,
                dbID,
                taskID
            });
            string[] dbFields = Global.ExecuteDBCmd(154, cmd2db, client.ServerId);
            bool result;
            if (dbFields == null || dbFields.Length < 1 || dbFields[0] == "-1")
            {
                result = false;
            }
            else
            {
                if (null != client.ClientData.TaskDataList)
                {
                    ProcessTask.ClearTaskGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, taskID);
                    lock (client.ClientData.TaskDataList)
                    {
                        for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                        {
                            if (client.ClientData.TaskDataList[i].DoingTaskID == taskID)
                            {
                                client.ClientData.TaskDataList.RemoveAt(i);
                                break;
                            }
                        }
                    }
                }
                SystemXmlItem systemTask = null;
                if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                {
                    int sourceNPC = systemTask.GetIntValue("SourceNPC", -1);
                    if (-1 != sourceNPC)
                    {
                        int state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, sourceNPC, 0);
                        GameManager.ClientMgr.NotifyUpdateNPCTaskSate(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, sourceNPC + 2130706432, state);
                    }
                    int destNPC = systemTask.GetIntValue("DestNPC", -1);
                    if (-1 != destNPC && sourceNPC != destNPC)
                    {
                        int state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, destNPC, 0);
                        GameManager.ClientMgr.NotifyUpdateNPCTaskSate(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, destNPC + 2130706432, state);
                    }
                    GameManager.ClientMgr.NotifyDailyTaskData(client);
                }
                result = true;
            }
            return result;
        }

        
        public static RoleData4Selector RoleDataEx2RoleData4Selector(RoleDataEx roledata)
        {
            RoleData4Selector result;
            if (roledata == null)
            {
                result = null;
            }
            else
            {
                RoleDataMini rdMini = Global.ClientDataToRoleDataMini(new SafeClientData
                {
                    RoleData = roledata
                });
                RoleData4Selector sel = new RoleData4Selector();
                sel.RoleID = rdMini.RoleID;
                sel.RoleName = rdMini.RoleName;
                sel.RoleSex = rdMini.RoleSex;
                sel.Occupation = rdMini.Occupation;
                sel.SubOccupation = rdMini.SubOccupation;
                sel.OccupationList = rdMini.OccupationList;
                sel.Level = rdMini.Level;
                sel.Faction = rdMini.Faction;
                sel.OtherName = rdMini.OtherName;
                sel.GoodsDataList = rdMini.GoodsDataList;
                sel.MyWingData = rdMini.MyWingData;
                sel.CombatForce = roledata.CombatForce;
                sel.AdmiredCount = roledata.AdmiredCount;
                sel.SettingBitFlags = rdMini.SettingBitFlags;
                sel.ZoneId = rdMini.ZoneID;
                sel.OccupationList = roledata.OccupationList;
                sel.JunTuanId = rdMini.JunTuanId;
                sel.JunTuanName = rdMini.JunTuanName;
                sel.JunTuanZhiWu = rdMini.JunTuanZhiWu;
                sel.LingDi = rdMini.LingDi;
                sel.CompType = rdMini.CompType;
                sel.CompZhiWu = rdMini.CompZhiWu;
                if (rdMini.RebornGoodsDataList != null && null != sel.GoodsDataList)
                {
                    lock (rdMini.RebornGoodsDataList)
                    {
                        for (int i = 0; i < rdMini.RebornGoodsDataList.Count; i++)
                        {
                            if (rdMini.RebornGoodsDataList[i].GCount > 0 && 0 != rdMini.RebornGoodsDataList[i].Using)
                            {
                                sel.GoodsDataList.Add(rdMini.RebornGoodsDataList[i]);
                            }
                        }
                    }
                }
                result = sel;
            }
            return result;
        }

        
        public static bool AutoUpChangeLifeAndLevel(GameClient client, int nDestChangeLifeCount, int nDestLevel)
        {
            bool result;
            if (null == client)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("client不存在，服务器无法驱动转生", new object[0]), null, true);
                result = false;
            }
            else
            {
                int nRoleID = client.ClientData.RoleID;
                try
                {
                    int nCurLevel = client.ClientData.Level;
                    int nCurChangeLifeCount = client.ClientData.ChangeLifeCount;
                    if (nCurChangeLifeCount >= nDestChangeLifeCount && nCurLevel >= nDestLevel)
                    {
                        return false;
                    }
                    if (nDestLevel <= 0 && nDestLevel > Data.LevelUpExperienceList.Length - 1)
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("等级越界，服务器无法驱动转生，RoleID{0}", nRoleID), null, true);
                        return false;
                    }
                    int nValue = (int)GameManager.systemParamsList.GetParamValueIntByName("ChangeLifeMaxValue", -1);
                    if (nDestChangeLifeCount > nValue)
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("转生次数已达上限，服务器无法驱动转生，RoleID{0}", nRoleID), null, true);
                        return false;
                    }
                    if (nDestChangeLifeCount < nCurChangeLifeCount)
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("要转生次数低于当前转生次数，服务器无法驱动转生，RoleID{0}", nRoleID), null, true);
                        return false;
                    }
                    if (nDestChangeLifeCount == nCurChangeLifeCount && nDestLevel <= nCurLevel)
                    {
                        LogManager.WriteLog(LogTypes.Error, string.Format("转生次数相同，但目标等级低于当前等级，服务器无法驱动转生，RoleID{0}", nRoleID), null, true);
                        return false;
                    }
                    while (client.ClientData.ChangeLifeCount < nDestChangeLifeCount || client.ClientData.Level < nDestLevel)
                    {
                        if (client.ClientData.ChangeLifeCount < nDestChangeLifeCount)
                        {
                            int nTmpLv = client.ClientData.Level;
                            for (int i = nTmpLv; i < Data.LevelUpExperienceList.Length - 1; i++)
                            {
                                long lNeedExp = GameManager.ClientMgr.GetCurRoleLvUpNeedExp(client);
                                if (lNeedExp <= 0L)
                                {
                                    LogManager.WriteLog(LogTypes.Error, string.Format("经验表数据错误，升级所需经验为0，服务器无法驱动转生，RoleID{0}", nRoleID), null, true);
                                    return false;
                                }
                                GameManager.ClientMgr.ProcessRoleExperience(client, lNeedExp, true, true, false, "none");
                            }
                            if (!Global.ProcessChangeLifeByServer(client))
                            {
                                LogManager.WriteLog(LogTypes.Error, string.Format("执行转身过程中出现错误，服务器无法驱动转生，RoleID{0}", nRoleID), null, true);
                                return false;
                            }
                        }
                        else if (client.ClientData.Level < nDestLevel)
                        {
                            int nTmpLv = client.ClientData.Level;
                            for (int i = nTmpLv; i < nDestLevel; i++)
                            {
                                long lNeedExp = GameManager.ClientMgr.GetCurRoleLvUpNeedExp(client);
                                if (lNeedExp <= 0L)
                                {
                                    LogManager.WriteLog(LogTypes.Error, string.Format("经验表数据错误，升级所需经验为0，服务器无法驱动转生，RoleID{0}", nRoleID), null, true);
                                    return false;
                                }
                                GameManager.ClientMgr.ProcessRoleExperience(client, lNeedExp, true, true, false, "none");
                            }
                        }
                    }
                    GameManager.DBCmdMgr.AddDBCmd(10002, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.Level, client.ClientData.Experience), null, client.ServerId);
                    return true;
                }
                catch (Exception ex)
                {
                    DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(client.ClientSocket), false, false);
                }
                result = false;
            }
            return result;
        }

        
        public static bool ProcessChangeLifeByServer(GameClient client)
        {
            try
            {
                if (null == client)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("client不存在，服务器无法驱动转生", new object[0]), null, true);
                    return false;
                }
                int roleID = client.ClientData.RoleID;
                int nValue = (int)GameManager.systemParamsList.GetParamValueIntByName("ChangeLifeMaxValue", -1);
                if (client.ClientData.ChangeLifeCount >= nValue)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("已达到最高转生等级，服务器无法驱动转生{0}", roleID), null, true);
                    return false;
                }
                int nChangeCount = client.ClientData.ChangeLifeCount + 1;
                Dictionary<int, ChangeLifeDataInfo> tmpDic = new Dictionary<int, ChangeLifeDataInfo>();
                if (!GameManager.ChangeLifeMgr.m_ChangeLifeInfoList.TryGetValue(client.ClientData.Occupation, out tmpDic) || tmpDic == null)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("配置错误1，服务器无法驱动转生{0}", roleID), null, true);
                    return false;
                }
                ChangeLifeDataInfo temChagLifeInfo = new ChangeLifeDataInfo();
                if (!tmpDic.TryGetValue(nChangeCount, out temChagLifeInfo) || temChagLifeInfo == null)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("配置错误2，服务器无法驱动转生{0}", roleID), null, true);
                    return false;
                }
                int nLev = client.ClientData.Level;
                if (nLev < temChagLifeInfo.NeedLevel)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("等级不足，服务器无法驱动转生{0}", roleID), null, true);
                    return false;
                }
                TCPOutPacket tcpOutPacket = null;
                string strDbCmd = string.Format("{0}:{1}", roleID, nChangeCount);
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, 509, strDbCmd, out tcpOutPacket, client.ServerId);
                if (TCPProcessCmdResults.RESULT_FAILED == dbRequestResult)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, 服务器无法驱动转生{0}:CMD={1}", roleID, 509), null, true);
                    return false;
                }
                string strData = new UTF8Encoding().GetString(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
                Global.PushBackTcpOutPacket(tcpOutPacket);
                string[] fieldsData = strData.Split(new char[]
                {
                    ':'
                });
                if (fieldsData[1] == "-1")
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("转生时 DBServer发生错误, 服务器无法驱动转生{0}:CMD={1}", roleID, 509), null, true);
                    return false;
                }
                client.ClientData.ChangeLifeCount++;
                long nExperienceNow = client.ClientData.Experience;
                client.ClientData.Level = 1;
                client.ClientData.Experience = 0L;
                HuodongCachingMgr.ProcessGetUpLevelGift(client, false);
                if (nExperienceNow <= 0L)
                {
                    GameManager.ClientMgr.NotifySelfExperience(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, nExperienceNow);
                }
                else
                {
                    GameManager.ClientMgr.ProcessRoleExperience(client, nExperienceNow, false, true, false, "none");
                }
                GameManager.ChangeLifeMgr.InitPlayerChangeLifePorperty(client);
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, true, true, 7);
                Global.AutoLearnSkills(client);
                if (temChagLifeInfo.AwardGoodsDataList != null)
                {
                    for (int i = 0; i < temChagLifeInfo.AwardGoodsDataList.Count; i++)
                    {
                        Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, temChagLifeInfo.AwardGoodsDataList[i].GoodsID, temChagLifeInfo.AwardGoodsDataList[i].GCount, 0, "", 0, 1, 0, "", true, 1, "转生奖励物品", "1900-01-01 12:00:00", 0, 0, 0, 0, 0, 0, 0, null, null, 0, true);
                    }
                }
                ChengJiuManager.OnRoleChangeLife(client);
                SpreadManager.getInstance().SpreadIsLevel(client);
                FundManager.FundChangeLife(client);
                return true;
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(client.ClientSocket), false, false);
            }
            return false;
        }

        
        public const int ConstPKNeedLevel = 60;

        
        public const int ConstTeamCopyType = 1;

        
        public const int ConstQiangGouListCount = 4;

        
        public const int ConstHeFuQiangGouListCount = 4;

        
        public const int ConstJieRiQiangGouListCount = 4;

        
        public const int ConstMaxMeditateTime = 43200000;

        
        public const int ConstMaxLiXianBaiTanTicks = 2073600000;

        
        public const int ConstLiXianBaiTanTicks = 43200000;

        
        public const bool Flag_MUSale = true;

        
        public const int ConstBroadcastMinChengJiuLevel = 4;

        
        public const int ConstBroadcastMinJunXianLevel = 4;

        
        public const int Max_Role_YinLiang = 1000000000;

        
        public const int Max_Role_Money = 1000000000;

        
        public const string GAME_RES_FILE = "GameRes.zip";

        
        public const string GAME_RES_NAME = "GameRes";

        
        public const string GAME_CONFIG_SETTINGS_FILE = "Config/Settings.xml";

        
        public const string GAME_CONFIG_SETTINGS_NAME = "ConfigSettings";

        
        public const string GAME_CONFIG_LEVELUP_FILE = "Config/LevelUp.xml";

        
        public const string GAME_CONFIG_LEVELUP_NAME = "ConfigLevelUp";

        
        public const string GAME_CONFIG_GOODS_FILE = "Config/Goods.xml";

        
        public const string GAME_CONFIG_GOODS_NAME = "Configgoods";

        
        public const string GAME_CONFIG_MONSTERGOODSLIST_FILE = "Config/MonsterGoodsList.xml";

        
        public const string GAME_CONFIG_MONSTERGOODSLIST_NAME = "ConfigMonsterGoodsList";

        
        public const string GAME_CONFIG_GOODSQUALITY_FILE = "Config/GoodsQuality.xml";

        
        public const string GAME_CONFIG_GOODSQUALITY_NAME = "ConfigGoodsQuality";

        
        public const string GAME_CONFIG_JINGMAI_FILE = "Config/JingMai.xml";

        
        public const string GAME_CONFIG_JINGMAI_NAME = "ConfigJingMai";

        
        public const string ConstGoodsEndTime = "1900-01-01 12:00:00";

        
        private const int MaxLieShaDailyNum = 10;

        
        private const int MaxLieShaDailyNumForVIP = 15;

        
        private const int MaxWuXueDailyNum = 10;

        
        private const int MaxJunGongDailyNum = 6;

        
        private const int MaxMoZuShiLiDailyNum = 1;

        
        private const int MaxBangHuiDailyNum = 10;

        
        public const int MaxDailyTaskNumForMU = 10;

        
        public const int MaxEquipBornIndex = 100;

        
        public const int ForgeLevelOpen = 15;

        
        public const int MaxForgeLevel = 20;

        
        public const int MaxSubForgeLevel = 10;

        
        public const int MaxAddPropIndex = 10;

        
        public const int MaxEquipLevel = 20;

        
        public const int MaxAppendPropLevel = 80;

        
        private const int ClientViewGridArray_and_Length = 386;

        
        private const int ClientViewGridArray_12_Length = 118;

        
        private const int ClientViewGridArray_21_Length = 118;

        
        public const int GoodsPackFallGridArray_Length = 200;

        
        public const int ClientViewGridArray_Length = 564;

        
        public const int ClientViewOtherObject9GridNum = 504;

        
        public const int ClientViewRole9GridMinNum = 300;

        
        public const int ClientViewRole9GridNormalNum = 564;

        
        public const int ClientViewRole9GridCurrentNum = 564;

        
        public const int ClientViewFakeRole9GridMinNum = 200;

        
        public const int ClientViewFakeRole9GridLimitNum = 504;

        
        public const int ClientViewFakeRole9GridCurrentNum = 504;

        
        private const long MaxDBCmdSlot = 3600000L;

        
        private const long UpdateDBInterval = 1800000L;

        
        private const long MaxDBSkillCmdSlot = 7200000L;

        
        private const long MaxDBRoleParamCmdSlot = 7200000L;

        
        public const long MaxDBEquipStrongCmdSlot = 7200000L;

        
        public const string RoleInt32ParamsDBReferenceTime = "2020-12-12 12:12:12";

        
        public const int MaxZhuiJiaLevel = 10;

        
        public static bool Flag_NameServer = false;

        
        public static bool Flag_EnabelNewPlayerScene = false;

        
        public static string[] DontCheckEnumNames = new string[]
        {
            "Max",
            "Max_Configed"
        };

        
        public static int MovingFrameRate = 50;

        
        public static int MovingNeedTicksPerGrid = 300;

        
        public static TCPManager _TCPManager = null;

        
        public static SendBufferManager _SendBufferManager = null;

        
        public static MemoryManager _MemoryManager = null;

        
        public static FullBufferManager _FullBufferManager = null;

        
        public static Dictionary<string, XElement> XmlInfo;

        
        public static string AbsoluteGameResPath = "";

        
        public static string RealAbsoluteGameResPath = "";

        
        public static int[] DefaultSkill1 = new int[]
        {
            100,
            187,
            188,
            189,
            190
        };

        
        public static int[] DefaultSkill2 = new int[]
        {
            200,
            287,
            288,
            289,
            290
        };

        
        public static int[] DefaultSkill3 = new int[]
        {
            300,
            388,
            389,
            390,
            391
        };

        
        private static int ConfigPathStructType = 0;

        
        private static int[] MonsterPreAttackTicks = null;

        
        private static long BaseUniqueID;

        
        private static Random GlobalRand = new Random(Guid.NewGuid().GetHashCode());

        
        private static object _logItemLock = new object();

        
        private static Dictionary<int, int> _logItemDict_storage = null;

        
        private static Dictionary<int, int> reliveMonsterGongGaoDict = new Dictionary<int, int>();

        
        private static Dictionary<int, int> GoodsSuitCacheDict = new Dictionary<int, int>();

        
        public static int[] _VipUseBindTongQianGoodsIDNum = null;

        
        public static List<int> ErGuoTouGoodsIDList = null;

        
        private static Dictionary<int, DateTimeRange[]> _NPCScriptTimeLimitsDict = new Dictionary<int, DateTimeRange[]>();

        
        private static Dictionary<int, DateTimeRange[]> _NPCOpterationTimeLimitsDict = new Dictionary<int, DateTimeRange[]>();

        
        public static int MaxTaofaTaskNumForMU = 5;

        
        protected static List<string> VipLevelAwardList = new List<string>();

        
        public static double[] ForgeLevelAddRates = null;

        
        private static Dictionary<int, int> GoodsItemQualityDict = null;

        
        private static object GoodsItemQualityDictMutex = new object();

        
        public static int MaxSkillLevel = 100;

        
        public static int[] ZSAutoUseSkillIDs = new int[]
        {
            12
        };

        
        private static Dictionary<string, long> _SkillLearnConditionDict = new Dictionary<string, long>();

        
        private static Dictionary<string, int> _SkillNeedMagicVDict = new Dictionary<string, int>();

        
        public static int ForgeMaxOpen = 0;

        
        public static DateTime ForgeMaxOpenStartTime;

        
        public static DateTime ForgeMaxOpenEndTime;

        
        public static int ForgeProtectOpen = 0;

        
        public static int ForgeProtectOpenLevel = 15;

        
        public static int[] ForgeLevelRocksPercent = null;

        
        public static int[] AppendPropLevelRocksPercent = null;

        
        public static int EquipChangeLifeMaxLevel = 10;

        
        public static int[] ForgeLevelFailedPercent = null;

        
        public static int[] ForgeLevelNeedYinLiang = null;

        
        public static int[] ForgeGoodsIDs = null;

        
        private static string[] EnchanceGoodsIDList = null;

        
        public static int[] EnchanceLevelRocksPercent = null;

        
        public static int[] EnchanceLevelNeedYinLiang = null;

        
        public static int MaxSuitID = 4;

        
        private static Dictionary<int, int> EquipGoodsSuitCacheDict = new Dictionary<int, int>();

        
        public static int MaxNotifyEquipStrongValue = 1000;

        
        private static Dictionary<int, int> EquipGoodsMaxStrongDict = new Dictionary<int, int>();

        
        private static object _LogTradeFreqGoodsMutex = new object();

        
        private static int[] _LogTradeFreqGoodsArray = null;

        
        public static int SendWorldMessageGoodsID = 603001;

        
        public static int MaxHorseID = 10;

        
        public static int MaxEnchanceLevel = 200;

        
        public static string[] HorsePropNames = new string[]
        {
            "AttackV",
            "DefenseV",
            "MAttackV",
            "MDefenseV",
            "BurstV",
            "HitV",
            "DodgeV",
            "MaxLifeV",
            "MaxMagicV",
            "BurstPercent"
        };

        
        public static string[] HorseNamesList = null;

        
        private static int[] HorseEnchanceNum = new int[]
        {
            0,
            5,
            10,
            15,
            20,
            25,
            30,
            35,
            40,
            45,
            50
        };

        
        public static double[] HorseSpeedList = null;

        
        public static int MaxPortableGridNum = 120;

        
        public static int OnePortableGridYuanBao = 5;

        
        public static int MaxBagGridNum = 100;

        
        public static int DefaultBagGridNum = 50;

        
        public static int DefaultPortableGridNum = 60;

        
        public static int OneBagGridYuanBao = 10;

        
        public static int MaxJinDanGridNum = 240;

        
        public static int MaxDamonGridNum = 4;

        
        public static int ManorPetMax = 15;

        
        public static int ExtraBagGridPrice = 100;

        
        public static int ExtraBagGridPriceStartPos = 121;

        
        public static int MaxCache9XGridNum = 10;

        
        public static int MaxCache9YGridNum = 7;

        
        private static readonly short[] ClientViewGridArray_and = new short[]
        {
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            -1,
            -1,
            0,
            -1,
            1,
            1,
            -1,
            0,
            -2,
            2,
            0,
            0,
            2,
            -1,
            -1,
            1,
            1,
            -2,
            0,
            -2,
            1,
            -2,
            -1,
            -1,
            -2,
            0,
            -3,
            -3,
            0,
            1,
            -2,
            1,
            2,
            -1,
            2,
            0,
            3,
            2,
            -1,
            3,
            0,
            2,
            1,
            -4,
            0,
            0,
            -4,
            -3,
            -1,
            -1,
            -3,
            -1,
            3,
            -2,
            -2,
            3,
            -1,
            1,
            3,
            2,
            2,
            0,
            4,
            -3,
            1,
            1,
            -3,
            -2,
            2,
            2,
            -2,
            4,
            0,
            3,
            1,
            -5,
            0,
            2,
            -3,
            3,
            2,
            -3,
            -2,
            4,
            1,
            -4,
            -1,
            -4,
            1,
            1,
            -4,
            5,
            0,
            2,
            3,
            1,
            4,
            -3,
            2,
            -1,
            4,
            3,
            -2,
            -1,
            -4,
            -2,
            -3,
            -2,
            3,
            0,
            5,
            4,
            -1,
            0,
            -5,
            -6,
            0,
            4,
            -2,
            2,
            -4,
            -4,
            2,
            -3,
            -3,
            -4,
            -2,
            -2,
            -4,
            5,
            -1,
            -3,
            3,
            -1,
            5,
            3,
            -3,
            -5,
            -1,
            -2,
            4,
            0,
            6,
            1,
            5,
            -5,
            1,
            4,
            2,
            5,
            1,
            6,
            0,
            1,
            -5,
            -1,
            -5,
            0,
            -6,
            2,
            4,
            3,
            3,
            -7,
            0,
            -6,
            1,
            -2,
            -5,
            0,
            7,
            -1,
            -6,
            4,
            -3,
            -5,
            -2,
            -3,
            4,
            -6,
            -1,
            -2,
            5,
            1,
            -6,
            5,
            -2,
            -4,
            -3,
            -3,
            -4,
            2,
            -5,
            7,
            0,
            4,
            3,
            3,
            4,
            -5,
            2,
            2,
            5,
            1,
            6,
            -1,
            6,
            6,
            1,
            0,
            -7,
            6,
            -1,
            3,
            -4,
            -4,
            3,
            5,
            2,
            2,
            6,
            7,
            1,
            -1,
            7,
            5,
            -3,
            0,
            8,
            -2,
            6,
            7,
            -1,
            8,
            0,
            3,
            5,
            4,
            4,
            6,
            -2,
            6,
            2,
            1,
            7,
            5,
            3,
            2,
            -6,
            -1,
            -7,
            1,
            -7,
            -6,
            2,
            -4,
            4,
            4,
            -4,
            -5,
            3,
            3,
            -5,
            0,
            -8,
            -4,
            -4,
            -2,
            -6,
            -3,
            -5,
            -7,
            -1,
            -7,
            1,
            -5,
            -3,
            -6,
            -2,
            -3,
            5,
            -8,
            0,
            -1,
            8,
            3,
            -6,
            6,
            -3,
            7,
            -2,
            -6,
            3,
            -7,
            2,
            5,
            -4,
            2,
            -7,
            -4,
            5,
            4,
            -5,
            -5,
            4,
            -3,
            6,
            0,
            9,
            0,
            -9,
            -2,
            7,
            1,
            -8,
            -1,
            9,
            1,
            -9,
            -4,
            6,
            6,
            -4,
            2,
            -8,
            -5,
            5,
            4,
            -6,
            -6,
            4,
            -3,
            7,
            -2,
            8,
            5,
            -5,
            3,
            -7,
            5,
            -6,
            -4,
            7,
            3,
            -8,
            -2,
            9,
            -3,
            8,
            4,
            -7,
            1,
            -10,
            -1,
            10,
            2,
            -9,
            -5,
            6,
            -4,
            8,
            4,
            -8,
            -2,
            10,
            3,
            -9,
            2,
            -10,
            -3,
            9,
            -2,
            11,
            2,
            -11,
            -3,
            10,
            3,
            -10
        };

        
        private static readonly short[] ClientViewGridArray_12 = new short[]
        {
            8,
            -1,
            2,
            7,
            1,
            8,
            5,
            4,
            6,
            3,
            3,
            6,
            7,
            2,
            8,
            1,
            4,
            5,
            9,
            0,
            9,
            -1,
            0,
            10,
            9,
            1,
            8,
            2,
            4,
            6,
            7,
            3,
            7,
            -3,
            5,
            5,
            6,
            4,
            8,
            -2,
            10,
            0,
            3,
            7,
            2,
            8,
            1,
            9,
            0,
            11,
            11,
            0,
            1,
            10,
            6,
            5,
            5,
            6,
            4,
            7,
            8,
            3,
            9,
            2,
            2,
            9,
            10,
            -1,
            9,
            -2,
            8,
            -3,
            6,
            -5,
            7,
            -4,
            12,
            0,
            7,
            -5,
            8,
            -4,
            6,
            -6,
            5,
            -7,
            0,
            12,
            11,
            -1,
            -1,
            11,
            9,
            -3,
            10,
            -2,
            8,
            -5,
            11,
            -2,
            7,
            -6,
            12,
            -1,
            4,
            -9,
            5,
            -8,
            -1,
            12,
            9,
            -4,
            6,
            -7,
            10,
            -3,
            -2,
            12
        };

        
        private static readonly short[] ClientViewGridArray_21 = new short[]
        {
            -3,
            -6,
            -7,
            -2,
            -8,
            -1,
            -4,
            -5,
            -9,
            0,
            -2,
            -7,
            -1,
            -8,
            -8,
            1,
            -6,
            -3,
            -5,
            -4,
            -5,
            -5,
            -6,
            -4,
            -7,
            -3,
            -7,
            3,
            -8,
            2,
            -3,
            -7,
            -2,
            -8,
            -1,
            -9,
            -10,
            0,
            -9,
            1,
            0,
            -10,
            -4,
            -6,
            -9,
            -1,
            -8,
            -2,
            -8,
            3,
            -7,
            4,
            -6,
            5,
            -6,
            -5,
            -5,
            -6,
            -4,
            -7,
            0,
            -11,
            -11,
            0,
            -1,
            -10,
            -10,
            1,
            -9,
            2,
            -8,
            -3,
            -9,
            -2,
            -2,
            -9,
            -11,
            1,
            1,
            -11,
            -10,
            2,
            -9,
            3,
            -8,
            4,
            -12,
            0,
            -7,
            5,
            0,
            -12,
            -6,
            6,
            -5,
            7,
            -9,
            4,
            1,
            -12,
            -5,
            8,
            -6,
            7,
            -10,
            3,
            -11,
            2,
            -8,
            5,
            -4,
            9,
            -12,
            1,
            -7,
            6,
            2,
            -12
        };

        
        public static readonly short[] ClientViewGridArray = new short[]
        {
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            -1,
            -1,
            0,
            -1,
            1,
            1,
            -1,
            0,
            -2,
            2,
            0,
            0,
            2,
            -1,
            -1,
            1,
            1,
            -2,
            0,
            -2,
            1,
            -2,
            -1,
            -1,
            -2,
            0,
            -3,
            -3,
            0,
            1,
            -2,
            1,
            2,
            -1,
            2,
            0,
            3,
            2,
            -1,
            3,
            0,
            2,
            1,
            -4,
            0,
            0,
            -4,
            -3,
            -1,
            -1,
            -3,
            -1,
            3,
            -2,
            -2,
            3,
            -1,
            1,
            3,
            2,
            2,
            0,
            4,
            -3,
            1,
            1,
            -3,
            -2,
            2,
            2,
            -2,
            4,
            0,
            3,
            1,
            -5,
            0,
            2,
            -3,
            3,
            2,
            -3,
            -2,
            4,
            1,
            -4,
            -1,
            -4,
            1,
            1,
            -4,
            5,
            0,
            2,
            3,
            1,
            4,
            -3,
            2,
            -1,
            4,
            3,
            -2,
            -1,
            -4,
            -2,
            -3,
            -2,
            3,
            0,
            5,
            4,
            -1,
            0,
            -5,
            -6,
            0,
            4,
            -2,
            2,
            -4,
            -4,
            2,
            -3,
            -3,
            -4,
            -2,
            -2,
            -4,
            5,
            -1,
            -3,
            3,
            -1,
            5,
            3,
            -3,
            -5,
            -1,
            -2,
            4,
            0,
            6,
            1,
            5,
            -5,
            1,
            4,
            2,
            5,
            1,
            6,
            0,
            1,
            -5,
            -1,
            -5,
            0,
            -6,
            2,
            4,
            3,
            3,
            -7,
            0,
            -6,
            1,
            -2,
            -5,
            0,
            7,
            -1,
            -6,
            4,
            -3,
            -5,
            -2,
            -3,
            4,
            -6,
            -1,
            -2,
            5,
            1,
            -6,
            5,
            -2,
            -4,
            -3,
            -3,
            -4,
            2,
            -5,
            7,
            0,
            4,
            3,
            3,
            4,
            -5,
            2,
            2,
            5,
            1,
            6,
            -1,
            6,
            6,
            1,
            0,
            -7,
            6,
            -1,
            3,
            -4,
            -4,
            3,
            5,
            2,
            2,
            6,
            7,
            1,
            -1,
            7,
            5,
            -3,
            0,
            8,
            -2,
            6,
            7,
            -1,
            8,
            0,
            3,
            5,
            4,
            4,
            6,
            -2,
            6,
            2,
            1,
            7,
            5,
            3,
            2,
            -6,
            -1,
            -7,
            1,
            -7,
            -6,
            2,
            -4,
            4,
            4,
            -4,
            -5,
            3,
            3,
            -5,
            0,
            -8,
            -4,
            -4,
            -2,
            -6,
            -3,
            -5,
            -7,
            -1,
            -7,
            1,
            -5,
            -3,
            -6,
            -2,
            -3,
            5,
            -8,
            0,
            -1,
            8,
            8,
            -1,
            3,
            -6,
            2,
            7,
            6,
            -3,
            1,
            8,
            7,
            -2,
            -6,
            3,
            5,
            4,
            -7,
            2,
            6,
            3,
            5,
            -4,
            2,
            -7,
            3,
            6,
            -4,
            5,
            7,
            2,
            4,
            -5,
            -5,
            4,
            -3,
            6,
            8,
            1,
            0,
            9,
            0,
            -9,
            -2,
            7,
            4,
            5,
            9,
            0,
            1,
            -8,
            9,
            -1,
            -1,
            9,
            0,
            10,
            1,
            -9,
            -4,
            6,
            6,
            -4,
            2,
            -8,
            9,
            1,
            8,
            2,
            -5,
            5,
            4,
            -6,
            4,
            6,
            -6,
            4,
            -3,
            7,
            7,
            3,
            7,
            -3,
            5,
            5,
            6,
            4,
            -2,
            8,
            8,
            -2,
            10,
            0,
            5,
            -5,
            3,
            -7,
            3,
            7,
            2,
            8,
            1,
            9,
            0,
            11,
            11,
            0,
            1,
            10,
            6,
            5,
            5,
            6,
            4,
            7,
            8,
            3,
            9,
            2,
            2,
            9,
            10,
            -1,
            5,
            -6,
            9,
            -2,
            -4,
            7,
            3,
            -8,
            -2,
            9,
            8,
            -3,
            -3,
            8,
            4,
            -7,
            1,
            -10,
            6,
            -5,
            -1,
            10,
            2,
            -9,
            7,
            -4,
            -5,
            6,
            12,
            0,
            7,
            -5,
            8,
            -4,
            -4,
            8,
            6,
            -6,
            5,
            -7,
            0,
            12,
            4,
            -8,
            -2,
            10,
            3,
            -9,
            11,
            -1,
            -1,
            11,
            2,
            -10,
            9,
            -3,
            -3,
            9,
            10,
            -2,
            -2,
            11,
            8,
            -5,
            11,
            -2,
            2,
            -11,
            7,
            -6,
            12,
            -1,
            4,
            -9,
            5,
            -8,
            -1,
            12,
            9,
            -4,
            6,
            -7,
            -3,
            10,
            3,
            -10,
            10,
            -3,
            -2,
            12,
            -11,
            2,
            -11,
            3,
            -10,
            3,
            -9,
            4,
            -9,
            5,
            -8,
            5,
            -8,
            6,
            -7,
            6,
            -7,
            7,
            -6,
            7,
            -5,
            8,
            -5,
            9,
            -4,
            9,
            -4,
            10,
            -10,
            2,
            -9,
            3,
            -8,
            4,
            -7,
            5,
            -6,
            6,
            -5,
            7,
            -9,
            2,
            -8,
            3,
            -7,
            4,
            -6,
            5,
            -10,
            1,
            -9,
            1,
            -8,
            2,
            -7,
            3,
            -8,
            1,
            -9,
            0
        };

        
        public static int ClientViewRoleGridlimitRoleNum = 1000;

        
        public static int ClientViewFakeRoleGridlimitRoleNum = 10;

        
        public static int DianJiangTaiMapCode = 1001;

        
        public static int MaxJingMaiBodyLevel = 9;

        
        public static int MaxJingMaiLevel = 25;

        
        public static int MaxDailyJingMaiNum = 10;

        
        public static int JingMaiLingZhiLuckyNum = 10;

        
        private static string[] JingMaiNames = new string[]
        {
            GLang.GetLang(173, new object[0]),
            GLang.GetLang(174, new object[0]),
            GLang.GetLang(175, new object[0]),
            GLang.GetLang(176, new object[0]),
            GLang.GetLang(177, new object[0]),
            GLang.GetLang(178, new object[0]),
            GLang.GetLang(179, new object[0]),
            GLang.GetLang(180, new object[0])
        };

        
        public static string[] JingMaiBodyLevelNames = new string[]
        {
            GLang.GetLang(181, new object[0]),
            GLang.GetLang(182, new object[0]),
            GLang.GetLang(183, new object[0]),
            GLang.GetLang(184, new object[0]),
            GLang.GetLang(185, new object[0]),
            GLang.GetLang(186, new object[0]),
            GLang.GetLang(187, new object[0]),
            GLang.GetLang(188, new object[0]),
            GLang.GetLang(189, new object[0])
        };

        
        public static int MapTransGoodsID = 32000;

        
        public static int MapTransGoodsID2 = 32003;

        
        public static int SendServerHeartCount = 0;

        
        private static int LastDBUpdateRoleStatDay = TimeUtil.NowDateTime().DayOfYear;

        
        private static int LastDBUpdateRoleStatHour = TimeUtil.NowDateTime().Hour;

        
        private static int LastDBUpdateRoleStatMinute = TimeUtil.NowDateTime().Minute;

        
        public static int PKValueEqPKPoints = 100;

        
        public static int MinRedNamePKPoints = 200;

        
        public static int MinEnterJailPKPoints = Global.PKValueEqPKPoints * 5;

        
        public static int MinLeaveJailPKPoints = Global.PKValueEqPKPoints * 4;

        
        public static int SubPKPointsPer10Seconds = 10;

        
        public static int MaxPKPointValue = 1000;

        
        public static int LaoFangMapCode = -1;

        
        private static HashSet<long> RoleKillRoleSet = new HashSet<long>();

        
        public static long MaxPurpleNameTicks = 60000L;

        
        public static int MaxLianZhanSubLevel = 10;

        
        public static int[] LianZhanNums = new int[]
        {
            0,
            100,
            200,
            300,
            400,
            500,
            600,
            700,
            800,
            900,
            1000000
        };

        
        public static double[] LianZhanSecs = new double[]
        {
            12.0,
            10.0,
            8.0,
            6.0,
            4.0,
            3.0,
            2.0,
            1.0,
            0.8,
            0.6,
            0.4
        };

        
        public static int[] LianZhanAntiBossNums = new int[]
        {
            0,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            0
        };

        
        public static string[] LianZhanBufferNames = new string[]
        {
            GLang.GetLang(190, new object[0]),
            GLang.GetLang(191, new object[0]),
            GLang.GetLang(192, new object[0]),
            GLang.GetLang(193, new object[0]),
            GLang.GetLang(194, new object[0]),
            GLang.GetLang(195, new object[0]),
            GLang.GetLang(196, new object[0]),
            GLang.GetLang(197, new object[0]),
            GLang.GetLang(198, new object[0])
        };

        
        private static int StartBulletinID = (int)TimeUtil.NOW();

        
        private static string[] LineNames = new string[]
        {
            GLang.GetLang(308, new object[0]),
            GLang.GetLang(309, new object[0]),
            GLang.GetLang(310, new object[0]),
            GLang.GetLang(311, new object[0]),
            GLang.GetLang(312, new object[0]),
            GLang.GetLang(313, new object[0]),
            GLang.GetLang(314, new object[0]),
            GLang.GetLang(315, new object[0]),
            GLang.GetLang(316, new object[0]),
            GLang.GetLang(317, new object[0]),
            GLang.GetLang(318, new object[0])
        };

        
        private static int MaxDayYaBiaoNum = 1;

        
        public static int MaxYaBiaoTicks = 2400000;

        
        public static bool WithRname = false;

        
        private static double[] AllQualityDecreaseInjurePercents = null;

        
        private static double[] AllForgeLevelAttackPercents = null;

        
        private static double[] AllForgeLeveMaxLifePercents = null;

        
        private static int[] AllJewelLevelOccupPercents = new int[]
        {
            0,
            0,
            0,
            0,
            10,
            20,
            30,
            40,
            50,
            50,
            50
        };

        
        private static int[] AllJewelLevelOtherPercents = new int[]
        {
            0,
            0,
            0,
            0,
            1,
            2,
            3,
            4,
            5,
            5,
            5
        };

        
        private static int MaxUsingEquipNum = 8;

        
        private static int MaxUsingJewelNum = 72;

        
        public static int RenameBangQiNameNeedTongQian = 500000;

        
        public static int JoinBangHuiNeedLevel = 50;

        
        public static int MinDonateTongQianPerBangGong = 100000;

        
        public static int MinDonateBangGongTongQian = 10000;

        
        public static int MaxDayTongQianBangGong = 5000;

        
        public static int MaxDayGoodsBangGong = 10000;

        
        public static int MaxBangHuiFlagLevel = 10;

        
        public static int InstallJunQiNeedMoney = 50000;

        
        public static int TakeSheLiZhiYuanNeedMoney = 100000;

        
        public static Dictionary<int, BangHuiMiniData> DictBangHui = new Dictionary<int, BangHuiMiniData>();

        
        public static Dictionary<int, BangHuiDetailData> BangHuiDetailDataDict = new Dictionary<int, BangHuiDetailData>();

        
        public static int MaxRadiusMustGoToYangZhou = 500;

        
        private static int HuangChengMapCode = -1;

        
        private static int HuangGongMapCode = -1;

        
        private static int LastUpdateDayOfYear = -1;

        
        private static int LastUpdateLuoLanChengZhanDayOfYear = -1;

        
        public static long MaxBattleNameTicks = 86400000L;

        
        public static int MaxFreeRefreshNum = 3;

        
        public static int MaxClickYangGongBKNum = 4;

        
        public static int MaxNeedYuanBaoPerRefresh = 100;

        
        public static int MaxNumPerRefreshQiZhenGe = 4;

        
        public static int QuickHorseExtPropNeedYinLiang = 1000;

        
        public static int QuickEnchanceToPurpleNeedYinLiang = 500;

        
        public static int QuickEnchanceToGoldNeedYinLiang = 1000;

        
        public static int QuickForgeToNextLevelNeedYinLiang = 500;

        
        private static object LangDict_Mutex = new object();

        
        private static Dictionary<string, string> LangDict = null;

        
        private static Dictionary<int, SceneUIClasses> MapCodeSceneTypeDict = new Dictionary<int, SceneUIClasses>();

        
        public static MallSaleData _MallSaleData = null;

        
        private static object CachingQiangGouItemDataListMutex = new object();

        
        private static List<QiangGouItemData> CachingQiangGouItemDataList = null;

        
        private static int CachingQiangGouItemDataListDayID = -1;

        
        private static object CachingHeFuQiangGouItemDataListMutex = new object();

        
        private static List<QiangGouItemData> CachingHeFuQiangGouItemDataList = null;

        
        private static int CachingHeFuQiangGouItemDataListDayID = -1;

        
        private static object CachingJieRiQiangGouItemDataListMutex = new object();

        
        private static List<QiangGouItemData> CachingJieRiQiangGouItemDataList = null;

        
        private static int CachingJieRiQiangGouItemDataListDayID = -1;

        
        private static HashSet<int> GuWuMapSet = new HashSet<int>();

        
        private static HashSet<int> AutoReviveMapSet = new HashSet<int>();

        
        private static List<int> ListGuMuMap = new List<int>();

        
        private static double[] _VipGumuExpMultiple = new double[]
        {
            1.1,
            1.2,
            1.3
        };

        
        private static List<int> ListMingJieMap = new List<int>();

        
        public static JieriXmlData CachingEverydayActXmlData = null;

        
        private static int CachingEverydayActXmlVersion = 1;

        
        public static JieriXmlData CachingSpecActXmlData = null;

        
        private static int CachingSpecActXmlVersion = 1;

        
        public static JieriXmlData CachingSpecPriorityActXmlData = null;

        
        private static int CachingSpecPriorityActXmlVersion = 1;

        
        public static JieriXmlData CachingThemeActXmlData = null;

        
        private static int CachingThemeActXmlVersion = 1;

        
        public static JieriXmlData CachingJieriXmlData = null;

        
        private static int CachingJieriXmlVersion = 1;

        
        public static ActivitiesData _activitiesData = null;

        
        private static object _SpecMachineMutex = new object();

        
        private static Dictionary<string, int> SpecMachineDict = new Dictionary<string, int>();

        
        private static int SpecMachineExp = 50;

        
        private static int RoleLoginRecordDayCount = 50;
    }
}
